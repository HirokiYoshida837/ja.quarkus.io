# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-11 02:12+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cdi-reference.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Contexts and Dependency Injection"
msgstr "Quarkus - コンテキストと依存性インジェクション"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:17
#, fuzzy
msgid "Quarkus DI solution (also called ArC) is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] specification.  However, it is not a full CDI implementation verified by the TCK.  Only a subset of the CDI features is implemented - see also <<supported_features,the list of supported features>> and <<limitations,the list of limitations>>."
msgstr "QuarkusのDIソリューション(ArCとも呼ばれる)は、 link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] 仕様に基づいています。しかし、TCKによって検証されたCDIの完全な実装ではありません。CDI機能のサブセットのみが実装されています - link:#supported_features[サポートされている機能のリスト] と link:#limitations[制限事項のリスト] も参照してください。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:19
#, fuzzy
msgid "If you're new to CDI then we recommend you to read the link:cdi[Introduction to CDI] first."
msgstr "CDI が初めての方は、最初に link:cdi[CDI の紹介] を読むことをお勧めします。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:21
#, fuzzy
msgid "Most of the existing CDI code should work just fine but there are some small differences which follow from the Quarkus architecture and goals."
msgstr "既存のCDIコードのほとんどは問題なく動作するはずですが、Quarkusのアーキテクチャや目標との間には、いくつかの小さな違いがあります。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:23
#, fuzzy, no-wrap
msgid "Bean Discovery"
msgstr "豆の発見"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:28
#, fuzzy
msgid "Bean discovery in CDI is a complex process which involves legacy deployment structures and accessibility requirements of the underlying module architecture.  However, Quarkus is using a *simplified bean discovery*.  There is only single bean archive with the https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#default_bean_discovery[bean discovery mode `annotated`, window=\"_blank\"] and no visibility boundaries."
msgstr "CDIでのビーンディスカバリは、レガシーなデプロイメント構造と、基礎となるモジュールアーキテクチャのアクセシビリティ要件を含む複雑なプロセスです。しかし、Quarkusは *簡素化された* ビーンディスカバリーを使用しています。ビーン発見 link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#default_bean_discovery[モード( `annotated` ), window=\"_blank\"] と可視性の境界線がない単一のビーンアーカイブのみが存在します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:30
#, fuzzy
msgid "The bean archive is synthesized from:"
msgstr "豆のアーカイブから合成しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:32
#, fuzzy
msgid "the application classes,"
msgstr "アプリケーションクラスを使用しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:33
#, fuzzy
msgid "dependencies that contain a `beans.xml` descriptor (content is ignored),"
msgstr "`beans.xml` 記述子を含む依存関係 (内容は無視されます)。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:34
#, fuzzy
msgid "dependencies that contain a Jandex index - `META-INF/jandex.idx`,"
msgstr "Jandex インデックスを含む依存関係 - `META-INF/jandex.idx` ."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:35
#, fuzzy
msgid "dependencies referenced by `quarkus.index-dependency` in `application.properties`,"
msgstr "`quarkus.index-dependency` で参照される依存関係 `application.properties` ."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:36
#, fuzzy
msgid "and Quarkus integration code."
msgstr "とQuarkusの統合コードを使用しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:41
#, fuzzy
msgid "Bean classes that don't have a http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] are not discovered.  This behavior is defined by CDI.  But producer methods and fields and observer methods are discovered even if the declaring class is not annotated with a bean defining annotation (this behavior is different to what is defined in CDI).  In fact, the declaring bean classes are considered annotated with `@Dependent`."
msgstr "Bean定義 link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#bean_defining_annotations[アノテーションを, window=\"_blank\"] 持たないBeanクラスは発見されない。この動作はCDIで定義されています。しかし,プロデューサメソッドやフィールド,オブザーバメソッドは,宣言クラスがビーン定義アノテーションを持たない場合でも発見されます(この動作はCDIで定義されているものとは異なります)。実際には、宣言ビーンクラスは `@Dependent` ."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:43
#, fuzzy
msgid "Quarkus extensions may declare additional discovery rules. For example, `@Scheduled` business methods are registered even if the declaring class is not annotated with a bean defining annotation."
msgstr "Quarkusの拡張機能は、追加のディスカバリールールを宣言することができます。例えば、 `@Scheduled` ビジネスメソッドは、宣言するクラスがビーン定義アノテーションでアノテーションされていなくても登録されます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:44
#, fuzzy, no-wrap
msgid "How to Generate a Jandex Index"
msgstr "ジャンデックスインデックスの生成方法"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:48
#, fuzzy
msgid "A dependency with a Jandex index is automatically scanned for beans.  To generate the index just add the following to your `pom.xml`:"
msgstr "Jandex インデックスを持つ依存関係は、自動的にビーンズをスキャンします。インデックスを生成するには、以下を `pom.xml` ."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:68
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <groupId>org.jboss.jandex</groupId>\n"
"      <artifactId>jandex-maven-plugin</artifactId>\n"
"      <version>1.0.7</version>\n"
"      <executions>\n"
"        <execution>\n"
"          <id>make-index</id>\n"
"          <goals>\n"
"            <goal>jandex</goal>\n"
"          </goals>\n"
"        </execution>\n"
"      </executions>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:71
#, fuzzy
msgid "If you are are using gradle, you can apply the following plugin to your `build.gradle`:"
msgstr "gradleを使っている場合は、以下のプラグインを `build.gradle` に適用することができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:77
#, no-wrap
msgid ""
"plugins {\n"
"    id 'org.kordamp.gradle.jandex' version '0.6.0'\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:80
#, fuzzy
msgid "If you can't modify the dependency, you can still index it by adding `quarkus.index-dependency` entries to your `application.properties`:"
msgstr "依存関係を変更できなくても、 `quarkus.index-dependency` エントリーを `application.properties` ."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:86
#, no-wrap
msgid ""
"quarkus.index-dependency.<name>.group-id=\n"
"quarkus.index-dependency.<name>.artifact-id=\n"
"quarkus.index-dependency.<name>.classifier=(this one is optional)\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:89
#, fuzzy
msgid "For example, the following entries ensure that the `org.acme:acme-api` dependency is indexed:"
msgstr "例えば、以下のエントリーは、 `org.acme:acme-api` 依存関係がインデックス化されることを確実にします。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:90
#: upstream/_guides/cdi-reference.adoc:115
#: upstream/_guides/cdi-reference.adoc:127
#: upstream/_guides/cdi-reference.adoc:429
#: upstream/_guides/cdi-reference.adoc:624
#, fuzzy, no-wrap
msgid "Example application.properties"
msgstr "application.properties の例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:95
#, no-wrap
msgid ""
"quarkus.index-dependency.acme.group-id=org.acme <1>\n"
"quarkus.index-dependency.acme.artifact-id=acme-api <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:97
#: upstream/_guides/cdi-reference.adoc:134
#, fuzzy
msgid "Value is a group id for a dependency identified by name `acme`."
msgstr "値は、名前で識別される依存関係のグループ ID `acme` ."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:98
#: upstream/_guides/cdi-reference.adoc:135
#, fuzzy
msgid "Value is an artifact id for a dependency identified by name `acme`."
msgstr "値は、名前 `acme` で識別される依存関係のアーティファクト ID です。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:99
#, fuzzy, no-wrap
msgid "How To Exclude Types and Dependencies from Discovery"
msgstr "ディスカバリーから型と依存関係を除外する方法"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:105
#, fuzzy
msgid "It may happen that some beans from third-party libraries do not work correctly in Quarkus.  A typical example is a bean injecting a portable extension.  In such case, it's possible to exclude types and dependencies from the bean discovery.  The `quarkus.arc.exclude-types` property accepts a list of string values that are used to match classes that should be excluded."
msgstr "サードパーティのライブラリからのいくつかのビーンがQuarkusで正しく動作しないことがあります。典型的な例は、ポータブル拡張機能を注入するビーンです。このような場合、型や依存関係をビーンの検出から除外することができます。 `quarkus.arc.exclude-types` プロパティーは、除外すべきクラスにマッチするために使用される文字列値のリストを受け入れます。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:106
#: upstream/_guides/cdi-reference.adoc:420
#: upstream/_guides/cdi-reference.adoc:615
#, fuzzy, no-wrap
msgid "Value Examples"
msgstr "値の例"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:108
#: upstream/_guides/cdi-reference.adoc:422
#: upstream/_guides/cdi-reference.adoc:617
#, fuzzy, no-wrap
msgid "Valu"
msgstr "バリュー"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:109
#: upstream/_guides/cdi-reference.adoc:423
#: upstream/_guides/cdi-reference.adoc:618
#, fuzzy, no-wrap
msgid "Description"
msgstr "説明"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:109
#: upstream/_guides/cdi-reference.adoc:423
#: upstream/_guides/cdi-reference.adoc:618
#, fuzzy, no-wrap
msgid "`org.acme.Foo`"
msgstr "`org.acme.Foo`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:110
#, fuzzy, no-wrap
msgid "Match the fully qualified name of the class"
msgstr "クラスの完全修飾名と一致"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:110
#: upstream/_guides/cdi-reference.adoc:424
#: upstream/_guides/cdi-reference.adoc:619
#, fuzzy, no-wrap
msgid "`org.acme.*`"
msgstr "`org.acme.*`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:111
#, fuzzy, no-wrap
msgid "Match classes with package `org.acme`"
msgstr "パッケージとクラスを一致させる `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:111
#: upstream/_guides/cdi-reference.adoc:425
#: upstream/_guides/cdi-reference.adoc:620
#, fuzzy, no-wrap
msgid "`org.acme.**`"
msgstr "`org.acme.**`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:112
#, fuzzy, no-wrap
msgid "Match classes where the package starts with `org.acme`"
msgstr "パッケージが `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:112
#: upstream/_guides/cdi-reference.adoc:426
#: upstream/_guides/cdi-reference.adoc:621
#, fuzzy, no-wrap
msgid "`Bar`"
msgstr "`Bar`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:113
#, fuzzy, no-wrap
msgid "Match the simple name of the class"
msgstr "クラスのシンプルな名前に一致する"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:119
#, no-wrap
msgid "quarkus.arc.exclude-types=org.acme.Foo,org.acme.*,Bar <1><2><3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:121
#, fuzzy
msgid "Exclude the type `org.acme.Foo`."
msgstr "タイプ `org.acme.Foo` を除外します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:122
#, fuzzy
msgid "Exclude all types from the `org.acme` package."
msgstr "`org.acme` パッケージからすべてのタイプを除外します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:123
#, fuzzy
msgid "Exclude all types whose simple name is `Bar`"
msgstr "シンプルな名前が `Bar`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:126
#, fuzzy
msgid "It is also possible to exclude a dependency artifact that would be otherwise scanned for beans.  For example, because it contains a `beans.xml` descriptor."
msgstr "また、そうしなければビーンズをスキャンしてしまうような依存性アーティファクトを除外することも可能です。例えば、それが `beans.xml` 記述子を含んでいるからです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:132
#, no-wrap
msgid ""
"quarkus.arc.exclude-dependency.acme.group-id=org.acme <1>\n"
"quarkus.arc.exclude-dependency.acme.artifact-id=acme-services <2>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:136
#, fuzzy, no-wrap
msgid "Native Executables and Private Members"
msgstr "ネイティブ実行ファイルとプライベートメンバー"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:142
#, fuzzy
msgid "Quarkus is using GraalVM to build a native executable.  One of the limitations of GraalVM is the usage of https://github.com/oracle/graal/blob/master/substratevm/Limitations.md#reflection[Reflection, window=\"_blank\"].  Reflective operations are supported but all relevant members must be registered for reflection explicitly.  Those registrations result in a bigger native executable."
msgstr "Quarkusでは、GraalVMを使用してネイティブ実行ファイルを構築しています。GraalVMの制限事項の1つは、 link:https://github.com/oracle/graal/blob/master/substratevm/Limitations.md#reflection[Reflection, window=\"_blank\"] の使用です。リフレクション操作はサポートされていますが、関連するすべてのメンバーを明示的にリフレクション用に登録する必要があります。これらの登録は、より大きなネイティブ実行ファイルになります。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:146
#, fuzzy
msgid "And if Quarkus DI needs to access a private member it *has to use reflection*.  That's why Quarkus users are encouraged __not to use private members__ in their beans.  This involves injection fields, constructors and initializers, observer methods, producer methods and fields, disposers and interceptor methods."
msgstr "また、Quarkus DIがプライベートメンバーにアクセスする必要がある場合は、 *リフレクションを使用し* なければなりません。そのため、Quarkusユーザーは、プライベートメンバーをビーンで _使用しないこと_ が推奨されています。これには、インジェクションフィールド、コンストラクタとイニシャライザ、オブザーバメソッド、プロデューサメソッドとフィールド、ディスポーザとインターセプターメソッドが含まれます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:149
#, fuzzy
msgid "How to avoid using private members? You can use package-private modifiers:"
msgstr "プライベートメンバーの使用を避けるには?package-private修飾子を使うことができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:154
#: upstream/_guides/cdi-reference.adoc:171
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class CounterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:157
#, no-wrap
msgid ""
"    @Inject\n"
"    CounterService counterService; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:161
#, no-wrap
msgid ""
"    void onMessage(@Observes Event msg) { <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:163
#, fuzzy
msgid "A package-private injection field."
msgstr "パッケージ・プライベート注入フィールド。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:164
#, fuzzy
msgid "A package-private observer method."
msgstr "パッケージ・プライベート・オブザーバ・メソッド。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:166
#, fuzzy
msgid "Or constructor injection:"
msgstr "あるいはコンストラクタのインジェクション。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:173
#, no-wrap
msgid "    private CounterService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:178
#, no-wrap
msgid ""
"    CounterBean(CounterService service) { <1>\n"
"      this.service = service;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:180
#, fuzzy
msgid "A package-private constructor injection. `@Inject` is optional in this particular case."
msgstr "`@Inject` は、この場合はオプションです。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:182
#, fuzzy, no-wrap
msgid "Supported Features"
msgstr "サポートされている機能"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:185
#, fuzzy
msgid "Programming model"
msgstr "プログラミングモデル"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:186
#, fuzzy
msgid "Managed beans implemented by a Java class"
msgstr "Javaクラスで実装された管理豆"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:187
#, fuzzy
msgid "`@PostConstruct` and `@PreDestroy` lifecycle callbacks"
msgstr "`@PostConstruct` と `@PreDestroy` ライフサイクルコールバック"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:188
#, fuzzy
msgid "Producer methods and fields, disposers"
msgstr "生産者の方法と畑、ディスポーザー"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:189
#, fuzzy
msgid "Qualifiers"
msgstr "クオリファイヤ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:190
#, fuzzy
msgid "Alternatives"
msgstr "代替品"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:191
#, fuzzy
msgid "Stereotypes"
msgstr "ステレオタイプ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:192
#, fuzzy
msgid "Dependency injection and lookup"
msgstr "依存関係の注入とルックアップ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:193
#, fuzzy
msgid "Field, constructor and initializer/setter injection"
msgstr "フィールド、コンストラクタ、イニシャライザ/セッター注入"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:194
#, fuzzy
msgid "Type-safe resolution"
msgstr "タイプセーフ解決"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:195
#, fuzzy
msgid "Programmatic lookup via `javax.enterprise.inject.Instance`"
msgstr "を介したプログラム検索 `javax.enterprise.inject.Instance`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:196
#, fuzzy
msgid "Client proxies"
msgstr "クライアントのプロキシー"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:197
#, fuzzy
msgid "Injection point metadata"
msgstr "注入点メタデータ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:198
#, fuzzy
msgid "Scopes and contexts"
msgstr "スコープとコンテキスト"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:199
#, fuzzy
msgid "`@Dependent`, `@ApplicationScoped`, `@Singleton`, `@RequestScoped` and `@SessionScoped`"
msgstr "`@Dependent` , `@ApplicationScoped` , `@Singleton` , `@RequestScoped` `@SessionScoped`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:200
#, fuzzy
msgid "Custom scopes and contexts"
msgstr "カスタム スコープとコンテキスト"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:201
msgid "Interceptors"
msgstr "インターセプター"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:202
#, fuzzy
msgid "Business method interceptors: `@AroundInvoke`"
msgstr "ビジネスメソッドの傍受者。 `@AroundInvoke`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:203
#, fuzzy
msgid "Interceptors for lifecycle event callbacks: `@PostConstruct`, `@PreDestroy`, `@AroundConstruct`"
msgstr "ライフサイクルイベントコールバックのためのインターセプター: `@PostConstruct` , `@PreDestroy` . `@AroundConstruct`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:204
#, fuzzy
msgid "Events and observer methods, including asynchronous events and transactional observer methods"
msgstr "非同期イベントとトランザクション・オブザーバ・メソッドを含むイベントとオブザーバ・メソッド"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:206
#: upstream/_guides/cdi-reference.adoc:688
#, no-wrap
msgid "Limitations"
msgstr "制約事項"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:209
#, fuzzy
msgid "`@ConversationScoped` is not supported"
msgstr "`@ConversationScoped` はサポートされていません"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:210
#, fuzzy
msgid "Decorators are not supported"
msgstr "デコレータはサポートされていません"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:211
#, fuzzy
msgid "Portable Extensions are not supported"
msgstr "ポータブル拡張機能はサポートされていません"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:212
#, fuzzy
msgid "`BeanManager` - only the following methods are implemented: `getBeans()`, `createCreationalContext()`, `getReference()`, `getInjectableReference()` , `resolve()`, `getContext()`, `fireEvent()`, `getEvent()` and `createInstance()`"
msgstr "`BeanManager` - 以下のメソッドのみ実装されています: `getBeans()` , `createCreationalContext()` , `getReference()` , `getInjectableReference()` , `resolve()` , , `getContext()` , `fireEvent()` , `getEvent()` および `createInstance()`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:213
#, fuzzy
msgid "Specialization is not supported"
msgstr "専門性はサポートされていません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:214
#, fuzzy
msgid "`beans.xml` descriptor content is ignored"
msgstr "`beans.xml` 記述子の内容は無視されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:215
#, fuzzy
msgid "Passivation and passivating scopes are not supported"
msgstr "不動態化および不動態化スコープはサポートされていません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:216
#, fuzzy
msgid "Interceptor methods on superclasses are not implemented yet"
msgstr "スーパークラスのインターセプターメソッドはまだ実装されていません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:217
#, fuzzy
msgid "`@Interceptors` is not supported"
msgstr "`@Interceptors` はサポートされていません"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:219
#, fuzzy, no-wrap
msgid "Non-standard Features"
msgstr "標準外の機能"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:221
#, fuzzy, no-wrap
msgid "Eager Instantiation of Beans"
msgstr "ビーンズの熱心なインスタンス化"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:224
#, fuzzy, no-wrap
msgid "Lazy By Default"
msgstr "デフォルトでは怠け者"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:228
#, fuzzy
msgid "By default, CDI beans are created lazily, when needed.  What exactly \"needed\" means depends on the scope of a bean."
msgstr "デフォルトでは、CDIビーンは必要なときに怠惰に作成されます。何を正確に「必要とされる」というのかは、ビーンのスコープに依存します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:230
#, fuzzy
msgid "A *normal scoped bean* (`@ApplicationScoped`, `@RequestScoped`, etc.) is needed when a method is invoked upon an injected instance (contextual reference per the specification)."
msgstr "インジェクションされたインスタンス(仕様による文脈参照)からメソッドが呼び出される場合、 *通常のスコープドビーン* ( `@ApplicationScoped` , `@RequestScoped` , など)が必要になります。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:232
#, fuzzy
msgid "In other words, injecting a normal scoped bean will not suffice because a _client proxy_ is injected instead of a contextual instance of the bean."
msgstr "言い換えれば、通常のスコープ付きビーンを注入しても、ビーンのコンテキストインスタンスの代わりに _クライアントプロキシー_ が注入されるので、十分ではありません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:234
#, fuzzy
msgid "A *bean with a pseudo-scope* (`@Dependent` and `@Singleton` ) is created when injected."
msgstr "注入時に疑似スコープを *持つビーン* ( `@Dependent` と `@Singleton` )が作成されます。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:235
#, fuzzy, no-wrap
msgid "Lazy Instantiation Example"
msgstr "遅延インスタンス化の例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:244
#, no-wrap
msgid ""
"@Singleton // => pseudo-scope\n"
"class AmazingService {\n"
"  String ping() {\n"
"    return \"amazing\";\n"
"  }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:251
#, no-wrap
msgid ""
"@ApplicationScoped // => normal scope\n"
"class CoolService {\n"
"  String ping() {\n"
"    return \"cool\";\n"
"  }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:254
#, no-wrap
msgid ""
"@Path(\"/ping\")\n"
"public class PingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:257
#, no-wrap
msgid ""
"  @Inject\n"
"  AmazingService s1; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:260
#, no-wrap
msgid ""
"  @Inject\n"
"  CoolService s2; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:266
#, no-wrap
msgid ""
"  @GET\n"
"  public String ping() {\n"
"    return s1.ping() + s2.ping(); <3>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:268
#, fuzzy
msgid "Injection triggers the instantiation of `AmazingService`."
msgstr "インジェクションは、 `AmazingService` ."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:269
#, fuzzy
msgid "Injection itself does not result in the instantiation of `CoolService`. A client proxy is injected."
msgstr "インジェクション自体は、 `CoolService` のインスタンス化にはなりません。クライアントプロキシーがインジェクションされます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:270
#, fuzzy
msgid "The first invocation upon the injected proxy triggers the instantiation of `CoolService`."
msgstr "注入されたプロキシーに対する最初の呼び出しは、 `CoolService` ."

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:272
#, fuzzy, no-wrap
msgid "Startup Event"
msgstr "スタートアップイベント"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:275
#, fuzzy
msgid "However, if you really need to instantiate a bean eagerly you can:"
msgstr "しかし、本当に熱心にBeanをインスタンス化する必要がある場合は、あなたはすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:277
#, fuzzy
msgid "Declare an observer of the `StartupEvent` - the scope of the bean does not matter in this case:"
msgstr "`StartupEvent` のオブザーバを宣言する - この場合、ビーンのスコープは重要ではありません。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:285
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CoolService {\n"
"  void startup(@Observes StartupEvent event) { <1>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:287
#, fuzzy
msgid "A `CoolService` is created during startup to service the observer method invocation."
msgstr "`CoolService` は、起動時に作成され、オブザーバー・メソッドの呼び出しをサービスするためのものです。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:289
#, fuzzy, no-wrap
msgid "Use the bean in an observer of the `StartupEvent` - normal scoped beans must be used as described in <<lazy_by_default>>:    \n"
msgstr "`StartupEvent` link:#lazy_by_default[- [lazy_by_default]] で説明されているように、通常のスコープ付きビーンを使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:294
#, no-wrap
msgid ""
"@Dependent\n"
"class MyBeanStarter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:299
#, no-wrap
msgid ""
"  void startup(@Observes StartupEvent event, AmazingService amazing, CoolService cool) { <1>\n"
"    cool.toString(); <2>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:301
#, fuzzy
msgid "The `AmazingService` is created during injection."
msgstr "`AmazingService` は注入時に作成されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:302
#, fuzzy
msgid "The `CoolService` is a normal scoped bean so we have to invoke a method upon the injected proxy to force the instantiation."
msgstr "`CoolService` は通常のスコープされたビーンなので、強制的にインスタンス化するために注入されたプロキシーにメソッドを呼び出さなければなりません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:304
#, fuzzy
msgid "Annotate the bean with `@io.quarkus.runtime.Startup` as described in link:lifecycle#startup_annotation[Startup annotation]:"
msgstr "link:lifecycle#startup_annotation[スタートアップアノテーション] で説明したように、 `@io.quarkus.runtime.Startup` でビーンをアノテーションします。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:310
#, no-wrap
msgid ""
"@Startup // <1>\n"
"@ApplicationScoped\n"
"public class EagerAppBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:312
#, no-wrap
msgid "   private final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:317
#, no-wrap
msgid ""
"   EagerAppBean(NameGenerator generator) { // <2>\n"
"     this.name = generator.createName();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:319
msgid "For each bean annotated with `@Startup` a synthetic observer of `StartupEvent` is generated. The default priority is used."
msgstr "`@Startup`  でアノテーションされた各Beanに対して、 `StartupEvent`  の合成オブザーバが生成されます。デフォルトの優先度が使用されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:320
msgid "The bean constructor is called when the application starts and the resulting contextual instance is stored in the application context."
msgstr "ビーンのコンストラクタは、アプリケーションの起動時に呼び出され、結果として得られるコンテキストインスタンスがアプリケーションのコンテキストに格納されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:322
#, fuzzy
msgid "Quarkus users are encouraged to always prefer the `@Observes StartupEvent` to `@Initialized(ApplicationScoped.class)` as explained in the link:lifecycle[Application Initialization and Termination] guide."
msgstr "Quarkusユーザーは、 link:lifecycle[アプリケーションの初期化と終了の] ガイドで説明されているように、常に `@Initialized(ApplicationScoped.class)` よりも `@Observes StartupEvent` を選択することをお勧めします。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:323
#, fuzzy, no-wrap
msgid "Request Context Lifecycle"
msgstr "リクエストコンテキストのライフサイクル"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:326
#, fuzzy
msgid "The request context is also active:"
msgstr "リクエストコンテキストもアクティブになっています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:328
#, fuzzy
msgid "during notification of a synchronous observer method."
msgstr "同期オブザーバメソッドの通知中に"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:330
#, fuzzy
msgid "The request context is destroyed:"
msgstr "リクエストコンテキストは破棄されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:332
#, fuzzy
msgid "after the observer notification completes for an event, if it was not already active when the notification started."
msgstr "イベントのオブザーバー通知が完了した後、通知が開始されたときにまだアクティブではなかった場合は"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:334
#, fuzzy
msgid "An event with qualifier `@Initialized(RequestScoped.class)` is fired when the request context is initialized for an observer notification. Moreover, the events with qualifiers `@BeforeDestroyed(RequestScoped.class)` and `@Destroyed(RequestScoped.class)` are fired when the request context is destroyed."
msgstr "オブザーバ通知のためにリクエストコンテキストが初期化されると、修飾子 `@Initialized(RequestScoped.class)` を持つイベントが発生します。さらに、修飾子 `@BeforeDestroyed(RequestScoped.class)` と `@Destroyed(RequestScoped.class)` を持つイベントは、リクエストコンテキストが破棄されたときに発生します。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:335
#, fuzzy, no-wrap
msgid "Qualified Injected Fields"
msgstr "適格注入分野"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:338
#, fuzzy
msgid "In CDI, if you declare a field injection point you need to use `@Inject` and optionally a set of qualifiers."
msgstr "CDI では、フィールドインジェクションポイントを宣言する場合は `@Inject` とオプションで修飾子のセットを使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:344
#: upstream/_guides/cdi-reference.adoc:641
#, no-wrap
msgid ""
"  @Inject\n"
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:347
#, fuzzy
msgid "In Quarkus, you can skip the `@Inject` annotation completely if the injected field declares at least one qualifier."
msgstr "Quarkusでは、注入されたフィールドが少なくとも1つの修飾子を宣言している場合、 `@Inject` アノテーションを完全にスキップすることができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:352
#: upstream/_guides/cdi-reference.adoc:658
#, no-wrap
msgid ""
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:355
#, fuzzy
msgid "With the notable exception of one special case discussed below, `@Inject` is still required for constructor and method injection."
msgstr "後述する特別なケースを除いて、コンストラクタとメソッドのインジェクションには `@Inject` が必要です。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:356
#, fuzzy, no-wrap
msgid "Simplified Constructor Injection"
msgstr "簡略化されたコンストラクタインジェクション"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:360
#, fuzzy
msgid "In CDI, a normal scoped bean must always declare a no-args constructor (this constructor is normally generated by the compiler unless you declare any other constructor).  However, this requirement complicates constructor injection - you need to provide a dummy no-args constructor to make things work in CDI."
msgstr "CDIでは、通常のスコープ付きBeanは常にno-argsコンストラクタを宣言しなければなりません(このコンストラクタは、他のコンストラクタを宣言しない限り、通常はコンパイラによって生成されます)。しかし、この要件はコンストラクタのインジェクションを複雑にします - CDI で動作させるためにはダミーの no-args コンストラクタを提供する必要があります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:365
#: upstream/_guides/cdi-reference.adoc:385
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyCoolService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:367
#: upstream/_guides/cdi-reference.adoc:387
#, no-wrap
msgid "  private SimpleProcessor processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:370
#, no-wrap
msgid ""
"  MyCoolService() { // dummy constructor needed\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:376
#, no-wrap
msgid ""
"  @Inject // constructor injection\n"
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:380
#, fuzzy
msgid "There is no need to declare dummy constructors for normal scoped bean in Quarkus - they are generated automatically.  Also if there's only one constructor there is no need for `@Inject`."
msgstr "Quarkusでは、通常のスコープ付きビーンのためにダミーのコンストラクタを宣言する必要はありません - 自動的に生成されます。また、コンストラクタが1つしかない場合は、 `@Inject` ."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:392
#, no-wrap
msgid ""
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:395
#, fuzzy
msgid "We don't generate a no-args constructor automatically if a bean class extends a class that does not declare a no-args constructor."
msgstr "引数なしのコンストラクタを宣言していないクラスをビーンクラスが継承している場合、引数なしのコンストラクタは自動的に生成されません。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:397
#, fuzzy, no-wrap
msgid "Removing Unused Beans"
msgstr "未使用の豆の除去"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:401
#, fuzzy
msgid "The container attempts to remove all unused beans during build by default.  This optimization can be disabled by setting `quarkus.arc.remove-unused-beans` to `none` or `false`."
msgstr "コンテナーは、デフォルトではビルド中にすべての未使用のビーンを削除しようとします。この最適化は、 `quarkus.arc.remove-unused-beans` を `none` または `false` に設定することで無効にすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:403
#, fuzzy
msgid "An unused bean:"
msgstr "使われていない豆。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:405
#, fuzzy
msgid "is not a built-in bean or an interceptor,"
msgstr "はビルトインビーンでもインターセプターでもありません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:406
#, fuzzy
msgid "is not eligible for injection to any injection point,"
msgstr "は、任意の注入点への注入の対象とはなりません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:407
#, fuzzy
msgid "is not excluded by any extension,"
msgstr "は、どのような拡張子を用いても除外されません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:408
#, fuzzy
msgid "does not have a name,"
msgstr "には名前がありません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:409
#, fuzzy
msgid "does not declare an observer,"
msgstr "はオブザーバーを宣言しません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:410
#, fuzzy
msgid "does not declare any producer which is eligible for injection to any injection point,"
msgstr "は、任意の注入ポイントへの注入対象となる生産者を宣言しない。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:411
#, fuzzy
msgid "is not directly eligible for injection into any `javax.enterprise.inject.Instance` or `javax.inject.Provider` injection point"
msgstr "は、 `javax.enterprise.inject.Instance` または `javax.inject.Provider` の注入ポイントに直接注入することはできません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:413
#, fuzzy
msgid "This optimization applies to all forms of bean declarations: bean class, producer method, producer field."
msgstr "この最適化は、ビーンクラス、プロデューサメソッド、プロデューサフィールドなど、ビーン宣言のすべての形式に適用されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:416
#, fuzzy
msgid "Users can instruct the container to not remove any of their specific beans (even if they satisfy all the rules specified above) by annotating them with `io.quarkus.arc.Unremovable`.  This annotation can be placed on the types, producer methods, and producer fields."
msgstr "ユーザーは、コンテナーに `io.quarkus.arc.Unremovable` をアノテーションすることで、特定のビーンを削除しないように指示することができます(上で指定したルールをすべて満たしていても)。このアノテーションは、型、プロデューサメソッド、プロデューサフィールドに配置することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:419
#, fuzzy
msgid "Since this is not always possible, there is an option to achieve the same via `application.properties`.  The `quarkus.arc.unremovable-types` property accepts a list of string values that are used to match beans based on their name or package."
msgstr "これは常に可能ではないので、 `application.properties` を通して同じことを実現するオプションがあります。 `quarkus.arc.unremovable-types` プロパティーは、ビーンズの名前やパッケージに基づいてマッチさせるための文字列値のリストを受け付けます。"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:424
#, fuzzy, no-wrap
msgid "Match the fully qualified name of the bean class"
msgstr "ビーンクラスの完全修飾名にマッチします"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:425
#: upstream/_guides/cdi-reference.adoc:620
#, fuzzy, no-wrap
msgid "Match beans where the package of the bean class is `org.acme`"
msgstr "ビーンクラスのパッケージがマッチするビーン `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:426
#: upstream/_guides/cdi-reference.adoc:621
#, fuzzy, no-wrap
msgid "Match beans where the package of the bean class starts with `org.acme`"
msgstr "ビーンクラスのパッケージが `org.acme`"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:427
#, fuzzy, no-wrap
msgid "Match the simple name of the bean class"
msgstr "ビーンクラスのシンプルな名前にマッチする"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:433
#, no-wrap
msgid "quarkus.arc.unremovable-types=org.acme.Foo,org.acme.*,Bar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:436
#, fuzzy
msgid "Furthermore, extensions can eliminate possible false positives by producing `UnremovableBeanBuildItem`."
msgstr "さらに、拡張機能は `UnremovableBeanBuildItem` を生成することで、可能性のある誤検出を排除することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:439
#, fuzzy
msgid "Finally, Quarkus provides a middle ground for the bean removal optimization where application beans are never removed whether or not they are unused, while the optimization proceeds normally for non application classes. To use this mode, set `quarkus.arc.remove-unused-beans` to `fwk` or `framework`."
msgstr "最後に、Quarkusでは、アプリケーションビーンが未使用であるかどうかに関わらず削除されることはありませんが、アプリケーショ ン以外のクラスについては通常通り最適化が行われるという、ビーン削除最適化のためのミドルグラウンドを提供しています。このモードを使用するには、 `quarkus.arc.remove-unused-beans` を `fwk` に設定するか、 `framework` ."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:442
#, fuzzy
msgid "When using the dev mode (running `./mvnw clean compile quarkus:dev`), you can see more information about which beans are being removed by enabling additional logging via the following line in your `application.properties`."
msgstr "dev モード ( `./mvnw clean compile quarkus:dev` を実行している) を使用している場合、 `application.properties` ."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:445
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:448
#, fuzzy, no-wrap
msgid "Default Beans"
msgstr "デフォルトのビーンズ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:452
#, fuzzy
msgid "Quarkus adds a capability that CDI currently does not support which is to conditionally declare a bean if no other bean with equal types and qualifiers was declared by any available means (bean class, producer, synthetic bean, ...)  This is done using the `@io.quarkus.arc.DefaultBean` annotation and is best explained with an example."
msgstr "`@io.quarkus.arc.DefaultBean` Quarkusは、CDIが現在サポートしていない機能を追加しました。これは、利用可能な手段(ビーンクラス、プロデューサー、合成ビーン、...)で宣言された型と修飾子が等しい他のビーンがない場合に、条件付きでビーンを宣言するというものです。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:454
#, fuzzy
msgid "Say there is a Quarkus extension that among other things declares a few CDI beans like the following code does:"
msgstr "以下のコードのようにいくつかのCDIビーンを宣言するQuarkus拡張機能があるとします。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:459
#: upstream/_guides/cdi-reference.adoc:512
#: upstream/_guides/cdi-reference.adoc:533
#: upstream/_guides/cdi-reference.adoc:562
#: upstream/_guides/cdi-reference.adoc:583
#, no-wrap
msgid ""
"@Dependent\n"
"public class TracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:464
#, no-wrap
msgid ""
"    @Produces\n"
"    public Tracer tracer(Reporter reporter, Configuration configuration) {\n"
"        return new Tracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:470
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Configuration configuration() {\n"
"        // create a Configuration\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:477
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Reporter reporter(){\n"
"        // create a Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:482
#, fuzzy
msgid "The idea is that the extension auto-configures things for the user, eliminating a lot of boilerplate - we can just `@Inject` a `Tracer` wherever it is needed.  Now imagine that in our application we would like to utilize the configured `Tracer`, but we need to customize it a little, for example by providing a custom `Reporter`.  The only thing that would be needed in our application would be something like the following:"
msgstr "これは、拡張機能がユーザーのために自動設定を行うことで、多くの決まり文句を排除し、必要なところで `@Inject` を `Tracer` にすればよいという考え方です。さて、私たちのアプリケーションでは、設定された `Tracer` を利用したいのですが、例えばカスタム `Reporter` を提供するなどして、少しカスタマイズする必要があると想像してください。このアプリケーションで必要なのは、以下のようなものだけです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:488
#, no-wrap
msgid ""
"@Dependent\n"
"public class CustomTracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:494
#, no-wrap
msgid ""
"    @Produces\n"
"    public Reporter reporter(){\n"
"        // create a custom Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:498
#, fuzzy
msgid "`@DefaultBean` allows extensions (or any other code for that matter) to provide defaults while backing off if beans of that type are supplied in any way Quarkus supports."
msgstr "`@DefaultBean` では、Quarkusがサポートしている方法でそのタイプのビーンが提供されている場合には、デフォルトを提供する一方で、Quarkusがサポートしている方法では、そのようなビーンが提供されていない場合には、バックオフすることができます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:499
#, fuzzy, no-wrap
msgid "Enabling Beans for Quarkus Build Profile"
msgstr "ビーンズをQuarkusビルドプロファイルで使用可能にする"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:504
#, fuzzy
msgid "Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time profile is enabled, via the `@io.quarkus.arc.profile.IfBuildProfile` and `@io.quarkus.arc.profile.UnlessBuildProfile` annotations.  When used in conjunction with `@io.quarkus.arc.DefaultBean`, these annotations allow for the creation of different bean configurations for different build profiles."
msgstr "Quarkusは、CDIが現在サポートしていない機能を追加しました。これは、Quarkusのビルドタイムプロファイルが有効になっているときに条件付きでビーンを有効にするというもので、 `@io.quarkus.arc.profile.IfBuildProfile` と `@io.quarkus.arc.profile.UnlessBuildProfile` のアノテーションを使用します。 `@io.quarkus.arc.DefaultBean` と合わせて使用すると、これらのアノテーションにより、異なるビルドプロファイルに対して異なるビーン構成を作成することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:507
#, fuzzy
msgid "Imagine for instance that an application contains a bean named `Tracer`, which needs to be do nothing when in tests or dev-mode, but works in its normal capacity for the production artifact.  An elegant way to create such beans is the following:"
msgstr "例えば、アプリケーションが `Tracer` という名前のビーンを含んでいると想像してみてください。このビーンは、テストや開発モードでは何もしない必要がありますが、本番の成果物に対しては通常の能力で動作します。このようなビーンを作成するエレガントな方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:518
#, no-wrap
msgid ""
"    @Produces\n"
"    @IfBuildProfile(\"prod\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:525
#: upstream/_guides/cdi-reference.adoc:546
#: upstream/_guides/cdi-reference.adoc:575
#: upstream/_guides/cdi-reference.adoc:596
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Tracer noopTracer() {\n"
"        return new NoopTracer();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:528
#, fuzzy
msgid "If instead, it is required that the `Tracer` bean also works in dev-mode and only default to doing nothing for tests, then `@UnlessBuildProfile` would be ideal. The code would look like:"
msgstr "代わりに、 `Tracer` ビーンもdevモードで動作し、デフォルトではテストのために何もしないことが要求される場合は、 `@UnlessBuildProfile` が理想的です。コードは次のようになります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:539
#, no-wrap
msgid ""
"    @Produces\n"
"    @UnlessBuildProfile(\"test\") // this will be enabled for both prod and dev build time profiles\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:549
#, fuzzy
msgid "The runtime profile has absolutely no effect on the bean resolution using `@IfBuildProfile` and `@UnlessBuildProfile`."
msgstr "ランタイムプロファイルは、 `@IfBuildProfile` と `@UnlessBuildProfile` ."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:550
#, fuzzy, no-wrap
msgid "Enabling Beans for Quarkus Build Properties"
msgstr "Quarkusビルドプロパティーでビーンズを使用可能にする"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:555
#, fuzzy
msgid "Quarkus adds a capability that CDI currently does not support which is to conditionally enable a bean when a Quarkus build time property has a specific value, via the `@io.quarkus.arc.properties.IfBuildProperty` and `@io.quarkus.arc.properties.UnlessBuildProperty` annotation.  When used in conjunction with `@io.quarkus.arc.DefaultBean`, this annotation allow for the creation of different bean configurations for different build properties."
msgstr "Quarkusは、CDIが現在サポートしていない機能を追加しました。これは、Quarkusのビルド時間プロパティーが特定の値を持っているときに条件付きでビーンを有効にするというもので、 `@io.quarkus.arc.properties.IfBuildProperty` と `@io.quarkus.arc.properties.UnlessBuildProperty` のアノテーションを使用しています。このアノテーションを `@io.quarkus.arc.DefaultBean` と一緒に使用すると、異なるビルドプロパティーに対して異なるビーン設定を作成することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:557
#, fuzzy
msgid "The scenario we mentioned above with `Tracer` could also be implemented in the following way:"
msgstr "`Tracer` を使って上で述べたシナリオも、以下のように実装することができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:568
#, no-wrap
msgid ""
"    @Produces\n"
"    @IfBuildProperty(name = \"some.tracer.enabled\", stringValue = \"true\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:578
#, fuzzy
msgid "If instead, it is required that the `RealTracer` bean is only used if the `some.tracer.enabled` property is not `false`, then `@UnlessBuildProperty` would be ideal. The code would look like:"
msgstr "代わりに、 `some.tracer.enabled` プロパティーが `false` でない場合にのみ `RealTracer` ビーンが使用されることが要求される場合は、 `@UnlessBuildProperty` が理想的です。コードは以下のようになります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:589
#, no-wrap
msgid ""
"    @Produces\n"
"    @UnlessBuildProperty(name = \"some.tracer.enabled\", stringValue = \"false\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) {\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:599
#, fuzzy
msgid "Properties set at runtime have absolutely no effect on the bean resolution using `@IfBuildProperty`."
msgstr "実行時に設定されたプロパティーは、 `@IfBuildProperty` を使用してもビーンの解像度には全く影響しません。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:600
#, fuzzy, no-wrap
msgid "Declaring Selected Alternatives"
msgstr "選択された代替案の宣言"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:604
#, fuzzy
msgid "In CDI, an alternative bean may be selected either globally for an application by means of `@Priority`, or for a bean archive using a `beans.xml` descriptor.  Quarkus has a simplified bean discovery and the content of `beans.xml` is ignored."
msgstr "CDIでは、代替ビーンは、 `@Priority` を使用してアプリケーションに対してグローバルに選択するか、 `beans.xml` 記述子を使用してビーンアーカイブに対して選択することができます。Quarkusは単純化されたビーン発見機能を持っており、 `beans.xml` の内容は無視されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:609
#, fuzzy
msgid "The disadvantage of `@Priority` is that it has `@Target({ TYPE, PARAMETER })` and so it cannot be used for producer methods and fields.  To address this problem and to simplify the code Quarkus provides the `io.quarkus.arc.AlternativePriority` annotation.  It's basically a shortcut for `@Alternative` plus `@Priority`.  Additionally, it can be used for producers."
msgstr "`@Priority` の欠点は、 `@Target({ TYPE, PARAMETER })` があるので、プロデューサーメソッドやフィールドには使えないことです。この問題を解決し、コードを単純化するために、Quarkusは `io.quarkus.arc.AlternativePriority` アノテーションを提供しています。これは、基本的には `@Alternative` と `@Priority` のショートカットです。さらに、これはプロデューサーにも使用できます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:614
#, fuzzy
msgid "However, it is also possible to select alternatives for an application using the unified configuration.  The `quarkus.arc.selected-alternatives` property accepts a list of string values that are used to match alternative beans.  If any value matches then the priority of `Integer#MAX_VALUE` is used for the relevant bean.  The priority declared via `@Priority` or `@AlternativePriority` is overridden."
msgstr "ただし、統一された設定を使用してアプリケーションの代替品を選択することも可能です。 `quarkus.arc.selected-alternatives` プロパティーは、代替ビーンにマッチするために使用される文字列値のリストを受け入れます。いずれかの値が一致する場合は、 `Integer#MAX_VALUE` の優先度が関連するビーンに使用されます。 `@Priority` または `@AlternativePriority` で宣言された優先度は上書きされます。"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:619
#, fuzzy, no-wrap
msgid "Match the fully qualified name of the bean class or the bean class of the bean that declares the producer"
msgstr "生産者を宣言するビーンのビーンクラスまたはビーンクラスの完全修飾名にマッチします。"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:622
#, fuzzy, no-wrap
msgid "Match the simple name of the bean class or the bean class of the bean that declares the producer"
msgstr "生産者を宣言するビーンのビーンクラスまたはビーンクラスの単純な名前を一致させます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:628
#, no-wrap
msgid "quarkus.arc.selected-alternatives=org.acme.Foo,org.acme.*,Bar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:630
#, fuzzy, no-wrap
msgid "Simplified Producer Method Declaration"
msgstr "簡易生産者法申告書"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:633
#, fuzzy
msgid "In CDI, a producer method must be always annotated with `@Produces`."
msgstr "CDI では、producer メソッドは常に `@Produces` とアノテーションされていなければなりません。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:637
#: upstream/_guides/cdi-reference.adoc:655
#, no-wrap
msgid "class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:648
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  MyService produceService() {\n"
"    return new MyService(coolProperty);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:651
#, fuzzy
msgid "In Quarkus, you can skip the `@Produces` annotation completely if the producer method is annotated with a scope annotation, a stereotype or a qualifier."
msgstr "Quarkusでは、プロデューサーメソッドがスコープアノテーション、ステレオタイプ、または修飾子でアノテーションされている場合、 `@Produces` アノテーションを完全にスキップすることができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:664
#, no-wrap
msgid ""
"  @ApplicationScoped\n"
"  MyService produceService() {\n"
"    return new MyService(coolProperty);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:666
#, fuzzy, no-wrap
msgid "Interception of Static Methods "
msgstr "静的メソッドの傍受"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:672
#, fuzzy
msgid "The Interceptors specification is clear that _around-invoke_ methods must not be declared static.  However, this restriction was driven mostly by technical limitations.  And since Quarkus is a build-time oriented stack that allows for additional class transformations, those limitations don't apply anymore.  It's possible to annotate a non-private static method with an interceptor binding:"
msgstr "Interceptorsの仕様では、 _around-invoke_ メソッドは静的に宣言してはならないことが明確になっています。しかし、この制限はほとんどが技術的な制限によって行われていました。Quarkusは、追加のクラス変換を可能にするビルドタイム指向のスタックなので、この制限はもう適用されません。プライベートではない静的メソッドにインターセプターバインディングでアノテーションを付けることは可能です。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:676
#, no-wrap
msgid "class Services {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:684
#, no-wrap
msgid ""
"  @Logged <1>\n"
"  static BigDecimal computePrice(long amount) { <2>\n"
"    BigDecimal price;\n"
"    // Perform computations...\n"
"    return price;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:686
#, fuzzy
msgid "`Logged` is an interceptor binding."
msgstr "`Logged` はインターセプターバインディングです。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:687
#, fuzzy
msgid "Each method invocation is intercepted if there is an interceptor associated with `Logged`."
msgstr "各メソッドの呼び出しは、 `Logged` に関連付けられたインターセプターがある場合にインターセプトされます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:691
#, fuzzy
msgid "Only *method-level bindings* are considered for backward compatibility reasons (otherwise static methods of bean classes that declare class-level bindings would be suddenly intercepted)"
msgstr "下位互換性の理由から *メソッドレベルのバインディング* のみが考慮されます(そうしないとクラスレベルのバインディングを宣言しているビーンクラスの静的メソッドが突然傍受されてしまいます)。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:692
#, fuzzy
msgid "Private static methods are never intercepted"
msgstr "プライベートなスタティックメソッドは決して傍受されない"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:693
#, fuzzy
msgid "`InvocationContext#getTarget()` returns `null` for obvious reasons; therefore not all existing interceptors may behave correctly when intercepting static methods"
msgstr "`InvocationContext#getTarget()` は明らかな理由から `null` を返します。そのため、既存のすべてのインターセプターが静的メソッドを傍受する際に正しく動作するとは限りません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:695
#, fuzzy
msgid "Interceptors can use `InvocationContext.getMethod()` to detect static methods and adjust the behavior accordingly."
msgstr "インターセプターは `InvocationContext.getMethod()` を使用して静的メソッドを検出し、それに応じて動作を調整することができます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:696
#, fuzzy, no-wrap
msgid "Ability to handle 'final' classes and methods"
msgstr "最終的な」クラスとメソッドを扱う能力"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:701
#, fuzzy
msgid "In normal CDI, classes that are marked as `final` and / or have `final` methods are not eligible for proxy creation, which in turn means that interceptors and normal scoped beans don't work properly.  This situation is very common when trying to use CDI with alternative JVM languages like Kotlin where classes and methods are `final` by default."
msgstr "通常のCDIでは、 `final` とマークされているクラス、および/または `final` メソッドを持つクラスはプロキシー作成の対象外となり、インターセプターや通常のスコープ付きビーンが正しく動作しません。この状況は、クラスやメソッドがデフォルトで `final` となっている Kotlin のような代替 JVM 言語で CDI を使用しようとした場合に非常によく見られます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:703
#, fuzzy
msgid "Quarkus however, can overcome these limitations when `quarkus.arc.transform-unproxyable-classes` is set to `true` (which is the default value)."
msgstr "しかし、Quarkusでは、 `quarkus.arc.transform-unproxyable-classes` を `true` (デフォルト値)に設定すると、これらの制限を克服することができます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:704
#, fuzzy, no-wrap
msgid "Container-managed Concurrency"
msgstr "コンテナー管理型の並行処理"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:712
#, fuzzy
msgid "There is no standard concurrency control mechanism for CDI beans.  Nevertheless, a bean instance can be shared and accessed concurrently from multiple threads.  In that case it should be thread-safe.  You can use standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.) or let the container control the concurrent access.  Quarkus provides `@io.quarkus.arc.Lock` and a built-in interceptor for this interceptor binding.  Each interceptor instance associated with a contextual instance of an intercepted bean holds a separate `ReadWriteLock` with non-fair ordering policy."
msgstr "CDI ビーンには、標準的な同時実行制御メカニズムはありません。それにもかかわらず、ビーンのインスタンスは共有され、複数のスレッドから同時にアクセスすることができます。その場合、それはスレッドセーフでなければなりません。標準的な Java コンストラクト ( `volatile` , `synchronized` , `ReadWriteLock` , など) を使用するか、コンテナーに同時アクセスを制御させることができます。Quarkusは、 `@io.quarkus.arc.Lock` と、このインターセプターバインディングのための組み込みインターセプターを提供しています。インターセプトされたビーンのコンテキストインスタンスに関連付けられた各インターセプターインスタンスは、不公平な注文ポリシーを持つ個別の `ReadWriteLock` を保持しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:714
#, fuzzy
msgid "`io.quarkus.arc.Lock` is a regular interceptor binding and as such can be used for any bean with any scope. However, it is especially useful for \"shared\" scopes, e.g. `@Singleton` and `@ApplicationScoped`."
msgstr "`io.quarkus.arc.Lock` は通常のインターセプターバインディングなので、任意のスコープを持つ任意のビーンに使用することができます。しかし、特に\"共有\"スコープ、例えば `@Singleton` や `@ApplicationScoped` ."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:715
#, fuzzy, no-wrap
msgid "Container-managed Concurrency Example"
msgstr "コンテナー管理された並行処理の例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:719
#, no-wrap
msgid "import io.quarkus.arc.Lock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:723
#, no-wrap
msgid ""
"@Lock <1>\n"
"@ApplicationScoped\n"
"class SharedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:727
#, no-wrap
msgid ""
"  void addAmount(BigDecimal amount) {\n"
"    // ...changes some internal state of the bean\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:733
#, no-wrap
msgid ""
"  @Lock(value = Lock.Type.READ, time = 1, unit = TimeUnit.SECONDS) <2> <3>\n"
"  BigDecimal getAmount() {\n"
"    // ...it is safe to read the value concurrently\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:735
#, fuzzy
msgid "`@Lock` (which maps to `@Lock(Lock.Type.WRITE)`) declared on the class instructs the container to lock the bean instance for any invocation of any business method, i.e. the client has \"exclusive access\" and no concurrent invocations will be allowed."
msgstr "`@Lock` ( `@Lock(Lock.Type.WRITE)` にマップされます ) クラス上で宣言されたコンテナーは、任意のビジネスメソッドの呼び出しに対してビーンのインスタンスをロックするように指示します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:736
#, fuzzy
msgid "`@Lock(Lock.Type.READ)` overrides the value specified at class level. It means that any number of clients can invoke the method concurrently, unless the bean instance is locked by `@Lock(Lock.Type.WRITE)`."
msgstr "`@Lock(Lock.Type.READ)` は、クラスレベルで指定された値を上書きします。これは、ビーンのインスタンスが `@Lock(Lock.Type.WRITE)` によってロックされていない限り、任意の数のクライアントが同時にメソッドを呼び出すことができることを意味します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:737
#, fuzzy
msgid "You can also specify the \"wait time\". If it's not possible to acquire the lock in the given time a `LockException` is thrown."
msgstr "また、「待ち時間」を指定することもできます。指定した時間内にロックを取得できない場合は `LockException` がスローされます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:738
#, fuzzy, no-wrap
msgid "Repeatable interceptor bindings"
msgstr "反復可能なインターセプターバインディング"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:741
#, fuzzy
msgid "Quarkus has limited support for `@Repeatable` interceptor binding annotations."
msgstr "Quarkusでは、 `@Repeatable` インターセプター結合アノテーションのサポートが制限されています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:745
#, fuzzy
msgid "When binding an interceptor to a component, you can declare multiple `@Repeatable` annotations on methods.  Repeatable interceptor bindings declared on classes and stereotypes are not supported, because there are some open questions around interactions with the Interceptors specification.  This might be added in the future."
msgstr "インターセプターをコンポーネントにバインドする場合、メソッドに複数の `@Repeatable` アノテーションを宣言することができます。クラスやステレオタイプ上で宣言された反復可能なインターセプターバインディングは、インターセプター仕様との相互作用をめぐって未解決の問題があるため、サポートされていません。これは将来的に追加されるかもしれません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:749
#, fuzzy
msgid "As an example, suppose we have an interceptor that clears a cache.  The corresponding interceptor binding would be called `@CacheInvalidateAll` and would be declared as `@Repeatable`.  If we wanted to clear two caches at the same time, we would add `@CacheInvalidateAll` twice:"
msgstr "例として、キャッシュをクリアするインターセプターがあるとします。対応するインターセプターバインディングは `@CacheInvalidateAll` と呼ばれ、 `@Repeatable` として宣言されます。2 つのキャッシュを同時にクリアしたい場合は、 `@CacheInvalidateAll` を 2 回追加します。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:763
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CachingService {\n"
"  @CacheInvalidateAll(cacheName = \"foo\")\n"
"  @CacheInvalidateAll(cacheName = \"bar\")\n"
"  void heavyComputation() {\n"
"    // ...\n"
"    // some computation that updates a lot of data\n"
"    // and requires 2 caches to be invalidated\n"
"    // ...\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:767
#, fuzzy
msgid "This is how interceptors are used.  What about creating an interceptor?"
msgstr "インターセプターの使い方はこんな感じです。インターセプターを作るのはどうでしょうか?"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:770
#, fuzzy
msgid "When declaring interceptor bindings of an interceptor, you can add multiple `@Repeatable` annotations to the interceptor class as usual.  This is useless when the annotation members are `@Nonbinding`, as would be the case for the `@Cached` annotation, but is important otherwise."
msgstr "インターセプターのインターセプターバインディングを宣言する際には、通常通りインターセプタークラスに複数の `@Repeatable` アノテーションを追加することができます。これは、アノテーションのメンバーが `@Cached` アノテーションの場合のように `@Nonbinding` である場合には意味がありませんが、それ以外の場合には重要です。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:774
#, fuzzy
msgid "For example, suppose we have an interceptor that can automatically log method invocations to certain targets.  The interceptor binding annotation `@Logged` would have a member called `target`, which specifies where to store the log.  Our implementation could be restricted to console logging and file logging:"
msgstr "例えば、特定のターゲットに対するメソッド呼び出しを自動的にログに記録できるインターセプターがあるとします。インターセプターのバインディングアノテーション `@Logged` は、 `target` と呼ばれるメンバーを持ち、ログを保存する場所を指定します。この実装では、コンソール・ロギングとファイル・ロギングに限定することができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:783
#, no-wrap
msgid ""
"@Interceptor\n"
"@Logged(target = \"console\")\n"
"@Logged(target = \"file\")\n"
"class NaiveLoggingInterceptor {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:786
#, fuzzy
msgid "Other interceptors could be provided to log method invocations to different targets."
msgstr "他にも、異なるターゲットへのメソッド呼び出しをログに記録するためのインターセプターを提供することができます。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:788
#, fuzzy, no-wrap
msgid "Build Time Extensions"
msgstr "ビルド時間延長"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:794
#, fuzzy
msgid "Quarkus incorporates build-time optimizations in order to provide instant startup and low memory footprint.  The downside of this approach is that CDI Portable Extensions cannot be supported.  Nevertheless, most of the functionality can be achieved using Quarkus link:writing-extensions[extensions].  See the link:cdi-integration[integration guide] for more information."
msgstr "Quarkusは、即時の起動と低メモリーフットプリントを実現するために、ビルド時の最適化を組み込んでいます。このアプローチの欠点は、CDIポータブル拡張機能がサポートされていないことです。それでも、ほとんどの機能はQuarkusの link:writing-extensions[拡張機能] を使用して実現できます。詳細については、 link:cdi-integration[統合ガイド] を参照してください。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:795
#, no-wrap
msgid "Development Mode"
msgstr "開発モード"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:798
#, fuzzy
msgid "In the development mode, two special endpoints are registered automatically to provide some basic debug info in the JSON format:"
msgstr "開発モードでは、2つの特別なエンドポイントが自動的に登録され、基本的なデバッグ情報をJSON形式で提供します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:800
#, fuzzy
msgid "HTTP GET `/q/arc` - returns the summary; number of beans, config properties, etc."
msgstr "HTTP GET `/q/arc` - ビーンの数、設定プロパティーなどのサマリーを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:801
#, fuzzy
msgid "HTTP GET `/q/arc/beans` - returns the list of all beans"
msgstr "HTTP GET `/q/arc/beans` - すべてのビーンのリストを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:802
#, fuzzy
msgid "You can use query params to filter the output:"
msgstr "クエリパラメーターを使用して出力をフィルタリングすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:803
#, fuzzy
msgid "`scope` - include beans with scope that ends with the given value, i.e. `http://localhost:8080/q/arc/beans?scope=ApplicationScoped`"
msgstr "`scope` - 指定した値で終わるスコープを持つ豆をインクルードする。 `http://localhost:8080/q/arc/beans?scope=ApplicationScoped`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:804
#, fuzzy
msgid "`beanClass` - include beans with bean class that starts with the given value, i.e. `http://localhost:8080/q/arc/beans?beanClass=org.acme.Foo`"
msgstr "`beanClass` - 与えられた値で始まるビーンクラスを持つビーンをインクルードします。 `http://localhost:8080/q/arc/beans?beanClass=org.acme.Foo`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:805
#, fuzzy
msgid "`kind` - include beans of the specified kind (`CLASS`, `PRODUCER_FIELD`, `PRODUCER_METHOD`, `INTERCEPTOR` or `SYNTHETIC`), i.e. `http://localhost:8080/q/arc/beans?kind=PRODUCER_METHOD`"
msgstr "`kind` - 指定された種類の豆 ( `CLASS` , `PRODUCER_FIELD` , `PRODUCER_METHOD` , `INTERCEPTOR` , `SYNTHETIC` ) を含みます。 `http://localhost:8080/q/arc/beans?kind=PRODUCER_METHOD`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:806
#, fuzzy
msgid "HTTP GET `/q/arc/removed-beans` - returns the list of unused beans removed during build"
msgstr "HTTP GET `/q/arc/removed-beans` - ビルド中に削除された未使用のビーンのリストを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:807
#, fuzzy
msgid "HTTP GET `/q/arc/observers` - returns the list of all observer methods"
msgstr "HTTP GET `/q/arc/observers` - すべてのオブザーバーメソッドのリストを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:809
#, fuzzy
msgid "These endpoints are only available in the development mode, i.e. when you run your application via `mvn quarkus:dev` (or `./gradlew quarkusDev`)."
msgstr "これらのエンドポイントは、開発モード、すなわち `mvn quarkus:dev` (または `./gradlew quarkusDev` ) を介してアプリケーションを実行する場合にのみ利用可能です。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:812
#, fuzzy, no-wrap
msgid "ArC Configuration Reference"
msgstr "ArC コンフィギュレーション・リファレンス"
