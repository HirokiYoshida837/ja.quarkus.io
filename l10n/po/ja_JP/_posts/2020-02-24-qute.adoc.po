# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-01 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-02-24-qute.adoc:1
#, fuzzy, no-wrap
msgid "mkouba"
msgstr "モクバ"

#. type: YAML Front Matter: date
#: upstream/_posts/2020-02-24-qute.adoc:1
#, fuzzy, no-wrap
msgid "2020-02-24 00:00 +0100"
msgstr "2020-02-24 00:00 +0100"

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-02-24-qute.adoc:1
#, fuzzy, no-wrap
msgid "post"
msgstr "貼る"

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-02-24-qute.adoc:1
#, fuzzy, no-wrap
msgid "Qute - a templating engine designed specifically to meet the Quarkus needs."
msgstr "Qute - クォークスのニーズを満たすために特別に設計されたテンプレエンジン。"

#. type: YAML Front Matter: title
#: upstream/_posts/2020-02-24-qute.adoc:1
#, fuzzy, no-wrap
msgid "Qute - Why (Not Just) Yet Another Templating Engine"
msgstr "Qute - なぜ（ただの）テンプテーションエンジンではないのか？"

#. type: delimited block =
#: upstream/_posts/2020-02-24-qute.adoc:12
#, fuzzy
msgid "Qute is an experimental feature."
msgstr "Quteは実験的な機能です。"

#. type: delimited block =
#: upstream/_posts/2020-02-24-qute.adoc:14
#, fuzzy
msgid "There is no guarantee of stability nor long term presence in the platform until the solution matures."
msgstr "ソリューションが成熟するまで、プラットフォームの安定性や長期的な存在を保証するものではありません。"

#. type: delimited block =
#: upstream/_posts/2020-02-24-qute.adoc:16
#, fuzzy
msgid "An https://quarkus.io/guides/qute[introduction guide] and a more comprehensive https://quarkus.io/guides/qute-reference[reference guide] are available."
msgstr "link:https://quarkus.io/guides/qute[導入ガイド] とより包括的な link:https://quarkus.io/guides/qute-reference[リファレンスガイドが] 用意されています。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:25
#, fuzzy
msgid "Let's start with a very good question: _\"Why yet another templating engine?\"_.  There are plenty of templating libraries in Java.  And Quarkus is known to build on top of \"Best of Breed Libraries and Standards\".  That's true.  On the other hand, the Quarkus community is also a powerful innovation catalyst.  And so we decided to start Qute (QUarkus TEmplates) - a templating engine designed specifically to meet the Quarkus needs.  We believe that we can bring new ideas even to such an explored area as the templating is."
msgstr "まずは、とても良い質問から始めましょう。\" _なぜまだ別のテンプレートエンジンを使うのか?_ Javaにはたくさんのテンプレートライブラリがあります。そして、Quarkusは「Best of Breed Libraries and Standards」の上に構築することで知られています。それは事実です。一方で、Quarkusコミュニティは強力なイノベーションの触媒でもあります。そこで私たちは、Quarkusのニーズを満たすために特別に設計されたテンプテーションエンジンであるQute(QUarkus TEmplates)を立ち上げることにしました。私たちは、テンプレのような探索された領域にも新しいアイデアをもたらすことができると信じています。"

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:26
#, fuzzy, no-wrap
msgid "Basic Ideas"
msgstr "基本的な考え方"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:32
#, fuzzy
msgid "Our main goal is to provide an opinionated innovative templating engine.  But we don't want to reinvent the wheel.  Instead, we got inspired by existing technologies.  Just a few examples:"
msgstr "私たちの主な目標は、意見のある革新的なテンプレートエンジンを提供することです。しかし、私たちはホイールを再発明したいとは思いません。その代わりに、既存の技術からインスピレーションを得ています。ほんの少しの例です。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:34
#, fuzzy
msgid "The https://quarkus.io/guides/qute-reference#syntax-and-building-blocks[syntax] is mainly inspired by https://handlebarsjs.com/[Handlebars] and https://www.dustjs.com/[Dust.js]."
msgstr "link:https://quarkus.io/guides/qute-reference#syntax-and-building-blocks[構文は] 主に link:https://handlebarsjs.com/[ハンドルバー] や link:https://www.dustjs.com/[Dust.js] にインスパイアされています。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:35
#, fuzzy
msgid "The https://quarkus.io/guides/qute-reference#include_helper[template inheritance] is inspired by https://en.wikipedia.org/wiki/Facelets[Facelets] and https://docs.djangoproject.com/en/3.0/ref/templates/language/[Django]."
msgstr "link:https://quarkus.io/guides/qute-reference#include_helper[テンプレートの継承は] link:https://en.wikipedia.org/wiki/Facelets[Facelet] や link:https://docs.djangoproject.com/en/3.0/ref/templates/language/[Django] に触発されています。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:36
#, fuzzy
msgid "Qute supports the https://en.wikipedia.org/wiki/Elvis_operator[elvis operator] you might be familiar with from https://groovy-lang.org/[Groovy] and https://kotlinlang.org/[Kotlin]."
msgstr "Quteは、 link:https://groovy-lang.org/[Groovy] や link:https://kotlinlang.org/[Kotlin] でおなじみの link:https://en.wikipedia.org/wiki/Elvis_operator[エルビス演算子] に対応しています。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:37
#, fuzzy
msgid "https://quarkus.io/guides/qute-reference#template_extension_methods[Extension methods] that can be used to extend the data classes with new functionality are also inspired by modern languages."
msgstr "データクラスを新しい機能で拡張するための link:https://quarkus.io/guides/qute-reference#template_extension_methods[拡張メソッドも] 、現代の言語からヒントを得ています。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:38
#, fuzzy
msgid "If you come from the world of JSP/JSF/Facelets you'll appreciate that `@Named` CDI beans can be referenced directly in any template through the `inject` namespace, e.g. `{inject:foo.price}`. See https://quarkus.io/guides/qute-reference#injecting-beans-directly-in-templates[Injecting Beans Directly In Templates] for more information."
msgstr "JSP/JSF/Facelet の世界から来たのであれば、 `@Named` CDI ビーンズが `inject` 名前空間を介して、どのテンプレートでも直接参照できることを理解するでしょう、例えば `{inject:foo.price}` .詳細については、「 link:https://quarkus.io/guides/qute-reference#injecting-beans-directly-in-templates[テンプレートに直接ビーンズを注入] する」を参照してください。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:41
#, fuzzy
msgid "But that's not all.  We introduce new features based on Quarkus principles..."
msgstr "しかし、それだけではありません。Quarkusの原則に基づいた新機能を導入しています..."

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:42
#, fuzzy, no-wrap
msgid "Asynchronous Data Resolution - On The Way To Reactive"
msgstr "非同期データ解決 - リアクティブへの道のり"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:47
#, fuzzy
msgid "When we started to design Qute we had one important aspect in mind - the data resolution API should be asynchronous.  This allows for better resource utilization and fits the Quarkus reactive model.  Another consequence of this design decision is that it's possible to leverage non-blocking clients directly from a template, i.e. to asynchronously fetch data from various sources."
msgstr "Quteの設計を始めたとき、私たちは1つの重要な点を念頭に置いていました。それは、データ解決APIは非同期であるべきだということです。これにより、リソースの利用率が向上し、Quarkusのリアクティブモデルに適合するようになりました。この設計決定のもう一つの結果として、テンプレートから直接ノンブロッキングクライアントを利用できるようになりました。"

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:48
#, fuzzy, no-wrap
msgid "Non-blocking Client Data Fetching Example"
msgstr "ノンブロッキングクライアントデータ取得の例"

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:60
#, no-wrap
msgid ""
"{@org.acme.Client client} <1>\n"
"<html>\n"
"<body>\n"
"    <h1>Quarkus Open Pull Requests</h1>\n"
"    {#for pull in client.pullRequests} <2>\n"
"        <p>{pull.title} - {pull.user.login}</p>\n"
"    {/for} \n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:62
#, fuzzy
msgid "Parameter declaration - maps `client` to `org.acme.Client`. See the <<type-safe-templates,next section>> for more information."
msgstr "パラメーター宣言 - `client` を `org.acme.Client` にマップします。詳細は link:#type-safe-templates[次のセクションを] 参照してください。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:63
#, fuzzy
msgid "`org.acme.Client#getPullRequests()` is using a non-blocking Vert.x client to fetch the data directly from the GitHub API. Since the data resolution is asynchronous the thread is not blocked and can continue performing some other tasks:"
msgstr "`org.acme.Client#getPullRequests()` は、ノンブロッキングの Vert.x クライアントを使用して GitHub API から直接データを取得しています。データの解決は非同期なので、スレッドはブロックされず、他のタスクを実行し続けることができます。"

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:79
#, no-wrap
msgid ""
"CompletionStage<JsonArray> getPullRequests() {\n"
"   return webClient\n"
"            .get(80, \"api.github.com\", \"/repos/quarkusio/quarkus/pulls?state=open&per_page=10\")\n"
"            .as(BodyCodec.jsonArray())\n"
"            .send()\n"
"            .thenCompose(r -> {\n"
"               if (r.statusCode() == 200) {\n"
"                  return CompletableFuture.completedFuture(r.body());\n"
"               } else {\n"
"                  // Log errors etc.\n"
"               }\n"
"            });\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:82
#, fuzzy, no-wrap
msgid "Type-safe Templates"
msgstr "タイプセーフテンプレート"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:92
#, fuzzy
msgid "Most of the templating engines are not type-safe, ie. do not prevent type errors.  It's quite natural because dynamicity in templates is very often practical.  On the other hand, a user is not protected from tedious errors caused by typos and various refactoring consequences.  Qute templates can be _optionally_ type-safe.  What does it actually mean? A template may contain one or more *parameter declarations*.  A parameter declaration binds a concrete type information to a given identifier in the current context.  And what are the advantages of having a type-safe template?"
msgstr "ほとんどのテンプレートエンジンはタイプセーフではありません。テンプレートの動的性は非常に実用的であることが多いので、これはごく自然なことです。一方で、タイプミスや様々なリファクタリングの結果として生じる面倒なエラーからユーザーを守ることはできません。Qute のテンプレートは、 _オプション_ でタイプセーフにすることができます。これは実際にはどのような意味があるのでしょうか?テンプレートには、1つまたは複数の *パラメーター* 宣言が含まれています。パラメーター宣言は、現在のコンテキストでの識別子に具体的な型情報をバインドします。タイプセーフテンプレートを持つことの利点は何でしょうか?"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:94
#, fuzzy
msgid "Quarkus validates _all expressions_ that reference a parameter declaration. If an invalid/incorrect expression is found the build fails."
msgstr "Quarkusは、パラメーター宣言を参照する _すべての式を_ 検証します。無効または不正確な式が見つかった場合、ビルドは失敗します。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:96
#, fuzzy
msgid "In development mode, all files located in the `src/main/resources/templates` directory are watched for changes and modifications are immediately visible. That also implies that your application fails fast whenever a type error occurs."
msgstr "開発モードでは、 `src/main/resources/templates` ディレクトリーにあるすべてのファイルが変更されているかどうかが監視され、変更はすぐに表示されます。これはまた、型エラーが発生するたびにアプリケーションが高速に失敗することを意味します。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:98
#, fuzzy
msgid "A _value resolver_ is generated for all types used in parameter declarations so that it’s possible to access its properties without reflection. This is very useful when targeting GraalVM native images."
msgstr "パラメーター宣言で使用されるすべての型に対して _値リゾルバが_ 生成され、そのプロパティーに反射なしでアクセスできるようになります。これは、GraalVMネイティブイメージをターゲットにする場合に非常に便利です。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:99
#, fuzzy
msgid "We have few more ideas in our TODO list, such as performance optimizations for type-safe expressions, etc."
msgstr "TODOリストには、型安全な式のパフォーマンスの最適化など、いくつかのアイデアがあります。"

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:100
#, fuzzy, no-wrap
msgid "Type-safe Template Example"
msgstr "タイプセーフのテンプレート例"

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:118
#, no-wrap
msgid ""
"{@org.acme.Foo foo} <1>\n"
"<!DOCTYPE html>\n"
"<html>\n"
"<head>\n"
"<meta charset=\"UTF-8\">\n"
"<title>Qute Hello</title>\n"
"</head>\n"
"<body>\n"
"  <h1>{title}</h1>  <2>\n"
"  <p>{foo.message}</p>  <3>\n"
"  {#for foo in baz.foos}\n"
"    <p>Hello {foo.message}!</p>  <4>\n"
"  {/for}\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:120
#, fuzzy
msgid "Parameter declaration - maps `foo` to `org.acme.Foo`."
msgstr "パラメーター宣言 - `foo` を `org.acme.Foo` にマップします。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:121
#, fuzzy
msgid "`{title}` is not validated - not matching a param declaration."
msgstr "`{title}` は検証されていません - パラメーター宣言にマッチしません。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:122
#, fuzzy
msgid "`{foo.message}` is validated. `org.acme.Foo` must have a property `message` or a matching template extension method must exist."
msgstr "`{foo.message}` が検証されます。 `org.acme.Foo` はプロパティー `message` を持つか、一致するテンプレート拡張子メソッドが存在しなければなりません。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:123
#, fuzzy
msgid "`{foo.message}` is not validated because `foo` is overridden in the loop section and there is no type information available."
msgstr "`{foo.message}` は、ループ部分で `foo` がオーバーライドされており、型情報が利用できないため、検証されていません。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:125
#, fuzzy
msgid "Only properties are currently validated in expressions; \"virtual methods\" such as `foo.getBar(baz.name)` are currently ignored."
msgstr "`foo.getBar(baz.name)` のような「仮想メソッド」は現在無視されています。"

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:126
#, fuzzy, no-wrap
msgid "First-class Quarkus Citizen"
msgstr "一等クォークス市民"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:129
#, fuzzy
msgid "Despite the fact that Qute is highly optimized for Quarkus the core engine is developed as an independent library that could be integrated in any environment."
msgstr "QuteはQuarkusに高度に最適化されているにもかかわらず、コアエンジンはどのような環境にも統合できる独立したライブラリとして開発されています。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:131
#, fuzzy
msgid "In Quarkus, all templates located in the `src/main/resources/templates` directory are validated and can be easily injected."
msgstr "Quarkusでは、 `src/main/resources/templates` ディレクトリーにあるすべてのテンプレートが検証され、簡単に注入することができます。"

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:132
#, fuzzy, no-wrap
msgid "Template Injection Example"
msgstr "テンプレート注入例"

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:136
#, no-wrap
msgid "package org.acme.qute;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:138
#, no-wrap
msgid "import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:140
#, no-wrap
msgid "class MyBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:143
#, no-wrap
msgid ""
"    @Inject \n"
"    Template items; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:146
#, no-wrap
msgid ""
"    @Inject\n"
"    Service service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:151
#, no-wrap
msgid ""
"    String renderItems() {\n"
"       return items.data(\"items\", service.getItems()).render(); <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:153
#, fuzzy
msgid "The field name is used to locate the template. In this particular case, the container will attempt to locate a template with path `src/main/resources/templates/items.html`. If there is no such template available the build fails."
msgstr "フィールド名はテンプレートを探すために使われます。この特定のケースでは、コンテナーはパス `src/main/resources/templates/items.html` でテンプレートを見つけようとします。利用可能なテンプレートがない場合、ビルドは失敗します。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:154
#, fuzzy
msgid "See the https://quarkus.io/guides/qute-reference#hello-world-example[Hello World Example] to explore the basic workflow."
msgstr "基本的なワークフローについては、 link:https://quarkus.io/guides/qute-reference#hello-world-example[ハローワールドの例] を参照してください。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:157
#, fuzzy
msgid "Moreover, a preconfigured `Engine` instance is provided and available for injection.  The `Engine` is a central point for template management and provides some low-level API."
msgstr "さらに、事前に設定された `Engine` インスタンスが提供されており、インジェクションに利用可能です。 `Engine` はテンプレート管理の中心点であり、いくつかの低レベル API を提供しています。"

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:158
#, fuzzy, no-wrap
msgid "RESTEasy Integration"
msgstr "RESTEasyの統合"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:162
#, fuzzy
msgid "If used together with RESTEasy a resource method may return a `TemplateInstance` and the integration code takes care of all the necessary steps and renders the output to the response.  See https://quarkus.io/guides/qute-reference#resteasy-integration[RESTEasy Integration] for more information."
msgstr "RESTEasy と一緒に使用すると、リソースメソッドは `TemplateInstance` を返すことができ、統合コードは必要なすべてのステップを処理し、レスポンスに出力をレンダリングします。詳細は REST link:https://quarkus.io/guides/qute-reference#resteasy-integration[Easy の統合を] 参照してください。"

#. type: Block title
#: upstream/_posts/2020-02-24-qute.adoc:163
#, fuzzy, no-wrap
msgid "JAX-RS Resource Example"
msgstr "JAX-RSリソースの例"

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:170
#, no-wrap
msgid ""
"package org.acme.qute;\n"
"...\n"
"import io.quarkus.qute.TemplateInstance;\n"
"import io.quarkus.qute.Template;\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:173
#, no-wrap
msgid ""
"@Path(\"hello\")\n"
"public class HelloResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:176
#, no-wrap
msgid ""
"    @Inject\n"
"    Template hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-02-24-qute.adoc:184
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public TemplateInstance get(@QueryParam(\"name\") String name) {\n"
"        // the template looks like: Hello {name}!\n"
"        return hello.data(\"name\", name); <2> <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:186
#, fuzzy
msgid "The field name is used to locate the template. In this particular case, we're injecting a template with path `templates/hello.txt`."
msgstr "フィールド名はテンプレートを見つけるために使用されます。この特定のケースでは、パス `templates/hello.txt` でテンプレートを注入しています。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:187
#, fuzzy
msgid "`Template.data()` returns a new template instance that can be customized before the actual rendering is triggered. In this case, we put the name value under the key `name`. The data map is accessible during rendering."
msgstr "`Template.data()` は、実際のレンダリングがトリガーされる前にカスタマイズできる新しいテンプレートインスタンスを返します。この場合、名前の値をキー `name` の下に置きます。データマップはレンダリング中にアクセス可能です。"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:188
#, fuzzy
msgid "Note that we don't trigger the rendering - this is done automatically by a special `ContainerResponseFilter` implementation."
msgstr "レンダリングをトリガーしないことに注意してください - これは特別な `ContainerResponseFilter` の実装によって自動的に行われます。"

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:190
#, fuzzy, no-wrap
msgid "Mailer Integration"
msgstr "メーラーの統合"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:196
#, fuzzy
msgid "Templates may come in handy when creating e-mail messages.  The Mailer extension integrates with Qute to provide a convenient way of sending e-mails.  In particular, the message body is automatically created using `+*.html+` and `+*.txt+` templates from the `src/main/resources/templates` directory.  See the https://quarkus.io/guides/mailer#message-body-based-on-qute-templates[Sending Emails] guide for more details."
msgstr "テンプレートは、電子メールメッセージを作成する際に便利です。Mailer 拡張機能は Qute と統合されており、便利なメール送信方法を提供します。特に、メッセージ本文は `*.html` と `*.txt` のテンプレートを使って `src/main/resources/templates` ディレクトリーから自動的に作成されます。詳細については、 link:https://quarkus.io/guides/mailer#message-body-based-on-qute-templates[メール] 送信ガイドを参照してください。"

#. type: Title ==
#: upstream/_posts/2020-02-24-qute.adoc:197
#, no-wrap
msgid "Conclusion"
msgstr "結論"

#. type: Plain text
#: upstream/_posts/2020-02-24-qute.adoc:201
#, fuzzy
msgid "Qute first landed in Quarkus 1.1.0.Final.  Since then we fixed many bugs and implemented some feature requests.  Feel free to join our community to stabilize the API, harden the implementation and explore the new possibilities!"
msgstr "QuteはQuarkus 1.1.1.0.Finalに初めて登場しました。それ以来、多くのバグを修正し、いくつかの機能リクエストを実装してきました。APIを安定させ、実装を固め、新しい可能性を探るために、気軽に私たちのコミュニティに参加してください。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'Qute - Why (Not Just) Yet Another Templating Engine'\n"
#~ "date:   2020-02-24 00:00 +0100\n"
#~ "author: mkouba\n"
#~ "synopsis: Qute - a templating engine designed specifically to meet the Quarkus needs.\n"
#~ "---\n"
#~ msgstr "layout: post title: 'Qute - Why (Not Just) Yet Another Templating Engine' date: 2020-02-24 00:00 +0100 author: mkouba synopsis.Qute - Quarkusのニーズを満たすために特別に設計されたテンプレートエンジン。---"
