# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-01 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:1
#, no-wrap
msgid "ebernard"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:1
#, no-wrap
msgid "2020-04-21"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:1
#, no-wrap
msgid "Understand when and how to use the Quarkus IO thread and its influence on microbenchmarks."
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:1
#, no-wrap
msgid "performance"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:1
#, no-wrap
msgid "A IO thread and a worker thread walk into a bar: a microbenchmark story"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:17
#, fuzzy
msgid "A competitor recently published a microbenchmark comparing the performance of their stack to Quarkus.  The Quarkus team feels this microbenchmark shouldn’t be taken at face value because it wasn’t making a like-to-like comparison leading to incorrect conclusions.  Both of the two frameworks under comparison support reactive processing.  Reactive processing enables running the business logic directly on the _IO thread_, which ultimately performs better in microbenchmark focusing on response time and concurrency.  The microbenchmark should have been written so that both frameworks (or neither framework) obtain this benefit.  Anyway, this turns out to be a very interesting topic and good information for Quarkus users, so read on."
msgstr "競合他社が最近、自社のスタックのパフォーマンスをQuarkusと比較したマイクロベンチマークを発表しました。Quarkusチームは、このマイクロベンチマークを額面通りに捉えるべきではないと感じています。なぜなら、似たような比較をしていなかったため、誤った結論につながったからです。比較対象の2つのフレームワークはどちらもリアクティブ処理をサポートしています。リアクティブ処理は、ビジネスロジックを _IO スレッド_ 上で直接実行することを可能にし、最終的にはレスポンスタイムと同時実行性に焦点を当てた microbenchmark の方がパフォーマンスが優れています。microbenchmarkは、両方のフレームワーク(またはどちらのフレームワークでもよい)がこの利点を得るように書かれているはずです。いずれにしても、これは非常に興味深いトピックであり、Quarkusユーザーにとっては良い情報であることがわかりましたので、ぜひ読んでみてください。"

#. type: Title ==
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:18
#, fuzzy, no-wrap
msgid "tl; dr;"
msgstr "TL;DR"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:22
#, fuzzy
msgid "Quarkus https://quarkus.io/blog/runtime-performance/[has great performance] for both imperative and reactive workloads.  It’s because Quarkus is itself based on Eclipse Vert.x, a mature top performing reactive framework, in such a way that allows you to layer, mix and match the IO paradigm that best fits your use-case."
msgstr "Quarkusは、命令的なワークロードとリアクティブなワークロードの両方で優れ link:https://quarkus.io/blog/runtime-performance/[たパフォーマンスを発揮] します。これは、Quarkus自体が、成熟したトップパフォーマンスのリアクティブフレームワークであるEclipse Vert.xをベースにしているためで、ユーザーのユースケースに最も適したIOパラダイムをレイヤー化、ミックス、マッチさせることができます。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:24
#, fuzzy
msgid "If you have a REST scenario well suited to run _purely on the IO thread_, add a Vert.x Reactive Route using https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routes] and your app will get better performance than using Quarkus RESTEasy."
msgstr "_純粋にIOスレッドでの_ 実行に適したRESTシナリオがある場合は、 link:https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routesを] 使用してVert.x Reactive Routeを追加すると、Quarkus RESTEasyを使用するよりもアプリのパフォーマンスが向上します。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:28
#, fuzzy
msgid "We ran this low-work REST + validation competitor-written microbenchmark which features no blocking operation, just returning static data.  When using Quarkus Reactive Routes to run Quarkus _purely on the IO thread_, **we observed 2.6x times the requests/sec and 30% less memory usage (RSS)** than running with Quarkus RESTEasy (which mixes IO thread and worker thread).  But that’s on a microbenchmark purpose built to this specific scenario (more on that later)."
msgstr "ブロッキング操作を行わず、静的データを返すだけという特徴を持つ、この低負荷のREST + 検証競合が書いたマイクロベンチマークを実行しました。Quarkus Reactive Routesを使用して _純粋にIOスレッドで_ Quarkusを実行した場合、Quarkus RESTEasy(IOスレッドとワーカースレッドを混合したもの)を使用した場合と比較して、 *リクエスト数が2.6倍/秒、メモリー使用量(RSS)が30%減少する* ことがわかりました。しかし、これはこの特定のシナリオのために構築されたマイクロベンチマークを目的としたものです(詳細は後ほど)。"

#. type: Target for macro image
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:29
#, no-wrap
msgid "throughput.png"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:31
#, fuzzy, no-wrap
msgid "More interesting read"
msgstr "より面白い読み物"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:35
#, fuzzy
msgid "The microbenchmark itself is uninteresting, but it is a good demonstrator of a phenomenon that can happen in reactive stacks.  Let’s use it as a vehicle to learn more about Quarkus and its reactive engine."
msgstr "マイクロベンチマーク自体は面白くありませんが、リアクティブスタックで起こりうる現象の良いデモンストレーターです。これを利用して、Quarkusとそのリアクティブエンジンについてもっと詳しく知りましょう。"

#. type: Title ===
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:36
#, fuzzy, no-wrap
msgid "Imperative and Reactive: the elevator pitch"
msgstr "インパーティブとリアクティブ:エレベーターピッチ"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:40
#, fuzzy
msgid "This blog post does not explain the fundamental differences between the imperative execution model and the reactive execution model.  However, to understand why we see so much difference in the mentioned microbenchmark, we need some notions."
msgstr "このブログ記事では、命令型実行モデルと反応型実行モデルの根本的な違いについては説明していません。しかし、前述のマイクロベンチマークの違いを理解するためには、いくつかの概念が必要です。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:49
#, fuzzy
msgid "In general, Java web applications use imperative programming combined with blocking IO operations.  This is incredibly popular because it is easier to reason about the code.  _Things_ get executed sequentially.  To make sure one request is not affected by another, they are run on different threads.  When your workload needs to interact with a database or another remote service, it relies on blocking IO.  The thread is blocked waiting for the answer.  Other requests running on different threads are not slowed down significantly.  But this means one thread for every concurrent request, which limits the overall concurrency."
msgstr "一般的に、JavaのWebアプリケーションでは、IO操作のブロッキングと組み合わせた命令型プログラミングを使用します。これは、コードを推論するのが簡単なので、信じられないほど人気があります。 _物事は_ 順次実行されます。あるリクエストが別のリクエストに影響されないようにするために、それらは異なるスレッドで実行されます。ワークロードがデータベースや他のリモートサービスと対話する必要がある場合、IO のブロックに依存します。スレッドは応答を待ってブロックされます。異なるスレッド上で実行されている他のリクエストは、大幅に遅くなることはありません。しかし、これは同時実行のリクエストごとに1つのスレッドを意味し、全体の同時実行性を制限します。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:64
#, fuzzy
msgid "On the other side, the reactive execution model embraces asynchronous development models and non blocking IOs.  With this model, multiple requests can be handled by the same thread.  When the processing of a request cannot make progress anymore (because it requests a remote service, or interacts with a database), it uses non blocking IO.  This releases the thread immediately, which can then be used to serve another request.  When the result of the IO operation is available, the processing of the request is restored and continues its execution.  This model enables the usage of the _IO thread_ to handle multiple requests.  There are two significant benefits.  First, the response time is smaller because it does not have to jump to another thread.  Second, it reduces memory consumption as it decreases the usage of threads.  The reactive model uses the hardware resources more efficiently, but... there is a significant drawback.  If the processing of a request starts to block, this gets real bad.  No other request can be handled.  To avoid this, you need to learn how to write non blocking code, how to structure asynchronous processing, and how to use non blocking IOs.  It's a paradigm shift."
msgstr "一方、リアクティブ実行モデルは、非同期開発モデルとノンブロッキングIOを包含しています。このモデルでは、複数のリクエストを同じスレッドで処理することができます。リクエストの処理が進まなくなったとき(リモートサービスをリクエストしたり、データベースと対話したりするため)、非ブロッキング IO を使用します。これはスレッドをすぐに解放し、別のリクエストを処理するのに使うことができます。IO 操作の結果が利用可能になると、リクエストの処理は復元され、実行が継続されます。このモデルでは、複数のリクエストを処理するために _IO スレッドを_ 使用することができます。2つの大きな利点があります。第一に、別のスレッドにジャンプする必要がないため、応答時間が小さくなります。第二に、スレッドの使用量が減るため、メモリー消費量が減ります。リアクティブモデルはハードウェアリソースをより効率的に使用しますが、...大きな欠点があります。リクエストの処理がブロックされ始めると、これは本当にひどいことになります。他のリクエストを処理できなくなります。これを避けるためには、非ブロッキングコードの書き方、非同期処理の構造、非ブロッキングIOの使い方を学ぶ必要があります。これはパラダイムシフトです。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:68
#, fuzzy
msgid "In Quarkus, we want to make the shift as easy as possible.  However, we have observed that the majority of user applications are written using the imperative model.  That is why, when the user application uses JAX-RS, Quarkus defaults to execute the (imperative) workload to a _worker thread_."
msgstr "Quarkusでは、できるだけ簡単に移行できるようにしたいと考えています。しかし、ユーザーアプリケーションの大部分は命令型モデルを使用して書かれていることが観察されています。そのため、ユーザーアプリケーションがJAX-RSを使用する場合、Quarkusはデフォルトで _ワーカースレッド_ に(命令的な)ワークロードを実行するようになっています。"

#. type: Title ===
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:69
#, fuzzy, no-wrap
msgid "Hello world microbenchmark: IO thread or worker thread?"
msgstr "ハローワールドmicrobenchmarkです。IOスレッドかワーカースレッドか?"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:74
#, fuzzy
msgid "Back to the competitor’s microbenchmark, we have a REST endpoint doing some trivial processing and some equally trivial validation.  Pretty much no meaningful business work.  This is the Hello World of REST for all intents and purposes."
msgstr "競合他社のマイクロベンチマークの話に戻りますが、RESTエンドポイントでは些細な処理と同様に些細な検証が行われています。ほとんど意味のあるビジネスワークはありません。これは、あらゆる意味でRESTのハローワールドです。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:79
#, fuzzy
msgid "When you run the microbenchmark with Quarkus RESTEasy, the request is handled by the reactive engine on the _IO thread_ but then the processing work is handed over to a second thread from the _worker thread pool_.  That’s called _dispatch_.  When your microbenchmark does as little as Hello World, then the dispatch overhead is proportionally big.  The dispatch overhead is not visible in most (real life) applications but is very visible in artificial constructs like microbenchmarks."
msgstr "Quarkus RESTEasyでmicrobenchmarkを実行すると、リクエストは _IOスレッド_ 上のリアクティブエンジンによって処理されますが、その後、処理作業は _ワーカースレッドプール_ から2番目のスレッドに引き渡されます。これを _ディスパッチ_ と呼びます。あなたのマイクロベンチマークが Hello World と同じくらいの処理しかしない場合、ディスパッチのオーバーヘッドはそれに比例して大きくなります。ディスパッチのオーバーヘッドは、ほとんどの(現実の)アプリケーションでは目に見えませんが、マイクロベンチマークのような人工的な構築物では非常に目に見えます。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:83
#, fuzzy
msgid "The competitor’s stack, however, runs all the request operations on the IO thread by default.  So what this microbenchmark was actually comparing is just the cost of dispatching to the worker thread pool.  And frankly (according to the competitor's numbers) and in spite of this extra dispatch work, Quarkus did very very well achieving ~95% of the competitor’s throughput today! I say today because we are always improving upon performance, and in fact we expect to see further gains in the soon to be released 1.4 release."
msgstr "しかし、競合他社のスタックは、デフォルトではすべてのリクエスト操作を IO スレッド上で実行します。つまり、このマイクロベンチマークが実際に比較していたのは、ワーカースレッドプールへのディスパッチのコストだけでした。そして、率直に言って(競合他社の数字によると)、この余分なディスパッチ作業にもかかわらず、Quarkusは今日、競合他社のスループットの95%を達成することができました。私たちは常にパフォーマンスを向上させているので、今日と言いましたが、実際、間もなくリリースされる1.4のリリースでは、さらに向上することを期待しています。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:85
#, fuzzy, no-wrap
msgid "*When compared at a disadvantage (dispatching to a worker thread), Quarkus is nevertheless almost as fast in throughput.*\n"
msgstr "*不利な点(ワーカースレッドへのディスパッチ)で比較すると、Quarkusはそれにもかかわらず、スループットではほぼ同程度の速さです。*"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:90
#, fuzzy
msgid "… But wait, Quarkus can also avoid the dispatch altogether and run operations on the IO Thread.  This is a more accurate comparison to how the competitor' stack was configured to do as in both case, it is the user's responsibility to ask for a dispatch if and when needed by the application.  To compare apples to apples, let’s use https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routes] backed by Eclipse Vert.x.  In this model, operations are run on the IO thread by default."
msgstr "... しかし、待ってください、Quarkusはディスパッチを完全に回避し、IOスレッド上で操作を実行することもできます。これは、競合他社のスタックがどのように設定されていたかと比較すると、より正確に比較できます。どちらの場合も、アプリケーションが必要としたときに、いつでも必要なときにディスパッチを求めるのはユーザーの責任です。りんごとりんごを比較するために、Eclipse Vert.xでバックアップされた link:https://quarkus.io/guides/reactive-routes[Quarkus Reactive Routesを] 使ってみましょう。このモデルでは、デフォルトでIOスレッド上で操作が実行されます。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:95
#, fuzzy
msgid "@ApplicationScoped public class MyDeclarativeRoutes {"
msgstr "@ApplicationScoped public class MyDeclarativeRoutes { {."

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:98
#, fuzzy, no-wrap
msgid ""
"  @Inject\n"
"  Validator validator;\n"
msgstr ""
"インジェクション\n"
"バリデータのバリデータです。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:111
#, fuzzy, no-wrap
msgid ""
"  @Route(path = \"/hello/:name\", methods = HttpMethod.GET)\n"
"  void greetings(RoutingExchange ex) {\n"
"    RequestWrapper requestWrapper = new RequestWrapper(ex.getParam(\"name\").orElse(\"world\"));\n"
"    Set<ConstraintViolation<RequestWrapper>> violations = validator.validate(requestWrapper));\n"
"    if( violations.size() == 0) {\n"
"      ex.ok(\"hello \" + requestWrapper.name);\n"
"    } else {\n"
"      StringBuilder validationError = new StringBuilder();\n"
"      violations.stream().forEach(violation -> validationError.append(violation.getMessage()));\n"
"      ex.response().setStatusCode(400).end(validationError.toString());\n"
"    }\n"
"  }\n"
msgstr ""
"@Route(path = \"/hello/:name\", methods = HttpMethod.GET)\n"
"void greetings(RoutingExchange ex) { 挨拶\n"
"  RequestWrapper requestWrapper = new RequestWrapper(ex.getParam(\"name\").orElse(\"world\")).\n"
"  Set<ConstraintViolation<RequestWrapper>> violations = validator.validate(requestWrapper)).\n"
"  if( violations.size() == 0) {\n"
"    ex.ok(\"hello \" + requestWrapper.name).\n"
"  } else {\n"
"    StringBuilder validationError = new StringBuilder().\n"
"    violations.stream().forEach(violation -> validationError.append(violation.getMessage()))。\n"
"    ex.response().setStatusCode(400).end(validationError.toString())。\n"
"  }\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:115
#, fuzzy, no-wrap
msgid ""
"  private class RequestWrapper {\n"
"    @NotBlank\n"
"    public String name;\n"
msgstr ""
"private class RequestWrapper {\n"
"  @NotBlank\n"
"  public String名です。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:120
#, fuzzy, no-wrap
msgid ""
"    public RequestWrapper(String name) {\n"
"      this.name = name;\n"
"    }\n"
"  }\n"
msgstr ""
"public RequestWrapper(String name) {\n"
"    this.name = name.\n"
"  }\n"
"}"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:122
#, fuzzy
msgid "}"
msgstr "}"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:125
#, fuzzy
msgid "This is not very different from your JAX-RS equivalent."
msgstr "これは、あなたのJAX-RS相当のものと大差ありません。"

#. type: Title ===
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:126
#, fuzzy, no-wrap
msgid "Throughput Numbers"
msgstr "スループット数"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:129
#, fuzzy
msgid "We ran the microbenchmark application in a docker container constrained to reflect a typical resource allocation to a container orchestrated by Kubernetes:"
msgstr "Kubernetesによってオーケストレーションされたコンテナーへの典型的なリソース割り当てを反映するように制約されたdockerコンテナー内でmicrobenchmarkアプリケーションを実行しました。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:131
#, fuzzy
msgid "4 CPU"
msgstr "4CPU"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:132
#, fuzzy
msgid "256 MB of RAM"
msgstr "256MBのRAM"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:133
#, fuzzy
msgid "and `-Xmx128m` heap usage for the Java process"
msgstr "と `-Xmx128m` Javaプロセスのヒープ使用量"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:139
#, fuzzy
msgid "We saw that Quarkus using Reactive Routes ran 2.6 times the requests/sec.  2.6 times! It makes sense! Remember the application code virtually does nothing, so the dispatch cost is comparatively high.  If you were to write a more real life workload (maybe even having a blocking operation like a JPA access and therefore forcing a dispatch), then the results would be very different.  Context matters!"
msgstr "リアクティブルートを使用したQuarkusは、リクエスト/秒数が2.6倍になることがわかりました。2.6倍!これは理にかなっています。アプリケーションコードは事実上何もしないので、ディスパッチコストは比較的高いことを覚えておいてください。より現実的なワークロードを書いた場合(JPAアクセスのようなブロッキング操作を行い、ディスパッチを強制的に行う場合もあるかもしれません)、結果は大きく異なるものになるでしょう。文脈が重要です!"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:141
#, fuzzy
msgid "You can find code and how to reproduce the microbenchmark https://github.com/johnaohara/quarkus-iothread-workerpool/tree/1.3.1.Final[here on GitHub]."
msgstr "microbenchmarkを再現するコードや方法は link:https://github.com/johnaohara/quarkus-iothread-workerpool/tree/1.3.1.Final[GitHubに] あります。"

#. type: Block title
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:142
#, fuzzy, no-wrap
msgid "Microbenchmark results comparing Quarkus dispatching to a worker thread vs running purely on the IO thread"
msgstr "Quarkusのワーカースレッドへのディスパッチと純粋にIOスレッド上での実行を比較したMicrobenchmarkの結果"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:146
#, fuzzy, no-wrap
msgid "Quarkus - 1.3.1.Final - 4 CPU's"
msgstr "Quarkus - 1.3.1.1.Final - 4 CPUの"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:147
#, fuzzy, no-wrap
msgid "Worker thread"
msgstr "ワーカースレッド"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:148
#, fuzzy, no-wrap
msgid "IO thread"
msgstr "IOスレッド"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:150
#, fuzzy, no-wrap
msgid "Ratio"
msgstr "比率"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:151
#, fuzzy, no-wrap
msgid "Mean Start Time to First Request (ms) footnote:[‘Mean Start Time to First Request’ was measured using an application built as an UberJar]"
msgstr "最初のリクエストまでの平均開始時間(ms) [ link:#_footnotedef_1[1, id=\"_footnoteref_1\", role=\"footnote\", title=\"View footnote.\"]]"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:152
#, fuzzy, no-wrap
msgid "993.9"
msgstr "993.9"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:153
#, fuzzy, no-wrap
msgid "868.3"
msgstr "868.3"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:155
#, fuzzy, no-wrap
msgid "87.4%"
msgstr "87.4%"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:156
#, fuzzy, no-wrap
msgid "Max RSS (MB)"
msgstr "最大RSS (MB)"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:157
#, fuzzy, no-wrap
msgid "138.8"
msgstr "138.8"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:158
#, fuzzy, no-wrap
msgid "97.9"
msgstr "97.9"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:160
#, fuzzy, no-wrap
msgid "70.5%"
msgstr "70.5%"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:161
#, fuzzy, no-wrap
msgid "Max Throughput (req/sec)"
msgstr "最大スループット(req/sec)"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:162
#, fuzzy, no-wrap
msgid "46,172.2"
msgstr "46,172.2"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:163
#, fuzzy, no-wrap
msgid "123,520.4"
msgstr "123,520.4"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:165
#, fuzzy, no-wrap
msgid "267.5%"
msgstr "267.5%"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:166
#, fuzzy, no-wrap
msgid "Max Req/Sec/MB"
msgstr "最大Req/Sec/MB"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:167
#, fuzzy, no-wrap
msgid "332.7"
msgstr "332.7"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:168
#, fuzzy, no-wrap
msgid "1,262.1"
msgstr "1,262.1"

#. type: Table
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:169
#, fuzzy, no-wrap
msgid "379.4%"
msgstr "379.4%"

#. type: Target for macro image
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:171
#, no-wrap
msgid "throughput-percentile.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:174
#, fuzzy, no-wrap
msgid "*In a fair comparison (purely remaining on the IO thread - no dispatch), Quarkus more than double its throughput.*\n"
msgstr "*公平に比較すると(純粋にIOスレッドに残っている-ディスパッチなし)、Quarkusはそのスループットを2倍以上にしています。*"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:179
#, fuzzy
msgid "As the generated load tends towards the maximum throughput of the system under test, the response time experienced by the client increases exponentially.  So the best system (for the workload) has a vertical line as far to the right as possible.  Equally important is to have as flat a line as possible for the longest time.  You do not want the response time to degrade before the system reaches maximum throughput."
msgstr "生成された負荷がテスト中のシステムの最大スループットに近づくにつれて、クライアントが経験する応答時間は指数関数的に増加します。したがって、(ワークロードに対して)最良のシステムは、可能な限り右側に垂直なラインを持っています。同様に重要なのは、できるだけ長い時間、できるだけフラットなラインを持つことです。システムが最大のスループットに達する前に、応答時間が低下することは避けたいものです。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:184
#, fuzzy
msgid "By the way, in the competitor microbenchmark Quarkus is shown as consuming more RSS (more RAM).This is also explained by the worker thread pool being operated whereas the competitor did not have a worker thread pool.  The Quarkus Reactive Routes solution (on a pure IO event run) shows a 30% RSS usage reduction."
msgstr "競合他社のマイクロベンチマークでは、Quarkusの方がRSSの消費量が多い(RAMの消費量が多い)ことが示されています。QuarkusのReactive Routesソリューション(純粋なIOイベント実行時)では、RSSの使用量が30%削減されています。"

#. type: Target for macro image
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:185
#, no-wrap
msgid "rss.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:189
#, fuzzy
msgid "In this graph, the lower, the better.  We see that the pure IO thread solution manages to increase throughput with little to no change to the memory usage (RSS), that's very good!"
msgstr "このグラフでは、低いほど良いです。純粋な IO スレッドソリューションは、メモリー使用量 (RSS) をほとんど変えずにスループットを向上させていることがわかります。"

#. type: Title ==
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:190
#, no-wrap
msgid "Conclusion"
msgstr "結論"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:196
#, fuzzy
msgid "Quarkus offers you the ability to safely run blocking operations, run non blocking operations on the IO thread or mix both models.  The Quarkus team takes performance very seriously and we see Quarkus as offering great numbers whether you use the imperative or reactive models.  In more realistic workloads, the dispatch cost would be much less significant, you would not see such drastic differences between the two approaches.  As usual, test as close to your real application as possible."
msgstr "Quarkusでは、ブロッキング処理を安全に実行したり、IOスレッド上で非ブロッキング処理を実行したり、両方のモデルを混在させたりすることができます。Quarkusチームはパフォーマンスを非常に重視しており、命令型モデルを使用してもリアクティブモデルを使用しても、Quarkusは素晴らしい数値を提供してくれると考えています。より現実的なワークロードでは、ディスパッチコストはそれほど重要ではなく、2つのアプローチの間にこれほど劇的な違いは見られないでしょう。いつものように、できるだけ実際のアプリケーションに近い状態でテストしてください。"

#. type: Plain text
#: upstream/_posts/2020-04-21-io-thread-benchmark.adoc:203
#, fuzzy
msgid "Mystery solved.  Benchmarks are hard, challenge them.  But the moral of the story is that in all bad comes some good.  We’ve now learned how to run Quarkus applications entirely on the IO thread.  And how in some situations that can make a big difference.  Remember, don’t block! In fact, Quarkus https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus.vertx.warning-exception-time[can warn you if you do so].  Oh and we also learned that Quarkus is so fast, it can even beat itself ;p"
msgstr "謎が解けた。ベンチマークは難しい、挑戦してみよう。しかし、物語の教訓は、すべての悪いことには良いことがあるということです。Quarkusのアプリケーションを完全にIOスレッド上で実行する方法を学びました。そして、状況によっては、それがどのように大きな違いをもたらすかを学びました。忘れてはいけないのは、ブロックしないことです。実際、ブロックする link:https://quarkus.io/guides/all-config#quarkus-vertx-core_quarkus.vertx.warning-exception-time[と] Quarkusは警告を発します。また、Quarkusは非常に高速で、自分自身を打ち負かすこともできることも学びました。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'A IO thread and a worker thread walk into a bar: a microbenchmark story'\n"
#~ "date: 2020-04-21\n"
#~ "tags: performance\n"
#~ "synopsis: Understand when and how to use the Quarkus IO thread and its influence on microbenchmarks.\n"
#~ "author: ebernard\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: 'IOスレッドとワーカースレッドがバーに入っていく:マイクロベンチマークの話'\n"
#~ "date: 2020-04-21\n"
#~ "tags: performance\n"
#~ "synopsis: Quarkus IOスレッドをいつ、どのように使用するか、またマイクロベンチマークへの影響を理解する。\n"
#~ "author: ebernard\n"
#~ "---\n"
