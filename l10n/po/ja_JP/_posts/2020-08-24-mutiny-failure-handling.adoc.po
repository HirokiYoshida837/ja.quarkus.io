# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-01 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, no-wrap
msgid "cescoffier"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, no-wrap
msgid "2020-08-24"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: synopsis
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, no-wrap
msgid "Failures are an inherent part of any software. This post explains how you handle them with Mutiny"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, no-wrap
msgid "reactive mutiny"
msgstr ""

#. type: YAML Front Matter: title
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:1
#, no-wrap
msgid "How to handle failures with Mutiny"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:11
#, fuzzy
msgid "In the past week, I got several questions about failure handling with Mutiny. So, maybe it deserves a bit more explanation."
msgstr "先週、Mutinyでの失敗処理について何度か質問を受けました。なので、もう少し説明に値するかもしれません。"

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:12
#, fuzzy, no-wrap
msgid "Failures are events"
msgstr "失敗はイベント"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:15
#, fuzzy
msgid "First, Mutiny is an event-driven reactive programming library. With Mutiny, you handle events. An upstream `Uni` or `Multi` propagates these events and gives you the possibility to process them. These events can be *item*, *completion*, *cancellation*, and... *failure*:"
msgstr "まず、Mutinyはイベント駆動型のリアクティブプログラミングライブラリです。Mutinyでは、イベントを処理します。上流の `Uni` または `Multi` がこれらのイベントを伝播し、処理する可能性を与えます。これらのイベントには、 *アイテム* 、 *完了* 、 *キャンセル* 、そして... *失敗* などがあります。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:24
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onItem().invoke(i -> System.out.println(\"Received item \" + i))\n"
"    .onCompletion().invoke(() -> System.out.println(\"We are done!\"))\n"
"    .onCancellation().invoke(() -> System.out.println(\n"
"        \"The downstream does not want our items anymore!\")\n"
"    )\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:28
#, no-wrap
msgid ""
"    .onFailure().invoke(t -> System.out.println(\n"
"        \"Oh no! We received a failure: \" + t.getMessage())\n"
"    )\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:30
#, fuzzy, no-wrap
msgid "What can you do when you receive a failure?"
msgstr "失敗を受けた時の対処法は?"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:33
#, fuzzy
msgid "In addition to calling an action, as shown in the previous snippet, there are multiple things you can do when you receive a failure."
msgstr "先ほどのスニペットのようにアクションを呼び出す以外にも、失敗を受けたときにできることは複数あります。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:35
#, fuzzy
msgid "The most common thing to do is to recover. You can recover by passing a specific item or with another `Uni`:"
msgstr "一番多いのはリカバリーです。特定のアイテムを渡すか、別のアイテムで回復することができます `Uni` ."

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:41
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithItem(failure -> \"hello (fallback)\")\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:45
#, no-wrap
msgid ""
"upstream\n"
"    .onFailure().recoverWithUni(failure -> getAnotherUni(failure))\n"
"    .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:48
#, fuzzy
msgid "On Multi, you can also recover by providing another `Multi` or completing the stream:"
msgstr "マルチでは、別の `Multi` を提供するか、ストリームを完了することで回復することもできます。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:53
#, no-wrap
msgid ""
"upstream\n"
"  .onFailure().recoverWithCompletion();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:56
#, fuzzy
msgid "If you have faith in your system, you can also *retry*. Note that you need to make sure you can retry the operation safely first!"
msgstr "システムに信頼があれば、 *リトライ* も可能です。注意点としては、まず安全にリトライできるかどうかを確認する必要があります"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:63
#, no-wrap
msgid ""
"upstream\n"
"      .onFailure().retry()\n"
"        .withBackOff(Duration.ofSeconds(1), Duration.ofSeconds(10)).atMost(10)\n"
"      .subscribe().with(i -> System.out.println(\"Received: \" + i));\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:66
#, fuzzy
msgid "You can also transform the failure. For example, you can map a low-level failure into something more business-friendly. It propagates that second failure downstream, hiding the low-level failure:"
msgstr "また、失敗を変換することもできます。たとえば、低レベルの障害をよりビジネスに適したものにマッピングすることができます。これは2番目の障害を下流に伝搬し、低レベルの障害を隠します。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:71
#, no-wrap
msgid ""
"Uni.createFrom().failure(new IOException(\"boom\"))\n"
"      .onFailure().transform(t -> new BusinessException(t))\n"
msgstr ""

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:73
#, fuzzy, no-wrap
msgid "Failures are terminal"
msgstr "失敗は末期的なもの"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:76
#, fuzzy
msgid "Failures are terminal events. If your upstream propagates a failure, it means it can't operate normally. For Uni, that's not a problem, as you can only have an item or a failure. But for multi, it's a bit more complicated."
msgstr "障害はターミナルイベントです。上流が障害を伝播するということは、正常に動作できないということです。Uniの場合は、アイテムや障害が発生するだけなので問題ありません。しかし、マルチの場合は少し複雑です。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:78
#, fuzzy
msgid "Even if you recover, by handling the failure, you won't get the rest of the stream. Your upstream is ... *kaputt*."
msgstr "回復したとしても、失敗を処理することで、残りの沢を手に入れることはできません。あなたの上流は...... *カプッ* 。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:80
#, fuzzy
msgid "Let's take the following code:"
msgstr "以下のコードを見てみましょう。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:94
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"      .onItem().invoke(v -> {\n"
"              if (v == 7) {\n"
"                throw new IllegalArgumentException(\"We don't like seven!\");\n"
"              }\n"
"      })\n"
"      .onFailure().recoverWithItem(7)\n"
"      .map(integer -> integer.toString())\n"
"      .onItem().invoke(s -> System.out.println(s))\n"
"      .collectItems().asList()\n"
"      .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:97
#, fuzzy
msgid "It produces [1, 2, 3, 4, 5, 6, 7] and not the rest of the stream. When the `onItem().invoke()` stage is called with `7`, it produces a failure. That stops the stream. It does not process more items from upstream."
msgstr "1,2,3,4,5,6,7]を生成し、残りのストリームは生成されません。 `7` で `onItem().invoke()` ステージが呼び出されると、失敗が発生します。これによりストリームが停止します。上流からそれ以上のアイテムを処理することはありません。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:99
#, fuzzy
msgid "So what can we do? Isolate!"
msgstr "どうすればいいの?隔離して!"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:101
#, fuzzy
msgid "When a *stage* sends a failure, it sends a failure terminating the stream and cancels its subscription to the upstream (informing that it does not need more items as it's not operating correctly). So, if we need to continue processing the other items from upstream; we just need to isolate that failure and be sure we do not cancel our subscription to the upstream."
msgstr "*ステージが* 障害を送信すると、ストリームを終了する障害を送信し、上流へのサブスクリプションをキャンセルします(正しく動作していないので、それ以上のアイテムは必要ないことを通知します)。そのため、上流から他のアイテムを処理し続ける必要がある場合は、その失敗を切り分けて、上流へのサブスクリプションをキャンセルしないようにすればよいだけです。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:103
#, fuzzy
msgid "The most common approach to achieve this is the following:"
msgstr "というのが一般的です。"

#. type: delimited block -
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:121
#, no-wrap
msgid ""
"List<String> list = Multi.createFrom().range(0, 10)\n"
"    .onItem().transformToUniAndConcatenate(i ->\n"
"            // Isolate the failure in this block\n"
"            Uni.createFrom().item(i)\n"
"                    .onItem().invoke(v -> {\n"
"                        if (v == 7) {\n"
"                            throw new IllegalArgumentException(\"We don't like seven!\");\n"
"                        }\n"
"                    })\n"
"                    .onFailure().recoverWithItem(7)\n"
"    )\n"
"    .map(integer -> integer.toString())\n"
"    .onItem().invoke(s -> System.out.println(s))\n"
"    .collectItems().asList()\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:124
#, fuzzy
msgid "Basically, we isolate the potentially failing operation. If it fails, we recover. But the cancellation only cancels that item, not the full stream, meaning we will receive the next one item and so on. This code produces the expected list."
msgstr "基本的には、失敗する可能性のある操作を分離します。失敗した場合は回復します。しかし、キャンセルはそのアイテムをキャンセルするだけで、ストリーム全体をキャンセルするわけではありません。このコードは、期待されるリストを生成します。"

#. type: Title ==
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:125
#, fuzzy, no-wrap
msgid "Summary"
msgstr "概要"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:128
#, fuzzy
msgid "Here you go, you can now handle failure and continue the streams gracefully."
msgstr "これで失敗を処理して、優雅に流れを続けることができるようになりました。"

#. type: Plain text
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:130
#, fuzzy
msgid "If you want to know more about Mutiny, check the following video:"
msgstr "Mutinyについてもっと詳しく知りたい方は、以下の動画をチェックしてみてください。"

#. type: delimited block +
#: upstream/_posts/2020-08-24-mutiny-failure-handling.adoc:133
#, fuzzy, no-wrap
msgid "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kWlrGtwvOxg\" frameborder=\"0\" allow=\"accelerometer; autoplay; encrypted-media; gyroscope; picture-in-picture\" allowfullscreen></iframe>\n"
msgstr "<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/kWlrGtwvOxg\" frameborder=\"0\" allow=\"加速度計; 自動再生; 暗号化メディア; ジャイロスコープ; ピクチャーインピクチャー\" allowfullscreen></iframe>。"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: 'How to handle failures with Mutiny'\n"
#~ "date: 2020-08-24\n"
#~ "tags: reactive mutiny\n"
#~ "synopsis: Failures are an inherent part of any software. This post explains how you handle them with Mutiny\n"
#~ "author: cescoffier\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: ' Mutinyで失敗した時の対処法'\n"
#~ "date: 2020-08-24\n"
#~ "tags: reactive mutiny\n"
#~ "synopsis: 失敗はどんなソフトウェアにもつきものです。この記事では、Mutinyを使ってどのように障害を処理するかを説明します。\n"
#~ "author: cescoffier\n"
#~ "---\n"
