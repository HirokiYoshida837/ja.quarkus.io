# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-03-01 17:57+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: YAML Front Matter: author
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:1
#, no-wrap
msgid "cesarsaavedra"
msgstr ""

#. type: YAML Front Matter: date
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:1
#, no-wrap
msgid "2020-02-17"
msgstr ""

#. type: YAML Front Matter: layout
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:1
#, no-wrap
msgid "post"
msgstr ""

#. type: YAML Front Matter: tags
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:1
#, no-wrap
msgid "user-story"
msgstr ""

#. type: Title =
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:1
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:10
#, fuzzy, no-wrap
msgid "Lufthansa Technik AVIATAR experiences significant cloud resources savings by moving to Kubernetes-native Quarkus"
msgstr "Lufthansa Technik AVIATAR、KubernetesネイティブのQuarkusへの移行によりクラウドリソースの大幅な節約を実現"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:13
#, fuzzy, no-wrap
msgid "LufthansaTechnik logo"
msgstr "LufthansaTechnikのロゴ"

#. type: Target for macro image
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:13
#, no-wrap
msgid "LHT_logo.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:16
#, fuzzy
msgid "Lufthansa Technik, the world’s largest independent provider of airline maintenance, repair, and overhaul (MRO) services, runs a SaaS digital platform, called AVIATAR, for the aviation industry. This platform helps airlines avoid delays and cancellations by using data to better organize and schedule maintenance. The company built and operated AVIATAR using a hybrid cloud infrastructure based on enterprise open source software from Red Hat."
msgstr "航空会社のメンテナンス、修理、オーバーホール(MRO)サービスを提供する世界最大の独立系プロバイダーであるルフトハンザ テクニックは、航空業界向けにAVIATARと呼ばれるSaaSデジタルプラットフォームを運営しています。このプラットフォームは、データを利用してメンテナンスをより良く整理し、スケジュールを立てることで、航空会社が遅延やキャンセルを回避するのを支援します。同社は、Red Hatのエンタープライズオープンソースソフトウェアをベースにしたハイブリッドクラウドインフラストラクチャを使用してAVIATARを構築し、運用しています。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:18
#, fuzzy
msgid "In the last 3 years, AVIATAR business has been growing fast and they needed to accommodate the growing demand from their customers. To this end, they had to grow their development force from 5 developers when they first started to over 100 at present. As they grew, they realized that one single large team was not the most productive and efficient way to organize their software development efforts because many developers had to spend time waiting for each other’s work to be finished due to the many interdependencies in the overall system. To address this situation, they decided to split development from one team to several cross-functional teams. At the same time, they also started working on ways to make the newly created smaller development teams more independent by giving each team autonomy to run their own services. This resulted in their evolution into a microservices architecture, where most of their microservices were based on Spring Boot and Java EE. They have gone from 10 services in the beginning to over 100 as of this writing."
msgstr "過去3年間で、AVIATARのビジネスは急速に成長しており、顧客からの需要の増加に対応する必要がありました。この目的のために、最初に開発を始めたときの5人の開発者から、現在では100人以上の開発者を抱えるまでに成長させなければなりませんでした。システム全体の相互依存性が高いため、多くの開発者がお互いの仕事が終わるのを待っている時間を過ごさなければならないため、1つの大きなチームが最も生産的で効率的な方法ではないことに気づきました。この状況に対処するために、彼らは開発を1つのチームから複数のクロスファンクショナルチームに分割することを決定しました。同時に、新たに作られた小さな開発チームに、それぞれのチームが独自のサービスを実行するための自治権を与えることで、より独立した開発チームにする方法にも取り組み始めました。その結果、マイクロサービスアーキテクチャへと進化し、マイクロサービスのほとんどがSpring BootとJava EEをベースにしたものになりました。この記事を書いている時点で、彼らは当初10のサービスから100を超えるサービスへと成長しています。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:20
#, fuzzy
msgid "The small and autonomous development teams have been able to take responsibility for their own services from development all the way to production to achieve more agility and respond faster to the business."
msgstr "小規模で自律的な開発チームが開発から本番まで責任を持ってサービスを担当することで、より俊敏性を発揮し、ビジネスへの迅速な対応が可能になりました。"

#. type: Title ==
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:21
#, fuzzy, no-wrap
msgid "High consumption of cloud resources for existing services"
msgstr "既存サービスのクラウドリソースの消費量が多い"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:24
#, fuzzy
msgid "Lufthansa Technik run their microservices on OpenShift on Azure and, as they were looking at different ways to scale their development efforts, they were also looking at ways to save cloud resource consumption. As they were migrating to microservices, they noticed microservices were consuming high memory and compute cloud resources. For high-availability and emergency procedure purposes, they run at least 3 instances of each microservice on the cloud which means that for each of these microservices, there’s a 3x cloud resource consumption rate. For example, one of their microservices was consuming ½ core plus 1 GB of RAM per instance, which required 1.5 cores and 3 GB of RAM when running it in HA on the cloud (3 instances)."
msgstr "Lufthansa Technik 社では、Azure 上の OpenShift 上でマイクロサービスを実行しており、開発作業をスケールアップするためのさまざまな方法を検討していましたが、同時にクラウドリソースの消費を節約する方法も検討していました。マイクロサービスへの移行を進めていく中で、マイクロサービスが大量のメモリーと計算用クラウドリソースを消費していることに気づきました。高可用性と緊急時の対応を目的として、各マイクロサービスを少なくとも 3 つのインスタンスでクラウド上で実行していますが、これはマイクロサービスごとにクラウドリソースの消費率が 3 倍になることを意味しています。例えば、同社のマイクロサービスの 1 つは、1 つのインスタンスあたり 1/2 コアと 1 GB の RAM を消費しており、これをクラウド上で HA で実行する場合(3 つのインスタンス)には、1.5 コアと 3 GB の RAM が必要でした。"

#. type: Title ==
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:25
#, fuzzy, no-wrap
msgid "Optimizing cloud resource consumption with Quarkus"
msgstr "Quarkusを使用してクラウドのリソース消費を最適化"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:28
#, fuzzy
msgid "Thorsten Pohl, Product Owner Automation & Platform Architect at Digital Product Division AVIATAR, first heard about Quarkus and its benefits in April 2019 at Red Hat Summit. Among its many benefits, the ones that piqued his interest were its low memory consumption and fast times to first response, both in JVM and native modes. He took this information back to AVIATAR and they decided to try it out. There were two initial microservices that their Technology Council recommended for a Quarkus tryout. The first one would be a brand new microservice called the _“Customer Configuration”_ service, and the second one would be the _“Service Discovery”_ service which would be a migration from a service running in an application server to Quarkus."
msgstr "デジタル製品部門AVIATARのプロダクトオーナー オートメーション&プラットフォームアーキテクトであるThorsten Pohl氏は、2019年4月のRed Hat SummitでQuarkusとそのメリットについて初めて耳にしました。その多くの利点の中で、彼の興味をそそるものは、JVMとネイティブモードの両方で、メモリー消費量が少なく、最初の応答までの時間が速いことでした。彼はこの情報をAVIATARに持ち帰り、試してみることにしました。テクノロジーカウンシルがQuarkusを試すために推奨した初期のマイクロサービスは2つありました。1つ目は「 _Customer Configuration」_ サービスと呼ばれる全く新しいマイクロサービスで、2つ目は _「Service Discovery」_ サービスで、アプリケーションサーバーで実行されているサービスからQuarkusへの移行となります。"

#. type: Title ===
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:29
#, fuzzy, no-wrap
msgid "The Customer Configuration service "
msgstr "顧客設定サービス"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:32
#, fuzzy
msgid "This service is for a customer to set up their own settings, e.g. desired level of prediction. This service is targeted for their managed customers and it was selected to be developed in Quarkus because it was low risk. From their perspective, if this service went down, there would be no major impact to customers. It was developed by 2 developers using Quarkus 0.20 in a single sprint (approximately 3 weeks) and they are planning to upgrade it to Quarkus v1.x. This service is currently running in native mode in production."
msgstr "このサービスは、顧客が希望する予測レベルなど、独自の設定を行うためのものです。このサービスは、同社が管理する顧客を対象としており、リスクが低いという理由でQuarkusで開発することが選択されました。彼らの視点では、このサービスがダウンしても、顧客に大きな影響はありません。このサービスは、2人の開発者がQuarkus 0.20を使用して1回のスプリント(約3週間)で開発し、Quarkus v1.xへのアップグレードを計画しています。"

#. type: Title ===
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:33
#, fuzzy, no-wrap
msgid "The Service Discovery service"
msgstr "サービスディスカバリーサービス"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:36
#, fuzzy
msgid "The Service Discovery service is used to allow automatic discovery between the microservices AVIATAR consist of. It is considered high risk because if it breaks down, it would have a major impact on customers. Also, the original version of this service ran in production as a highly available service in an application server, consuming a lot of cloud resources. The Quarkus version of this service has been running in native mode in Development for about 3 months with no problems and on January 18, 2020, it was deployed to production to replace the instance running on the application server. It should also be mentioned that this Quarkus service started in JVM mode because it was using MongoDB and there was no MongoDB client Quarkus extension when its development started. But as soon as the MongoDB client Quarkus extension became available, they were able to switch the entire service to native mode. This speaks to the fast innovation and new contributions that are part of the Quarkus open source community project."
msgstr "サービスディスカバリーサービスは、AVIATARが構成するマイクロサービス間の自動ディスカバリーを可能にするために使用されます。これが故障した場合、顧客に大きな影響を与えることになるため、リスクが高いと考えられています。また、このサービスのオリジナルバージョンは、アプリケーションサーバー内の高可用性サービスとして本番環境で稼働しており、多くのクラウドリソースを消費していました。このサービスのQuarkus版は、約3ヶ月間、開発部門でネイティブモードで問題なく稼働しており、2020年1月18日には、アプリケーションサーバー上で稼働しているインスタンスを置き換えるために、本番環境にデプロイされました。また、このQuarkusサービスはMongoDBを使用しており、開発開始時にはMongoDBクライアントのQuarkus拡張機能がなかったため、JVMモードで開始されたことにも言及しておく必要があります。しかし、MongoDBクライアントのQuarkus拡張機能が利用可能になるとすぐに、サービス全体をネイティブモードに切り替えることができました。これは、Quarkusオープンソースコミュニティプロジェクトの一部である、素早いイノベーションと新しい貢献を物語っています。"

#. type: Title ==
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:37
#, fuzzy, no-wrap
msgid "Why not Spring Boot?"
msgstr "なぜSpring Bootではないのか?"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:40
#, fuzzy
msgid "Lufthansa Technik sees Quarkus as a great fit in their journey to running their services in a serverless mode. They have many services that aren’t invoked that often but they still need to have 3 instances of each up and running all the time for high-availability requirements leading to high cloud resource consumption costs. They plan to turn these seldom accessed services to Function-as-a-service calls so that they can be invoked on demand leading to a reduction of cloud. If they were using Spring Boot, it would take too long to boot up, making it prohibitive to use in a serverless mode."
msgstr "Lufthansa Technikは、サービスをサーバーレスモードで実行するためにQuarkusを非常に適していると考えています。Lufthansa Technikでは、それほど頻繁に起動されないサービスを多数保有していますが、高可用性の要件を満たすためには、それぞれのインスタンスを3つずつ常時稼働させておく必要があり、クラウドリソースの消費コストが高くなります。滅多にアクセスされないこれらのサービスをFunction-as-a-serviceコールに変えて、必要に応じて呼び出すことができるようにし、クラウドの削減につなげることを計画しています。Spring Bootを使用していた場合、起動に時間がかかりすぎるため、サーバーレスモードでの使用は不可能でした。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:42
#, fuzzy
msgid "Likewise, they have experienced lower memory and compute cloud resource consumption when using Quarkus - plus its use of GraalVM - and according to Thorsten, _“with Quarkus, they could run 3 times denser deployments without sacrificing availability and response times of services”_, as the denser deployments come from the combination of the two technologies."
msgstr "同様に、QuarkusとGraalVMの使用により、メモリーとコンピュートクラウドリソースの消費量が減少し、Thorsten氏によると、 _「Quarkusを使用することで、サービスの可用性と応答時間を犠牲にすることなく、3倍の密度の高いデプロイメントを実行することができました」_ 。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:44
#, fuzzy
msgid "Their developers are Spring Boot developers with Java EE experience as well, so the learning curve for Quarkus was very small since its syntax and approach was _“close to what our developers are already doing and it’s familiar to them. This is a big benefit”_, Thorsten affirmed."
msgstr "彼らの開発者は、Java EEの経験もあるSpring Bootの開発者であるため、Quarkusの構文とアプローチは _「開発者がすでにやっていることに近く、彼らにとっては馴染みのある_ もの」であったため、Quarkusの学習曲線は非常に小さかったです _。_ これ _は大きなメリットです」と_ Thorsten氏は断言します。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:46
#, fuzzy
msgid "With respect to the recently introduced Spring API compatibility feature in Quarkus, Thorsten said that _“they may use the Spring API compatibility in Quarkus when migrating their current Spring Boot microservices to Quarkus. However, for developing new microservices, they plan to use just the Quarkus APIs directly because it would be awkward to use another API within Quarkus.”_"
msgstr "最近導入されたQuarkusのSpring API互換機能について、Thorsten氏は _「現在のSpring BootマイクロサービスをQuarkusに移行する際に、QuarkusのSpring API互換機能を使用する可能性がある。しかし、新しいマイクロサービスを開発する場合は、Quarkus内で別のAPIを使用するのは厄介なので、QuarkusのAPIだけを直接使用する予定です。\"_"

#. type: Title ==
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:48
#, fuzzy, no-wrap
msgid "The Quarkus Benefits"
msgstr "クオークスのメリット"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:51
#, fuzzy
msgid "Among the many benefits that Quarkus provides to Lufthansa Technik, Thorsten mentioned that _“they could cut cloud resource costs threefold.\"_ And the same goes with OpenShift because of the higher density you can achieve on each core using Quarkus. For example, they had a microservice that was consuming ½ core plus 1 GB of RAM per instance, which required 1.5 cores and 3 GB of RAM when running it in HA on the cloud (3 instances). When using the Quarkus version of the same microservice, its consumption was of 200 millicores plus 200-400 MB of RAM per instance. This translates to 0.6 cores plus 600 MB – 1.2 GB of RAM for an HA deployment of 3 instances of the microservice _“. They could run 3 times denser deployments without sacrificing availability and response times of services”_, Thornsten reiterated. These are the types of optimizations that can only be achieved by the symbiotic combination of Quarkus and GraalVM."
msgstr "QuarkusがLufthansa Technikに提供する多くのメリットの中で、Thorsten氏は _「クラウドリソースのコストを3倍に削減できる」_ と述べています。また、Quarkusを使用することで各コアでより高い密度を実現できるため、OpenShiftでも同じことが言えます。例えば、1インスタンスあたり1/2コア+1GBのRAMを消費するマイクロサービスをクラウド上でHAで実行する場合(3インスタンス)、1.5コア+3GBのRAMを必要としていました。同じマイクロサービスのQuarkusバージョンを使用した場合、その消費量は200ミリコアと1インスタンスあたり200~400MBのRAMでした。これは、マイクロサービスの3つのインスタンスのHAデプロイメントの場合、0.6コアと600MB - 1.2GBのRAMに相当します _。サービスの可用性と応答時間を犠牲にすることなく、3倍の密度の高いデプロイメントを実行することができます」_ とThornsten氏は繰り返し述べています。これらは、QuarkusとGraalVMの共生的な組み合わせによってのみ達成できる最適化のタイプです。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:54
#, fuzzy
msgid "Thorsten also described Quarkus live coding capabilities as a _“really good thing”_. Many of their applications have web-based user interfaces and _“making changes and reloading pages instantaneously is a great feature”_, Thorsten affirmed.  Another benefit, already mentioned earlier, was the small Quarkus learning curve experienced by their developers, who are Spring Boot developers with Java EE experience. What makes this possible is the stack of technologies included in Quarkus, composed of best-of-breed and familiar technologies for Kubernetes-native microservices. Some of the Quarkus extensions used by the AVIATAR developers are: Java Web Token (JWT), JAX-RS, MongoDB client, MicroProfile Rest Client, Keycloak (security), Hibernate ORM (for relational databases), MicroProfile Metrics, and MicroProfile Health Check."
msgstr "Thorsten氏はまた、Quarkusのライブコーディング機能を _「本当に良いこと」_ と表現しています。彼らのアプリケーションの多くはウェブベースのユーザーインターフェースを持っており、 _「ページの変更やリロードを瞬時に行うことができるのは素晴らしい機能です」と_ Thorsten氏は断言しています。先に述べたもう一つの利点は、Java EEの経験を持つSpring Bootの開発者がQuarkusの学習曲線を小さくしたことです。これを可能にしているのは、Quarkusに含まれるテクノロジーのスタックであり、Kubernetesネイティブマイクロサービスのためのベストオブブリードとおなじみのテクノロジーで構成されています。AVIATARの開発者が使用しているQuarkusの拡張機能の一部を紹介します。Java Web Token (JWT)、JAX-RS、MongoDBクライアント、MicroProfile Rest Client、Keycloak (セキュリティー)、Hibernate ORM (リレーショナルデータベース用)、MicroProfile Metrics、MicroProfile Health Checkです。"

#. type: Title ==
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:55
#, fuzzy, no-wrap
msgid "Looking into the future"
msgstr "将来を見据えて"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:58
#, fuzzy
msgid "They plan to use Quarkus for the development of new services per the guidance of their Technology Council. In general, for new services they’d like to first work on the ones that are low or no risk to customers. They also plan to upgrade their Service Discovery service to Quarkus v1.x and deploy it to production, which actually took place on January 18, 2020. Lastly, they will use the Quarkus APIs directly and for migrating Spring Boot services to Quarkus, they may leverage the Quarkus Spring API compatibility feature."
msgstr "同社では、技術協議会のガイダンスに従って、新しいサービスの開発にQuarkusを使用することを計画しています。一般的に、新しいサービスについては、まず、顧客にとってリスクが低い、または全くないものを開発したいと考えています。また、サービスディスカバリーサービスをQuarkus v1.xにアップグレードし、本番環境にデプロイすることを計画しており、実際には2020年1月18日に実施されました。最後に、Quarkus APIを直接使用し、Spring BootサービスをQuarkusに移行するために、QuarkusのSpring API互換機能を活用する可能性があるとのことです。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:60
#, fuzzy
msgid "They look forward to continuing to optimize their cloud resource consumption by using the Quarkus stack in their services."
msgstr "今後もQuarkusのスタックをサービスに使用して、クラウドリソースの消費を最適化していくことを期待しています。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:62
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "クオークスの詳細についてはこちらをご覧ください。"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:64
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "クオークスのウェブサイト: http://quarkus.io"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:65
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Quarkus GitHub プロジェクト: https://github.com/quarkusio/quarkus"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:66
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "クオークス ツイッター: https://twitter.com/QuarkusIO"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:67
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Quarkus chat: https://quarkusio.zulipchat.com/"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:68
#, fuzzy
msgid "Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkusメーリングリスト: https://groups.google.com/forum/#!forum/quarkus-dev"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:69
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[クオークスYouTubeチャンネル]"

#. type: Plain text
#: upstream/_posts/2020-02-17-aviatar-experiences-significant-savings.adoc:69
#, fuzzy
msgid "https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr "link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-f19180cs-201909-en.pdf[Quarkusを使う4つの理由]"

#, fuzzy
#~ msgid "---\n"
#~ msgstr "---\n"

#, fuzzy
#~ msgid ""
#~ "layout: post\n"
#~ "title: Lufthansa Technik AVIATAR experiences significant cloud resources savings by moving to Kubernetes-native Quarkus\n"
#~ "date: 2020-02-17\n"
#~ "tags: user-story\n"
#~ "author: cesarsaavedra\n"
#~ "---\n"
#~ msgstr ""
#~ "layout: post\n"
#~ "title: Lufthansa Technik AVIATAR、KubernetesネイティブのQuarkusへの移行によりクラウドリソースの大幅な節約を実現\n"
#~ "date: 2020-02-17\n"
#~ "tags: user-story\n"
#~ "author: cesarsaavedra\n"
#~ "---\n"
