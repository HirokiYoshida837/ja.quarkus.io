# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:1
#, no-wrap, fuzzy
msgid "---\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:8
#, no-wrap, fuzzy
msgid ""
"layout: post\n"
"title: Micrometer is recommended for metrics with Quarkus 1.9\n"
"date: 2020-10-19\n"
"tags: metrics announcement micrometer\n"
"synopsis: Micrometer is the recommended approach for metrics with Quarkus.\n"
"author: kenfinnigan\n"
"---\n"
msgstr ""
"layout: post\n"
"title: マイクロメータは、Quarkus 1.9を使用したメトリクスに推奨されています。\n"
"date: 2020-10-19\n"
"tags: metrics announcement micrometer\n"
"synopsis: マイクロメーターは、Quarkusを使用したメトリクスに推奨されるアプローチです。\n"
"author: kenfinnigan\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:13
#, fuzzy
msgid ""
"Though Quarkus offers extensions for MicroProfile, including metrics, we're "
"now recommending the use of the Micrometer extension for metrics in Quarkus "
"with the release of 1.9."
msgstr ""
"Quarkusはメトリクスを含むMicroProfile用の拡張機能を提供していますが、1."
"9のリリースでは、Quarkusのメトリクス用にMicrometer拡張機能の使用を推奨しています。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:14
#, no-wrap, fuzzy
msgid "Brief MicroProfile Metrics History"
msgstr "MicroProfileのメトリクスの歴史"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:19
#, fuzzy
msgid ""
"During the creation of the MicroProfile Metrics specification in 2017, "
"Dropwizard Metrics was the most popular metrics library at that time.  It "
"was a natural fit for MicroProfile to use DropWizard Metrics as inspiration "
"for a metrics specification."
msgstr ""
"2017年のMicroProfile Metrics仕様の作成中、Dropwizard "
"Metricsは当時最も人気のあるメトリクスライブラリでした。MicroProfile が DropWizard Metrics "
"をメトリクス仕様のインスピレーションとして使用するのは自然な流れでした。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:22
#, fuzzy
msgid ""
"The monitoring ecosystem for cloud environments has evolved considerably "
"since then, and that has prompted a re-evaluation of how we approach working "
"with metrics."
msgstr "それ以来、クラウド環境の監視エコシステムは大幅に進化しており、それに伴い、メトリクスの使用方法の再評価が行われています。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:24
#, no-wrap, fuzzy
msgid "Why Micrometer?"
msgstr "なぜマイクロメーターなのか？"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:30
#, fuzzy
msgid ""
"During the last 3-4 years, there's been a growing focus on the needs of Site "
"Reliability Engineers (SREs) in monitoring the operations of many varied "
"services.  This focus leads to driving simplicity and ease of use to the SRE "
"world.  We don't want make the life of an SRE harder!"
msgstr ""
"ここ3～4年の間に、サイト信頼性エンジニア（SRE）のニーズは、様々なサービスの運用を監視する上で、ますます注目されるようになってきました。この焦点は、SREの世界にシンプルさと使いやすさをもたらすことにつながっています。私たちは、SREの生活を困難にしたくありません。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:35
#, fuzzy
msgid ""
"The design and development of Micrometer focused on the needs of SREs from "
"the very beginning.  A key aspect to that approach is separating out the "
"metric implementation into the registries, enabling different registries to "
"customize how the metric export, aligning with a specific monitoring tool."
msgstr ""
"マイクロメーターの設計と開発は、当初からSREのニーズに焦点を当てていました。このアプローチの重要な側面は、メトリックの実装をレジストリに分離することで、異なるレジストリがメトリックのエクスポート方法をカスタマイズし、特定のモニタリングツールに合わせて調整できるようにしています。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:41
#, fuzzy
msgid ""
"Micrometer was built to adapt to the changing cloud native landscape while "
"presenting a steady API for applications and libraries to use.  Each "
"MeterRegistry implementation encapsulates its specific aggregation and "
"reporting requirements.  There are MeterRegistry implementations available "
"for cloud monitoring systems like Prometheus and Statsd, as well as service "
"providers like Datadog, New Relic or Stackdriver.  You can include more than "
"one of these registries at the same time, too."
msgstr ""
"マイクロメータは、アプリケーションやライブラリが使用できる安定したAPIを提供しながら、変化するクラウドネイティブの状況に適応するように構築されています。各MeterRegistryの実装は、その固有の集計とレポート要件をカプセル化しています。Prometheus "
"や Statsd のようなクラウドモニタリングシステムや、Datadog、New Relic、Stackdriver "
"のようなサービスプロバイダで利用できる MeterRegistry の実装があります。これらのレジストリを同時に複数含めることもできます。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:46
#, fuzzy
msgid ""
"While Micrometer has an API for applications to use, practical usage is more "
"focused on the MeterBinder abstraction.  MeterBinders allow instrumentation "
"for application libraries to be added later.  It is even better when your "
"application framework can register discovered MeterBinders on your behalf."
msgstr ""
"マイクロメーターにはアプリケーションで使用するためのAPIがありますが、実用的な使用法はMeterBinderの抽象化に重点が置かれています。MeterBinderを使うことで、アプリケーションライブラリのインストルメンテーションを後から追加することができます。アプリケーションフレームワークが発見したMeterBinderを代行して登録してくれるとさらに良いですね。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:52
#, fuzzy
msgid ""
"Micrometer does follow different naming conventions than Dropwizard or MP "
"Metrics, for a few reasons.  First, it uses a dot notation for all metric "
"names, e.g. my.metric.name.  Each registry implementation can then apply its "
"own naming convention to convert that name into something that matches its "
"convention.  The Prometheus MeterRegistry converts my.metric.name into "
"my_metric_name, for example.  Second, Micrometer was built around the notion "
"of dimensional metrics, rather than adapting to it later."
msgstr ""
"マイクロメーターは、いくつかの理由から、DropwizardやMP "
"Metricsとは異なる命名規則に従っています。まず、すべてのメトリック名にドット表記を使用しています。各レジストリの実装は、独自の命名規則を適用して、その名前をその規則に一致するものに変換することができます。例えば、Prometheus "
"MeterRegistryはmy.metric."
"nameをmy_metric_nameに変換します。第二に、マイクロメータは次元メトリックの概念を基にして作られたものであり、後からそれを適用するのではありません。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:57
#, fuzzy
msgid ""
"Another benefit to using Micrometer is its usage in the wider Java ecosystem."
"  Spring Boot and Micronaut both use Micrometer, amongst others.  In an "
"environment where SREs are monitoring instances of different Java "
"frameworks, having them all produce metrics with the same names and "
"dimensions is incredibly beneficial."
msgstr ""
"マイクロメータを使うもう一つの利点は、より広いJavaエコシステムで使われていることです。Spring Boot と Micronaut の両方が "
"Micrometer を使用しています。SRE が異なる Java "
"フレームワークのインスタンスを監視している環境では、同じ名前とディメンションのメトリクスをすべて生成できることは非常に有益です。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:59
#, fuzzy
msgid "For example, we likely have a metric for an HTTP endpoint like below:"
msgstr "例えば、以下のような HTTP エンドポイントのメトリックがあるとします。"

#. type: delimited block -
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:64
#, no-wrap
msgid ""
"http_server_requests{method=\"GET\", uri=\"/hello\", status=\"200\", outcome="
"\"SUCCESS\"}\n"
"http_server_requests{method=\"GET\", uri=\"/hello\", status=\"500\", outcome="
"\"SERVER_ERROR\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:70
#, fuzzy
msgid ""
"With Quarkus, the Micrometer extension emits the same HTTP endpoint metric "
"irrespective of whether it was created by JAX-RS, Vert.x, or Undertow "
"without the developer needing to add anything to their code.  The only "
"effort required is to activate metrics."
msgstr ""
"Quarkusを使用すると、JAX-RS、Vert."
"x、Undertowのいずれで作成されたかに関係なく、Micrometer拡張機能が同じHTTPエンドポイントメトリックを出力します。必要な作業は、メトリクスを有効化することだけです。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:73
#, fuzzy
msgid ""
"The http metrics emitted by the Micrometer extension is the also same as "
"what is emitted by Spring Boot and Micronaut, allowing SREs to work with "
"aggregated http metrics regardless of which Java framework is used."
msgstr ""
"Micrometer 拡張機能によって放出される http メトリクスは、Spring Boot や Micronaut "
"によって放出されるものと同じで、どの Java フレームワークが使われているかに関係なく、SREs は集約された http "
"メトリクスを使って作業することができます。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:74
#, no-wrap, fuzzy
msgid "Can I still use MicroProfile Metrics?"
msgstr "MicroProfile Metrics はまだ使えますか？"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:80
#, fuzzy
msgid ""
"The MicroProfile Metrics extension, `quarkus-smallrye-metrics`, is still "
"available and usable by applications.  For all the reasons outlined in <<why-"
"micrometer>>, Quarkus no longer recommends applications use the extension."
msgstr ""
"MicroProfile Metricsエクステンション（ `quarkus-smallrye-metrics` "
"）は、まだ利用可能で、アプリケーションで使用できます。 link:#why-micrometer[why-"
"micrometer]]で説明したすべての理由により、Quarkusではこの拡張機能の使用をアプリケーションに推奨していません。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:84
#, fuzzy
msgid ""
"In the short to medium term, we will be working with the MicroProfile "
"Metrics community to evolve the specification to be aligned with Micrometer. "
" What that means for the specification is not likely to be known until some "
"time in 2021."
msgstr ""
"短中期的には、MicroProfile "
"Metricsコミュニティと協力して、仕様をMicrorometerに合わせて進化させていく予定です。それが仕様にとって何を意味するかは、2021年のある時期まではわからないでしょう。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:89
#, fuzzy
msgid ""
"For those that prefer to retain compatibility with MicroProfile Metrics, "
"despite the problems discussed in <<why-micrometer>>, that will remain "
"possible, but at the discretion of application developers to make the "
"informed choice."
msgstr ""
"link:#why-micrometer[why-micrometer]] で議論されている問題にもかかわらず、MicroProfile Metrics "
"との互換性を維持したい場合、それは可能なままですが、アプリケーション開発者が情報に基づいた選択をするかどうかの裁量に委ねられます。"

#. type: Title ==
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:90
#, no-wrap, fuzzy
msgid "Summary"
msgstr "概要"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:96
#, fuzzy
msgid ""
"Since 1.8 Quarkus offered two extensions for metrics, `quarkus-micrometer` "
"and `quarkus-smallrye-metrics`.  With the release of 1.9, Quarkus will be "
"recommending `quarkus-micrometer` for use with metrics."
msgstr ""
"1.8以降、Quarkusはメトリクスのために、 `quarkus-micrometer` と `quarkus-smallrye-metrics` "
"の2つの拡張機能を提供していました。1.9のリリースでは、Quarkusはメトリクスで使用するために `quarkus-micrometer` "
"を推奨します。"

#. type: Plain text
#: upstream/_posts/2020-10-19-micrometer-metrics.adoc:99
#, fuzzy
msgid ""
"Come play with the extension, we love it for many reasons and hope you will "
"too.  Reach out if you have any issues using the Micrometer extension in "
"Quarkus!"
msgstr ""
"このエクステンションを使って遊んでみてください。Quarkusでマイクロメーターエクステンションを使用していて何か問題があれば、お問い合わせください。"
