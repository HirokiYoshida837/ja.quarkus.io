# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:1
#, no-wrap, fuzzy
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:7
#, no-wrap, fuzzy
msgid ""
"layout: post\n"
"title: Why did Payair Technologies switch to Quarkus?\n"
"date: 2020-04-08\n"
"tags: user-story\n"
"author: hubertlewandowski\n"
"---\n"
msgstr ""
"layout: post\n"
"title: ペイアイル・テクノロジーズがQuarkusに乗り換えた理由は？\n"
"date: 2020-04-08\n"
"tags: user-story\n"
"author: hubertlewandowski\n"
"---\n"

#. type: Title =
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:10
#, no-wrap, fuzzy
msgid "Why did Payair Technologies switch to Quarkus?"
msgstr "ペイアイル・テクノロジーズがQuarkusに乗り換えた理由は？"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:14
#, fuzzy
msgid "image:payair_logo_rgb.png[Payair Logo]"
msgstr "image:payair_logo_rgb.png[alt=Payair Logo]"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:17
#, fuzzy
msgid ""
"Developing cloud-ready solutions has become an industry standard, especially "
"in the enterprise world. Sooner or later your application has to face the "
"problem of poor horizontal scalability or high memory usage and we all know "
"it is better to be prepared."
msgstr ""
"クラウド対応ソリューションの開発は、特にエンタープライズの世界では業界標準となっています。遅かれ早かれ、アプリケーションは水平方向のスケーラビリティの低さやメモリ使用量の多さといった問題に直面しなければなりません。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:19
#, fuzzy
msgid ""
"We understand this at https://www.payair.com[Payair] as well. When we faced "
"the challenge of preparing the backend to our mobile payment app, we decided "
"to use frameworks supporting a serverless approach as much as possible. One "
"of these was Quarkus."
msgstr ""
"link:https://www.payair."
"com[Payair]でもこのことを理解しています。モバイル決済アプリのバックエンドを準備するという課題に直面したとき、可能な限りサーバーレスのアプローチをサポートするフレームワークを使用することにしました。その一つがQuarkusでした。"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:20
#, no-wrap, fuzzy
msgid "Supersonic Subatomic Java"
msgstr "超音速素粒子Java"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:23
#, fuzzy
msgid "As creators of the framework are describing it, Quarkus is:"
msgstr "フレームワークのクリエイターが説明しているように、Quarkusは"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:25
#, fuzzy
msgid ""
"A Kubernetes native Java stack tailored for OpenJDK HotSpot and GraalVM, "
"crafted from the best of breed Java libraries and standards."
msgstr ""
"OpenJDK "
"HotSpotとGraalVM用に調整されたKubernetesネイティブJavaスタックで、最高のJavaライブラリと標準から作られています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:27
#, fuzzy
msgid ""
"On the Quarkus website you can find information that it has been designed "
"around \"container first\" philosophy, meaning that it is optimized for fast "
"boot times and low memory usage. As a result, we should gain near instant "
"scale-up and high-density memory utilization in container orchestration "
"platforms."
msgstr ""
"Quarkusのウェブサイトでは、「コンテナファースト」の哲学、つまり高速な起動時間と低メモリ使用量に最適化されているという情報を見つけることができます。その結果、コンテナオーケストレーションプラットフォームでは、ほぼ瞬時にスケールアップと高密度のメモリ使用率を得ることができるようになります。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:29
#, fuzzy
msgid "The way this has been achieved can be summarized as follows:"
msgstr "これを実現した方法は、以下のようにまとめることができます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:31
#, no-wrap, fuzzy
msgid ""
"*Build time metadata processing.* As much processing as possible is moved "
"into the build process e.g. all of the classes required to perform initial "
"application deployment are used and dropped while building. They are not "
"loaded into final JARs (and JVMs) or native executables. You can say that "
"the framework is tailor-made for you every time you press a build button, "
"without compromising the effectiveness of a declarative approach.\n"
msgstr ""
"*ビルド時のメタデータ処理。*例えば、初期アプリケーションのデプロイに必要なクラスはすべて使用され、ビルド中に削除されます。それらは最終的な JAR "
"(と JVM) "
"やネイティブの実行ファイルにロードされません。宣言的アプローチの有効性を損なうことなく、ビルドボタンを押すたびに、フレームワークはあなたのためにオーダーメイドされていると言うことができます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:33
#, no-wrap, fuzzy
msgid ""
"*Reduction in reflection usage.* Considering the point above, the resulting "
"application contains only direct invocations. All of the fields, methods and "
"classes that are not being called directly are purposefully removed. The "
"same applies to dependencies as well. There is a way to include such calls "
"(register them for reflection), but Quarkus will gently warn you that you "
"may be deflecting from the real purpose of the framework.\n"
msgstr ""
"*リフレクションの使用量を削減します。*上記の点を考慮すると、結果として得られるアプリケーションには直接呼び出ししか含まれていません。直接呼び出されないフィールド、メソッド、クラスはすべて意図的に削除されます。依存関係も同様です。このような呼び出しを含める（リフレクションのためにそれらを登録する）方法もありますが、フレームワークの本当の目的から逸脱しているかもしれないとQuarkusは優しく警告してくれます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:35
#, no-wrap, fuzzy
msgid ""
"*Native image pre-boot.* Quarkus supports native executables that can be run "
"with GraalVM. Actually, the creators of Quarkus state that the framework was "
"designed to be run as a native image. The ahead-of-time compilation reduces "
"the need of dynamic scanning and loading classes into a JVM.\n"
msgstr ""
"*ネイティブイメージのプリブート。*QuarkusはGraalVMで実行できるネイティブ実行ファイルをサポートしています。実際、Quarkusの作成者は、フレームワークはネイティブイメージとして実行できるように設計されていると述べています。先行コンパイルにより、動的なスキャンやJVMへのクラスのロードの必要性が軽減されます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:37
#, no-wrap, fuzzy
msgid ""
"*GraalVM.* GraalVM is a native code generator which will compile your "
"project into an executable that can be run without the JVM. You can read "
"more about this superb project here: https://www.graalvm.org.\n"
msgstr ""
"*GraalVM."
"*GraalVMは、あなたのプロジェクトをJVMなしで実行可能な実行ファイルにコンパイルするネイティブコードジェネレータです。この素晴らしいプロジェクトについての詳細は "
"https://www.graalvm.org  を参照してください。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:39
#, fuzzy
msgid ""
"Below you can see a comparison of memory usage and boot time of sample "
"applications:"
msgstr "以下では、サンプルアプリケーションのメモリ使用量と起動時間の比較をご覧いただけます。"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:40
#, no-wrap, fuzzy
msgid "Performance Chart"
msgstr "パフォーマンスチャート"

#. type: Target for macro image
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:40
#, no-wrap
msgid "perf_black.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:42
#, fuzzy
msgid "source: https://quarkus.io"
msgstr "ソース： https://quarkus.io"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:43
#, no-wrap, fuzzy
msgid "Evolution, not revolution"
msgstr "革命ではなく進化"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:46
#, fuzzy
msgid ""
"What is interesting about this framework is that it is not revolutionary. "
"Since some of Payair’s developers had mainly Spring experience, we were "
"concerned that it would be difficult for them to “switch sides”. It turned "
"out that our fear of the unknown was completely unfounded. Quarkus leverages "
"some good old Jakarta EE standards that all Java developers are familiar "
"with. We did not have to learn a bunch of new APIs that are advertised as "
"\"the best way to create REST endpoint\" or \"reinvented database access\". "
"Instead, Quarkus uses Context Dependency Injection for beans, JAX-RS for "
"RESTful web services, JPA for database access and many others."
msgstr ""
"このフレームワークで面白いのは、革命的ではないということです。Payairの開発者の中には主にSpringの経験を持っている人もいたので、彼らが\"乗り換える\"のは難しいのではないかと心配していました。しかし、私たちの未知への不安は全くの杞憂であったことがわかりました。Quarkusは、Java開発者なら誰もがよく知っている古き良きジャカルタEE標準を活用しています。RESTエンドポイントを作成するための最良の方法」や「データベースアクセスの再発明」として宣伝されている新しいAPIの束を学ぶ必要はありませんでした。その代わりに、Quarkusは、ビーンズにはContext "
"Dependency Injection、RESTfulなウェブサービスにはJAX-"
"RS、データベースアクセスにはJPA、その他多くのものを使用しています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:48
#, fuzzy
msgid ""
"On top of that, Quarkus extends available Jakarta EE functionalities "
"responding to modern world developers' demands. These are called Quarkus "
"extensions and, to name a few, they contain support for reactive programming "
"(but using the declarative approach), event messaging, etc."
msgstr ""
"その上で、Quarkusは、現代の世界の開発者の要求に応えて、利用可能なJakarta "
"EEの機能を拡張しています。これらはQuarkusのエクステンションと呼ばれ、リアクティブプログラミング（ただし宣言的アプローチを使用）、イベントメッセージングなどのサポートが含まれています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:50
#, fuzzy
msgid ""
"Apart from a wide variety of available extensions, there is also a way to "
"create your own, based on the library of your choice. Keep in mind though, "
"that if you want to preserve those drastic optimizations that Quarkus "
"offers, you will have to apply them manually to your extension as well."
msgstr ""
"さまざまな種類のエクステンションが用意されていますが、好みのライブラリに基づいて独自のエクステンションを作成する方法もあります。ただし、Quarkusが提供する抜本的な最適化を維持したい場合は、エクステンションにも手動で適用する必要があることを覚えておいてください。"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:51
#, no-wrap, fuzzy
msgid "Shout-out to MicroProfile"
msgstr "MicroProfileへの感謝の意を込めて"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:54
#, fuzzy
msgid ""
"I would like to stop here for a second and give a big shout-out to the "
"Eclipse MicroProfile initiative. It specifies a collection of APIs and "
"technologies to form a baseline for quick and effective enterprise Java "
"microservices creation. The goal of MicroProfile is to define a "
"specification for building microservices and deliver portable applications "
"across multiple runtime implementations."
msgstr ""
"ここでちょっと立ち止まって、Eclipse "
"MicroProfileの取り組みに大きな拍手を送りたいと思います。これは、迅速かつ効果的なエンタープライズJavaマイクロサービス作成のためのベースラインを形成するためのAPIと技術のコレクションを規定している。MicroProfileの目標は、マイクロサービスを構築し、複数のランタイム実装でポータブルなアプリケーションを提供するための仕様を定義することです。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:56
#, fuzzy
msgid ""
"Optimizing enterprise Java for a microservice architecture is a challenging "
"task and, in my opinion, MicroProfile handles it pretty well. As a long term "
"Spring developer I realized that Spring is slowly becoming the very thing it "
"swore to destroy. The initial premises of Spring (which basically can be "
"summed up as a lightweight alternative to Jakarta EE) are way past the "
"expiry date now. Spring is the undisputed heavyweight champion that can "
"handle everything you imagine but is not your best option for fast and light "
"services. And that applies to Spring Boot as well."
msgstr ""
"エンタープライズJavaをマイクロサービスアーキテクチャ向けに最適化するのは難しい作業だが、MicroProfileはそれをうまく処理していると思う。長い間Springを開発してきた私は、Springが破壊することを誓っていたものそのものが、Springに徐々に変わってきていることに気付いた。Springの初期の前提（基本的にはJakarta "
"EEの軽量な代替として要約することができます）は、今では賞味期限をはるかに過ぎています。Springは、あなたが想像するすべてのものを処理することができ、議論の余地のないヘビー級チャンピオンですが、高速で軽量なサービスのための最良の選択肢ではありません。そしてそれはSpring "
"Bootにも当てはまります。"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:57
#, no-wrap, fuzzy
msgid "Developer joy"
msgstr "開発者の喜び"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:60
#, fuzzy
msgid ""
"It is worth mentioning how the development process of Quarkus application "
"looks. First of all, you are not forced to use native images from day one. "
"Normal JVM builds are still available. Resulting JARs are not as fast as "
"native images, but still faster than your normal enterprise applications."
msgstr ""
"Quarkusアプリの開発過程がどのようになっているかは、特筆すべき点です。まず、初日からネイティブイメージの使用を強制されることはありません。通常のJVMビルドはまだ利用可能です。結果として得られるJARはネイティブイメージほどではありませんが、それでも通常のエンタープライズアプリケーションよりは高速です。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:62
#, fuzzy
msgid ""
"This leads us to the most important thing: dev mode. The special Maven "
"plugin allows you to quickly reload classes while you are editing them, "
"leaving an impression of hot deployment. Changing the functionality and "
"testing it right away without further ado is a real joy. No more distracting "
"builds and endless context switching. Pure development mode, hence the name "
"of the plugin."
msgstr ""
"これは最も重要なことにつながります: "
"デバッグモードです。特別なMavenプラグインを使うと、編集中にクラスを素早くリロードして、ホットデプロイの印象を残すことができます。機能を変更してすぐにテストできるのは、本当に楽しいことです。気が散るビルドや無限のコンテキスト切り替えはもうありません。純粋な開発モード、それがプラグインの名前の由来です。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:64
#, fuzzy
msgid ""
"There is one more benefit of a quick startup time. Writing RESTful "
"applications requires significant amount of integration tests on the API "
"level. With Quarkus on board, running them gives a unit-test-smoothness "
"feeling and if you are even a slight fan of TDD, you will appreciate the "
"difference."
msgstr ""
"起動時間が早いというメリットがもう一つあります。RESTfulアプリケーションを書くには、APIレベルでかなりの量の統合テストが必要です。Quarkusをボード上で実行することで、ユニットテストのスムーズさが実感できます。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:66
#, fuzzy
msgid ""
"One of my personal concerns when switching from Spring to something based on "
"Jakarta EE was lack of Spring Data JPA. I really like the mix of simplicity "
"and functionality this module provides. But it turned out that Quarkus has "
"my back on this one as well. There is an extension called Hibernate ORM with "
"Panache. It is a layer on top of Hibernate ORM which focuses on simplifying "
"ORM to the maximum without compromising the actual power that ORM gives. "
"Panache has managed to find a sweet spot of making it trivial to work with "
"simple entities without giving up possibilities for handling complicated use "
"case scenarios. Bravo to Panache and adios to Spring Data!"
msgstr ""
"SpringからJakarta EEをベースにしたものに切り替える際に個人的に懸念していたことの一つは、Spring Data "
"JPAの不足でした。私はこのモジュールが提供するシンプルさと機能性のミックスがとても気に入っています。しかし、Quarkusはこの点でも私を支持してくれていることがわかりました。Hibernate "
"ORM with Panacheというエクステンションがあります。これはHibernate "
"ORMの上にあるレイヤーで、ORMが与える実際のパワーを損なうことなくORMを最大限に単純化することに焦点を当てています。Panacheは、複雑なユースケースシナリオを扱う可能性を諦めることなく、単純なエンティティを扱うことを容易にするというスイートスポットを見つけることに成功しました。Panacheにブラボーを、そしてSpring "
"Dataにサヨナラを!"

#. type: Title ==
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:67
#, no-wrap, fuzzy
msgid "Simplified maintenance?"
msgstr "簡易メンテナンス？"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:70
#, fuzzy
msgid ""
"We are yet to implement the first release of Payair’s Quarkus application "
"into our production environment. Based on our experiences from lower level "
"environments, we just cannot wait for it! CI/CD is no more complex than with "
"any other framework. We only needed vigilance while setting up native build "
"scripts. The differences between JVM and GraalVM runtimes are negligible. "
"Moreover, our initial performance tests are looking very promising."
msgstr ""
"PayairのQuarkusアプリケーションの最初のリリースを本番環境に実装するには、まだ時間がかかります。低レベルの環境での経験に基づいて、私たちはそれを待つことができません。CI/"
"CDは、他のどのフレームワークよりも複雑ではありません。私たちが必要としたのは、ネイティブビルドスクリプトを設定している間だけでした。JVMとGraalVMのランタイムの違いはごくわずかです。さらに、初期のパフォーマンステストでは、非常に有望な結果が出ています。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:72
#, fuzzy
msgid ""
"On the other hand Payair has many demanding customers who happen to be "
"financial institutions. Throughout the years we have learned that they "
"expect global reach, high performance and high availability from our "
"products. Our solutions must be thoroughly tested, reliable and bulletproof. "
"We are in an industry that is very risk averse and although we are aware "
"that others are already using Quarkus in production (https://quarkus.io/blog/"
"tag/user-story), we need to verify this for ourselves since the framework is "
"still considered a new player on the market."
msgstr ""
"一方、Payairには、金融機関をはじめとする多くの要求の厳しい顧客がいます。私たちは長年の間に、彼らが私たちの製品にグローバルなリーチ、高性能、高可用性を期待していることを学びました。私たちのソリューションは、徹底的にテストされ、信頼性が高く、防弾性のあるものでなければなりません。私たちはリスクを非常に嫌う業界にいますが、他の企業がすでにQuarkusを使用していることを認識していますが "
"https://quarkus.io/blog/tag/user-story "
"）、フレームワークはまだ市場では新しいプレーヤーと考えられているため、私たち自身でこれを検証する必要があります。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:74
#, fuzzy
msgid ""
"The next step is to push our Quarkus implementation to the limits to see how "
"it behaves under a real and heavy load. For now we believe that everything "
"will work even better than we could have anticipated. We will let you know "
"how it went."
msgstr ""
"次のステップは、Quarkusの実装を限界まで押し上げて、実際の重い負荷の下でどのように動作するかを確認することです。今のところは、すべてが予想以上にうまくいくと信じています。その様子はまたお知らせします。"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:76
#, fuzzy
msgid ""
"For more information about Payair Technologies please visit our website: "
"https://www.payair.com"
msgstr "Payair Technologiesの詳細については、当社のウェブサイトをご覧ください: https://www.payair.com"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:78
#, fuzzy
msgid "For more information on Quarkus:"
msgstr "クオークスの詳細はこちら"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:80
#, fuzzy
msgid "Quarkus website: http://quarkus.io"
msgstr "クオークスのウェブサイト： http://quarkus.io"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:81
#, fuzzy
msgid "Quarkus GitHub project: https://github.com/quarkusio/quarkus"
msgstr "Quarkus GitHubプロジェクト： https://github.com/quarkusio/quarkus"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:82
#, fuzzy
msgid "Quarkus Twitter: https://twitter.com/QuarkusIO"
msgstr "クオークス ツイッター： https://twitter.com/QuarkusIO"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:83
#, fuzzy
msgid "Quarkus chat: https://quarkusio.zulipchat.com/"
msgstr "Quarkus chat: https://quarkusio.zulipchat.com/"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:84
#, fuzzy
msgid ""
"Quarkus mailing list: https://groups.google.com/forum/#!forum/quarkus-dev"
msgstr "Quarkusメーリングリスト: https://groups.google.com/forum/#!forum/quarkus-dev"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:85
#, fuzzy
msgid "https://youtube.com/quarkusio[Quarkus YouTube Channel]"
msgstr "link:https://youtube.com/quarkusio[クオークスYouTubeチャンネル]"

#. type: Plain text
#: upstream/_posts/2020-04-08-why-did-payair-technologies-switch-to-quarkus.adoc:85
#, fuzzy
msgid ""
"https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-checklist-"
"f19180cs-201909-en.pdf[Four reasons to use Quarkus]"
msgstr ""
"link:https://www.redhat.com/cms/managed-files/cl-4-reasons-try-quarkus-"
"checklist-f19180cs-201909-en.pdf[Quarkusを使う4つの理由]"
