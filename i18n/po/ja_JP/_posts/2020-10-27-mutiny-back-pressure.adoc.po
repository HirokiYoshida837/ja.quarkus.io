# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:09+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:1
#, no-wrap, fuzzy
msgid "---\n"
msgstr "---\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:8
#, no-wrap, fuzzy
msgid ""
"layout: post\n"
"title: Mutiny - Flow control and Back-pressure \n"
"date: 2020-10-27\n"
"tags: reactive mutiny streams\n"
"synopsis: How does flow control works with Mutiny\n"
"author: cescoffier\n"
"---\n"
msgstr ""
"layout: post\n"
"title: 反乱 - 流量制御と背圧\n"
"date: 2020-10-27\n"
"tags: reactive mutiny streams\n"
"synopsis: Mutinyでフローコントロールはどのように機能するのか\n"
"author: cescoffier\n"
"---\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:13
#, fuzzy
msgid ""
"Reactive Programming offers an elegant, flexible, and powerful way to write "
"asynchronous code.  It supports failure handling, both sequential and "
"parallel operation composition, and plenty of operators.  Reactive "
"programming promotes data streams as a primary construct, and your code is "
"observing streams and reacting to signals."
msgstr ""
"リアクティブプログラミングは、非同期コードを書くためのエレガントで柔軟性があり、強力な方法を提供します。障害処理、シーケンシャルとパラレルの両方の演算子、そして多くの演算子をサポートしています。リアクティブプログラミングはデータストリームを主要な構成要素とし、コードはストリームを観測してシグナルに反応します。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:14
#, no-wrap, fuzzy
msgid ""
"Origins of back-pressure (https://impurepics.com/posts/2018-05-26-"
"backpressure-origins.html)   "
msgstr ""
"背圧の起源 https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Positional ($1) AttributeList argument for macro 'image'
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15 upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27 upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, no-wrap, fuzzy
msgid "800"
msgstr "800"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:15
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-origin.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:19
#, fuzzy
msgid ""
"However, using data streams as primary constructs does not come without some "
"issues.  One of the main problems is the need for flow control."
msgstr ""
"しかし、データストリームを主構成要素として使用することには、いくつかの問題がないわけではありません。主な問題の一つは、フロー制御の必要性です。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:21
#, fuzzy
msgid "## The producer/consumer problem"
msgstr "生産者・消費者の問題"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:25
#, fuzzy
msgid ""
"Let's imagine a fast producer and a slow consumer.  The producer sends "
"events too quickly for the consumer that can't keep up.  That phenomenon is "
"remarkably well illustrated in the following picture."
msgstr ""
"速い生産者と遅い消費者を想像してみましょう。生産者は、追いつけない消費者に対して、あまりにも早くイベントを送ってしまいます。その現象は、次の図に驚くほどよく表れています。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:26
#, no-wrap, fuzzy
msgid ""
"No Back-Pressure (https://impurepics.com/posts/2018-05-26-backpressure-"
"origins.html)"
msgstr ""
"背中を押さない https://impurepics.com/posts/2018-05-26-backpressure-origins.html"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:27
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-no.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:31
#, fuzzy
msgid ""
"Let's see some code.  Imagine a producer emitting an event every ten "
"milliseconds, while the consumer can only consume one per second."
msgstr "いくつかのコードを見てみましょう。生産者が10ミリ秒ごとにイベントを出し、消費者は1秒に1回しか消費できないと想像してみてください。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:41
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BackPressureExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:44
#, fuzzy
msgid ""
"If you run that code, you will see that the subscriber gets a "
"`MissingBackPressureFailure,` indicating that the downstream cannot keep up:"
msgstr ""
"そのコードを実行すると、購読者はダウンストリームが追いつけないことを示す `MissingBackPressureFailure,` "
"を取得することがわかります。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:49
#, no-wrap
msgid ""
"Got item: 0\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Could not "
"emit tick 16 due to lack of requests\n"
msgstr ""

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:52
#, no-wrap, fuzzy
msgid "emitOn"
msgstr "エミットオン"

#. type: delimited block =
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:57
#, fuzzy
msgid ""
"In the previous code, you may wonder about the `emitOn.` It's a Mutiny "
"operator allowing controlling on which thread the Subscriber receives the "
"events.  Back-pressure is often required when multiple threads are involved, "
"as in a single thread approach, blocking the thread would block the source, "
"which may have dramatic consequences."
msgstr ""
"前のコードでは、 `emitOn.` どのスレッドでサブスクライバがイベントを受信するかを制御することができる Mutiny "
"演算子です。複数のスレッドが関与している場合、シングルスレッドのアプローチでは、スレッドをブロックするとソースがブロックされ、劇的な結果になる可能性があるように、バックプレッシャーが必要になることがよくあります。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:60
#, fuzzy
msgid "So, what can we do to handle this _overflow_?"
msgstr "では、この _オーバーフロー_に対応するにはどうすればいいのでしょうか？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:62
#, fuzzy
msgid "### Buffering items"
msgstr "バッファリング項目"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:65
#, fuzzy
msgid ""
"The first natural solution uses buffers.  The consumer can buffer the "
"events, so it does not fail:"
msgstr "最初の自然な解決策はバッファを使用します。コンシューマはイベントをバッファリングすることができるので、失敗することはありません。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:66
#, no-wrap, fuzzy
msgid "Buffering to avoid overwhelming downstream consumers"
msgstr "下流の消費者を圧倒しないためのバッファリング"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:67
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-buffer.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:71
#, fuzzy
msgid ""
"Using a buffer allows handling small bumps, but it's not a long term "
"solution.  If we update the code to use a large buffer, the consumer can "
"handle more events but eventually fails:"
msgstr ""
"バッファを使用することで小さなバンプを扱うことができますが、長期的な解決策ではありません。大きなバッファを使用するようにコードを更新すると、コンシューマはより多くのイベントを扱うことができますが、最終的には失敗します。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:82
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().buffer(250)\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(BufferingExample::canOnlyConsumeOneItemPerSecond)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:90
#, no-wrap
msgid ""
"Got item: 0\n"
"Got item: 1\n"
"Got item: 2\n"
"Got failure: io.smallrye.mutiny.subscription.BackPressureFailure: Buffer is "
"full due to lack of downstream consumption\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:95
#, fuzzy
msgid ""
"You can imagine increasing the buffer's size, but it's hard to anticipate "
"the optimal value.  What about unbounded buffers? In general, that's a "
"terrible idea as you may run out of memory."
msgstr ""
"バッファのサイズを大きくすることは想像できますが、最適値を予想するのは難しいです。束縛されていないバッファはどうでしょうか？一般的には、メモリを使い果たしてしまう可能性があるので、あまりお勧めできません。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:97
#, fuzzy
msgid "### Dropping items"
msgstr "アイテムのドロップ"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:99
#, fuzzy
msgid "Another solution consists of dropping items:"
msgstr "別のソリューションは、アイテムをドロップすることで構成されています。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:100
#, no-wrap, fuzzy
msgid "Dropping items to avoid overwhelming downstream consumers"
msgstr "川下の消費者を圧倒しないようにアイテムを落とす"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:101
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-drop.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:104
#, fuzzy
msgid "You can drop the newest received items or oldest ones:"
msgstr "届いたばかりのものや古いものをドロップすることができます。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:116
#, no-wrap
msgid ""
"Multi.createFrom().ticks().every(Duration.ofMillis(10))\n"
"    .onOverflow().drop(x -> System.out.println(\"Dropping item \" + x))\n"
"    .emitOn(Infrastructure.getDefaultExecutor())\n"
"    .onItem().transform(DropExample::canOnlyConsumeOneItemPerSecond)\n"
"    .transform().byTakingFirstItems(10)\n"
"    .subscribe().with(\n"
"        item -> System.out.println(\"Got item: \" + item),\n"
"        failure -> System.out.println(\"Got failure: \" + failure)\n"
");\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:129
#, no-wrap
msgid ""
"// ....\n"
"Dropping item 997\n"
"Dropping item 998\n"
"Dropping item 999\n"
"Dropping item 1000\n"
"Dropping item 1001\n"
"Dropping item 1002\n"
"Dropping item 1003\n"
"Got item: 9\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:134
#, fuzzy
msgid ""
"Dropping items provides a sustainable solution to our problem, but we are "
"losing events! As we can see in the previous output, we may drop the high "
"majority of items.  In many cases, this is not acceptable."
msgstr ""
"アイテムをドロップすることで持続的な解決策が得られるのですが、イベントを失っています先ほどの出力を見てもわかるように、大多数のアイテムをドロップすることがあります。多くの場合、これは許容できません。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:137
#, fuzzy
msgid ""
"So, we need another solution, a solution where the overall pace is adjusted "
"to satisfy the pipeline's slowest element.  We need flow control."
msgstr ""
"そこで、パイプラインの最も遅い要素を満足させるために全体のペースを調整するという別のソリューションが必要になります。フローコントロールが必要なのです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:139
#, fuzzy
msgid "### What the heck is Back-Pressure?"
msgstr "背圧ってなんだ？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:144
#, fuzzy
msgid ""
"You may have seen this term many times, and often associated with Reactive.  "
"In mechanics, back-pressure is a way to control the flow of fluid through "
"pipes, leading to a pressure drop.  That control can use reducers or bends.  "
"While very interesting, if you are a plumber, it's not clear how it can help "
"us here?"
msgstr ""
"この用語は何度も目にしたことがあるかもしれませんが、Reactive（反応性）と関連していることが多いです。機械学では、背圧とは、配管を通る流体の流れを制御して圧力を低下させる方法のことです。この制御には、減速機やベンドを使用することができます。非常に興味深い反面、あなたが配管工であれば、それがここでどのように役立つのかは明確ではありません？"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:147
#, fuzzy
msgid ""
"We can see our streams as a flow of fluid, and the set of stages (operator "
"or subscriber) forms a pipe.  We want to make the fluid flows as "
"frictionless as possible without swirls and waves."
msgstr ""
"私たちのストリームを流体の流れとして見ることができ、ステージのセット（オペレーターまたはサブスクライバー）がパイプを形成します。私たちは、渦巻きや波のない流体の流れをできるだけ摩擦のないものにしたいと考えています。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:150
#, fuzzy
msgid ""
"An interesting characteristic of fluid mechanics is how a downstream "
"reduction of the throughput affects the upstream.  Essentially, that's what "
"we need: a way for the downstream operators and subscribers to reduce the "
"throughput, not only locally but also upstream."
msgstr ""
"流体力学の興味深い特徴は、下流でのスループットの低下が上流にどのように影響するかということです。本質的には、私たちが必要としているのは、下流のオペレータや加入者が、ローカルだけでなく上流のスループットを削減する方法です。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:156
#, fuzzy
msgid ""
"Don't be mistaken; back-pressure is not something new in the IT world and is "
"not limited to Reactive.  One of the most brilliant usages of back-pressure "
"is in TCP.  A reader, receiving data, can block the writer, on the other "
"side of the wire, if it does not read the sent data.  That way, the reader "
"is never overwhelmed.  But, the consequence need to be understood: blocking "
"the writer may not be without side-effects."
msgstr ""
"誤解しないでください。バックプレッシャーはITの世界では新しいものではなく、リアクティブに限定されるものでもありません。バックプレッシャーの最も優れた使い方の一つは "
"TCP "
"にあります。データを受信しているリーダは、送信されたデータを読まない場合に、ワイヤの反対側にいるライタをブロックすることができます。そうすれば、リーダーは決して圧倒されることはありません。しかし、結果を理解する必要があります：ライターをブロックすることは、副作用がないとは限りません。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:160
#, fuzzy
msgid ""
"There are other back-pressure implementations.  AMQP uses a credit-based "
"flow control, where you can only send if you have enough credit.  Eclipse "
"Vert.x back-pressure is based on pause/resume, where a consumer can pause "
"the upstream until it catches up and resume it once back on track."
msgstr ""
"バックプレッシャーの実装は他にもあります。AMQPはクレジットベースのフローコントロールを使用しており、十分なクレジットがある場合にのみ送信することができます。Eclipse "
"Vert.xのバックプレッシャーは一時停止/再開に基づいており、消費者は追いつくまで上流を一時停止し、一度軌道に戻ったら再開することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:162
#, fuzzy
msgid "### Introducing Reactive Streams"
msgstr "リアクティブストリームの導入"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:167
#, fuzzy
msgid ""
"Let's now focus on another back-pressure protocol: https://www.reactive-"
"streams.org/[Reactive Streams].  It defines an asynchronous and back-"
"pressure protocol suiting to our fast producer/slow consumer problem.  With "
"Reactive Streams, the consumer, named `Subscriber`, requests items from the "
"producer, named `Publisher`.  The `Publisher` cannot send more than the "
"requested amount of items:"
msgstr ""
"では、もう一つの背圧プロトコルに注目してみましょう。 link:https://www.reactive-streams.org/"
"[リアクティブストリーム]です。これは、高速な生産者と低速な消費者の問題に適した非同期のバックプレッシャープロトコルを定義しています。リアクティブ・ストリームでは、 "
"`Subscriber` という名前の消費者が `Publisher` という名前の生産者にアイテムを要求します。 `Publisher` "
"は、要求された量以上のアイテムを送信することはできません。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:168
#, no-wrap, fuzzy
msgid ""
"Reactive Streams Back-Pressure (https://impurepics.com/posts/2018-05-26-"
"backpressure-origins.html)"
msgstr ""
"反応性のあるストリームの背圧 https://impurepics.com/posts/2018-05-26-backpressure-origins."
"html"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:169
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:173
#, fuzzy
msgid ""
"When the items are received and processed, the consumer can request more "
"items, and so on.  Thus, the consumer controls the flow."
msgstr "アイテムを受け取って処理すると、消費者はより多くのアイテムを要求することができます。このように、消費者は流れをコントロールしている。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:174
#, no-wrap, fuzzy
msgid "Using flow control to avoid overwhelming consumers"
msgstr "消費者を圧倒しないためのフローコントロールの使い方"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:175
#, no-wrap
msgid ""
"/assets/images/posts/mutiny-back-pressure/back-pressure-flow-control.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:178
#, fuzzy
msgid "### Reactive Streams entities"
msgstr "リアクティブストリームエンティティ"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:185
#, fuzzy
msgid ""
"To implement that protocol, Reactive Streams define a set of entities.  "
"First, a `Subscriber` is a consumer.  It subscribes to a `Publisher,` "
"producing items.  Then, the `Publisher` sends, asynchronously, a "
"`Subscription` object to the `Subscriber`.  This `Subscription` is a "
"contract.  With this `Subscription,` the `Subscriber` can request items and "
"cancels the subscription when it does not want any more items."
msgstr ""
"そのプロトコルを実装するために、リアクティブストリームはエンティティのセットを定義します。まず、 `Subscriber` "
"は消費者です。これは、アイテムを生産する `Publisher,` をサブスクライブします。そして、 `Publisher` は "
"`Subscription` オブジェクトを非同期的に `Subscriber` に送信します。この `Subscription` は契約です。この "
"`Subscription,` を使用して、 `Subscriber` はアイテムを要求することができ、アイテムが不要になったら購読をキャンセルします。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:186
#, no-wrap, fuzzy
msgid "Example of interactions between a `Subscriber` and a `Publisher`"
msgstr "`Subscriber` との相互作用の例 `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:187
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/back-pressure-sequence.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:190
#, fuzzy
msgid ""
"A `Publisher` cannot send more items than requested to the `Subscriber,` and "
"the `Subscriber` can request more items at any time."
msgstr ""
"`Publisher` は、要求された以上のアイテムを `Subscriber,` に送信することはできず、 `Subscriber` "
"はいつでも追加のアイテムを要求することができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:193
#, fuzzy
msgid ""
"It is essential to understand that the requests and emissions are not "
"necessarily happening synchronously.  A `Subscriber` can request three "
"items, and the Publisher will send one by one when they are available."
msgstr ""
"リクエストと排出は必ずしも同期して起こっているわけではないことを理解しておく必要があります。 `Subscriber` "
"は、3つの項目をリクエストして、発行者はそれが利用可能になったら1つずつ送信します。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:197
#, fuzzy
msgid ""
"Reactive Streams introduces another entity named `Processor.` A `Processor` "
"is a `Subscriber` and a `Publisher` simultaneously.  In other words, it's a "
"link in our pipeline:"
msgstr ""
"Reactive Streams は `Processor.` という別のエンティティを導入します。 `Processor` は "
"`Subscriber` と `Publisher` が同時に存在します。言い換えれば、パイプライン内のリンクです。"

#. type: Block title
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:198
#, no-wrap, fuzzy
msgid ""
"Example of interactions between a `Subscriber,` a `Processor` and a "
"`Publisher`"
msgstr "`Subscriber,` a `Processor` と a の相互作用の例 `Publisher`"

#. type: Target for macro image
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:199
#, no-wrap
msgid "/assets/images/posts/mutiny-back-pressure/pipeline-with-processor.png"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:210
#, fuzzy
msgid ""
"A `Subscriber` calls `subscribe` on a `Processor.` Before receiving a "
"`Subscription,` the `Processor` subscribes to its own upstream (the "
"`Publisher` in the picture above).  When that upstream provides a "
"`Subscription` to our Processor, it can give a `Subscription` to the "
"Subscriber.  All these interactions are asynchronous.  When this handshake "
"completes, the `Subscriber` can start requesting items.  The Processor is "
"responsible for mediating the `Subscriber` requests with its upstream.  For "
"example, as illustrated in the picture above, if the `Subscriber` requires "
"two items, the `Processor` also requests two items to its own upstream.  Of "
"course, depending on the `Processor` code, it may not be that simple.  "
"What's fundamental is that each `Publisher` and `Processor` enforces the "
"flowing requests never to overload downstream Subscribers."
msgstr ""
"`Subscriber` は `Processor.` 上で `subscribe` を呼び出します。 `Subscription,` を受信する前に、 "
"`Processor` は自身のアップストリーム (上の図の `Publisher` ) にサブスクライブします。そのアップストリームがプロセッサに "
"`Subscription` を提供すると、プロセッサはサブスクライバに `Subscription` "
"を提供することができます。これらのインタラクションはすべて非同期です。このハンドシェイクが完了すると、 `Subscriber` "
"はアイテムのリクエストを開始することができます。プロセッサーは、 `Subscriber` "
"リクエストをそのアップストリームとの間で仲介する役割を担っています。例えば、上の図に示されているように、 `Subscriber` が 2 "
"つのアイテムを要求する場合、 `Processor` は自身のアップストリームにも 2 つのアイテムを要求します。もちろん、 `Processor` "
"のコードによっては、それほど単純ではないかもしれません。根本的なことは、 `Publisher` と `Processor` "
"のそれぞれが、決して下流のサブスクライバに負荷をかけないようにフローイングリクエストを強制するということです。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:212
#, fuzzy
msgid "### Be warned; it's a trap!"
msgstr "注意してください、それは罠です！"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:217
#, fuzzy
msgid ""
"If you look at the http://www.reactive-streams.org/reactive-streams-1.0.3-"
"javadoc/org/reactivestreams/package-summary.html[Reactive Streams API], you "
"will find it straightforward.  Be warned; it's a trap! Behind this apparent "
"simplicity, implementing Reactive Streams entities yourself is a nightmare.  "
"Reactive Streams come with a broad set of rules and a strict TCK."
msgstr ""
"link:http://www.reactive-streams.org/reactive-streams-1.0.3-javadoc/org/"
"reactivestreams/package-summary.html[Reactive Streams "
"API]を見てみると、簡単にわかると思います。注意してください; "
"これは罠です!一見簡単そうに見えても、リアクティブストリームのエンティティを自分で実装するのは悪夢です。Reactive Streams "
"は幅広いルールと厳格な TCK を持っています。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:221
#, fuzzy
msgid ""
"But, no worries, Mutiny implements the Reactive Streams protocol for you.  "
"In other words, when using `Multi,` you are using a `Publisher` following "
"the Reactive Streams protocol.  All the subscription handshakes and requests "
"negotiations are done for you."
msgstr ""
"しかし、心配ありません、MutinyはあなたのためにReactive Streamsプロトコルを実装しています。言い換えれば、 `Multi,` "
"を使用するときは、Reactive Streams プロトコルに従った `Publisher` "
"を使用していることになります。サブスクリプションのハンドシェイクとリクエストの交渉はすべてあなたのために行われます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:223
#, fuzzy
msgid "### Looking under the hood"
msgstr "フードの下を見る"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:226
#, fuzzy
msgid ""
"I knew it! You are curious! You can use `onSubscribe().invoke()` and "
"`onRequest().invoke()` to check what's going on:"
msgstr ""
"やっぱりね!興味津々ですね! `onSubscribe().invoke()` 、 `onRequest().invoke()` で調べてみてください。"

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:238
#, no-wrap
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: "
"\" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + "
"req))\n"
"    .transform().byFilteringItemsWith(i -> i % 2 == 0)\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            i -> System.out.println(\"i: \" + i)\n"
");\n"
"---- \n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:240
#, no-wrap
msgid ""
"You can also go a step further and not only observing but also controlling "
"the flow yourself:\n"
msgstr ""

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:242 upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:265
#, no-wrap
msgid "[source, java, indent=0]\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:260
#, no-wrap, fuzzy
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: "
"\" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + "
"req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().with(\n"
"            subscription -> {\n"
"                // Got the subscription\n"
"                upstream.set(subscription);\n"
"                subscription.request(1);\n"
"            },\n"
"            i -> {\n"
"                System.out.println(\"i: \" + i);\n"
"                upstream.get().request(1);\n"
"            },\n"
"            f -> System.out.println(\"Failed with \" + f),\n"
"            () -> System.out.println(\"Completed\")\n"
");\n"
msgstr ""
"Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out."
"println(\"受信したサブスクリプション: \" + sub)) .onRequest().invoke(req → System.out."
"println(\"リクエストを取得しました: \" + req)) .onItem().transform(i → i * 100) ."
"subscribe().with(サブスクリプション → { // サブスクリプションを取得しました。with( subscription → { // "
"サブスクリプションを取得 upstream.set(subscription); subscription.request(1); }, i → { "
"System.out.println(\"i: \" + i); upstream.get().request(1); }, f → System."
"out.println(\"Failed with \" + f), () → System.out.println(\"Completed\") )."

#. type: delimited block -
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:263
#, no-wrap
msgid ""
"And, if you are a bit insane, you can even implement a `Subscriber` directly:"
"\n"
msgstr ""

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:271
#, no-wrap, fuzzy
msgid ""
"Multi.createFrom().range(0, 10)\n"
"    .onSubscribe().invoke(sub -> System.out.println(\"Received subscription: "
"\" + sub))\n"
"    .onRequest().invoke(req -> System.out.println(\"Got a request: \" + "
"req))\n"
"    .onItem().transform(i -> i * 100)\n"
"    .subscribe().withSubscriber(new Subscriber<Integer>() {\n"
msgstr ""
"Multi.createFrom().range(0, 10) .onSubscribe().invoke(sub → System.out."
"println(\"受信したサブスクリプション: \" + sub)) .onRequest().invoke(req → System.out."
"println(\"リクエストを取得しました: \" + req)) .onItem().transform(i → i * 100) ."
"subscribe().withSubscriber(new Subscriber&lt;Integer&gt;() {)"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:273
#, no-wrap, fuzzy
msgid "        private Subscription subscription;\n"
msgstr "<pre>プライベート サブスクリプションの購読。</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:279
#, no-wrap, fuzzy
msgid ""
"        @Override\n"
"        public void onSubscribe(Subscription s) {\n"
"            this.subscription = s;\n"
"            s.request(1);\n"
"        }\n"
msgstr ""
"<pre>オーバーライド\n"
"public void onSubscribe(Subscription s) {\n"
"    this.subscription = s.\n"
"    s.request(1)。\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:285
#, no-wrap, fuzzy
msgid ""
"        @Override\n"
"        public void onNext(Integer item) {\n"
"            System.out.println(\"Got item \" + item);\n"
"            subscription.request(1);\n"
"        }\n"
msgstr ""
"<pre>オーバーライド\n"
"public void onNext(Integer item) { { {.\n"
"    System.out.println(\"Got item \" + item).\n"
"    subscription.request(1).\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:290
#, no-wrap, fuzzy
msgid ""
"        @Override\n"
"        public void onError(Throwable t) {\n"
"            // ...\n"
"        }\n"
msgstr ""
"<pre>オーバーライド\n"
"public void onError(Throwable t) { { {.\n"
"    // ...\n"
"}</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:297
#, no-wrap, fuzzy
msgid ""
"        @Override\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");\n"
msgstr ""
"<pre>        オーバーライド\n"
"        public void onComplete() {\n"
"            // ...\n"
"        }\n"
"    }\n"
");</pre>"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:298
#, no-wrap, fuzzy
msgid "\n"
msgstr "\n"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:301
#, fuzzy
msgid "### Summary"
msgstr "概要"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:311
#, fuzzy
msgid ""
"This post described the different approaches offered by Mutiny to handle "
"back-pressure.  The Reactive Streams protocol works well when you can "
"control the pace of the upstream.  But it's not always the case.  Streams "
"representing physical entities are rarely controllable.  Imagine a stream "
"emitting user's keystrokes.  You cannot ask the users to slow down.  That "
"would be a terrible user experience.  As we have seen above, time is also "
"not something we can slow down, unfortunately...  In this case, the "
"`onOverflow()` group lets you decide the mitigation, such as using buffers "
"or dropping items."
msgstr ""
"この投稿では、バックプレッシャーを処理するためにMutinyが提供するさまざまなアプローチについて説明しました。Reactive "
"Streamsプロトコルは、上流のペースをコントロールできる場合にうまく機能します。しかし、必ずしもそうとは限りません。物理的なエンティティを表すストリームが制御できることはほとんどありません。ユーザーのキーストロークを放出するストリームを想像してみてください。ユーザーにスローダウンを求めることはできません。それはひどいユーザー体験になるでしょう。上で見たように、時間も残念ながら遅くすることはできません."
"..この場合、 `onOverflow()` グループでは、バッファを使ったり、アイテムを落としたりといった緩和策を決めることができます。"

#. type: Plain text
#: upstream/_posts/2020-10-27-mutiny-back-pressure.adoc:314
#, fuzzy
msgid ""
"It's critical to avoid overwhelming downstream subscribers.  It is the small "
"crack that ripples in your system with dreadful consequences."
msgstr "下流の加入者を圧倒しないようにすることが重要です。それはあなたのシステムに波紋を広げる小さな亀裂であり、恐ろしい結果をもたらします。"
