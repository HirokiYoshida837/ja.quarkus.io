# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-01-20 11:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/config.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Configuring Your Application"
msgstr "Quarkus - アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/config.adoc:14
#, fuzzy
msgid ""
"Hardcoded values in your code are a _no go_ (even if we all did it at some "
"point ;-)).  In this guide, we learn how to configure your application."
msgstr ""
"コードの中にハードコードされた値を使うことは _でき_ません (たとえ誰もがどこかの時点でそうしていたとしてもです ;-"
")。このガイドでは、アプリケーションを設定する方法を学びます。"

#. type: Title ==
#: upstream/_guides/config.adoc:15
#, fuzzy, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/config.adoc:18
#, fuzzy
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下のものが必要です。"

#. type: Plain text
#: upstream/_guides/config.adoc:20
#, fuzzy
msgid "between 5 and 10 minutes"
msgstr "5分から10分"

#. type: Plain text
#: upstream/_guides/config.adoc:21
#, fuzzy
msgid "an IDE"
msgstr "アイディーイーイー"

#. type: Plain text
#: upstream/_guides/config.adoc:22
#, fuzzy
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME` が適切に設定されています。"

#. type: Plain text
#: upstream/_guides/config.adoc:23
#, fuzzy
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version} の場合"

#. type: Title ==
#: upstream/_guides/config.adoc:24
#, fuzzy, no-wrap
msgid "Solution"
msgstr "解決策"

#. type: Plain text
#: upstream/_guides/config.adoc:28
#, fuzzy
msgid ""
"We recommend that you follow the instructions in the next sections and "
"create the application step by step.  However, you can go right to the "
"completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/config.adoc:30
#, fuzzy
msgid ""
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download "
"an {quickstarts-archive-url}[archive]."
msgstr ""
"Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、または {quickstarts-"
"archive-url}[archive] をダウンロードしてください。"

#. type: Plain text
#: upstream/_guides/config.adoc:32
#, fuzzy
msgid ""
"The solution is located in the `config-quickstart` {quickstarts-tree-url}/"
"config-quickstart[directory]."
msgstr ""
"ソリューションは `config-quickstart` {quickstarts-tree-url}/config-"
"quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_guides/config.adoc:33
#, fuzzy, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/config.adoc:36
#, fuzzy
msgid ""
"First, we need a new project. Create a new project with the following "
"command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/config.adoc:45
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=config-quickstart \\\n"
"    -DclassName=\"org.acme.config.GreetingResource\" \\\n"
"    -Dpath=\"/greeting\"\n"
"cd config-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/config.adoc:48
#, fuzzy
msgid "It generates:"
msgstr "生成します。"

#. type: Plain text
#: upstream/_guides/config.adoc:50
#, fuzzy
msgid "the Maven structure"
msgstr "メイヴン構造体"

#. type: Plain text
#: upstream/_guides/config.adoc:51
#, fuzzy
msgid "a landing page accessible on `http://localhost:8080`"
msgstr ""
"ランディングページ `&lt;a href=\"http://localhost:8080\" class=\"bare\"&gt;http://"
"localhost:8080&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/config.adoc:52
#, fuzzy
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr "`native` と `jvm` の両方のモードに対応した `Dockerfile` ファイルの例"

#. type: Plain text
#: upstream/_guides/config.adoc:53
#, fuzzy
msgid "the application configuration file"
msgstr "アプリケーション設定ファイル"

#. type: Plain text
#: upstream/_guides/config.adoc:54
#, fuzzy
msgid "an `org.acme.config.GreetingResource` resource"
msgstr "`org.acme.config.GreetingResource` リソース"

#. type: Plain text
#: upstream/_guides/config.adoc:55
#, fuzzy
msgid "an associated test"
msgstr "関連試験"

#. type: Title ==
#: upstream/_guides/config.adoc:56
#, fuzzy, no-wrap
msgid "Create the configuration"
msgstr "設定を作成します。"

#. type: Plain text
#: upstream/_guides/config.adoc:61
#, fuzzy
msgid ""
"By default, Quarkus reads configuration properties from <<config-reference."
"adoc#configuration_sources,several sources>>.  For the purpose of this "
"guide, we will use an application configuration file located in `src/main/"
"resources/application.properties`.  Edit the file with the following content:"
""
msgstr ""
"デフォルトでは、Quarkusは link:config-reference."
"html#configuration_sources[複数のソース]から設定プロパティを読み取ります。このガイドでは、 `src/main/"
"resources/application.properties` にあるアプリケーション設定ファイルを使用します。以下の内容でファイルを編集します。"

#. type: delimited block -
#: upstream/_guides/config.adoc:67
#, no-wrap
msgid ""
"# Your configuration properties\n"
"greeting.message = hello\n"
"greeting.name = quarkus\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/config.adoc:69
#, fuzzy, no-wrap
msgid "Injecting configuration properties"
msgstr "設定値の注入"

#. type: Plain text
#: upstream/_guides/config.adoc:72
#, fuzzy
msgid ""
"Quarkus uses https://microprofile.io/project/eclipse/microprofile-"
"config[MicroProfile Config] annotations to inject the configuration "
"properties in the application."
msgstr ""
"Quarkusは link:https://microprofile.io/project/eclipse/microprofile-"
"config[MicroProfile Configを]使用して、アプリケーションに設定を注入します。インジェクションでは、 "
"`@ConfigProperty` アノテーションを使用します。"

#. type: delimited block -
#: upstream/_guides/config.adoc:77 upstream/_guides/config.adoc:91
#, no-wrap
msgid "@ConfigProperty(name = \"greeting.message\") <1>\n"
"String message;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/config.adoc:81
#, fuzzy
msgid ""
"You can use `@Inject @ConfigProperty` or just `@ConfigProperty`.  The "
"`@Inject` annotation is not necessary for members annotated with "
"`@ConfigProperty`.  This behavior differs from https://microprofile.io/"
"project/eclipse/microprofile-config[MicroProfile Config]."
msgstr ""
"設定された値を注入する際には、 `@Inject @ConfigProperty` を使用することも、 `@ConfigProperty` "
"だけを使用することもできます。 `@Inject` アノテーションは、 link:https://microprofile.io/project/"
"eclipse/microprofile-config[MicroProfile Config] とは異なる動作である "
"`@ConfigProperty` アノテーションを持つメンバーには必要ありません。"

#. type: Plain text
#: upstream/_guides/config.adoc:84
#, fuzzy
msgid ""
"If the application attempts to inject a configuration property that is not "
"set, an error is thrown.  So you can quickly know when your configuration is "
"complete."
msgstr ""
"アプリケーションが設定値を要求し、これらの値が設定されていない場合、エラーがスローされます。そのため、設定が完了したときにすぐに知ることができます。"

#. type: Plain text
#: upstream/_guides/config.adoc:86
#, fuzzy
msgid ""
"Edit the `org.acme.config.GreetingResource`, and introduce the following "
"configuration properties:"
msgstr "`org.acme.config.GreetingResource` を編集し、以下の設定プロパティを導入します。"

#. type: delimited block -
#: upstream/_guides/config.adoc:94
#, no-wrap
msgid ""
"@ConfigProperty(name = \"greeting.suffix\", defaultValue=\"!\") <2>\n"
"String suffix;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/config.adoc:97
#, no-wrap
msgid "@ConfigProperty(name = \"greeting.name\")\n"
"Optional<String> name; <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/config.adoc:99
#, fuzzy
msgid ""
"If you do not provide a value for this property, the application startup "
"fails with `javax.enterprise.inject.spi.DeploymentException: No config value "
"of type [class java.lang.String] exists for: greeting.message`."
msgstr ""
"このプロパティに値を指定しないと、アプリケーションの起動は `javax.enterprise.inject.spi."
"DeploymentException: No config value of type [class java.lang.String] exists "
"for: greeting.message`."

#. type: Plain text
#: upstream/_guides/config.adoc:100
#, fuzzy
msgid ""
"The default value is injected if the configuration does not provide a value "
"for `greeting.suffix`."
msgstr "デフォルト値は、設定が `greeting.suffix` の値を提供していない場合に注入されます。"

#. type: Plain text
#: upstream/_guides/config.adoc:101
#, fuzzy
msgid ""
"This property is optional - an empty `Optional` is injected if the "
"configuration does not provide a value for `greeting.name`."
msgstr ""
"このプロパティはオプションです - 構成が `greeting.name` の値を提供していない場合は、空の `Optional` が注入されます。"

#. type: Plain text
#: upstream/_guides/config.adoc:103
#, fuzzy
msgid "Now, modify the `hello` method to use the injected properties:"
msgstr "ここで、 `hello` メソッドを修正して、注入されたプロパティを使用します。"

#. type: delimited block -
#: upstream/_guides/config.adoc:111
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String hello() {\n"
"    return message + \" \" + name.orElse(\"world\") + suffix;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/config.adoc:114
#, fuzzy
msgid "Once set, check the application with:"
msgstr "設定したら、アプリケーションを使って確認します。"

#. type: delimited block -
#: upstream/_guides/config.adoc:119
#, no-wrap
msgid "$ curl http://localhost:8080/greeting\n"
"hello quarkus!\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/config.adoc:123
#, fuzzy
msgid ""
"As an alternative to injecting multiple related configuration values, you "
"can also use the `@io.quarkus.arc.config.ConfigProperties` annotation to "
"group these properties together.  See the <<config-reference."
"adoc#using_configproperties,Configuration Reference Guide>> for more "
"information."
msgstr ""
"前の例で示した方法で複数の関連する構成値を注入する代わりに、 `@io.quarkus.arc.config.ConfigProperties` "
"アノテーションを使用して、これらのプロパティをまとめてグループ化することもできます。"

#. type: Title ==
#: upstream/_guides/config.adoc:124
#, fuzzy, no-wrap
msgid "Update the test"
msgstr "テストの更新"

#. type: Plain text
#: upstream/_guides/config.adoc:128
#, fuzzy
msgid ""
"We also need to update the functional test to reflect the changes made to "
"the endpoint.  Edit the `src/test/java/org/acme/config/GreetingResourceTest."
"java` file and change the content of the `testHelloEndpoint` method to:"
msgstr ""
"また、エンドポイントに加えられた変更を反映させるために、機能テストを更新する必要があります。 `src/test/java/org/acme/"
"config/GreetingResourceTest.java` ファイルを編集し、 `testHelloEndpoint` "
"メソッドの内容を変更します。"

#. type: delimited block -
#: upstream/_guides/config.adoc:132
#, no-wrap
msgid "package org.acme.config;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/config.adoc:135
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/config.adoc:138
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/config.adoc:141
#, no-wrap
msgid "@QuarkusTest\n"
"public class GreetingResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/config.adoc:150
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/greeting\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello quarkus!\")); // Modified line\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/config.adoc:152
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/config.adoc:154
#, fuzzy, no-wrap
msgid "Package and run the application"
msgstr "アプリケーションをパッケージ化して実行する"

#. type: Plain text
#: upstream/_guides/config.adoc:158
#, fuzzy
msgid ""
"Run the application with: `./mvnw compile quarkus:dev`.  Open your browser "
"to http://localhost:8080/greeting."
msgstr ""
"アプリケーションを実行するには、次の手順を実行します: `./mvnw compile quarkus:dev`.ブラウザを http://"
"localhost:8080/greeting  に開きます。"

#. type: Plain text
#: upstream/_guides/config.adoc:161
#, fuzzy
msgid ""
"Changing the configuration file is immediately reflected.  You can add the "
"`greeting.suffix`, remove the other properties, change the values, etc."
msgstr "設定ファイルを変更するとすぐに反映されます。 `greeting.suffix` の追加、他のプロパティの削除、値の変更などができます。"

#. type: Plain text
#: upstream/_guides/config.adoc:164
#, fuzzy
msgid ""
"As usual, the application can be packaged using `./mvnw clean package` and "
"executed using the `-runner.jar` file.  You can also generate the native "
"executable with `./mvnw clean package -Pnative`."
msgstr ""
"いつものように、 `./mvnw clean package` を使ってアプリケーションをパッケージ化し、 `-runner.jar` "
"ファイルを使って実行することができます。また、 `./mvnw clean package -Pnative`."

#. type: Title ==
#: upstream/_guides/config.adoc:165
#, fuzzy, no-wrap
msgid "Programmatically access the configuration"
msgstr "設定にプログラムでアクセス"

#. type: Plain text
#: upstream/_guides/config.adoc:169
#, fuzzy
msgid ""
"You can also access the configuration programmatically.  It can be handy to "
"achieve dynamic lookup, or retrieve configured values from classes that are "
"neither CDI beans or JAX-RS resources."
msgstr ""
"プログラムで設定にアクセスすることができます。動的なルックアップを実現したり、CDIビーンズでもJAX-"
"RSリソースでもないクラスから設定値を取得したりするのに便利です。"

#. type: Plain text
#: upstream/_guides/config.adoc:171
#, fuzzy
msgid ""
"You can access the configuration programmatically using `org.eclipse."
"microprofile.config.ConfigProvider.getConfig()` such as in:"
msgstr ""
"in のように `org.eclipse.microprofile.config.ConfigProvider.getConfig()` "
"を使用してプログラムで設定にアクセスできます。"

#. type: delimited block -
#: upstream/_guides/config.adoc:176
#, no-wrap
msgid ""
"String databaseName = ConfigProvider.getConfig().getValue(\"database.name\", "
"String.class);\n"
"Optional<String> maybeDatabaseName = ConfigProvider.getConfig()."
"getOptionalValue(\"database.name\", String.class);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/config.adoc:178
#, fuzzy, no-wrap
msgid "Configuration Profiles"
msgstr "構成プロファイル"

#. type: Plain text
#: upstream/_guides/config.adoc:182
#, fuzzy
msgid ""
"Quarkus supports the notion of configuration profiles.  These allow you to "
"have multiple configuration values in the same file and select between them "
"via a profile name."
msgstr ""
"Quarkusでは、設定プロファイルという概念をサポートしています。これにより、同じファイル内に複数の設定を持つことができ、プロファイル名を使用してそれらの間で選択することができます。"

#. type: Plain text
#: upstream/_guides/config.adoc:184
#, fuzzy
msgid ""
"The syntax for this is `%{profile}.config.key=value`. For example if I have "
"the following:"
msgstr "このための構文は `%{profile}.config.key=value` です。例えば、以下のような場合。"

#. type: delimited block -
#: upstream/_guides/config.adoc:189
#, no-wrap
msgid "quarkus.http.port=9090\n"
"%dev.quarkus.http.port=8181\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/config.adoc:192
#, fuzzy
msgid ""
"Then the Quarkus HTTP port will be 9090, unless the `dev` profile is active, "
"in which case it will be 8181."
msgstr "QuarkusのHTTPポートは9090になります。 `dev` プロファイルがアクティブでない限り、その場合は8181になります。"

#. type: Plain text
#: upstream/_guides/config.adoc:194
#, fuzzy
msgid ""
"See the <<config-reference.adoc#configuration_profiles,Configuration "
"Reference Guide>> for more information about configuration profiles."
msgstr ""
"構成プロファイルの詳細については、『 link:config-reference."
"html#configuration_profiles[構成リファレンスガイド』]を参照してください。"

#. type: Title ==
#: upstream/_guides/config.adoc:195
#, fuzzy, no-wrap
msgid "Configuring Quarkus"
msgstr "Quarkusの設定"

#. type: Plain text
#: upstream/_guides/config.adoc:200
#, fuzzy
msgid ""
"Quarkus itself is configured via the same mechanism as your application. "
"Quarkus reserves the `quarkus.` namespace for its own configuration. For "
"example to configure the HTTP server port you can set `quarkus.http.port` in "
"`application.properties`. All the Quarkus configuration properties are link:"
"all-config[documented and searchable]."
msgstr ""
"Quarkus自体は、アプリケーションと同じメカニズムで設定されます。Quarkusは、独自の設定のために `quarkus.` "
"名前空間を予約します。たとえば、HTTPサーバーのポートを設定するには、 `application.properties` で `quarkus."
"http.port` を設定します。"

#. type: delimited block =
#: upstream/_guides/config.adoc:205
#, fuzzy
msgid ""
"As mentioned above, properties prefixed with `quarkus.` are effectively "
"reserved for configuring Quarkus itself and therefore `quarkus.` should "
"**never** be used as prefix for application specific properties."
msgstr ""
"上述したように、 `quarkus.` "
"で始まるプロパティは、Quarkus自体を設定するために実質的に予約されているため、アプリケーション固有のプロパティのプレフィックスとして "
"`quarkus.` を使用してはいけ *ません*。"

#. type: delimited block =
#: upstream/_guides/config.adoc:207
#, fuzzy
msgid ""
"In the previous examples using `quarkus.message` instead of `greeting."
"message` would result in unexpected behavior."
msgstr ""
"前の例では、 `greeting.message` の代わりに `quarkus.message` を使用すると、予期せぬ動作をすることになります。"

#. type: Plain text
#: upstream/_guides/config.adoc:212
#, fuzzy
msgid ""
"Quarkus does much of its configuration and bootstrap at build time and some "
"configuration properties are read and used during the build.  These "
"properties are _fixed at build time_ and it's not possible to change them at "
"runtime.  You always need to repackage your application in order to reflect "
"changes of such properties."
msgstr ""
"Quarkusは、その設定とブートストラップの多くをビルド時に行います。ほとんどのプロパティは、ビルド時のステップで読み込まれ設定されます。それらを変更するには、アプリケーションをリパッケージしてください。"

#. type: Plain text
#: upstream/_guides/config.adoc:214
#, fuzzy
msgid ""
"The properties fixed at build time are marked with a lock icon (icon:lock[]) "
"in the link:all-config[list of all configuration options]."
msgstr ""
"ビルド時に固定されたプロパティは、 link:all-config[すべての設定オプションのリスト]でロックアイコン<span class="
"\"icon\">([lock])</span>でマークされます。"

#. type: Plain text
#: upstream/_guides/config.adoc:217
#, fuzzy
msgid ""
"However, some extensions do define properties _overridable at runtime_.  A "
"canonical example is the database URL, username and password which is only "
"known specifically in your target environment."
msgstr ""
"エクステンションは、実行時にオーバーライド可能なプロパティ "
"_を_定義します。定型的な例としては、データベースのURL、ユーザー名、パスワードがありますが、これはターゲット環境でのみ特定されます。これは、実行時のプロパティが多くなればなるほど、Quarkusが実行できるビルド時間の前処理が少なくなるため、トレードオフの関係にあります。そのため、ランタイムプロパティのリストは無駄がありません。"

#. type: Plain text
#: upstream/_guides/config.adoc:219
#, fuzzy
msgid "System properties"
msgstr "システムのプロパティを使用しています。"

#. type: Plain text
#: upstream/_guides/config.adoc:220
#, fuzzy
msgid "Environment variables"
msgstr "環境変数を使用しています。"

#. type: Plain text
#: upstream/_guides/config.adoc:221
#, fuzzy
msgid ""
"An environment file named `.env` placed in the current working directory"
msgstr "`.env` という名前の環境ファイルが、現在の作業ディレクトリに置かれています。"

#. type: Plain text
#: upstream/_guides/config.adoc:222
#, fuzzy
msgid "A configuration file placed in `$PWD/config/application.properties`"
msgstr "に置かれた設定ファイルを使用して `$PWD/config/application.properties`"

#. type: Plain text
#: upstream/_guides/config.adoc:223
#, fuzzy
msgid ""
"See the <<config-reference.adoc#configuring_quarkus,Configuration Reference "
"Guide>> for more information."
msgstr ""
"詳細については、『 link:config-reference."
"html#configuring_quarkus[構成リファレンスガイド』]を参照してください。"

#, fuzzy
#~ msgid ""
#~ "By default, Quarkus reads `application.properties`.  Edit the `src/main/"
#~ "resources/application.properties` with the following content:"
#~ msgstr ""
#~ "デフォルトでは、Quarkusは `application.properties` を読みます。 `src/main/resources/"
#~ "application.properties` を以下の内容で編集します。"

#, fuzzy
#~ msgid "Using @ConfigProperties"
#~ msgstr "コンフィグプロパティを使用する"

#, fuzzy
#~ msgid ""
#~ "For the greeting properties above, a `GreetingConfiguration` class could be "
#~ "created like so:"
#~ msgstr "上記のグリーティングプロパティについては、 `GreetingConfiguration` クラスをこのように作成することができます。"

#, fuzzy
#~ msgid ""
#~ "`prefix` is optional. If not set then the prefix to be used will be "
#~ "determined by the class name. In this case it would still be `greeting` "
#~ "(since the `Configuration` suffix is removed). If the class were named "
#~ "`GreetingExtraConfiguration` then the resulting default prefix would be "
#~ "`greeting-extra`."
#~ msgstr ""
#~ "`prefix` はオプションです。設定されていない場合は、使用されるプレフィックスはクラス名によって決まります。この場合も `greeting` "
#~ "となります（ `Configuration` の接尾辞は削除されているので）。クラス名が `GreetingExtraConfiguration` "
#~ "の場合は、結果としてデフォルトのプレフィックスは `greeting-extra` となります。"

#, fuzzy
#~ msgid "`!` will be the default value if `greeting.suffix` is not set"
#~ msgstr "`!` は、 `greeting.suffix` が設定されていない場合のデフォルト値になります。"

#, fuzzy
#~ msgid ""
#~ "This class could then be injected into the `GreetingResource` using the "
#~ "familiar CDI `@Inject` annotation like so:"
#~ msgstr ""
#~ "このクラスは、おなじみの CDI `@Inject` アノテーションを使って `GreetingResource` に注入することができます。"

#, fuzzy
#~ msgid ""
#~ "Another alternative style provided by Quarkus is to create "
#~ "`GreetingConfiguration` as an interface like so:"
#~ msgstr ""
#~ "Quarkusが提供するもう一つの代替スタイルは、 `GreetingConfiguration` をこのようなインターフェースとして作成することです。"

#, fuzzy
#~ msgid ""
#~ "The `@ConfigProperty` annotation is needed because the name of the "
#~ "configuration property that the method corresponds to doesn't follow the "
#~ "getter method naming conventions"
#~ msgstr ""
#~ "`@ConfigProperty` アノテーションは、メソッドが対応する構成プロパティの名前がゲッター・メソッドの命名規則に従っていないために必要です。"

#, fuzzy
#~ msgid ""
#~ "In this case since `name` was not set, the corresponding property will be "
#~ "`greeting.suffix`."
#~ msgstr "この場合、 `name` が設定されていないので、対応するプロパティは `greeting.suffix`."

#, fuzzy
#~ msgid ""
#~ "It is unnecessary to specify the `@ConfigProperty` annotation because the "
#~ "method name follows the getter method naming conventions (`greeting.name` "
#~ "being the corresponding property) and no default value is needed."
#~ msgstr ""
#~ "メソッド名はゲッターメソッドの命名規則（ `greeting.name` が対応するプロパティ）に従っており、デフォルト値は不要なので、 "
#~ "`@ConfigProperty` アノテーションを指定する必要はありません。"

#, fuzzy
#~ msgid ""
#~ "When using `@ConfigProperties` on a class or an interface, if the value of "
#~ "one of its fields is not provided, the application startup will fail and a "
#~ "`javax.enterprise.inject.spi.DeploymentException` indicating the missing "
#~ "value information will be thrown.  This does not apply to `Optional` fields "
#~ "and fields with a default value."
#~ msgstr ""
#~ "クラスまたはインターフェイスで `@ConfigProperties` を使用する場合、そのフィールドの 1 "
#~ "つの値が提供されていないと、アプリケーションの起動に失敗し、値情報の欠落を示す `javax.enterprise.inject.spi."
#~ "DeploymentException` がスローされます。これは `Optional` フィールドとデフォルト値を持つフィールドには適用されません。"

#, fuzzy
#~ msgid "Additional notes on @ConfigProperties"
#~ msgstr "ConfigPropertiesに関する追加の注意事項"

#, fuzzy
#~ msgid ""
#~ "When using a regular class annotated with `@ConfigProperties` the class "
#~ "doesn't necessarily have to declare getters and setters.  Having simple "
#~ "public non-final fields is valid as well."
#~ msgstr ""
#~ "`@ConfigProperties` "
#~ "でアノテーションされた通常のクラスを使用する場合、クラスは必ずしもゲッターとセッターを宣言する必要はありません。単純なパブリックで最終的でないフィールドを持つことも有効です。"

#, fuzzy
#~ msgid ""
#~ "Furthermore, the configuration classes support nested object configuration. "
#~ "Suppose there was a need to have an extra layer of greeting configuration "
#~ "named `content` that would contain a few fields. This could be achieved like "
#~ "so:"
#~ msgstr ""
#~ "さらに、設定クラスは入れ子になったオブジェクトの設定をサポートしています。いくつかのフィールドを含む `content` "
#~ "という名前のグリーティング設定の追加レイヤーが必要だったとします。これは次のように実現できます。"

#, fuzzy
#~ msgid ""
#~ "The name of the field (not the class name) will determine the name of the "
#~ "properties that are bound to the object."
#~ msgstr "フィールドの名前（クラス名ではありません）は、オブジェクトにバインドされるプロパティの名前を決定します。"

#, fuzzy
#~ msgid ""
#~ "Setting the properties would occur in the normal manner, for example in "
#~ "`application.properties` one could have:"
#~ msgstr "プロパティの設定は通常の方法で行われ、例えば `application.properties` の場合は次のようになります。"

#, fuzzy
#~ msgid ""
#~ "Furthermore, classes annotated with `@ConfigProperties` can be annotated "
#~ "with Bean Validation annotations similar to the following example:"
#~ msgstr ""
#~ "さらに、 `@ConfigProperties` でアノテーションされたクラスは、以下の例に似た Bean Validation "
#~ "アノテーションでアノテーションすることができます。"

#, fuzzy
#~ msgid ""
#~ "For validation to work, the `quarkus-hibernate-validator` extension needs to "
#~ "be present."
#~ msgstr "検証が機能するためには、 `quarkus-hibernate-validator` 拡張モジュールが存在する必要があります。"

#, fuzzy
#~ msgid ""
#~ "If the validation fails with the given configuration, the application will "
#~ "fail to start and indicate the corresponding validation errors in the log."
#~ msgstr "指定された設定で検証に失敗した場合、アプリケーションは起動に失敗し、対応する検証エラーをログに表示します。"

#, fuzzy
#~ msgid ""
#~ "In the case of an interface being annotated with `@ConfigProperties`, the "
#~ "interface is allowed to extend other interfaces and methods from the entire "
#~ "interface hierarchy are used to bind properties."
#~ msgstr ""
#~ "`@ConfigProperties` "
#~ "でアノテーションされたインターフェイスの場合、インターフェイスは他のインターフェイスを拡張することができ、インターフェイス階層全体のメソッドがプロパティをバインドするために使用されます。"

#, fuzzy
#~ msgid "Using same ConfigProperties with different prefixes"
#~ msgstr "同じConfigPropertiesを異なる接頭辞で使用する"

#, fuzzy
#~ msgid ""
#~ "Quarkus also supports the use of the same `@ConfigProperties` object with "
#~ "different prefixes for each injection point using the `io.quarkus.arc.config."
#~ "@ConfigPrefix` annotation.  Say for example that `GreetingConfiguration` "
#~ "from above needs to be used for both the `greeting` prefix and the `other` "
#~ "prefix.  In that case the code would look like so:"
#~ msgstr ""
#~ "Quarkusは、 `io.quarkus.arc.config.@ConfigPrefix` "
#~ "アノテーションを使用して、インジェクションポイントごとに異なるプレフィックスを持つ同じ `@ConfigProperties` "
#~ "オブジェクトの使用もサポートしています。例えば、上の `GreetingConfiguration` を `greeting` の接頭辞と "
#~ "`other` の接頭辞の両方に使用する必要があるとします。その場合のコードは以下のようになります。"

#, fuzzy
#~ msgid "`GreetingConfiguration.java`"
#~ msgstr "`GreetingConfiguration.java`"

#, fuzzy
#~ msgid "`SomeBean.java`"
#~ msgstr "`SomeBean.java`"

#, fuzzy
#~ msgid ""
#~ "At this injection point `greetingConfiguration` will use the `greeting` "
#~ "prefix since that is what has been defined on `@ConfigProperties`."
#~ msgstr ""
#~ "この注入ポイントでは、 `greetingConfiguration` は `@ConfigProperties` で定義されている "
#~ "`greeting` のプレフィックスを使用します。"

#, fuzzy
#~ msgid ""
#~ "At this injection point `otherConfiguration` will use the `other` prefix "
#~ "from `@ConfigPrefix` instead of the `greeting` prefix. Notice that in this "
#~ "case `@Inject` is not required."
#~ msgstr ""
#~ "この注入ポイントでは、 `otherConfiguration` は `greeting` の接頭辞の代わりに `@ConfigPrefix` から "
#~ "`other` の接頭辞を使用します。この場合、 `@Inject` は必須ではないことに注意してください。"

#, fuzzy
#~ msgid "List of all configuration properties"
#~ msgstr "すべての設定プロパティのリスト"

#, fuzzy
#~ msgid ""
#~ "All the Quarkus configuration properties are link:all-config[documented and "
#~ "searchable]."
#~ msgstr "Quarkusの設定プロパティはすべて link:all-config[文書化されており、検索可能です]。"

#, fuzzy
#~ msgid "Generating configuration for your application"
#~ msgstr "アプリケーションの設定を生成する"

#, fuzzy
#~ msgid ""
#~ "It is also possible to generate an example `application.properties` with all "
#~ "known configuration properties, to make it easy to see what Quarkus "
#~ "configuration options are available. To do this, run:"
#~ msgstr ""
#~ "また、Quarkusの設定オプションがどのようなものかを簡単に確認できるように、すべての既知の設定プロパティを含むサンプル（ `application."
#~ "properties` ）を生成することもできます。これを行うには、実行します。"

#, fuzzy
#~ msgid "/mvnw quarkus:generate-config"
#~ msgstr "/mvnw quarkus:generate-config"

#, fuzzy
#~ msgid ""
#~ "This will create a `src/main/resources/application.properties.example` file "
#~ "that contains all the config options exposed via the extensions you "
#~ "currently have installed. These options are commented out, and have their "
#~ "default value when applicable. For example this HTTP port config entry will "
#~ "appear as:"
#~ msgstr ""
#~ "これにより、現在インストールされているエクステンションを介して公開されているすべての設定オプションを含む `src/main/resources/"
#~ "application.properties.example` "
#~ "ファイルが作成されます。これらのオプションはコメントアウトされ、該当する場合はデフォルト値となります。例えば、この HTTP "
#~ "ポート設定エントリは次のように表示されます。"

#, fuzzy
#~ msgid "# # The HTTP port # #quarkus.http.port=8080"
#~ msgstr "# # The HTTP port # #quarkus.http.port=8080"

#, fuzzy
#~ msgid ""
#~ "Rather than generating an example config file, you can also add these to you "
#~ "actual config file by setting the `-Dfile` parameter:"
#~ msgstr "例のコンフィグファイルを生成するのではなく、 `-Dfile` パラメータを設定して実際のコンフィグファイルに追加することもできます。"

#, fuzzy
#~ msgid "/mvnw quarkus:generate-config -Dfile=application.properties"
#~ msgstr "/mvnw quarkus:generate-config -Dfile=application.properties"

#, fuzzy
#~ msgid ""
#~ "If a config option is already present (commented or not) it will not be "
#~ "added, so it is safe to run this after adding an additional extension to see "
#~ "what additional options have been added."
#~ msgstr ""
#~ "設定オプションが既に存在する場合 (コメントされていてもいなくても) "
#~ "は追加されないので、エクステンションを追加した後にこれを実行して、どのような追加オプションが追加されたかを確認するのが安全です。"

#, fuzzy
#~ msgid "Overriding properties at runtime"
#~ msgstr "実行時にプロパティをオーバーライド"

#, fuzzy
#~ msgid "/mvnw clean package"
#~ msgstr "/MVNW クリーンパッケージ"

#, fuzzy
#~ msgid ""
#~ "You can override these runtime properties with the following mechanisms (in "
#~ "decreasing priority):"
#~ msgstr "これらの実行時プロパティは、以下のメカニズムでオーバーライドすることができます（優先度の高いものから順に）。"

#, fuzzy
#~ msgid ""
#~ "for a runner jar: `java -Dquarkus.datasource.password=youshallnotpass -jar "
#~ "target/myapp-runner.jar`"
#~ msgstr ""
#~ "ランナージャーのために `java -Dquarkus.datasource.password=youshallnotpass -jar target/"
#~ "myapp-runner.jar`"

#, fuzzy
#~ msgid ""
#~ "for a native executable: `./target/myapp-runner -Dquarkus.datasource."
#~ "password=youshallnotpass`"
#~ msgstr ""
#~ "ネイティブ実行ファイルの場合。 `./target/myapp-runner -Dquarkus.datasource.password="
#~ "youshallnotpass`"

#, fuzzy
#~ msgid ""
#~ "for a runner jar: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; java "
#~ "-jar target/myapp-runner.jar`"
#~ msgstr ""
#~ "ランナージャーのために `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; java -jar "
#~ "target/myapp-runner.jar`"

#, fuzzy
#~ msgid ""
#~ "for a native executable: `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass "
#~ "; ./target/myapp-runner`"
#~ msgstr ""
#~ "ネイティブ実行ファイルの場合。 `export QUARKUS_DATASOURCE_PASSWORD=youshallnotpass ; ./"
#~ "target/myapp-runner`"

#, fuzzy
#~ msgid ""
#~ "using an environment file named `.env` placed in the current working "
#~ "directory containing the line `QUARKUS_DATASOURCE_PASSWORD=youshallnotpass` "
#~ "(for dev mode, this file can be placed in the root of the project, but it is "
#~ "advised to not check it in to version control)"
#~ msgstr ""
#~ "`.env` という名前の環境ファイルを使用して、現在の作業ディレクトリに `QUARKUS_DATASOURCE_PASSWORD="
#~ "youshallnotpass` という行を含む環境ファイルを配置します "
#~ "(開発者モードの場合、このファイルはプロジェクトのルートに配置することができますが、バージョン管理にチェックを入れないことをお勧めします)。"

#, fuzzy
#~ msgid ""
#~ "By placing an `application.properties` file inside a directory named "
#~ "`config` which resides in the directory where the application runs, any "
#~ "runtime properties defined in that file will override the default "
#~ "configuration. Furthermore any runtime properties added to this file that "
#~ "were not part of the original `application.properties` file _will also_ be "
#~ "taken into account."
#~ msgstr ""
#~ "アプリケーションが実行されるディレクトリに存在する `config` という名前のディレクトリ内に `application.properties` "
#~ "ファイルを配置することで、そのファイルで定義されているランタイムプロパティは、デフォルトの設定を上書きします。さらに、元の `application."
#~ "properties` ファイルの一部ではない、このファイルに追加されたランタイムプロパティも考慮され _ます_。"

#, fuzzy
#~ msgid "This works in the same way for runner jar and the native executable"
#~ msgstr "これは runner jar とネイティブ実行ファイルでも同じように動作します。"

#, fuzzy
#~ msgid ""
#~ "Environment variables names are following the conversion rules of link:https:"
#~ "//github.com/eclipse/microprofile-config/blob/master/spec/src/main/asciidoc/"
#~ "configsources.asciidoc#default-configsources[Eclipse MicroProfile]"
#~ msgstr ""
#~ "環境変数名は link:https://github.com/eclipse/microprofile-config/blob/master/spec/"
#~ "src/main/asciidoc/configsources.asciidoc#default-configsources[Eclipse "
#~ "MicroProfile]の変換ルールに従っています。"

#, fuzzy
#~ msgid ""
#~ "Environment variables without a configuration profile defined in `.env` file "
#~ "will overwrite all its related profiles in `application.properties`, e.g. "
#~ "`%test.application.value` is overwritten by `APPLICATION_VALUE` in `.env` "
#~ "file."
#~ msgstr ""
#~ "`.env` `%test.application.value` `APPLICATION_VALUE` `.env` "
#~ "ファイルで定義されている設定プロファイルを持たない環境変数は、 の関連プロファイルをすべて上書きします。 `application."
#~ "properties`"

#, fuzzy
#~ msgid ""
#~ "The `config/application.properties` features is available in development "
#~ "mode as well. To make use of it, `config/application.properties` needs to be "
#~ "placed inside the build tool's output directory (`target` for Maven and "
#~ "`build/classes/java/main` for Gradle).  Keep in mind however that any "
#~ "cleaning operation from the build tool like `mvn clean` or `gradle clean` "
#~ "will remove the `config` directory as well."
#~ msgstr ""
#~ "`config/application.properties` の機能は開発モードでも利用可能です。これを利用するには、 `config/"
#~ "application.properties` をビルドツールの出力ディレクトリ (Maven の場合は `target` 、Gradle の場合は "
#~ "`build/classes/java/main` ) の中に配置する必要があります。ただし、 `mvn clean` や `gradle clean` "
#~ "のようなビルドツールからのクリーンアップ操作は、 `config` ディレクトリも削除してしまうことに注意してください。"

#, fuzzy
#~ msgid ""
#~ "To use profiles in the `.env` file, you can follow a `_{PROFILE}_CONFIG_KEY="
#~ "value` pattern. An equivalent of the above example in an `.env` file would "
#~ "be:"
#~ msgstr ""
#~ "`.env` ファイルでプロファイルを使用するには、 `_{PROFILE}_CONFIG_KEY=value` のパターンに従います。 `.env` "
#~ "ファイル内の上記の例と同等のものは、次のようになります。"

#, fuzzy
#~ msgid ""
#~ "By default Quarkus has three profiles, although it is possible to use as "
#~ "many as you like. The default profiles are:"
#~ msgstr ""
#~ "デフォルトでは、Quarkusには3つのプロファイルがありますが、好きなだけ使用することができます。デフォルトのプロファイルは以下の通りです。"

#, fuzzy
#~ msgid "*dev* - Activated when in development mode (i.e. `quarkus:dev`)\n"
#~ msgstr "*dev*- 開発モードのときに有効になります ( `quarkus:dev`)"

#, fuzzy
#~ msgid "*test* - Activated when running tests\n"
#~ msgstr "*test*- テストを実行しているときに有効"

#, fuzzy
#~ msgid ""
#~ "*prod* - The default profile when not running in development or test mode\n"
#~ msgstr "*prod*- 開発モードまたはテストモードで実行されていない場合のデフォルトプロファイル"

#, fuzzy
#~ msgid ""
#~ "There are two ways to set a custom profile, either via the `quarkus.profile` "
#~ "system property or the `QUARKUS_PROFILE` environment variable. If both are "
#~ "set the system property takes precedence. Note that it is not necessary to "
#~ "define the names of these profiles anywhere, all that is necessary is to "
#~ "create a config property with the profile name, and then set the current "
#~ "profile to that name. For example if I want a `staging` profile with a "
#~ "different HTTP port I can add the following to `application.properties`:"
#~ msgstr ""
#~ "カスタム・プロファイルを設定するには、 `quarkus.profile` システム・プロパティまたは `QUARKUS_PROFILE` "
#~ "環境変数を介して設定する方法があります。両方が設定されている場合は system "
#~ "プロパティが優先されます。これらのプロファイルの名前をどこかで定義する必要はないことに注意してください。必要なのは、プロファイル名を含む設定プロパティを作成し、現在のプロファイルをその名前に設定することだけです。例えば、 "
#~ "`staging` プロファイルに異なる HTTP ポートを設定したい場合は、 `application.properties`."

#, fuzzy
#~ msgid ""
#~ "And then set the `QUARKUS_PROFILE` environment variable to `staging` to "
#~ "activate my profile."
#~ msgstr "そして、 `QUARKUS_PROFILE` 環境変数を `staging` に設定して、プロフィールを有効化します。"

#, fuzzy
#~ msgid ""
#~ "The proper way to check the active profile programmatically is to use the "
#~ "`getActiveProfile` method of `io.quarkus.runtime.configuration."
#~ "ProfileManager`."
#~ msgstr ""
#~ "アクティブなプロファイルをプログラムで確認する適切な方法は、 `getActiveProfile` の `io.quarkus.runtime."
#~ "configuration.ProfileManager`."

#, fuzzy
#~ msgid "Using `@ConfigProperty(\"quarkus.profile\")` will *not* work properly."
#~ msgstr "`@ConfigProperty(\"quarkus.profile\")` を使うと正常に動作し *ません*。"

#, fuzzy
#~ msgid "Using Property Expressions"
#~ msgstr "プロパティ式の使用"

#, fuzzy
#~ msgid ""
#~ "Quarkus supports the use of property expressions in the `application."
#~ "properties` file."
#~ msgstr "Quarkusは、 `application.properties` ファイルのプロパティ式の使用をサポートしています。"

#, fuzzy
#~ msgid ""
#~ "These expressions are resolved when the property is read.  So if your "
#~ "configuration property is a build time configuration property, the property "
#~ "expression will be resolved at build time.  If your configuration property "
#~ "is overridable at runtime, the property expression will be resolved at "
#~ "runtime."
#~ msgstr ""
#~ "これらの式は、プロパティの読み込み時に解決されます。したがって、設定プロパティがビルド時の設定プロパティである場合、プロパティ式はビルド時に解決されます。構成プロパティが実行時にオーバーライド可能な場合、プロパティ式は実行時に解決されます。"

#, fuzzy
#~ msgid ""
#~ "You can use property expressions both for the Quarkus configuration or for "
#~ "your own configuration properties."
#~ msgstr "プロパティ式は、Quarkusの設定のためにも、独自の設定プロパティのためにも使用できます。"

#, fuzzy
#~ msgid ""
#~ "Property expressions are defined this way: `${my-property-expression}`."
#~ msgstr "プロパティ式はこのように定義されています: `${my-property-expression}`."

#, fuzzy
#~ msgid "For example, having the following property:"
#~ msgstr "例えば、以下のようなプロパティを持つこと。"

#, fuzzy
#~ msgid "and another property defined as:"
#~ msgstr "と定義された別のプロパティがあります。"

#, fuzzy
#~ msgid "will result in the value of the `callable.url` property being set to:"
#~ msgstr "を指定すると、 `callable.url` プロパティの値が設定されます。"

#, fuzzy
#~ msgid ""
#~ "Another example would be defining different database servers depending on "
#~ "the profile used:"
#~ msgstr "別の例としては、使用するプロファイルに応じて異なるデータベースサーバを定義することができます。"

#, fuzzy
#~ msgid "can be simplified by having:"
#~ msgstr "を持つことで簡略化することができます。"

#, fuzzy
#~ msgid ""
#~ "It does result in one more line in this example but the value of "
#~ "`application.server` can be reused in other properties, diminishing the "
#~ "possibility of typos and providing more flexibility in property definitions."
#~ msgstr ""
#~ "この例ではさらに1行増えることになりますが、 `application.server` "
#~ "の値は他のプロパティで再利用でき、誤字脱字の可能性を減らし、プロパティ定義の柔軟性を高めることができます。"

#, fuzzy
#~ msgid "Combining Property Expressions and Environment Variables"
#~ msgstr "プロパティ式と環境変数の組み合わせ"

#, fuzzy
#~ msgid ""
#~ "Quarkus also supports the combination of both property expressions and "
#~ "environment variables."
#~ msgstr "また、Quarkusは、プロパティ式と環境変数の両方の組み合わせもサポートしています。"

#, fuzzy
#~ msgid ""
#~ "Let's assume you have following property defined in `application.properties`:"
#~ ""
#~ msgstr "`application.properties` で以下のようなプロパティが定義されているとします。"

#, fuzzy
#~ msgid ""
#~ "You can combine environment variables and property expressions by having a "
#~ "property defined as follows:"
#~ msgstr "以下のようにプロパティを定義しておくことで、環境変数とプロパティ式を組み合わせることができます。"

#, fuzzy
#~ msgid ""
#~ "This will expand the `HOST` environment variable and use the value of the "
#~ "property `remote.host` as the default value if `HOST` is not set."
#~ msgstr ""
#~ "これは `HOST` 環境変数を展開し、 `HOST` が設定されていない場合はプロパティ `remote.host` "
#~ "の値をデフォルト値として使用します。"

#, fuzzy
#~ msgid ""
#~ "For the purpose of this section we used the property `remote.host` we "
#~ "defined previously.  It has to be noted that the value could have been a "
#~ "fixed one such as in:"
#~ msgstr ""
#~ "このセクションでは、先に定義したプロパティ `remote.host` を使用しています。のような固定値であってもよいことに注意しなければなりません。"

#, fuzzy
#~ msgid ""
#~ "which will result in `localhost` as the default value if `HOST` is not set."
#~ msgstr "`HOST` が設定されていない場合は `localhost` がデフォルト値になります。"

#, fuzzy
#~ msgid "Clearing properties"
#~ msgstr "プロパティのクリア"

#, fuzzy
#~ msgid ""
#~ "Run time properties which are optional, and which have had values set at "
#~ "build time or which have a default value, may be explicitly cleared by "
#~ "assigning an empty string to the property.  Note that this will _only_ "
#~ "affect run time properties, and will _only_ work with properties whose "
#~ "values are not required."
#~ msgstr ""
#~ "オプションであり、ビルド時に値が設定されていたり、デフォルト値を持つランタイムプロパティは、空の文字列をプロパティに代入することで、明示的にクリアすることができます。これはランタイムプロパティに "
#~ "_のみ_影響し、値が必須ではないプロパティで _のみ_動作することに注意してください。"

#, fuzzy
#~ msgid ""
#~ "The property may be cleared by setting the corresponding `application."
#~ "properties` property, setting the corresponding system property, or setting "
#~ "the corresponding environment variable."
#~ msgstr ""
#~ "このプロパティは、対応する `application.properties` "
#~ "プロパティを設定したり、対応するシステム・プロパティを設定したり、対応する環境変数を設定したりすることでクリアできます。"

#, fuzzy
#~ msgid "Miscellaneous"
#~ msgstr "その他"

#, fuzzy
#~ msgid ""
#~ "The default Quarkus application runtime profile is set to the profile used "
#~ "to build the application.  For example:"
#~ msgstr ""
#~ "デフォルトのQuarkusアプリケーション実行時プロファイルは、アプリケーションの構築に使用されるプロファイルに設定されています。例えば、以下のようになります。"

#, fuzzy
#~ msgid ""
#~ "The command will run with the `prod-aws` profile. This can be overridden "
#~ "using the `quarkus.profile` system property."
#~ msgstr ""
#~ "コマンドは `prod-aws` プロファイルで実行されます。これは `quarkus.profile` system "
#~ "プロパティを使用して上書きすることができます。"

#, fuzzy
#~ msgid "Custom Configuration"
#~ msgstr "カスタム構成"

#, fuzzy
#~ msgid "Custom configuration sources"
#~ msgstr "カスタム設定ソース"

#, fuzzy
#~ msgid ""
#~ "You can also introduce custom configuration sources in the standard "
#~ "MicroProfile Config manner.  To do this, you must provide a class which "
#~ "implements either `org.eclipse.microprofile.config.spi.ConfigSource` or `org."
#~ "eclipse.microprofile.config.spi.ConfigSourceProvider`.  Create a https://"
#~ "docs.oracle.com/javase/8/docs/api/java/util/ServiceLoader.html[service file] "
#~ "for the class and it will be detected and installed at application startup."
#~ msgstr ""
#~ "標準的な MicroProfile Config の方法でカスタム設定ソースを導入することもできます。これを行うには、 `org.eclipse."
#~ "microprofile.config.spi.ConfigSource` または `org.eclipse.microprofile.config."
#~ "spi.ConfigSourceProvider` を実装したクラスを提供する必要があります。クラス用の link:https://docs."
#~ "oracle.com/javase/8/docs/api/java/util/ServiceLoader."
#~ "html[サービスファイル]を作成すると、アプリケーションの起動時に検出されてインストールされます。"

#, fuzzy
#~ msgid "Custom configuration converters"
#~ msgstr "カスタムコンフィギュレーションコンバータ"

#, fuzzy
#~ msgid ""
#~ "You can also use your custom types as a configuration values. This can be "
#~ "done by implementing `org.eclipse.microprofile.config.spi.Converter<T>` and "
#~ "adding its fully qualified class name in the `META-INF/services/org.eclipse."
#~ "microprofile.config.spi.Converter` file."
#~ msgstr ""
#~ "また、カスタム型を設定値として使用することもできます。これは `org.eclipse.microprofile.config.spi."
#~ "Converter&amp;lt;T&amp;gt;` を実装し、 `META-INF/services/org.eclipse."
#~ "microprofile.config.spi.Converter` ファイルにその完全修飾クラス名を追加することで行うことができます。"

#, fuzzy
#~ msgid "Let us assume you have a custom type like this one:"
#~ msgstr "このようなカスタムタイプを想定してみましょう。"

#, fuzzy
#~ msgid ""
#~ "The corresponding converter will look like the one below. Please note that "
#~ "your custom converter class must be `public` and must have a `public` no-"
#~ "argument constructor. It also must not be `abstract`."
#~ msgstr ""
#~ "対応するコンバータは以下のようになります。カスタムコンバータクラスは `public` で、 `public` "
#~ "の引数なしのコンストラクタを持つ必要があることに注意してください。また、 `abstract`."

#, fuzzy
#~ msgid ""
#~ "Then you need to include the fully qualified class name of the converter in "
#~ "a service file `META-INF/services/org.eclipse.microprofile.config.spi."
#~ "Converter`.  If you have more converters, simply add their class names in "
#~ "this file as well. Single fully qualified class name per line, for example:"
#~ msgstr ""
#~ "次に、コンバータの完全修飾クラス名をサービスファイル `META-INF/services/org.eclipse.microprofile."
#~ "config.spi.Converter` "
#~ "に含める必要があります。他にもコンバータがある場合は、そのクラス名をこのファイルに追加してください。例えば、1行に1つの完全修飾クラス名を指定します。"

#, fuzzy
#~ msgid ""
#~ "Please note that `SomeOtherConverter` and `YetAnotherConverter` were added "
#~ "just for a demonstration. If you include in this file classes which are not "
#~ "available at runtime, the converters loading will fail."
#~ msgstr ""
#~ "`SomeOtherConverter` と `YetAnotherConverter` "
#~ "はあくまでもデモのために追加したものですのでご注意ください。実行時に利用できないクラスをこのファイルに含めると、コンバータの読み込みに失敗します。"

#, fuzzy
#~ msgid ""
#~ "After this is done you can use your custom type as a configuration value:"
#~ msgstr "これが終わったら、カスタムタイプを設定値として使用することができます。"

#, fuzzy
#~ msgid "Converter priority"
#~ msgstr "コンバータの優先順位"

#, fuzzy
#~ msgid ""
#~ "In some cases, you may want to use a custom converter to convert a type "
#~ "which is already converted by a different converter. In such cases, you can "
#~ "use the `javax.annotation.Priority` annotation to change converters "
#~ "precedence and make your custom converter of higher priority than the other "
#~ "on the list."
#~ msgstr ""
#~ "場合によっては、すでに別のコンバータで変換されている型をカスタムコンバータで変換したいこともあるでしょう。そのような場合は、 `javax."
#~ "annotation.Priority` "
#~ "アノテーションを使用してコンバータの優先順位を変更し、カスタムコンバータをリストの他のコンバータよりも優先度の高いものにすることができます。"

#, fuzzy
#~ msgid ""
#~ "By default, if no `@Priority` can be found on a converter, it's registered "
#~ "with a priority of 100 and all Quarkus core converters are registered with a "
#~ "priority of 200, so depending on which converter you would like to replace, "
#~ "you need to set a higher value."
#~ msgstr ""
#~ "デフォルトでは、コンバータに `@Priority` "
#~ "が見つからない場合は優先度100で登録され、Quarkusのコアコンバータはすべて優先度200で登録されているので、どのコンバータを置き換えるかによっては、より高い値を設定する必要があります。"

#, fuzzy
#~ msgid ""
#~ "To demonstrate the idea let us implement a custom converter which will take "
#~ "precedence over `MicroProfileCustomValueConverter` implemented in the "
#~ "previous example."
#~ msgstr ""
#~ "このアイデアを実証するために、先ほどの例で実装した `MicroProfileCustomValueConverter` "
#~ "よりも優先されるカスタムコンバータを実装してみましょう。"

#, fuzzy
#~ msgid ""
#~ "Since it converts the same value type (namely `MicroProfileCustomValue`) and "
#~ "has a priority of 150, it will be used instead of a "
#~ "`MicroProfileCustomValueConverter` which has a default priority of 100."
#~ msgstr ""
#~ "これは同じ値型(すなわち `MicroProfileCustomValue`)を変換し、優先度が150なので、デフォルトの優先度が100の "
#~ "`MicroProfileCustomValueConverter` の代わりに使用されます。"

#, fuzzy
#~ msgid ""
#~ "This new converter also needs to be listed in a service file, i.e. `META-INF/"
#~ "services/org.eclipse.microprofile.config.spi.Converter`."
#~ msgstr ""
#~ "この新しいコンバータは、サービスファイル、すなわち `META-INF/services/org.eclipse.microprofile.config."
#~ "spi.Converter` に記載する必要があります。"

#, fuzzy
#~ msgid "YAML for Configuration"
#~ msgstr "設定用YAML"

#, fuzzy
#~ msgid "Add YAML Config Support"
#~ msgstr "YAMLコンフィグサポートの追加"

#, fuzzy
#~ msgid ""
#~ "You might want to use YAML over properties for configuration.  Since link:"
#~ "https://github.com/smallrye/smallrye-config[SmallRye Config] brings support "
#~ "for YAML configuration, Quarkus supports this as well."
#~ msgstr ""
#~ "設定にはプロパティよりもYAMLを使いたいと思うかもしれません。 link:https://github.com/smallrye/smallrye-"
#~ "config[SmallRye Configは]YAML設定をサポートしているので、Quarkusはこれもサポートしています。"

#, fuzzy
#~ msgid "First you will need to add the YAML extension to your `pom.xml`:"
#~ msgstr "最初に、YAML拡張子を `pom.xml`.NET に追加する必要があります。"

#, fuzzy
#~ msgid ""
#~ "Or you can alternatively run this command in the directory containing your "
#~ "Quarkus project:"
#~ msgstr "または、Quarkusプロジェクトのあるディレクトリでこのコマンドを実行することもできます。"

#, fuzzy
#~ msgid ""
#~ "Now Quarkus can read YAML configuration files.  The config directories and "
#~ "priorities are the same as before."
#~ msgstr "これでQuarkusはYAML設定ファイルを読み込めるようになりました。設定ディレクトリと優先順位は以前と同じです。"

#, fuzzy
#~ msgid ""
#~ "Quarkus will choose an `application.yaml` over an `application.properties`.  "
#~ "YAML files are just an alternative way to configure your application.  You "
#~ "should decide and keep one configuration type to avoid errors."
#~ msgstr ""
#~ "Quarkusは、 `application.properties` よりも `application.yaml` "
#~ "を選択します。YAMLファイルは、アプリケーションを設定するための代替手段にすぎません。エラーを避けるためには、1つの設定タイプを決めて保持しておく必要があります。"

#, fuzzy
#~ msgid "Configuration Examples"
#~ msgstr "設定例"

#, fuzzy
#~ msgid ""
#~ "Quarkus also supports using `application.yml` as the name of the YAML file. "
#~ "The same rules apply for this file as for `application.yaml`."
#~ msgstr ""
#~ "QuarkusはYAMLファイルの名前として `application.yml` を使用することもサポートしています。このファイルには、 "
#~ "`application.yaml` と同じルールが適用されます。"

#, fuzzy
#~ msgid "Profile dependent configuration"
#~ msgstr "プロファイル依存の設定"

#, fuzzy
#~ msgid ""
#~ "Providing profile dependent configuration with YAML is done like with "
#~ "properties.  Just add the `%profile` wrapped in quotation marks before "
#~ "defining the key-value pairs:"
#~ msgstr ""
#~ "プロファイル依存の設定をYAMLで提供することはプロパティと同じように行われます。キーと値のペアを定義する前に、引用符で囲んだ `%profile` "
#~ "を追加するだけです。"

#, fuzzy
#~ msgid "Configuration key conflicts"
#~ msgstr "設定キーの競合"

#, fuzzy
#~ msgid ""
#~ "The MicroProfile Configuration specification defines configuration keys as "
#~ "an arbitrary `.`-delimited string.  However, structured formats like YAML "
#~ "naively only support a subset of the possible configuration namespace.  For "
#~ "example, consider the two configuration properties `quarkus.http.cors` and "
#~ "`quarkus.http.cors.methods`.  One property is the prefix of another, so it "
#~ "may not be immediately evident how to specify both keys in your YAML "
#~ "configuration."
#~ msgstr ""
#~ "MicroProfile の設定仕様は、設定キーを任意の `.`-delimited 文字列として定義している。しかし、YAML "
#~ "のような構造化されたフォーマットは、素朴に可能な設定名前空間のサブセットしかサポートしていません。例えば、 `quarkus.http.cors` と "
#~ "`quarkus.http.cors.methods` の 2 "
#~ "つの設定プロパティを考えてみましょう。1つのプロパティは別のプロパティの接頭辞なので、YAMLの設定で両方のキーをどのように指定するかはすぐにはわからないかもしれません。"

#, fuzzy
#~ msgid ""
#~ "This is solved by using a `null` key (normally represented by `~`) for any "
#~ "YAML property which is a prefix of another one.  Here's an example:"
#~ msgstr ""
#~ "これは、別のプロパティの接頭辞であるYAMLプロパティに対して `null` キー(通常は `~` "
#~ "で表されます)を使用することで解決します。これは例です。"

#, fuzzy
#~ msgid ""
#~ "An example YAML configuration resolving prefix-related key name conflicts"
#~ msgstr "プレフィックス関連のキー名の競合を解決するYAML設定の例"

#, fuzzy
#~ msgid ""
#~ "In general, `null` YAML keys are not included in assembly of the "
#~ "configuration property name, allowing them to be used to any level for "
#~ "disambiguating configuration keys."
#~ msgstr ""
#~ "一般的に、 `null` "
#~ "YAMLキーは設定プロパティ名のアセンブリには含まれていないので、設定キーを曖昧にするために任意のレベルで使用することができます。"

#, fuzzy
#~ msgid "More info on how to configure"
#~ msgstr "設定方法の詳細"

#, fuzzy
#~ msgid "Quarkus relies on SmallRye Config and inherits its features."
#~ msgstr "QuarkusはSmallRye Configに依存しており、その機能を継承しています。"

#, fuzzy
#~ msgid "SmallRye Config provides:"
#~ msgstr "SmallRye Configが提供しています。"

#, fuzzy
#~ msgid "Additional Config Sources"
#~ msgstr "その他の設定ソース"

#, fuzzy
#~ msgid "Additional Converters"
#~ msgstr "追加のコンバータ"

#, fuzzy
#~ msgid "Interceptors for configuration value resolution"
#~ msgstr "設定値解決のためのインターセプタ"

#, fuzzy
#~ msgid "Relocate Configuration Properties"
#~ msgstr "構成プロパティの再配置"

#, fuzzy
#~ msgid "Fallback Configuration Properties"
#~ msgstr "フォールバック構成プロパティ"

#, fuzzy
#~ msgid "Logging"
#~ msgstr "ロギング"

#, fuzzy
#~ msgid "Hide Secrets"
#~ msgstr "秘密を隠す"

#, fuzzy
#~ msgid ""
#~ "For more information, please check the link:https://smallrye.io/docs/"
#~ "smallrye-config/index.html[SmallRye Config documentation]."
#~ msgstr ""
#~ "詳細については、 link:https://smallrye.io/docs/smallrye-config/index.html[SmallRye "
#~ "Configのドキュメントを]参照してください。"
