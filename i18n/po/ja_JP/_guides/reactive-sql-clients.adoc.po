# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-sql-clients.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Reactive SQL Clients"
msgstr "Quarkus - リアクティブSQLクライアント"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:13
#, fuzzy
msgid ""
"The Reactive SQL Clients have a straightforward API focusing on scalability "
"and low-overhead.  Currently, the following database servers are supported:"
msgstr ""
"Reactive SQL クライアントは、スケーラビリティと低オーバーヘッドに焦点を当てたシンプルな API "
"を持っています。現在、以下のデータベースサーバーがサポートされています。"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:15
#: upstream/_guides/reactive-sql-clients.adoc:627
#, no-wrap, fuzzy
msgid "DB2"
msgstr "ディービーツー"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:16
#: upstream/_guides/reactive-sql-clients.adoc:586
#: upstream/_guides/reactive-sql-clients.adoc:635
#, no-wrap, fuzzy
msgid "PostgreSQL"
msgstr "ポストジェスチル"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:17
#: upstream/_guides/reactive-sql-clients.adoc:604
#: upstream/_guides/reactive-sql-clients.adoc:631
#, no-wrap, fuzzy
msgid "MariaDB/MySQL"
msgstr "MariaDB/MySQL"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:19
#, fuzzy
msgid ""
"In this guide, you will learn how to implement a simple CRUD application "
"exposing data stored in *PostgreSQL* over a RESTful API."
msgstr ""
"このガイドでは、 *PostgreSQL*に格納されたデータをRESTful APIで公開するシンプルなCRUDアプリケーションの実装方法を学びます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:21
#, fuzzy
msgid ""
"Extension and connection pool class names for each client can be found at "
"the bottom of this document."
msgstr "各クライアントの拡張子と接続プールのクラス名は、このドキュメントの下部に記載されています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:23
#, fuzzy
msgid ""
"If you are not familiar with the Quarkus Vert.x extension, consider reading "
"the link:vertx[Using Eclipse Vert.x] guide first."
msgstr ""
"Quarkus Vert.xエクステンションに慣れていない場合は、まず link:vertx[Using Eclipse Vert."
"x]ガイドを読むことを検討してください。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:25
#, fuzzy
msgid "The application shall manage fruit entities:"
msgstr "アプリケーションは、果実の実体を管理するものとする。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:29
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:31
#, no-wrap
msgid "    public Long id;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:33
#, no-wrap
msgid "    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:36
#, no-wrap
msgid "    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:40
#, no-wrap
msgid "    public Fruit(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:46
#, no-wrap
msgid ""
"    public Fruit(Long id, String name) {\n"
"        this.id = id;\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:51
#, fuzzy
msgid "Do you need a ready-to-use PostgreSQL server to try out the examples?"
msgstr "実例を試すためにすぐに使えるPostgreSQLサーバは必要ですか？"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:55
#, no-wrap
msgid ""
"docker run --ulimit memlock=-1:-1 -it --rm=true --memory-swappiness=0 --name "
"quarkus_test -e POSTGRES_USER=quarkus_test -e POSTGRES_PASSWORD=quarkus_test "
"-e POSTGRES_DB=quarkus_test -p 5432:5432 postgres:10.5\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:58
#, no-wrap, fuzzy
msgid "Installing"
msgstr "インストール"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:60
#, no-wrap, fuzzy
msgid "Reactive PostgreSQL Client extension"
msgstr "Reactive PostgreSQLクライアント拡張"

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:64
#, fuzzy
msgid ""
"First, make sure your project has the `quarkus-reactive-pg-client` extension "
"enabled.  If you are creating a new project, set the `extensions` parameter "
"as follows:"
msgstr ""
"まず、プロジェクトで `quarkus-reactive-pg-client` "
"の拡張子が有効になっていることを確認します。新しいプロジェクトを作成する場合は、 `extensions` パラメータを以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:72
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=reactive-pg-client-quickstart \\\n"
"    -Dextensions=\"reactive-pg-client\"\n"
"cd reactive-pg-client-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:75
#, fuzzy
msgid ""
"If you have an already created project, the `reactive-pg-client` extension "
"can be added to an existing Quarkus project with the `add-extension` command:"
""
msgstr ""
"すでに作成済みのプロジェクトがある場合は、 `reactive-pg-client` 拡張機能を既存のQuarkusプロジェクトに追加するには、 "
"`add-extension` コマンドを使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:79
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"reactive-pg-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:82
#, fuzzy
msgid ""
"Otherwise, you can manually add this to the dependencies section of your "
"`pom.xml` file:"
msgstr "そうでなければ、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:89
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-reactive-pg-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:91
#, no-wrap, fuzzy
msgid "Mutiny"
msgstr "反乱"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:94
#, fuzzy
msgid ""
"Reactive REST endpoints in your application that return Uni or Multi need "
"`Mutiny support for RESTEasy` extension (`io.quarkus:quarkus-resteasy-"
"mutiny`) to work properly:"
msgstr ""
"アプリケーション内で Uni または Multi を返す Reactive REST エンドポイントが正しく動作するには `Mutiny support "
"for RESTEasy` 拡張機能 ( `io.quarkus:quarkus-resteasy-mutiny`) が必要です。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:98
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-mutiny\"\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:104
#, fuzzy
msgid ""
"In this guide, we will use the Mutiny API of the Reactive PostgreSQL Client. "
" If you're not familiar with Mutiny reactive types, read the link:getting-"
"started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr ""
"このガイドでは、Reactive PostgreSQLクライアントのMutiny "
"APIを使用します。Mutinyのリアクティブ型に慣れていない場合は、まず link:getting-started-"
"reactive#mutiny[Getting Started with Reactiveガイド]を読んでください。"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:106
#, no-wrap, fuzzy
msgid "JSON Binding"
msgstr "JSON バインディング"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:110
#, fuzzy
msgid ""
"We will expose `Fruit` instances over HTTP in the JSON format.  "
"Consequently, you also need to add the `quarkus-resteasy-jackson` extension:"
msgstr ""
"JSON 形式で HTTP 経由で `Fruit` インスタンスを公開します。その結果、 `quarkus-resteasy-jackson` "
"の拡張子も追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:114
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"resteasy-jackson\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:117
#, fuzzy
msgid ""
"If you prefer not to use the command line, manually add this to the "
"dependencies section of your `pom.xml` file:"
msgstr "コマンドラインを使いたくない場合は、 `pom.xml` ファイルの依存関係セクションに手動で追加してください。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:124
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:127
#, fuzzy
msgid ""
"Of course, this is only a requirement for this guide, not any application "
"using the Reactive PostgreSQL Client."
msgstr "もちろん、これはこのガイドの要件に過ぎず、Reactive PostgreSQLクライアントを使用したアプリケーションではありません。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:128
#, no-wrap, fuzzy
msgid "Configuring"
msgstr "設定"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:131
#, fuzzy
msgid ""
"The Reactive PostgreSQL Client can be configured with standard Quarkus "
"datasource properties and a reactive URL:"
msgstr ""
"Reactive "
"PostgreSQLクライアントは、Quarkusの標準的なデータソースプロパティと反応性のあるURLを使用して設定することができます。"

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:133
#, no-wrap, fuzzy
msgid "src/main/resources/application.properties"
msgstr "src/main/resources/application.properties"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:139
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=quarkus_test\n"
"quarkus.datasource.password=quarkus_test\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/quarkus_test\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:142
#, fuzzy
msgid ""
"With that you may create your `FruitResource` skeleton and `@Inject` a `io."
"vertx.mutiny.pgclient.PgPool` instance:"
msgstr ""
"これで `FruitResource` スケルトンと `@Inject` `io.vertx.mutiny.pgclient.PgPool` "
"インスタンスを作成することができます。"

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:144
#: upstream/_guides/reactive-sql-clients.adoc:163
#: upstream/_guides/reactive-sql-clients.adoc:260
#: upstream/_guides/reactive-sql-clients.adoc:312
#: upstream/_guides/reactive-sql-clients.adoc:339
#: upstream/_guides/reactive-sql-clients.adoc:371
#, no-wrap, fuzzy
msgid "src/main/java/org/acme/vertx/FruitResource.java"
msgstr "src/main/java/org/acme/vertx/FruitResource.java"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:148
#, no-wrap
msgid "@Path(\"fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:152
#, no-wrap
msgid "    @Inject\n"
"    io.vertx.mutiny.pgclient.PgPool client;\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:154
#, no-wrap, fuzzy
msgid "Database schema and seed data"
msgstr "データベーススキーマとシードデータ"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:158
#, fuzzy
msgid ""
"Before we implement the REST endpoint and data management code, we need to "
"setup the database schema.  It would also be convenient to have some data "
"inserted upfront."
msgstr ""
"RESTエンドポイントとデータ管理コードを実装する前に、データベーススキーマを設定する必要があります。また、いくつかのデータを前もって挿入しておくと便利です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:161
#, fuzzy
msgid ""
"For production we would recommend to use something like the link:"
"flyway[Flyway database migration tool].  But for development we can simply "
"drop and create the tables on startup, and then insert a few fruits."
msgstr ""
"本番環境では、 link:"
"flyway[Flywayデータベース移行ツール]のようなものを使用することをお勧めします。しかし、開発のためには、単に起動時にテーブルをドロップして作成し、いくつかのフルーツを挿入することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:168
#, no-wrap
msgid ""
"@Inject\n"
"@ConfigProperty(name = \"myapp.schema.create\", defaultValue = \"true\") // "
"<1>\n"
"boolean schemaCreate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:175
#, no-wrap
msgid ""
"@PostConstruct\n"
"void config() {\n"
"    if (schemaCreate) {\n"
"        initdb();\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:179
#, no-wrap
msgid "private void initdb() {\n"
"    // TODO\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:182
#, fuzzy
msgid ""
"You may override the default value of the `myapp.schema.create` property in "
"the `application.properties` file."
msgstr ""
"`application.properties` ファイルの `myapp.schema.create` "
"プロパティのデフォルト値を上書きすることができます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:186
#, fuzzy
msgid ""
"Almost ready! To initialize the DB in development mode, we will use the "
"client simple `query` method.  It returns a `Uni` and thus can be composed "
"to execute queries sequentially:"
msgstr ""
"もう少しで準備完了!開発モードでDBを初期化するには、クライアントのシンプルな `query` メソッドを使用します。これは `Uni` "
"を返すので、順次クエリを実行するように構成することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:195
#, no-wrap
msgid ""
"client.query(\"DROP TABLE IF EXISTS fruits\").execute()\n"
"    .flatMap(r -> client.query(\"CREATE TABLE fruits (id SERIAL PRIMARY KEY, "
"name TEXT NOT NULL)\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES "
"('Orange')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES "
"('Pear')\").execute())\n"
"    .flatMap(r -> client.query(\"INSERT INTO fruits (name) VALUES "
"('Apple')\").execute())\n"
"    .await().indefinitely();\n"
msgstr ""

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:198
#, no-wrap, fuzzy
msgid "Breaking Change in Quarkus 1.5"
msgstr "Quarkus 1.5での変更点の修正"

#. type: delimited block =
#: upstream/_guides/reactive-sql-clients.adoc:202
#, fuzzy
msgid ""
"Vert.x 3.9, integrated in Quarkus 1.5, introduces a breaking change "
"regarding the `query` methods.  To retrieve the result you need to call `."
"execute()`."
msgstr ""
"Vert.x 3.9は、Quarkus 1.5に統合され、 `query` メソッドに関する画期的な変更が導入されました。結果を取得するには、 `."
"execute()` を呼び出す必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:207
#, fuzzy
msgid ""
"Wondering why we need block until the latest query is completed? This code "
"is part of a `@PostConstruct` method and Quarkus invokes it synchronously.  "
"As a consequence, returning prematurely could lead to serving requests while "
"the database is not ready yet."
msgstr ""
"なぜ最新のクエリが完了するまでブロックする必要があるのでしょうか？このコードは `@PostConstruct` メソッドの一部であり、Quarkus "
"はこれを同期的に呼び出します。結果的に、早期に返すと、データベースの準備ができていない状態でリクエストを処理することになる可能性があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:211
#, fuzzy
msgid ""
"That's it! So far we have seen how to configure a pooled client and execute "
"simple queries.  We are now ready to develop the data management code and "
"implement our RESTful endpoint."
msgstr ""
"これで終わりです。ここまでで、プールされたクライアントを設定し、簡単なクエリを実行する方法を見てきました。これで、データ管理コードを開発し、RESTful "
"エンドポイントを実装する準備が整いました。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:212
#, no-wrap, fuzzy
msgid "Using"
msgstr "を使用しています。"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:214
#, no-wrap, fuzzy
msgid "Query results traversal"
msgstr "クエリ結果のトラバーサル"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:218
#, fuzzy
msgid ""
"In development mode, the database is set up with a few rows in the `fruits` "
"table.  To retrieve all the data, we will use the `query` method again:"
msgstr ""
"開発モードでは、データベースは `fruits` テーブルに数行設定されています。すべてのデータを取得するには、再度 `query` "
"メソッドを使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:222
#, no-wrap
msgid ""
"Uni<RowSet<Row>> rowSet = client.query(\"SELECT id, name FROM fruits ORDER "
"BY name ASC\").execute();\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:226
#, fuzzy
msgid ""
"When the operation completes, we will get a `RowSet` that has all the rows "
"buffered in memory.  A `RowSet` is an `java.lang.Iterable<Row>` and thus can "
"be converted to a `Multi`:"
msgstr ""
"操作が完了すると、メモリにすべての行がバッファリングされた `RowSet` が得られます。 `RowSet` は `java.lang."
"Iterable&amp;lt;Row&amp;gt;` であるため、 `Multi` に変換することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:232
#, no-wrap
msgid ""
"Multi<Fruit> fruits = rowSet\n"
"  .onItem().transformToMulti(set -> Multi.createFrom().iterable(set))\n"
"  .onItem().transform(Fruit::from);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:236
#, fuzzy
msgid ""
"The `Fruit#from` method converts a `Row` instance to a `Fruit` instance.  It "
"is extracted as a convenience for the implementation of the other data "
"management methods:"
msgstr ""
"`Fruit#from` メソッドは、 `Row` インスタンスを `Fruit` "
"インスタンスに変換します。他のデータ管理メソッドを実装する際の利便性として抽出しています。"

#. type: Block title
#: upstream/_guides/reactive-sql-clients.adoc:238
#: upstream/_guides/reactive-sql-clients.adoc:248
#: upstream/_guides/reactive-sql-clients.adoc:297
#: upstream/_guides/reactive-sql-clients.adoc:328
#: upstream/_guides/reactive-sql-clients.adoc:359
#, no-wrap, fuzzy
msgid "src/main/java/org/acme/vertx/Fruit.java"
msgstr "src/main/java/org/acme/vertx/Fruit.java"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:243
#, no-wrap
msgid ""
"private static Fruit from(Row row) {\n"
"    return new Fruit(row.getLong(\"id\"), row.getString(\"name\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:246
#, fuzzy
msgid "Putting it all together, the `Fruit.findAll` method looks like:"
msgstr "まとめてみると、 `Fruit.findAll` の方法は次のようになります。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:255
#, no-wrap
msgid ""
"public static Multi<Fruit> findAll(PgPool client) {\n"
"    return client.query(\"SELECT id, name FROM fruits ORDER BY name ASC\")."
"execute()\n"
"            .onItem().transformToMulti(set -> Multi.createFrom()."
"iterable(set))\n"
"            .onItem().transform(Fruit::from);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:258
#, fuzzy
msgid "And the endpoint to get all fruits from the backend:"
msgstr "そして、バックエンドからすべてのフルーツを取得するためのエンドポイント。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:266
#, no-wrap
msgid "@GET\n"
"public Multi<Fruit> get() {\n"
"    return Fruit.findAll(client);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:269
#, fuzzy
msgid "Now start Quarkus in `dev` mode with:"
msgstr "ここで、 `dev` モードでQuarkusを起動します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:273
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:276
#, fuzzy
msgid ""
"Lastly, open your browser and navigate to http://localhost:8080/fruits, you "
"should see:"
msgstr "最後に、ブラウザを開いて http://localhost:8080/fruits  に移動してください。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:280
#, no-wrap
msgid ""
"[{\"id\":3,\"name\":\"Apple\"},{\"id\":1,\"name\":\"Orange\"},{\"id\":"
"2,\"name\":\"Pear\"}]\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:282
#, no-wrap, fuzzy
msgid "Prepared queries"
msgstr "準備されたクエリ"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:285
#, fuzzy
msgid ""
"The Reactive PostgreSQL Client can also prepare queries and take parameters "
"that are replaced in the SQL statement at execution time:"
msgstr "Reactive PostgreSQLクライアントは、クエリを準備し、実行時にSQL文の中で置換されるパラメータを取ることもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:289
#, no-wrap
msgid ""
"client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = $1\")."
"execute(Tuple.of(id))\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:292
#, fuzzy
msgid ""
"The SQL string can refer to parameters by position, using $1, $2, ...etc."
msgstr "SQL文字列は、$1, $2, ...などを使用して、位置ごとにパラメータを参照することができます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:295
#, fuzzy
msgid ""
"Similar to the simple `query` method, `preparedQuery` returns an instance of "
"`PreparedQuery<RowSet<Row>>`.  Equipped with this tooling, we are able to "
"safely use an `id` provided by the user to get the details of a particular "
"fruit:"
msgstr ""
"単純な `query` メソッドと同様に、 `preparedQuery` は "
"`PreparedQuery&amp;lt;RowSet&amp;lt;Row&amp;gt;&amp;gt;` "
"のインスタンスを返します。このツールを使用することで、ユーザーが提供する `id` を安全に使用して、特定の果物の詳細を取得することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:304
#, no-wrap
msgid ""
"public static Uni<Fruit> findById(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"SELECT id, name FROM fruits WHERE id = "
"$1\").execute(Tuple.of(id)) // <1>\n"
"            .onItem().transform(RowSet::iterator) // <2>\n"
"            .onItem().transform(iterator -> iterator.hasNext() ? "
"from(iterator.next()) : null); // <3>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:306
#, fuzzy
msgid "Create a `Tuple` to hold the prepared query parameters."
msgstr "用意されたクエリパラメータを保持するために `Tuple` を作成します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:307
#, fuzzy
msgid "Get an `Iterator` for the `RowSet` result."
msgstr "`RowSet` の結果は `Iterator` を取得してください。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:308
#, fuzzy
msgid "Create a `Fruit` instance from the `Row` if an entity was found."
msgstr "エンティティが見つかった場合は、 `Row` から `Fruit` インスタンスを作成します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:310
#, fuzzy
msgid "And in the JAX-RS resource:"
msgstr "そして、JAX-RSリソースの中に"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:321
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"{id}\")\n"
"public Uni<Response> getSingle(@PathParam Long id) {\n"
"    return Fruit.findById(client, id)\n"
"            .onItem().transform(fruit -> fruit != null ? Response.ok(fruit) :"
" Response.status(Status.NOT_FOUND)) // <1>\n"
"            .onItem().transform(ResponseBuilder::build); // <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:323
#, fuzzy
msgid ""
"Prepare a JAX-RS response with either the `Fruit` instance if found or the "
"`404` status code."
msgstr ""
"`Fruit` インスタンスが見つかった場合は インスタンス、または `404` ステータスコードのいずれかを含む JAX-RS "
"レスポンスを準備します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:324
#, fuzzy
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:326
#, fuzzy
msgid "The same logic applies when saving a `Fruit`:"
msgstr "`Fruit`."

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:334
#, no-wrap
msgid ""
"public Uni<Long> save(PgPool client) {\n"
"    return client.preparedQuery(\"INSERT INTO fruits (name) VALUES ($1) "
"RETURNING id\").execute(Tuple.of(name))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.iterator().next()."
"getLong(\"id\"));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:337
#, fuzzy
msgid "And in the web resource we handle the `POST` request:"
msgstr "そして、ウェブリソースでは `POST` のリクエストを処理します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:347
#, no-wrap
msgid ""
"@POST\n"
"public Uni<Response> create(Fruit fruit) {\n"
"    return fruit.save(client)\n"
"            .onItem().transform(id -> URI.create(\"/fruits/\" + id))\n"
"            .onItem().transform(uri -> Response.created(uri).build());\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:349
#, no-wrap, fuzzy
msgid "Result metadata"
msgstr "結果のメタデータ"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:352
#, fuzzy
msgid ""
"A `RowSet` does not only hold your data in memory, it also gives you some "
"information about the data itself, such as:"
msgstr "`RowSet` はメモリにデータを保持しているだけでなく、データそのものについての情報が得られるなど、ある程度の情報が得られます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:354
#, fuzzy
msgid ""
"the number of rows affected by the query (inserted/deleted/updated/retrieved "
"depending on the query type),"
msgstr "クエリによって影響を受ける行の数 (クエリの種類に応じて、挿入/削除/更新/再取得)。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:355
#, fuzzy
msgid "the column names."
msgstr "カラム名を指定します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:357
#, fuzzy
msgid "Let's use this to support removal of fruits in the database:"
msgstr "これを利用して、データベース内の果物の除去をサポートしてみましょう。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:365
#, no-wrap
msgid ""
"public static Uni<Boolean> delete(PgPool client, Long id) {\n"
"    return client.preparedQuery(\"DELETE FROM fruits WHERE id = $1\")."
"execute(Tuple.of(id))\n"
"            .onItem().transform(pgRowSet -> pgRowSet.rowCount() == 1); // "
"<1>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:367
#, fuzzy
msgid "Inspect metadata to determine if a fruit has been actually deleted."
msgstr "メタデータを検査して、果物が実際に削除されたかどうかを判断します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:369
#, fuzzy
msgid "And to handle the HTTP `DELETE` method in the web resource:"
msgstr "そして、ウェブリソース内のHTTP `DELETE` メソッドを処理する。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:380
#, no-wrap
msgid ""
"@DELETE\n"
"@Path(\"{id}\")\n"
"public Uni<Response> delete(@PathParam Long id) {\n"
"    return Fruit.delete(client, id)\n"
"            .onItem().transform(deleted -> deleted ? Status.NO_CONTENT : "
"Status.NOT_FOUND)\n"
"            .onItem().transform(status -> Response.status(status).build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:384
#, fuzzy
msgid ""
"With `GET`, `POST` and `DELETE` methods implemented, we may now create a "
"minimal web page to try the RESTful application out.  We will use https://"
"jquery.com/[jQuery] to simplify interactions with the backend:"
msgstr ""
"`GET` 、 `POST` 、 `DELETE` メソッドが実装されたので、RESTful "
"アプリケーションを試すための最小限のウェブページを作成することができます。バックエンドとのインタラクションを簡素化するために link:https://"
"jquery.com/[jQuery を]使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:397
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>Reactive PostgreSQL Client - Quarkus</title>\n"
"    <script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"\n"
"            integrity=\"sha256-FgpCb/KJQlLNfOu91ta32o/NMZxltwRo8QtmkMRdAu8="
"\" crossorigin=\"anonymous\"></script>\n"
"    <script type=\"application/javascript\" src=\"fruits.js\"></script>\n"
"</head>\n"
"<body>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:399
#, no-wrap
msgid "<h1>Fruits API Testing</h1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:402
#, no-wrap
msgid "<h2>All fruits</h2>\n"
"<div id=\"all-fruits\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:407
#, no-wrap
msgid ""
"<h2>Create Fruit</h2>\n"
"<input id=\"fruit-name\" type=\"text\">\n"
"<button id=\"create-fruit-button\" type=\"button\">Create</button>\n"
"<div id=\"create-fruit\"></div>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:410
#, no-wrap
msgid "</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:413
#, fuzzy
msgid ""
"In the Javascript code, we need a function to refresh the list of fruits "
"when:"
msgstr "Javascriptのコードでは、果物のリストを更新する関数が必要です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:415
#, fuzzy
msgid "the page is loaded, or"
msgstr "ページが読み込まれているか"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:416
#, fuzzy
msgid "a fruit is added, or"
msgstr "果実が追加されたり"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:417
#, fuzzy
msgid "a fruit is deleted."
msgstr "果実が削除されます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:442
#, no-wrap
msgid ""
"function refresh() {\n"
"    $.get('/fruits', function (fruits) {\n"
"        var list = '';\n"
"        (fruits || []).forEach(function (fruit) { // <1>\n"
"            list = list\n"
"                + '<tr>'\n"
"                + '<td>' + fruit.id + '</td>'\n"
"                + '<td>' + fruit.name + '</td>'\n"
"                + '<td><a href=\"#\" onclick=\"deleteFruit(' + fruit.id + "
"')\">Delete</a></td>'\n"
"                + '</tr>'\n"
"        });\n"
"        if (list.length > 0) {\n"
"            list = ''\n"
"                + '<table><thead><th>Id</th><th>Name</th><th></th></thead>'\n"
"                + list\n"
"                + '</table>';\n"
"        } else {\n"
"            list = \"No fruits in database\"\n"
"        }\n"
"        $('#all-fruits').html(list);\n"
"    });\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:446
#, no-wrap
msgid ""
"function deleteFruit(id) {\n"
"    $.ajax('/fruits/' + id, {method: 'DELETE'}).then(refresh);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:448
#, no-wrap
msgid "$(document).ready(function () {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:457
#, no-wrap
msgid ""
"    $('#create-fruit-button').click(function () {\n"
"        var fruitName = $('#fruit-name').val();\n"
"        $.post({\n"
"            url: '/fruits',\n"
"            contentType: 'application/json',\n"
"            data: JSON.stringify({name: fruitName})\n"
"        }).then(refresh);\n"
"    });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:460
#, no-wrap
msgid "    refresh();\n"
"});\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:462
#, fuzzy
msgid "The `fruits` parameter is not defined when the database is empty."
msgstr "データベースが空の場合、 `fruits` パラメータは定義されません。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:465
#, fuzzy
msgid ""
"All done! Navigate to http://localhost:8080/fruits.html and read/create/"
"delete some fruits."
msgstr ""
"全て完了しました。 http://localhost:8080/fruits.html に移動して、いくつかの果物を読む/作成/削除します。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:466
#, no-wrap, fuzzy
msgid "Database Clients details"
msgstr "データベースクライアントの詳細"

#. type: Table
#: upstream/_guides/reactive-sql-clients.adoc:483
#, no-wrap, fuzzy
msgid ""
"|Database |Extension name |Pool class name\n"
"\n"
"|DB2\n"
"|`quarkus-reactive-db2-client`\n"
"|`io.vertx.mutiny.db2client.DB2Pool`\n"
"\n"
"|MariaDB/MySQL\n"
"|`quarkus-reactive-mysql-client`\n"
"|`io.vertx.mutiny.mysqlclient.MySQLPool`\n"
"\n"
"|PostgreSQL\n"
"|`quarkus-reactive-pg-client`\n"
"|`io.vertx.mutiny.pgclient.PgPool`\n"
msgstr "|データベース｜データベース｜拡張名｜プールクラス名"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:485
#, no-wrap, fuzzy
msgid "Transactions"
msgstr "取引"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:490
#, fuzzy
msgid ""
"The reactive SQL clients support transactions.  A transaction is started "
"with `client.begin()` and terminated with either `tx.commit()` or `tx."
"rollback()`.  All these operations are asynchronous:"
msgstr ""
"リアクティブ SQL クライアントはトランザクションをサポートしています。トランザクションは `client.begin()` で開始され、 `tx."
"commit()` または `tx.rollback()` で終了します。これらの操作はすべて非同期です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:492
#, fuzzy
msgid "`client.begin()` returns a `Uni<Transaction>`"
msgstr "`client.begin()` は `Uni&amp;lt;Transaction&amp;gt;`"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:493
#, fuzzy
msgid "`client.commit()` and `client.rollback()` return `Uni<Void>`"
msgstr ""
"`client.commit()` と `client.rollback()` のリターン `Uni&amp;lt;Void&amp;gt;`"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:496
#, fuzzy
msgid ""
"Managing transactions in the reactive programming world can be cumbersome.  "
"Instead of writing repetitive and complex (thus error-prone!) code, you can "
"use the `io.vertx.mutiny.sqlclient.SqlClientHelper`."
msgstr ""
"リアクティブプログラミングの世界でトランザクションを管理するのは面倒です。反復的で複雑な（したがってエラーが発生しやすい！）コードを書く代わりに、 "
"`io.vertx.mutiny.sqlclient.SqlClientHelper`."

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:498
#, fuzzy
msgid ""
"The following snippet shows how to run 2 insertions in the same transaction:"
msgstr "次のスニペットは、同じトランザクション内で2つの挿入を実行する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:507
#, no-wrap
msgid ""
"public static Uni<Void> insertTwoFruits(PgPool client, Fruit fruit1, Fruit "
"fruit2) {\n"
"    return SqlClientHelper.inTransactionUni(client, tx -> {\n"
"        Uni<RowSet<Row>> insertOne = tx.preparedQuery(\"INSERT INTO fruits "
"(name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit1.name));\n"
"        Uni<RowSet<Row>> insertTwo = tx.preparedQuery(\"INSERT INTO fruits "
"(name) VALUES ($1) RETURNING id\")\n"
"                .execute(Tuple.of(fruit2.name));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:513
#, no-wrap
msgid ""
"        return insertOne.and(insertTwo)\n"
"                // Ignore the results (the two ids)\n"
"                .onItem().ignore().andContinueWithNull();\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:516
#, fuzzy
msgid ""
"In this example, the transaction is automatically committed on success or "
"rolled back on failure."
msgstr "この例では、トランザクションは成功時には自動的にコミットされ、失敗時にはロールバックされます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:518
#, fuzzy
msgid "You can also create dependent actions as follows:"
msgstr "また、以下のように依存アクションを作成することもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:522
#, no-wrap
msgid "return SqlClientHelper.inTransactionUni(client, tx -> tx\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:525
#, no-wrap
msgid ""
"        .preparedQuery(\"INSERT INTO person (firstname,lastname) VALUES "
"($1,$2) RETURNING id\")\n"
"                .execute(Tuple.of(person.getFirstName(), person."
"getLastName()))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:528
#, no-wrap
msgid ""
"        .onItem().transformToUni(id -> tx.preparedQuery(\"INSERT INTO addr "
"(person_id,addrline1) VALUES ($1,$2)\")\n"
"                .execute(Tuple.of(id.iterator().next().getLong(\"id\"), "
"person.getLastName())))\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:530
#, no-wrap
msgid "        .onItem().ignore().andContinueWithNull());\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:532
#, no-wrap, fuzzy
msgid "Multiple Datasources"
msgstr "複数のデータソース"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:535
#, fuzzy
msgid "The reactive SQL clients support defining several datasources."
msgstr "リアクティブ SQL クライアントは、複数のデータソースの定義をサポートしています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:537
#, fuzzy
msgid "A typical configuration with several datasources would look like:"
msgstr "複数のデータソースを使用した典型的な構成は以下のようになります。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:544
#, no-wrap
msgid ""
"quarkus.datasource.db-kind=postgresql <1>\n"
"quarkus.datasource.username=user-default\n"
"quarkus.datasource.password=password-default\n"
"quarkus.datasource.reactive.url=postgresql://localhost:5432/default\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:549
#, no-wrap
msgid ""
"quarkus.datasource.\"additional1\".db-kind=postgresql <2>\n"
"quarkus.datasource.\"additional1\".username=user-additional1\n"
"quarkus.datasource.\"additional1\".password=password-additional1\n"
"quarkus.datasource.\"additional1\".reactive.url=postgresql://localhost:5432/"
"additional1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:554
#, no-wrap
msgid ""
"quarkus.datasource.\"additional2\".db-kind=mysql <3>\n"
"quarkus.datasource.\"additional2\".username=user-additional2\n"
"quarkus.datasource.\"additional2\".password=password-additional2\n"
"quarkus.datasource.\"additional2\".reactive.url=mysql://localhost:3306/"
"additional2\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:556
#, fuzzy
msgid "The default datasource - using PostgreSQL."
msgstr "デフォルトのデータソース - PostgreSQLを使用しています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:557
#, fuzzy
msgid "A named datasource called `additional1` - using PostgreSQL."
msgstr "`additional1` という名前のデータソース - PostgreSQL を使用しています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:558
#, fuzzy
msgid "A named datasource called `additional2` - using MySQL."
msgstr "`additional2` という名前のデータソース - MySQL を使用しています。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:560
#, fuzzy
msgid "You can then inject the clients as follows:"
msgstr "そして、以下のようにクライアントを注入します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:565
#, no-wrap
msgid "@Inject <1>\n"
"PgPool defaultClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:569
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional1\") <2>\n"
"PgPool additional1Client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:573
#, no-wrap
msgid ""
"@Inject\n"
"@ReactiveDataSource(\"additional2\")\n"
"MySQLPool additional2Client;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:575
#, fuzzy
msgid ""
"Injecting the client for the default datasource does not require anything "
"special."
msgstr "デフォルトのデータソースに対してクライアントを注入することは、特別なことを必要としません。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:576
#, fuzzy
msgid ""
"For a named datasource, you use the `@ReactiveDataSource` CDI qualifier with "
"the datasource name as its value."
msgstr "名前付きデータソースの場合は、データソース名を値として `@ReactiveDataSource` CDI修飾子を使用します。"

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:577
#, no-wrap, fuzzy
msgid "UNIX Domain Socket connections"
msgstr "ＵＮＩＸドメインソケット接続"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:580
#, fuzzy
msgid ""
"The PostgreSQL and MariaDB/MySQL clients can be configured to connect to the "
"server through a UNIX domain socket."
msgstr ""
"PostgreSQLおよびMariaDB/MySQLクライアントは、UNIXドメインソケットを介してサーバに接続するように設定することができます。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:582
#, fuzzy
msgid ""
"First make sure that https://quarkus.io/guides/vertx#native-transport[native "
"transport support] is enabled."
msgstr ""
"まず、 link:https://quarkus.io/guides/vertx#native-"
"transport[ネイティブトランスポートのサポートが]有効になっていることを確認します。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:585
#, fuzzy
msgid ""
"Then configure the database connection url.  This step depends on the "
"database type."
msgstr "次に、データベース接続のURLを設定します。このステップはデータベースの種類によって異なります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:589
#, fuzzy
msgid ""
"PostgresSQL domain socket paths have the following form: `<directory>/.s."
"PGSQL.<port>`"
msgstr ""
"PostgresSQLドメインのソケットパスは、以下のような形式になっています。 `&amp;lt;directory&amp;gt;/.s.PGSQL."
"&amp;lt;port&amp;gt;`"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:591
#, fuzzy
msgid "The database connection url must be configured so that:"
msgstr "データベース接続のURLは、そのように設定する必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:593
#, fuzzy
msgid "the `host` is the `directory` in the socket path"
msgstr "`host` はソケットパスの `directory` です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:594
#, fuzzy
msgid "the `port` is the `port` in the socket path"
msgstr "`port` はソケットパスの `port` です。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:596
#, fuzzy
msgid ""
"Consider the following socket path: `/var/run/postgresql/.s.PGSQL.5432`."
msgstr "以下のソケットパスを考えてみましょう: `/var/run/postgresql/.s.PGSQL.5432`."

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:598
#: upstream/_guides/reactive-sql-clients.adoc:611
#, fuzzy
msgid "In `application.properties` add:"
msgstr "`application.properties` で追加します。"

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:602
#, no-wrap
msgid ""
"quarkus.datasource.reactive.url=postgresql://:5432/quarkus_test?host=/var/"
"run/postgresql\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:607
#, fuzzy
msgid ""
"The database connection url must be configured so that the `host` is the "
"socket path."
msgstr "データベース接続URLは、 `host` がソケットパスになるように設定する必要があります。"

#. type: Plain text
#: upstream/_guides/reactive-sql-clients.adoc:609
#, fuzzy
msgid "Consider the following socket path: `/var/run/mysqld/mysqld.sock`."
msgstr "以下のソケットパスを考えてみましょう: `/var/run/mysqld/mysqld.sock`."

#. type: delimited block -
#: upstream/_guides/reactive-sql-clients.adoc:615
#, no-wrap
msgid ""
"quarkus.datasource.reactive.url=mysql:///quarkus_test?host=/var/run/mysqld/"
"mysqld.sock\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-sql-clients.adoc:617
#, no-wrap, fuzzy
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:619
#, no-wrap, fuzzy
msgid "Common Datasource"
msgstr "共通データソース"

#. type: Title ===
#: upstream/_guides/reactive-sql-clients.adoc:623
#, no-wrap, fuzzy
msgid "Reactive Datasource"
msgstr "リアクティブデータソース"
