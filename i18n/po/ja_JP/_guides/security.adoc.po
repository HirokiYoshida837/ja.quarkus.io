# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2021-01-10 18:26+0900\n"
"PO-Revision-Date: 2021-01-09 11:03+0900\n"
"Last-Translator: \n"
"Language-Team: \n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security.adoc:6
#, no-wrap
msgid "Quarkus - Security Architecture and Guides"
msgstr "Quarkus - セキュリティアーキテクチャとガイド"

#. type: Plain text
#: upstream/_guides/security.adoc:11
msgid ""
"Quarkus Security provides the architecture, multiple authentication and "
"authorization mechanisms, and other tools for the developers to build a "
"production-quality security for their Quarkus applications."
msgstr ""
"Quarkus Securityでは、開発者がQuarkusアプリケーションの商用品質のセキュリティ"
"を構築するためのアーキテクチャ、複数の認証および認可メカニズム、その他のツー"
"ルを提供しています。"

#. type: Plain text
#: upstream/_guides/security.adoc:13
msgid ""
"This document provides a brief overview of Quarkus Security and links to the "
"individual guides."
msgstr ""
"このドキュメントでは、Quarkus Securityの簡単な概要と、各ガイドへのリンクにつ"
"いて説明しています。"

#. type: Title ==
#: upstream/_guides/security.adoc:14
#, no-wrap
msgid "Architecture"
msgstr "アーキテクチャ"

#. type: Plain text
#: upstream/_guides/security.adoc:17
msgid ""
"`HttpAuthenticationMechanism` is the main entry into Quarkus HTTP Security."
msgstr ""
"`HttpAuthenticationMechanism`  は、Quarkus HTTP Securityのメインエントリで"
"す。"

#. type: Plain text
#: upstream/_guides/security.adoc:20
msgid ""
"Quarkus Security Manager uses `HttpAuthenticationMechanism` to extract the "
"authentication credentials from the HTTP request and delegates to "
"`IdentityProvider` to complete the conversion of these credentials to "
"`SecurityIdentity`."
msgstr ""
"Quarkus Security Managerは、 `HttpAuthenticationMechanism`  を使用してHTTPリ"
"クエストから認証資格情報を抽出し、 `IdentityProvider`  に委任して、これらの資"
"格情報の `SecurityIdentity`  への変換を完了させます。"

#. type: Plain text
#: upstream/_guides/security.adoc:22
msgid ""
"For example, the credentials may be coming with the HTTP `Authorization` "
"header, client HTTPS certificates or cookies."
msgstr ""
"例えば、資格情報は、HTTP `Authorization`  ヘッダー、クライアントの HTTPS 証明"
"書、またはクッキーを使用している場合があります。"

#. type: Plain text
#: upstream/_guides/security.adoc:24
msgid ""
"`IdentityProvider` verifies the authentication credentials and maps them to "
"`SecurityIdentity` which contains the username, roles, the original "
"authentication credentials, and other attributes."
msgstr ""
"`IdentityProvider`  は認証資格情報を検証し、ユーザ名、ロール、元の認証資格情"
"報、およびその他の属性を含む `SecurityIdentity`  にマップします。"

#. type: Plain text
#: upstream/_guides/security.adoc:26
msgid ""
"For every authenticated resource, you can inject a `SecurityIdentity` "
"instance to get the authenticated identity information."
msgstr ""
"認証済みリソースごとに、 `SecurityIdentity`  インスタンスを注入して、認証済み"
"の ID 情報を取得することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:29
msgid ""
"In some other contexts you may have other parallel representations of the "
"same information (or parts of it) such as `SecurityContext` for JAX-RS or "
"`JsonWebToken` for JWT."
msgstr ""
"他の文脈では、JAX-RSであれば `SecurityContext`  、JWTであれば "
"`JsonWebToken`  のように、同じ情報（またはその一部）を他の別の表現で表現して"
"いる場合があります。"

#. type: Title ==
#: upstream/_guides/security.adoc:30
#, no-wrap
msgid "Authentication mechanisms"
msgstr "認証メカニズム"

#. type: Plain text
#: upstream/_guides/security.adoc:33
msgid ""
"Quarkus supports several sources to load authentication information from."
msgstr ""
"Quarkusは、認証情報をロードするためのいくつかのソースをサポートしています。"

#. type: Title ===
#: upstream/_guides/security.adoc:34
#, no-wrap
msgid "Basic and Form Authentication Mechanisms"
msgstr "基本認証とフォーム認証の仕組み"

#. type: Plain text
#: upstream/_guides/security.adoc:38
msgid ""
"Basic and Form HTTP-based authentication mechanisms are the core "
"authentication mechanisms supported in Quarkus.  Please see link:security-"
"built-in-authentication#basic-auth[Basic HTTP Authentication] and link:"
"security-built-in-authentication#form-auth[Form HTTP Authentication] for "
"more information."
msgstr ""
"Basic HTTPベースの認証メカニズムとForm HTTPベースの認証メカニズムは、Quarkus"
"でサポートされている主要な認証メカニズムです。詳細については、 link:security-"
"built-in-authentication#basic-auth[基本HTTP認証]と link:security-built-in-"
"authentication#form-auth[フォームHTTP認証]を参照してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:39
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr "相互TLS認証"

#. type: Plain text
#: upstream/_guides/security.adoc:42
msgid ""
"Quarkus provides Mutual TLS authentication so that you can authenticate "
"users based on their X.509 certificates."
msgstr ""
"Quarkusは相互TLS認証を提供しているので、X.509証明書に基づいてユーザーを認証で"
"きます。"

#. type: Plain text
#: upstream/_guides/security.adoc:44
msgid ""
"Please see link:security-built-in-authentication#mutual-tls[Mutual TLS "
"Authentication] for more information."
msgstr ""
"詳しくは link:security-built-in-authentication#mutual-tls[相互TLS認証] をご覧"
"ください。"

#. type: Title ===
#: upstream/_guides/security.adoc:45
#, no-wrap
msgid "OpenId Connect"
msgstr "OpenId Connect"

#. type: Plain text
#: upstream/_guides/security.adoc:48
msgid ""
"`quarkus-oidc` extension provides a reactive, interoperable, multi-tenant "
"enabled OpenId Connect adapter which supports `Bearer Token` and "
"`Authorization Code Flow` authentication mechanisms."
msgstr ""
"`quarkus-oidc`  エクステンションは、 `Bearer Token`  および `Authorization "
"Code Flow`  認証メカニズムをサポートする、リアクティブで相互運用可能なマルチ"
"テナント対応の OpenId Connect アダプタを提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:51
msgid ""
"`Bearer Token` mechanism extracts the token from HTTP `Authorization` "
"header.  `Authorization Code Flow` mechanism uses OpenId Connect "
"Authorization Code flow. It redirects the user to IDP to authenticate and "
"completes the authentication process after the user has been redirected back "
"to Quarkus by exchanging the provided code grant for ID, access and refresh "
"tokens."
msgstr ""
"`Bearer Token`  メカニズムは、HTTP `Authorization`  ヘッダーからトークンを抽"
"出します。 `Authorization Code Flow`  メカニズムは、OpenId Connect "
"Authorization Code Flowを使用します。ユーザーをIDPにリダイレクトして認証を行"
"い、提供されたCode GrantをID、アクセストークン、リフレッシュトークンと交換す"
"ることで、ユーザーがQuarkusにリダイレクトされた後に認証プロセスを完了させま"
"す。"

#. type: Plain text
#: upstream/_guides/security.adoc:53
msgid ""
"ID and access `JWT` tokens are verified with the refreshable `JWK` key set "
"but both JWT and opaque (binary) tokens can be introspected remotely."
msgstr ""
"ID とアクセス `JWT` トークンは、リフレッシュ可能な `JWK` キーセットで検証され"
"ますが、JWT と不透明な (バイナリの) トークンの両方をリモートで検証することが"
"できます。"

#. type: Plain text
#: upstream/_guides/security.adoc:55
msgid ""
"See the link:security-openid-connect[Using OpenID Connect to Protect Service "
"Applications] guide for more information about `Bearer Token` authentication "
"mechanism."
msgstr ""
"`Bearer Token` 認証メカニズムの詳細については、 link:security-openid-"
"connect[Using OpenID Connect to Protect Service Applications]ガイドを参照して"
"ください。"

#. type: Plain text
#: upstream/_guides/security.adoc:57
msgid ""
"See the link:security-openid-connect-web-authentication[Using OpenID Connect "
"to Protect Web Application] guide for more information about `Authorization "
"Code Flow` authentication mechanism."
msgstr ""
"`Authorization Code Flow`  認証メカニズムの詳細については、 link:security-"
"openid-connect-web-authentication[Using OpenID Connect to Protect Web "
"Application]ガイドを参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:61
msgid ""
"Both `quarkus-oidc` `Bearer` and `Authorization Code Flow` Authentication "
"mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as "
"Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""
"`quarkus-oidc` の`Bearer` と `Authorization Code Flow`  認証メカニズムはいず"
"れも link:#smallrye-jwt[SmallRye JWT ]を使用して、JWT トークンを "
"Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken` として表現してい"
"ます。"

#. type: Plain text
#: upstream/_guides/security.adoc:64
msgid ""
"See link:security-openid-connect-multitenancy[Using OpenID Connect Multi-"
"Tenancy] for more information about multiple tenants which can support "
"`Bearer` or `Authorization Code Flow` authentication mechanism and "
"configured statically or dynamically."
msgstr ""
"`Bearer`  または `Authorization Code Flow`  認証メカニズムをサポートし、静的"
"または動的に設定できる複数のテナントの詳細については、 link:security-openid-"
"connect-multitenancy[OpenID Connect マルチテナントの使用]を参照してください。"

#. type: delimited block =
#: upstream/_guides/security.adoc:69
msgid ""
"If you would like to have Quarkus OIDC extension enabled at runtime then set "
"`quarkus.oidc.tenant-enabled=false` at build time and re-enable it at "
"runtime using a system property.  See also link:security-openid-connect-"
"multitenancy#disable-tenant[Disabling Tenant Configurations] for more "
"information about managing the individual tenant configurations in the multi-"
"tenant OIDC deployments."
msgstr ""
"実行時にQuarkus OIDCエクステンションを有効にしたい場合は、ビルド時に "
"`quarkus.oidc.tenant-enabled=false` を設定し、システムプロパティを使用して実"
"行時に再度有効にします。マルチテナントOIDCデプロイメントでの個々のテナント設"
"定の管理の詳細については、テナント link:security-openid-connect-"
"multitenancy#disable-tenant[設定の無効化]も参照してください。"

#. type: Plain text
#: upstream/_guides/security.adoc:72
msgid ""
"If you use Keycloak and Bearer tokens then also see the link:security-"
"keycloak-authorization[Using Keycloak to Centralize Authorization] guide."
msgstr ""
"Keycloak と Bearer トークンを使用する場合は、 link:security-keycloak-"
"authorization[Using Keycloak to Centralize Authorization]ガイドも参照してくだ"
"さい。"

#. type: delimited block =
#: upstream/_guides/security.adoc:76
msgid ""
"If you need to configure Keycloak programmatically then consider using "
"https://www.keycloak.org/docs/latest/server_development/#admin-rest-"
"api[Keycloak Admin REST API] with the help of the `quarkus-keycloak-admin-"
"client` extension."
msgstr ""
"Keycloakをプログラムで設定する必要がある場合は、 `quarkus-keycloak-admin-"
"client` エクステンションの助けを借りて、 link:https://www.keycloak.org/docs/"
"latest/server_development/#admin-rest-api[Keycloak Admin REST API]の使用を検"
"討してください。"

#. type: Title ===
#: upstream/_guides/security.adoc:79
#, no-wrap
msgid "SmallRye JWT"
msgstr "SmallRye JWT"

#. type: Plain text
#: upstream/_guides/security.adoc:82
msgid ""
"`quarkus-smallrye-jwt` provides Microprofile JWT 1.1.1 implementation and "
"many more options to verify signed and encrypted `JWT` tokens and represent "
"them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""
"`quarkus-smallrye-jwt` はMicroprofile JWT 1.1.1.1 の実装と、署名・暗号化され"
"た `JWT` トークンを検証し、 `org.eclipse.microprofile.jwt.JsonWebToken` とし"
"て表現するための多くのオプションを提供します。"

#. type: Plain text
#: upstream/_guides/security.adoc:84
msgid ""
"It provides an alternative to `quarkus-oidc` Bearer Token Authentication "
"Mechanism. It can currently verify only `JWT` tokens using the PEM keys or "
"refreshable `JWK` key set."
msgstr ""
"それは `quarkus-oidc` ベアラートークン認証メカニズムに代わるものを提供しま"
"す。現在、PEM 鍵または更新可能な `JWK` 鍵セットを使用して `JWT` トークンのみ"
"を検証することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:86
msgid ""
"Additionally it provides `JWT Generation API` for creating `signed`, `inner-"
"signed` and/or `encrypted` `JWT` tokens with ease."
msgstr ""
"さらに、 `JWT Generation API` を提供して、 `signed` , `inner-signed` , およ"
"び/または `encrypted` `JWT`トークンを簡単に作成することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:88
msgid ""
"See the link:security-jwt[Using SmallRye JWT] guide for more information."
msgstr ""
"詳細については、 link:security-jwt[Using SmallRye JWT]ガイドを参照してくださ"
"い。"

#. type: Title ===
#: upstream/_guides/security.adoc:89
#, no-wrap
msgid "OAuth2"
msgstr "OAuth2"

#. type: Plain text
#: upstream/_guides/security.adoc:92
msgid ""
"`quarkus-elytron-security-oauth2` provides an alternative to `quarkus-oidc` "
"Bearer Token Authentication Mechanism. It is based on `Elytron` and is "
"primarily meant for introspecting the opaque tokens remotely."
msgstr ""
"`quarkus-elytron-security-oauth2`  は `quarkus-oidc`  Bearer Token 認証メカニ"
"ズムの代替手段を提供します。これは `Elytron` をベースにしており、主に不透明な"
"トークンをリモートでイントロスペクトするためのものです。"

#. type: Plain text
#: upstream/_guides/security.adoc:94
msgid "See the link:security-oauth2[Using OAuth2] guide for more information."
msgstr ""
"詳細については、 link:security-oauth2[OAuth2 の使用]ガイドを参照してくださ"
"い。"

#. type: Title ===
#: upstream/_guides/security.adoc:95
#, no-wrap
msgid "LDAP"
msgstr "LDAP"

#. type: Plain text
#: upstream/_guides/security.adoc:98
msgid ""
"Please see the link:security-ldap[Authenticate with LDAP] guide for more "
"information about LDAP authentication mechanism."
msgstr ""
"LDAP認証メカニズムの詳細については、 link:security-ldap[Authenticate with "
"LDAP]ガイドを参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:100
#, no-wrap
msgid "Identity Providers"
msgstr "アイデンティティ・プロバイダー"

#. type: Plain text
#: upstream/_guides/security.adoc:103
msgid ""
"`IdentityProvider` converts the authentication credentials provided by "
"`HttpAuthenticationMechanism` to `SecurityIdentity`."
msgstr ""
"`IdentityProvider`  は、 `HttpAuthenticationMechanism`  が提供する認証資格情"
"報を `SecurityIdentity`  に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:106
msgid ""
"Some extensions such as `OIDC`, `OAuth2`, `SmallRye JWT`, `LDAP` have the "
"inlined `IdentityProvider` implementations which are specific to the "
"supported authentication flow.  For example, `quarkus-oidc` uses its own "
"`IdentityProvider` to convert a token to `SecurityIdentity`."
msgstr ""
"`OIDC` , `OAuth2` , `SmallRye JWT` , `LDAP`  などのエクステンションには、サ"
"ポートされている認証フローに固有の `IdentityProvider` のインライン実装があり"
"ます。例えば、 `quarkus-oidc` は独自の `IdentityProvider` を使用してトークン"
"を `SecurityIdentity` に変換します。"

#. type: Plain text
#: upstream/_guides/security.adoc:108
msgid ""
"If you use `Basic` or `Form` HTTP-based authentication then you have to add "
"an `IdentityProvider` which can convert a user name and password to "
"`SecurityIdentity`."
msgstr ""
"`Basic` または `Form` HTTP ベースの認証を使用している場合は、ユーザー名とパス"
"ワードを `SecurityIdentity` に変換できる `IdentityProvider` を追加する必要が"
"あります。"

#. type: Plain text
#: upstream/_guides/security.adoc:111
msgid ""
"See link:security-jpa[JPA IdentityProvider] and link:security-jdbc[JDBC "
"IdentityProvider] for more information.  You can also use link:security-"
"testing#configuring-user-information[User Properties IdentityProvider] for "
"testing."
msgstr ""
"詳細は、 link:security-jpa[JPA IdentityProvider]および link:security-"
"jdbc[JDBC IdentityProvider]を参照してください。また、テストに link:security-"
"testing#configuring-user-information[User Properties IdentityProvider を]使用"
"することもできます。"

#. type: Title ==
#: upstream/_guides/security.adoc:112
#, no-wrap
msgid "Combining Authentication Mechanisms"
msgstr "認証メカニズムの組み合わせ"

#. type: Plain text
#: upstream/_guides/security.adoc:116
msgid ""
"One can combine multiple authentication mechanisms if they get the "
"authentication credentials from the different sources.  For example, "
"combining built-in `Basic` and `quarkus-oidc` `Bearer` authentication "
"mechanisms is allowed, but combining `quarkus-oidc` `Bearer` and `smallrye-"
"jwt` authentication mechanisms is not allowed because both will attempt to "
"verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr ""
"異なるソースから認証証明書を取得する場合、複数の認証メカニズムを組み合わせる"
"ことができます。例えば、組み込みの `Basic`  と `Bearer`   `quarkus-oidc`  認"
"証機構を組み合わせることはできますが、 `quarkus-oidc`   `Bearer`  と "
"`smallrye-jwt`  認証機構を組み合わせることはできません。なぜなら、両方とも "
"HTTP `Authorization Bearer`  スキームから抽出されたトークンを検証しようとする"
"からです。"

#. type: Title ==
#: upstream/_guides/security.adoc:117
#, no-wrap
msgid "Proactive Authentication"
msgstr "プロアクティブ認証"

#. type: Plain text
#: upstream/_guides/security.adoc:121
msgid ""
"By default, Quarkus does what we call proactive authentication. This means "
"that if an incoming request has a credential then that request will always "
"be authenticated (even if the target page does not require authentication)."
msgstr ""
"デフォルトでは、Quarkusはプロアクティブ認証と呼ばれる認証を行います。これは、"
"受信したリクエストにクレデンシャルがある場合、そのリクエストは常に認証されま"
"す（ターゲットページが認証を必要としない場合でも）。"

#. type: Plain text
#: upstream/_guides/security.adoc:123
msgid ""
"See link:security-built-in-authentication#proactive-authentication[Proactive "
"Authentication] for more information."
msgstr ""
"詳細については、 link:security-built-in-authentication#proactive-"
"authentication[プロアクティブ認証]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:124
#, no-wrap
msgid "Authorization"
msgstr "認可"

#. type: Plain text
#: upstream/_guides/security.adoc:127
msgid ""
"See link:security-authorization[Security Authorization] for more information "
"about Role Based Access Control and other authorization options."
msgstr ""
"役割ベースのアクセス制御およびその他の認可オプションの詳細については、 link:"
"security-authorization[セキュリティ認可]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:128
#, no-wrap
msgid "Customization and other useful tips"
msgstr "カスタマイズやその他の便利なヒント"

#. type: Plain text
#: upstream/_guides/security.adoc:131
msgid ""
"Quarkus Security is highly customizable. One can register custom "
"``HttpAuthenticationMechanism``s, ``IdentityProvider``s and "
"``SecurityidentityAugmentor``s."
msgstr ""
"Quarkus Securityは、高度なカスタマイズが可能です。カスタム "
"`HttpAuthenticationMechanism` 、 `IdentityProvider` 、 "
"`SecurityidentityAugmentor` を登録することができます。"

#. type: Plain text
#: upstream/_guides/security.adoc:133
msgid ""
"See link:security-customization[Security Customization] for more information "
"about customizing Quarkus Security and other useful tips about the reactive "
"security, registering the security providers, etc."
msgstr ""
"Quarkus Securityのカスタマイズの詳細や、リアクティブセキュリティ、セキュリ"
"ティプロバイダーの登録などの便利なヒントについては、セキュリティの link:"
"security-customization[カスタマイズ]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:134
#, no-wrap
msgid "Secure connections with SSL"
msgstr "SSLによる安全な接続"

#. type: Plain text
#: upstream/_guides/security.adoc:137
msgid ""
"See the link:http-reference#ssl[Supporting secure connections with SSL] "
"guide for more information."
msgstr ""
"詳細については、 link:http-reference#ssl[SSL による安全な接続のサポート]ガイ"
"ドを参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:138
#, no-wrap
msgid "Cross-Origin Resource Sharing"
msgstr "クロスオリジンリソース共有"

#. type: Plain text
#: upstream/_guides/security.adoc:141
msgid ""
"If you plan to make your Quarkus application accessible to another "
"application running on a different domain, you will need to configure CORS "
"(Cross-Origin Resource Sharing). Please read the link:http-reference#cors-"
"filter[HTTP CORS documentation] for more information."
msgstr ""
"Quarkusアプリケーションを別のドメインで実行している別のアプリケーションにアク"
"セスできるようにする場合は、CORS（Cross-Origin Resource Sharing）を設定する必"
"要があります。詳細については、 link:http-reference#cors-filter[HTTP CORSのド"
"キュメント]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:142
#, no-wrap
msgid "SameSite cookies"
msgstr "SameSiteクッキー"

#. type: Plain text
#: upstream/_guides/security.adoc:145
msgid ""
"Please see link:vertx#same-site-cookie for information about adding a "
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/"
"SameSite[SameSite] cookie property to any of the cookies set by a Quarkus "
"endpoint."
msgstr ""
"Quarkusのエンドポイントによって設定されたCookieに link:https://developer."
"mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/SameSite[SameSite]Cookieプ"
"ロパティを追加する方法については、 link:vertx#sam-site-cookie を参照してくだ"
"さい。"

#. type: Title ==
#: upstream/_guides/security.adoc:146
#, no-wrap
msgid "Testing"
msgstr "テスト"

#. type: Plain text
#: upstream/_guides/security.adoc:149
msgid ""
"See link:security-testing[Security Testing] for more information about "
"testing Quarkus Security."
msgstr ""
"Quarkus Securityのテストの詳細については、 link:security-testing[セキュリティ"
"のテスト]を参照してください。"

#. type: Title ==
#: upstream/_guides/security.adoc:150
#, no-wrap
msgid "Secret Engines"
msgstr "シークレットエンジン"

#. type: Title ===
#: upstream/_guides/security.adoc:151
#, no-wrap
msgid "Vault"
msgstr "Vault"

#. type: Plain text
#: upstream/_guides/security.adoc:152
msgid ""
"Quarkus provides a very comprehensive HashiCorp Vault support, please see "
"the link:vault[Quarkus and HashiCorp Vault] documentation for more "
"information."
msgstr ""
"Quarkusは非常に包括的な HashiCorp Vault のサポートを提供しています。詳しくは "
"link:vault[Quarkus and HashiCorp Vault] のドキュメントを参照下さい。"
