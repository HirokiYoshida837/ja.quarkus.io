# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-01-20 11:08+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-client.adoc:6
#, no-wrap, fuzzy
msgid ""
"Quarkus - Using OpenID Connect and OAuth2 Client and Filters to acquire, "
"refresh and propagate access tokens"
msgstr "Quarkus - OpenID ConnectとOAuth2クライアントとフィルタを使用してアクセストークンを取得、更新、伝播する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:12
#, fuzzy
msgid ""
"This guide explains how to use Quarkus `quarkus-oidc-client`, `quarkus-oidc-"
"client-filter` and `quarkus-oidc-token-propagation` extensions to acquire "
"and refresh access tokens from OpenId Connect and OAuth 2.0 compliant "
"Authorization Servers such as https://www.keycloak.org/about.html[Keycloak] "
"and use these tokens as HTTP Authorization Bearer tokens to access the "
"remote services."
msgstr ""
"このガイドでは、Quarkus `quarkus-oidc-client`, `quarkus-oidc-client-filter` および "
"`quarkus-oidc-token-propagation` の拡張機能を使用して、OpenId Connect および link:https://"
"www.keycloak.org/about.html[Keycloak]などの OAuth 2.0 "
"準拠の認証サーバーからアクセストークンを取得して更新し、これらのトークンを HTTP Authorization Bearer "
"トークンとして使用してリモートサービスにアクセスする方法について説明します。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:13
#, no-wrap, fuzzy
msgid "OidcClient"
msgstr "オーアイディーシークライアント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:16
#, fuzzy
msgid ""
"`quarkus-oidc-client` extension provides a reactive `io.quarkus.oidc.client."
"OidcClient` which can be used to acquire and refresh tokens using Smallrye "
"Mutiny `Uni` and `Vert.x WebClient`."
msgstr ""
"`quarkus-oidc-client` `io.quarkus.oidc.client.OidcClient` 拡張子は、Smallrye "
"Mutiny と と . `Uni` `Vert.x WebClient`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:18
#, fuzzy
msgid ""
"`OidcClient` is initialized at the build time with the IDP token endpoint "
"URL which can be auto-discovered or manually configured and uses this "
"endpoint to acquire access tokens using `client_credentials` or `password` "
"token grants and refresh the tokens using `refresh_token` grant."
msgstr ""
"`OidcClient` はビルド時に IDP トークンのエンドポイント URL "
"で初期化され、自動検出または手動で構成することができ、このエンドポイントを使用して `client_credentials` または "
"`password` トークングラントを使用してアクセストークンを取得し、 `refresh_token` グラントを使用してトークンを更新します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:20
#, fuzzy
msgid ""
"Here is how `OidcClient` can be configured to use the `client_credentials` "
"grant:"
msgstr "`OidcClient` が `client_credentials` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:26
#, fuzzy
msgid ""
"``` quarkus.oidc.client.auth-server-url=${keycloak.url}/realms/quarkus2/ "
"quarkus.oidc.client.client-id=quarkus-app quarkus.oidc.client.credentials."
"secret=secret ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:28
#, fuzzy
msgid ""
"Here is how `OidcClient` can be configured to use the `password` grant:"
msgstr "`OidcClient` が `password` グラントを使用するように設定する方法は以下の通りです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:38
#, fuzzy
msgid ""
"``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus2/ "
"quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials."
"secret=secret quarkus.oidc-client.grant.type=password quarkus.oidc-client."
"grant-options.password.username=alice quarkus.oidc-client.grant-options."
"password.password=alice ``` In both cases `OidcClient` will auto-discover "
"the token endpoint URL and use it to acquire the tokens."
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:39
#, no-wrap, fuzzy
msgid "Use OidcClient directly"
msgstr "OidcClientを直接使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:42
#, fuzzy
msgid "One can use `OidcClient` directly as follows:"
msgstr "以下のように `OidcClient` を直接使用することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:47
#, fuzzy
msgid ""
"``` import javax.inject.PostConstruct; import javax.inject.Inject; import "
"javax.ws.rs.GET;"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:50
#, fuzzy
msgid ""
"import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client."
"Tokens;"
msgstr ""
"import io.quarkus.oidc.client.OidcClient; import io.quarkus.oidc.client."
"Tokens."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:53
#, fuzzy
msgid "@Path(\"/service\")  public class OidcClientResource {"
msgstr "@Path(\"/service\") public class OidcClientResource {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:56
#, no-wrap, fuzzy
msgid "    @Inject\n"
"    OidcClient client;\n"
msgstr "<pre>インジェクション\n"
"OidcClientクライアント。</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:58
#, no-wrap, fuzzy
msgid "    volatile Tokens currentTokens;\n"
msgstr "<pre>volatile Tokens currentTokens.</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:63
#, no-wrap, fuzzy
msgid ""
"    @PostConstruct\n"
"    public init() {\n"
"        currentTokens = client.getTokens().await().indefinitely();\n"
"    }\n"
msgstr ""
"<pre>ポストコンストラクト\n"
"public init() {\n"
"    currentTokens = client.getTokens().await().indefinitely()。\n"
"}</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:66
#, no-wrap, fuzzy
msgid "    @GET\n"
"    public String getResponse() {\n"
msgstr "<pre>＠ＧＥＴ\n"
"public String getResponse() {</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:76
#, no-wrap, fuzzy
msgid ""
"        Tokens tokens = currentTokens;\n"
"        if (tokens.isAccessTokenExpired) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken().await."
"indefinitely();\n"
"            currentTokens = tokens;\n"
"        } \n"
"        // use tokens.getAccessToken() to configure MP RestClient "
"Authorization header/etc\n"
"    }\n"
"}\n"
"```\n"
msgstr ""
"<pre>        トークン tokens = currentTokens.\n"
"        if (tokens.isAccessTokenExpired) {\n"
"            tokens = client.refreshTokens(tokens.getRefreshToken().await."
"indefinitely().\n"
"            currentTokens = tokens.\n"
"        }\n"
"        // MP RestClient Authorizationヘッダー/etcを構成するためにtokens."
"getAccessToken()を使用します。\n"
"    }\n"
"}</pre>"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:77
#, no-wrap, fuzzy
msgid "Use OidcClient in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClientクライアントフィルタでOidcClientを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:80
#, fuzzy
msgid ""
"`quarkus-oidc-client-filter` extension provides `io.quarkus.oidc.client."
"filter.OidcClientRequestFilter` JAX-RS ClientRequestFilter which uses "
"`OidcClient` to acquire the access token, refresh it if needed, and set it "
"as an HTTP `Authorization` `Bearer` scheme value."
msgstr ""
"`quarkus-oidc-client-filter` 拡張機能は `OidcClient` "
"を使用してアクセストークンを取得し、必要に応じて更新し、HTTP `Authorization` `Bearer` スキーム値として設定する `io."
"quarkus.oidc.client.filter.OidcClientRequestFilter` JAX-RS "
"ClientRequestFilter を提供します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:82
#, fuzzy
msgid ""
"By default this filter will get `OidcClient` to acquire the first pair of "
"access and refresh tokens at its initialization time. If the access tokens "
"are short lived and refresh tokens are not available then the token "
"acquisition should be delayed with `quarkus.oidc-client.early-tokens-"
"acquisition=false`."
msgstr ""
"デフォルトでは、このフィルタは初期化時に `OidcClient` "
"を取得してアクセストークンとリフレッシュトークンの最初のペアを取得します。アクセストークンが短命でリフレッシュトークンが利用できない場合は、トークンの取得を "
"`quarkus.oidc-client.early-tokens-acquisition=false`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:84
#, fuzzy
msgid ""
"You can selectively register `OidcClientRequestFilter` by using either `io."
"quarkus.oidc.client.filter.OidcClientFilter` or `org.eclipse.microprofile."
"rest.client.annotation.RegisterProvider` annotations:"
msgstr ""
"`io.quarkus.oidc.client.filter.OidcClientFilter` または `org.eclipse."
"microprofile.rest.client.annotation.RegisterProvider` アノテーションを使用して "
"`OidcClientRequestFilter` を選択的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:88
#, fuzzy
msgid ""
"``` import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; "
"import io.quarkus.oidc.client.filter.OidcClientFilter;"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:93
#, fuzzy
msgid ""
"@RegisterRestClient @OidcClientFilter @Path(\"/\")  public interface "
"ProtectedResourceService {"
msgstr ""
"@RegisterRestClient @OidcClientFilter @Path(\"/\") public interface "
"ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:98 upstream/_guides/security-openid-connect-client.adoc:115 upstream/_guides/security-openid-connect-client.adoc:327
#, no-wrap, fuzzy
msgid "    @GET\n"
"    String getUserName();\n"
"}\n"
"```\n"
msgstr "<pre>    ＠ＧＥＴ\n"
"    String getUserName()を使用しています。\n"
"}</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:100
#, fuzzy
msgid "or"
msgstr "或いは"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:105
#, fuzzy
msgid ""
"``` import org.eclipse.microprofile.rest.client.annotation.RegisterProvider; "
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; "
"import io.quarkus.oidc.client.filter.OidcClientRequestFilter;"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:110
#, fuzzy
msgid ""
"@RegisterRestClient @RegisterProvider(OidcClientRequestFilter.class)  "
"@Path(\"/\")  public interface ProtectedResourceService {"
msgstr ""
"@RegisterRestClient @RegisterProvider(OidcClientRequestFilter.class) "
"@Path(\"/\") public interface ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:117
#, fuzzy
msgid ""
"Alternatively, `OidcClientRequestFilter` can be registered automatically "
"with all MP Rest or JAX-RS clients if `quarkus.oidc.client.filter.register-"
"filter=true` property is set."
msgstr ""
"または、 `quarkus.oidc.client.filter.register-filter=true` プロパティが設定されている場合、すべての "
"MP Rest または JAX-RS クライアントで `OidcClientRequestFilter` を自動的に登録することができます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:118
#, no-wrap, fuzzy
msgid "Use injected Tokens"
msgstr "注入されたトークンを使用する"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:121
#, fuzzy
msgid "If you prefer you can use your own custom filter and inject `Tokens`:"
msgstr "ご希望の場合は、独自のカスタムフィルターを使用して、 `Tokens` を注入することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:127
#, fuzzy
msgid ""
"``` @Provider @Priority(Priorities.AUTHENTICATION)  @RequestScoped public "
"class OidcClientRequestCustomFilter implements ClientRequestFilter {"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:130
#, no-wrap, fuzzy
msgid "    @Inject\n"
"    Tokens tokens;\n"
msgstr "<pre>インジェクション\n"
"トークン・トークン。</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:137
#, no-wrap, fuzzy
msgid ""
"    @Override\n"
"    public void filter(ClientRequestContext requestContext) throws "
"IOException {\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer "
"\" + tokens.getAccessToken());\n"
"    }\n"
"}\n"
"```\n"
msgstr ""
"<pre>    オーバーライド\n"
"    public void filter(ClientRequestContext requestContext) throws "
"IOException {.\n"
"        requestContext.getHeaders().add(HttpHeaders.AUTHORIZATION, \"Bearer "
"\" + tokens.getAccessToken())。\n"
"    }\n"
"}</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:139
#, fuzzy
msgid ""
"The `Tokens` producer will acquire and refresh the tokens and the custom "
"filter will decide how and when to use the token."
msgstr "`Tokens` 制作者がトークンを取得してリフレッシュし、カスタムフィルターがいつどのようにトークンを使用するかを決定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:141
#, fuzzy
msgid ""
"See also the previous section about delaying the token acquisition in some "
"cases."
msgstr "トークンの取得を遅らせる場合があることについては、前の項も参照してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:142
#, no-wrap, fuzzy
msgid "OidcClients"
msgstr "オーアイディーシークライアント"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:145
#, fuzzy
msgid ""
"`io.quarkus.oidc.client.OidcClient` is a container of `OidcClient`s - it "
"includes a default `OidcClient` (which can also be injected directly as "
"described above) and named clients which can be configured like this:"
msgstr ""
"`io.quarkus.oidc.client.OidcClient` は、 `OidcClient`s - it includes a default "
"`OidcClient` （上記のように直接注入することも可能です）と名前付きクライアントのコンテナで、このように設定することができます。"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:148 upstream/_guides/security-openid-connect-client.adoc:216
#, fuzzy
msgid "``` quarkus.oidc-client.client-enabled=false"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:153 upstream/_guides/security-openid-connect-client.adoc:221
#, fuzzy
msgid ""
"quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/"
"quarkus2/ quarkus.oidc-client.jwt-secret.client-id=quarkus-app quarkus.oidc-"
"client.jwt-secret.credentials.jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-"
"EstJQLr_T-1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgstr ""
"quarkus.oidc-client.jwt-secret.auth-server-url=${keycloak.url}/realms/"
"quarkus2/ quarkus.oidc-client.jwt-secret.client-id=quarkus-app quarkus.oidc-"
"client.jpjwt-secret.credentials.jwt.secret="
"AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-"
"1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:155 upstream/_guides/security-openid-connect-client.adoc:223
#, fuzzy
msgid ""
"Note in this case the default client is disabled with a `client-enabled="
"false` property. The `jwt-secret` client can be accessed like this:"
msgstr ""
"この場合、デフォルトのクライアントは `client-enabled=false` プロパティで無効になっていることに注意してください。 `jwt-"
"secret` クライアントは以下のようにアクセスできます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:161 upstream/_guides/security-openid-connect-client.adoc:188 upstream/_guides/security-openid-connect-client.adoc:229
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:164
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:167 upstream/_guides/security-openid-connect-client.adoc:195 upstream/_guides/security-openid-connect-client.adoc:238
#, no-wrap
msgid "@Path(\"/clients\")\n"
"public class OidcClientResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:170 upstream/_guides/security-openid-connect-client.adoc:241
#, no-wrap
msgid "    @Inject\n"
"    OidcClients clients;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:177
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClient client = clients.getClient(\"jwt-secret\");\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:182
#, fuzzy
msgid ""
"If you also use link:security-openid-connect-multitenancy[OIDC multitenancy] "
"and each OIDC tenant has its own associated `OidcClient` then you can use a "
"Vert.x `RoutingContext` `tenantId` attribute, for example:"
msgstr ""
"link:security-openid-connect-multitenancy[OIDC マルチテナンシーを]使用し、各 OIDC "
"テナントが独自の関連する `OidcClient` を持っている場合は、例えば Vert.x `RoutingContext` `tenantId` "
"属性を使用することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:192
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:200
#, no-wrap
msgid ""
"    @Inject\n"
"    OidcClients clients;\n"
"    @Inject\n"
"    RoutingContext context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:209
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        String tenantId = context.get(\"tenantId\");\n"
"        // named OIDC tenant and client configurations use the same key:\n"
"        OidcClient client = clients.getClient(tenantId);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-openid-connect-client.adoc:213
#, fuzzy
msgid ""
"If you need you can also create new `OidcClient` without having to configure "
"it in the `application.properties`:"
msgstr ""
"必要に応じて、あなたはまた、 `application.properties` でそれを設定することなく、新しい `OidcClient` "
"を作成することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:233
#, no-wrap
msgid ""
"import io.quarkus.oidc.client.OidcClient;\n"
"import io.quarkus.oidc.client.OidcClients;\n"
"import io.quarkus.oidc.client.OidcClientConfig;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:235
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-client.adoc:253
#, no-wrap
msgid ""
"    @GET\n"
"    public String getResponse() {\n"
"        OidcClientConfig cfg = new OidcClientConfig();\n"
"        cfg.setId(\"myclient\");\n"
"        cfg.setAuthServerUrl(\"http://localhost:8081/auth/realms/quarkus/"
"\");\n"
"        cfg.setClientId(\"quarkus\"));\n"
"        cfg.getCredentials().setSecret(\"secret\");\n"
"        Uni<OidcClient> client = clients.newClient(config);\n"
"        // use this client to get the token\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-client.adoc:256
#, no-wrap, fuzzy
msgid "OidcClient Authentication"
msgstr "Oidcクライアント認証"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:260
#, fuzzy
msgid ""
"`OidcClient` has to authenticate to the OpenId Connect Provider for the "
"`client_credentials` and other grant requests to succeed.  All the https://"
"openid.net/specs/openid-connect-core-1_0.html#ClientAuthentication[OIDC "
"Client Authentication] options are supported, for example:"
msgstr ""
"`OidcClient` は、 `client_credentials` やその他のグラント要求を成功させるために OpenId Connect "
"Provider に認証する必要があります。 link:https://openid.net/specs/openid-connect-core-1_0."
"html#ClientAuthentication[OIDC クライアント認証]オプションはすべてサポートされています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:262
#, fuzzy
msgid "`client_secret_basic`:"
msgstr "`client_secret_basic`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:268
#, fuzzy
msgid ""
"``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ "
"quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials."
"secret=mysecret ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:270
#, fuzzy
msgid "`client_secret_post`:"
msgstr "`client_secret_post`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:277
#, fuzzy
msgid ""
"``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ "
"quarkus.oidc-client.client-id=quarkus-app quarkus.oidc.tenant-1.credentials."
"client-secret.value=mysecret quarkus.oidc.tenant-1.credentials.client-secret."
"method=post ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:279
#, fuzzy
msgid "`client_secret_jwt`:"
msgstr "`client_secret_jwt`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:285
#, fuzzy
msgid ""
"``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ "
"quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials."
"jwt.secret=AyM1SysPpbyDfgZld3umj1qzKObwVMkoqQ-EstJQLr_T-"
"1qS0gZH75aKtMN3Yj0iPS4hcgUuTwjAzZr1Z9CAow ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:287
#, fuzzy
msgid "`private_key_jwt` with the PEM key file:"
msgstr "`private_key_jwt` に PEM キーファイルを添付してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:293
#, fuzzy
msgid ""
"``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ "
"quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials."
"jwt.key-file=privateKey.pem ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:295
#, fuzzy
msgid "`private_key_jwt` with the key store file:"
msgstr "`private_key_jwt` にキーストアファイルを添付してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:304
#, fuzzy
msgid ""
"``` quarkus.oidc-client.auth-server-url=${keycloak.url}/realms/quarkus/ "
"quarkus.oidc-client.client-id=quarkus-app quarkus.oidc-client.credentials."
"jwt.key-store-file=keystore.jks quarkus.oidc-client.credentials.jwt.key-"
"store-password=mypassword quarkus.oidc-client.credentials.jwt.key-password="
"mykeypassword quarkus.oidc-client.credentials.jwt.key-id=mykey ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:306
#, fuzzy
msgid ""
"Using `private_key_jwt` or `private_key_jwt` authentication methods ensures "
"that no client secret goes over the wire."
msgstr ""
"`private_key_jwt` または `private_key_jwt` 認証方法を使用することで、クライアントの秘密が漏れることはありません。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:308
#, no-wrap, fuzzy
msgid "Token Propagation in MicroProfile RestClient client filter"
msgstr "MicroProfile RestClient クライアントフィルタでのトークンの伝播"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:311
#, fuzzy
msgid ""
"`quarkus-oidc-token-propagation` extension provides `io.quarkus.oidc.token."
"propagation.AccessTokenRequestFilter` JAX-RS ClientRequestFilter which "
"propagates the current Bearer or Authorization Code Flow access token as an "
"HTTP `Authorization` `Bearer` scheme value."
msgstr ""
"`quarkus-oidc-token-propagation` 拡張機能は、 `io.quarkus.oidc.token.propagation."
"AccessTokenRequestFilter` JAX-RS ClientRequestFilter "
"を提供します。これは、現在のベアラまたは認証コードフローのアクセストークンを HTTP `Authorization` `Bearer` "
"スキーム値として伝播します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:313
#, fuzzy
msgid ""
"You can selectively register `AccessTokenRequestFilter` by using either `io."
"quarkus.oidc.token.propagation.AccessToken` or `org.eclipse.microprofile."
"rest.client.annotation.RegisterProvider`, for example:"
msgstr ""
"`AccessTokenRequestFilter` を選択的に登録することができます。 `io.quarkus.oidc.token."
"propagation.AccessToken` 、 `org.eclipse.microprofile.rest.client.annotation."
"RegisterProvider` のいずれかを使用して、例えば、 を選択的に登録することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:317
#, fuzzy
msgid ""
"``` import org.eclipse.microprofile.rest.client.inject.RegisterRestClient; "
"import io.quarkus.oidc.token.propagation.TokenCredential;"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:322
#, fuzzy
msgid ""
"@RegisterRestClient @AccessToken @Path(\"/\")  public interface "
"ProtectedResourceService {"
msgstr ""
"@RegisterRestClient @AccessToken @Path(\"/\") public interface "
"ProtectedResourceService {."

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:329
#, fuzzy
msgid ""
"This filter will be enhanced in the future to support re-signing and/or "
"exchanging the access tokens before propagating them."
msgstr "このフィルタは将来的に強化され、アクセストークンを伝播する前に再署名や交換をサポートするようになる予定です。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-client.adoc:330
#, no-wrap, fuzzy
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-openid-connect-client.adoc:332
#, fuzzy
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkusのセキュリティ]"
