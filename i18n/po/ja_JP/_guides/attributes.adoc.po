# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-26 18:44+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=CHARSET\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/building-my-first-extension.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Building my first extension"
msgstr "Quarkus - ������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:14
#, fuzzy
msgid ""
"Quarkus extensions enhance your application just as projects dependencies do."
"  The role of the extensions is to leverage Quarkus paradigms to integrate "
"seamlessly a library into Quarkus architecture - e.g. do more things at "
"build time.  This is how you can use your battle-tested ecosystem and take "
"advantage of Quarkus performance and native compilation.  Go to https://code."
"quarkus.io/[code.quarkus.io] to get the list of the supported extensions."
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������ "
"link:https://code.quarkus.io/[code.quarkus."
"io]���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:17
#, fuzzy
msgid ""
"In this guide we are going to develop the *Sample Greeting Extension*.  The "
"extension will expose a customizable HTTP endpoint which simply greets the "
"visitor."
msgstr ""
"������������������������ "
"*������������������������������������������������*��������������������������������������������������������������������������������������������������������� "
"HTTP ������������������������������������������"

#. type: Block title
#: upstream/_guides/building-my-first-extension.adoc:19
#, no-wrap, fuzzy
msgid "Disclaimer"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:23
#, fuzzy
msgid ""
"To be sure it's extra clear you don't need an extension to add a Servlet to "
"your application.  This guide is a simplified example to explain the "
"concepts of extensions development.  Keep in mind it's not representative of "
"the power of moving things to build time or simplifying the build of native "
"images."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vault-auth.adoc:37
#, no-wrap, fuzzy
msgid "Prerequisites"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:40
#, fuzzy
msgid "To complete this guide, you need:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:17
#, fuzzy
msgid "less than 30 minutes"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:44
#, fuzzy
msgid "an IDE"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:45
#, fuzzy
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""
"JDK 1.8+ ������������������������������ `JAVA_HOME` "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:46
#, fuzzy
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version} ���������"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:33
#, no-wrap, fuzzy
msgid "Basic Concepts"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:36
#, fuzzy
msgid "First things first, we will need to start with some basic concepts."
msgstr ""
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:38
#, fuzzy
msgid "JVM mode vs Native mode"
msgstr "JVM������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:39
#, fuzzy
msgid ""
"Quarkus is first and foremost a Java framework, that means you can develop, "
"package and run classic JAR applications, that's what we call *JVM mode*."
msgstr ""
"������������������������ "
"*JAR*���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:40
#, fuzzy
msgid ""
"Thanks to https://graalvm.org/[GraalVM] you can compile your Java "
"application into machine specific code (like you do in Go or C++) and that's "
"what we call *Native mode*."
msgstr ""
"link:https://graalvm.org/"
"[GraalVM���]���������������Java������������������������������������ "
"*������*������������������������������������������������������������Go���C++������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:42
#, fuzzy
msgid ""
"The operation of compiling Java bytecode into a native system-specific "
"machine code is named *Ahead of Time Compilation* (aka AoT)."
msgstr ""
"Java��������������������������������������������������������������������������������������������������������������� "
"*Ahead of Time Compilation*(AoT)���������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:44
#, fuzzy
msgid "build time vs runtime in classic Java frameworks"
msgstr ""
"������������Java���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:45
#, fuzzy
msgid ""
"The build time corresponds to all the actions you apply to your Java source "
"files to convert them into something runnable (class files, jar/war, native "
"images)."
msgstr ""
"���������������������Java������������������������������������������������������������������������jar/"
"war���������������������������������������������������������Java������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:46
#, fuzzy
msgid ""
"Usually this stage is composed by the compilation, annotation processing, "
"bytecode generation, etc. At this point, everything is under the developer's "
"scope and control."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:47
#, fuzzy
msgid ""
"The runtime is all the actions that happen when you execute your application."
""
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:48
#, fuzzy
msgid ""
"It's obviously focused on starting your business-oriented actions but it "
"relies on a lot of technical actions like loading libraries and "
"configuration files, scanning the application's classpath, configuring the "
"dependency injection, setting up your Object-Relational Mapping, "
"instantiating your REST controllers, etc."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������REST������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:50
#, fuzzy
msgid ""
"Usually, Java frameworks do their bootstrapping during the runtime before "
"actually starting the application \"Business oriented layer\". During "
"bootstrap, frameworks dynamically collect metadata by scanning the classpath "
"to find configurations, entity definitions, dependency injection binding, "
"etc. in order to instantiate proper objects through reflection. The main "
"consequences are:"
msgstr ""
"���������Java������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:52
#, fuzzy
msgid ""
"Delaying the readiness of your application: you need to wait a couple of "
"seconds before actually serving a business request."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:53
#, fuzzy
msgid ""
"Having a peak of resource consumption at bootstrap: in a constrained "
"environment, you will need to size the needed resources based on your "
"technical bootstrap needs rather than your actual business needs."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:56
#, fuzzy
msgid ""
"Quarkus' philosophy is to prevent as much as possible slow and memory "
"intensive dynamic code execution by shifting left these actions and "
"eventually do them during the build time.  A Quarkus extension is a Java "
"piece of code acting as an adapter layer for your favorite library or "
"technology."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������Java���������������������"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:57
#, no-wrap, fuzzy
msgid "Description of a Quarkus extension"
msgstr "Quarkus������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:60
#, fuzzy
msgid "A Quarkus extension consists of two parts:"
msgstr ""
"Quarkus���������������������2���������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:63
#, fuzzy
msgid ""
"The *runtime module* which represents the capabilities the extension "
"developer exposes to the application's developer (an authentication filter, "
"an enhanced data layer API, etc).  Runtime dependencies are the ones the "
"users will add as their application dependencies (in Maven POMs or Gradle "
"build scripts)."
msgstr ""
"������������������������������������������������������������������������������������������ "
"*������������������������������*(������������������������������������������������API������)��������������������������������������������������������������������������������������������������������������������������� "
"(Maven POM ��������� Gradle ���������������������������)���"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:67
#, fuzzy
msgid ""
"The *deployment module* which is used during the augmentation phase of the "
"build, it describes how to \"deploy\" a library following the Quarkus "
"philosophy.  In other words, it applies all the Quarkus optimizations to "
"your application during the build.  The deployment module is also where we "
"prepare things for GraalVM's native compilation."
msgstr ""
"������������������������������������������������ "
"*���������������������������*������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������������GraalVM���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:70
#, fuzzy
msgid ""
"Users should not be adding the deployment modules of extension as "
"application dependencies. The deployment dependencies are resolved by "
"Quarkus during the augmentation phase from the runtime dependencies of the "
"application."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:72
#, fuzzy
msgid ""
"At this point, you should have understood that most of the magic will happen "
"at the Augmentation build time thanks to the deployment module."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:73
#, no-wrap, fuzzy
msgid "Quarkus Application Bootstrap"
msgstr "Quarkus������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:76
#, fuzzy
msgid "There are three distinct bootstrap phases of a Quarkus application."
msgstr ""
"Quarkus���������������������������������3���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:81
#, no-wrap, fuzzy
msgid ""
"*Augmentation*. During the build time, the Quarkus extensions will load and "
"scan your application's bytecode (including the dependencies) and "
"configuration.\n"
"At this stage, the extension can read configuration files, scan classes for "
"specific annotations, etc.\n"
"Once all the metadata has been collected, the extensions can pre-process the "
"libraries bootstrap actions like your ORM, DI or REST controllers "
"configurations.\n"
"The result of the bootstrap is directly recorded into bytecode and will be "
"part of your final application package.\n"
msgstr ""
"*������*���������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ORM���DI������������REST������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:84
#, no-wrap, fuzzy
msgid ""
"*Static Init*. During the run time, Quarkus will execute first a static init "
"method which contains some extensions actions/configurations.\n"
"When you will do your native packaging, this static method will be pre-"
"processed during the build time and the objects it has generated will be "
"serialized into the final native executable, so the initialization code will "
"not be executed in the native mode (imagine you execute a Fibonacci function "
"during this phase, the result of the computation will be directly recorded "
"in the native executable).\n"
"When running the application in JVM mode, this static init phase is executed "
"at the start of the application.\n"
msgstr ""
"������������������ *init*."
"������������������������Quarkus���������������������������������������������������/"
"���������������������init������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������JVM������������������������������������������������������������������������������init���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:87
#, no-wrap, fuzzy
msgid ""
"*Runtime Init*. Well nothing fancy here, we do classic run time code "
"execution.\n"
"So, the more code you run during the two phases above, the faster your "
"application will start.\n"
msgstr ""
"������ "
"*���������*������������������������������������������������������������������������������������������������������������������������������������������������������2���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:89
#, fuzzy
msgid "Now that everything is explained, we can start coding!"
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:370
#, no-wrap, fuzzy
msgid "Maven setup"
msgstr "Maven���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:93
#, fuzzy
msgid ""
"Quarkus provides `create-extension` Maven Mojo to initialize your extension "
"project."
msgstr ""
"Quarkus������ `create-extension` Maven "
"Mojo���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:114
#, no-wrap
msgid ""
"$ mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create-extension -N "
"\\\n"
"    -DgroupId=org.acme \\ #<1>\n"
"    -DartifactId=quarkus-greeting \\  #<2>\n"
"    -Dversion=1.0-SNAPSHOT \\ #<3>\n"
"    -Dquarkus.nameBase=\"Greeting Extension\" #<4>\n"
"[INFO] Scanning for projects...\n"
"[INFO] \n"
"[INFO] ------------------< org.apache.maven:standalone-pom >-----------------"
"--\n"
"[INFO] Building Maven Stub Project (No POM) 1\n"
"[INFO] --------------------------------[ pom ]-------------------------------"
"--\n"
"[INFO] \n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:create-extension (default-"
"cli) @ standalone-pom ---\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Total time:  1.233 s\n"
"[INFO] Finished at: 2020-04-22T23:28:15+02:00\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:117
#, fuzzy
msgid "Project's groupId"
msgstr "���������������������������������ID"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:118
#, fuzzy
msgid ""
"artifactId for the runtime artifact of the extension (the deployment "
"artifactId will be derived from the runtime artifactId by appending `-"
"deployment`)"
msgstr ""
"���������������������������������������������������artifactId "
"(���������������������������������Id��� `-deployment` "
"���������������������������������������������������������Id������������������������)"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:119
#, fuzzy
msgid "Project's version"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:120
#, fuzzy
msgid "Prefix for the `<name>` element values in the generated POMs"
msgstr "��������������� POM ��� `&amp;lt;name&amp;gt;` ���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:122
#, fuzzy
msgid ""
"Maven has generated a `quarkus-greeting` directory containing the extension "
"project which consists of the parent `pom.xml`, the `runtime` and the "
"`deployment` modules."
msgstr ""
"Maven ��������� `pom.xml` ��� `runtime` ��� `deployment` "
"������������������������������������������������������������ `quarkus-"
"greeting` ������������������������������������������"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:123
#, no-wrap, fuzzy
msgid "The parent pom.xml"
msgstr "������ pom.xml"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:126
#, fuzzy
msgid ""
"Your extension is a multi-module project. So let's start by checking out the "
"parent POM at `./quarkus-greeting/pom.xml`."
msgstr ""
"������������������������������������������������������������������������������������������������������������������ "
"POM ��� `./quarkus-greeting/pom.xml` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:134
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://"
"maven.apache.org/xsd/maven-4.0.0.xsd\">\n"
"    <modelVersion>4.0.0</modelVersion>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:139
#, no-wrap
msgid ""
"    <groupId>org.acme</groupId>\n"
"    <artifactId>quarkus-greeting-parent</artifactId>\n"
"    <version>1.0-SNAPSHOT</version>\n"
"    <name>Greeting Extension - Parent</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:177
#, no-wrap
msgid ""
"    <packaging>pom</packaging>\n"
"    <properties>\n"
"        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n"
"        <project.reporting.outputEncoding>UTF-8</project.reporting."
"outputEncoding>\n"
"        <maven.compiler.source>1.8</maven.compiler.source>\n"
"        <maven.compiler.target>1.8</maven.compiler.target>\n"
"        <maven.compiler.parameters>true</maven.compiler.parameters>\n"
"        <quarkus.version>{quarkus-version}</quarkus.version>\n"
"        <compiler-plugin.version>3.8.1</compiler-plugin.version>\n"
"    </properties>\n"
"    <modules> #<1>\n"
"        <module>deployment</module>\n"
"        <module>runtime</module>\n"
"    </modules>\n"
"    <dependencyManagement>\n"
"        <dependencies>\n"
"            <dependency>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-bom</artifactId> #<2>\n"
"                <version>${quarkus.version}</version>\n"
"                <type>pom</type>\n"
"                <scope>import</scope>\n"
"            </dependency>\n"
"        </dependencies>\n"
"    </dependencyManagement>\n"
"    <build>\n"
"        <pluginManagement>\n"
"            <plugins>\n"
"                <plugin>\n"
"                    <groupId>org.apache.maven.plugins</groupId>\n"
"                    <artifactId>maven-compiler-plugin</artifactId>\n"
"                    <version>${compiler-plugin.version}</version> #<3>\n"
"                </plugin>\n"
"            </plugins>\n"
"        </pluginManagement>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:180
#, fuzzy
msgid "Your extension declares 2 sub-modules `deployment` and `runtime`."
msgstr ""
"������������������������������2��������������������������� `deployment` ��� "
"`runtime` ���������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:181
#, fuzzy
msgid ""
"The `quarkus-bom` aligns your dependencies with those used by Quarkus during "
"the augmentation phase."
msgstr ""
"`quarkus-bom` "
"������������������������������������������������Quarkus������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:182
#, fuzzy
msgid ""
"Quarkus requires a recent version of the Maven compiler plugin supporting "
"the annotationProcessorPaths configuration."
msgstr ""
"Quarkus���������annotationProcessorPaths���������������������������Maven������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:183
#, no-wrap, fuzzy
msgid "The Deployment module"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:186
#, fuzzy
msgid ""
"Let's have a look at the deployment's `./quarkus-greeting/deployment/pom."
"xml`."
msgstr "������������������������ `./quarkus-greeting/deployment/pom.xml`."

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:199
#: upstream/_guides/building-my-first-extension.adoc:291
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven."
"apache.org/xsd/maven-4.0.0.xsd\">\n"
"    <modelVersion>4.0.0</modelVersion>\n"
"    <parent>\n"
"        <groupId>org.acme</groupId>\n"
"        <artifactId>quarkus-greeting-parent</artifactId>\n"
"        <version>1.0-SNAPSHOT</version>\n"
"        <relativePath>../pom.xml</relativePath>\n"
"    </parent>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:202
#, no-wrap
msgid ""
"    <artifactId>quarkus-greeting-deployment</artifactId> <!--1-->\n"
"    <name>Greeting Extension - Deployment</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:215
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-core-deployment</artifactId> <!--2-->\n"
"            <version>${quarkus.version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId> <!--3-->\n"
"            <version>${project.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:233
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <groupId>org.apache.maven.plugins</groupId>\n"
"                <artifactId>maven-compiler-plugin</artifactId>\n"
"                <configuration>\n"
"                    <annotationProcessorPaths>\n"
"                        <path>\n"
"                            <groupId>io.quarkus</groupId>\n"
"                            <artifactId>quarkus-extension-processor</"
"artifactId>  <!--4-->\n"
"                            <version>${quarkus.version}</version>\n"
"                        </path>\n"
"                    </annotationProcessorPaths>\n"
"                </configuration>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:235
#: upstream/_guides/building-my-first-extension.adoc:575
#, no-wrap
msgid "</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:238
#: upstream/_guides/building-my-first-extension.adoc:336
#, fuzzy
msgid "The key points are:"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:240
#, fuzzy
msgid ""
"By convention, the deployment module has the `-deployment` suffix (`greeting-"
"deployment`)."
msgstr ""
"������������������������������������������������������������ `-deployment` ( "
"`greeting-deployment`) ���������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:242
#, fuzzy
msgid ""
"The deployment module depends on the `quarkus-core-deployment` artifact.  We "
"will see later which dependencies are convenient to add."
msgstr ""
"��������������������������������������� `quarkus-core-deployment` "
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:243
#, fuzzy
msgid "The deployment module also *must* depend on the runtime module."
msgstr ""
"������������������������������������������������������������������������������������ "
"*���������������������*���"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:244
#: upstream/_guides/building-my-first-extension.adoc:340
#, fuzzy
msgid ""
"We add the `quarkus-extension-processor` to the compiler annotation "
"processors."
msgstr ""
"��������������������������������������������������������� `quarkus-extension-"
"processor` ���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:246
#, fuzzy
msgid ""
"In addition to the `pom.xml` `create-extension` also generated the `org.acme."
"quarkus.greeting.deployment.GreetingProcessor` class."
msgstr ""
"`pom.xml` `create-extension` ������������ `org.acme.quarkus.greeting."
"deployment.GreetingProcessor` ������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:250
#: upstream/_guides/building-my-first-extension.adoc:403
#: upstream/_guides/building-my-first-extension.adoc:465
#: upstream/_guides/building-my-first-extension.adoc:594
#, no-wrap
msgid "package org.acme.quarkus.greeting.deployment;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:253
#: upstream/_guides/building-my-first-extension.adoc:406
#, no-wrap
msgid ""
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.builditem.FeatureBuildItem;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:255
#: upstream/_guides/building-my-first-extension.adoc:408
#: upstream/_guides/building-my-first-extension.adoc:472
#, no-wrap
msgid "class GreetingProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:257
#: upstream/_guides/building-my-first-extension.adoc:410
#: upstream/_guides/building-my-first-extension.adoc:474
#, no-wrap
msgid "    private static final String FEATURE = \"greeting\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:262
#: upstream/_guides/building-my-first-extension.adoc:479
#, no-wrap
msgid ""
"    @BuildStep\n"
"    FeatureBuildItem feature() {\n"
"        return new FeatureBuildItem(FEATURE);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:352 upstream/_guides/cdi.adoc:388 upstream/_guides/cdi.adoc:397
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:269
#, fuzzy
msgid ""
"`FeatureBuildItem` represents a functionality provided by an extension.  The "
"name of the feature gets displayed in the log during application bootstrap.  "
"An extension should provide at most one feature."
msgstr ""
"`FeatureBuildItem` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:273
#, fuzzy
msgid ""
"Be patient, we will explain the `Build Step Processor` concept and all the "
"extension deployment API later on.  At this point, you just need to "
"understand that this class explains to Quarkus how to deploy a feature named "
"`greeting` which is your extension.  In other words, you are augmenting your "
"application to use the `greeting` extension with all the Quarkus benefits "
"(build time optimization, native support, etc.)."
msgstr ""
"`Build Step Processor` "
"������������������������������������������������������������ API "
"������������������������������������������������������������������������������������ "
"`greeting` "
"���������������������������������������������������Quarkus��������������������������������������������������������������������������������������������������������������������������������� "
"`greeting` "
"������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:274
#, no-wrap, fuzzy
msgid "The Runtime module"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:277
#, fuzzy
msgid "Finally `./quarkus-greeting/runtime/pom.xml`."
msgstr "��������� `./quarkus-greeting/runtime/pom.xml`."

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:294
#, no-wrap
msgid ""
"    <artifactId>quarkus-greeting</artifactId>  <!--1-->\n"
"    <name>Greeting Extension - Runtime</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:297
#, no-wrap
msgid "    <dependencies>\n"
"    </dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:333
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-bootstrap-maven-plugin</artifactId>  <!--"
"2-->\n"
"                <version>${quarkus.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <goals>\n"
"                            <goal>extension-descriptor</goal>\n"
"                        </goals>\n"
"                        <phase>compile</phase>\n"
"                        <configuration>\n"
"                            <deployment>${project.groupId}:${project."
"artifactId}-deployment:${project.version}\n"
"                            </deployment>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"            <plugin>\n"
"                <groupId>org.apache.maven.plugins</groupId>\n"
"                <artifactId>maven-compiler-plugin</artifactId>\n"
"                <configuration>\n"
"                    <annotationProcessorPaths>\n"
"                        <path>\n"
"                            <groupId>io.quarkus</groupId>\n"
"                            <artifactId>quarkus-extension-processor</"
"artifactId> <!--3-->\n"
"                            <version>${quarkus.version}</version>\n"
"                        </path>\n"
"                    </annotationProcessorPaths>\n"
"                </configuration>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:338
#, fuzzy
msgid ""
"By convention, the runtime module has no suffix (`greeting`) as it is the "
"artifact exposed to the end user."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������ "
"( `greeting`) ������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:339
#, fuzzy
msgid ""
"We add the `quarkus-bootstrap-maven-plugin` to generate the Quarkus "
"extension descriptor included into the runtime artifact which links it with "
"the corresponding deployment artifact."
msgstr ""
"���������������������������������������Quarkus��������������������������������������� "
"`quarkus-bootstrap-maven-plugin` "
"���������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:341
#, no-wrap, fuzzy
msgid "Basic version of the Sample Greeting extension"
msgstr "���������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:343
#, no-wrap, fuzzy
msgid "Implementing the Greeting feature"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:346
#, fuzzy
msgid ""
"The (killer) feature proposed by our extension is to greet the user.  To do "
"so, our extension will deploy, in the user application, a Servlet exposing "
"the HTTP endpoint `/greeting` which responds to the GET verb with a plain "
"text `Hello`."
msgstr ""
"���������������������������������������(���������)������������������������������������������������������ "
"`Hello`���������������������������������������������������������������������������������������������������HTTP "
"��������������������� `/greeting` "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:348
#, fuzzy
msgid ""
"The `runtime` module is where you develop the feature you want to propose to "
"your users, so it's time to create our Web Servlet."
msgstr ""
"`runtime` "
"��������������������������������������������������������������������������������������������������������� "
"Web Servlet ���������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:352
#, fuzzy
msgid ""
"To use Servlets in your applications you need to have a Servlet Container "
"such as http://undertow.io[Undertow].  Luckily, `quarkus-bom` imported by "
"our parent `pom.xml` already includes the Undertow Quarkus extension.  All "
"we need to do is add"
msgstr ""
"��������������������������������������������������������������������� link:"
"http://undertow."
"io[Undertow]������������������������������������������������������������ "
"`pom.xml` ��������������������������� `quarkus-bom` ������������������������ "
"������������������ Undertow Quarkus "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:360
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-undertow</artifactId>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:362
#, fuzzy
msgid "to our `./quarkus-greeting/runtime/pom.xml`."
msgstr "��� `./quarkus-greeting/runtime/pom.xml` ���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:364
#, fuzzy
msgid ""
"Now we can create our Servlet `org.acme.quarkus.greeting.GreetingServlet` in "
"the `runtime` module."
msgstr ""
"������������ `runtime` ������������������������������������ `org.acme."
"quarkus.greeting.GreetingServlet` "
"������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:367
#, no-wrap
msgid "package org.acme.quarkus.greeting;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:373
#, no-wrap
msgid ""
"import javax.servlet.annotation.WebServlet;\n"
"import javax.servlet.http.HttpServlet;\n"
"import javax.servlet.http.HttpServletRequest;\n"
"import javax.servlet.http.HttpServletResponse;\n"
"import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:376
#, no-wrap
msgid "@WebServlet\n"
"public class GreetingServlet extends HttpServlet { // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:382
#, no-wrap
msgid ""
"    @Override\n"
"    protected void doGet(HttpServletRequest req, HttpServletResponse resp) "
"throws IOException { // <2>\n"
"        resp.getWriter().write(\"Hello\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:385
#, fuzzy
msgid ""
"As usual, defining a servlet requires to extend `javax.servlet.http."
"HttpServlet`."
msgstr ""
"��������������������������������������������������������������� `javax."
"servlet.http.HttpServlet`."

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:386
#, fuzzy
msgid ""
"Since we want to respond to the HTTP GET verb, we override the `doGet` "
"method and write `Hello` in the Servlet response's output stream."
msgstr ""
"HTTP GET��������������������������������� `doGet` "
"������������������������������������������������������������������������������������������������ "
"`Hello` ���������������������"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:387
#, no-wrap, fuzzy
msgid "Deploying the Greeting feature"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:392
#, fuzzy
msgid ""
"Quarkus magic relies on bytecode generation at build time rather than "
"waiting for the runtime code evaluation, that's the role of your extension's "
"`deployment` module.  Calm down, we know, bytecode is hard and you don't "
"want to do it manually, Quarkus proposes a high level API to make your life "
"easier.  Thanks to basic concepts, you will describe the items to produce/"
"consume and the corresponding steps in order to generate the bytecode to "
"produce during the deployment time."
msgstr ""
"`deployment` Quarkus "
"magic���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������/"
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:394
#, fuzzy
msgid ""
"The `io.quarkus.builder.item.BuildItem` concept represents object instances "
"you will produce or consume (and at some point convert into bytecode) thanks "
"to methods annotated with `@io.quarkus.deployment.annotations.BuildStep` "
"which describe your extension's deployment tasks."
msgstr ""
"`io.quarkus.builder.item.BuildItem` ��������������� `@io.quarkus.deployment."
"annotations.BuildStep` "
"��������������������������������������������������������������������������������������������������������� "
"(������������������������������������������������������������) "
"������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/building-substrate-howto.adoc:34
#, no-wrap, fuzzy
msgid "NOTE"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:396
#, fuzzy
msgid ""
"See link:all-builditems[the complete list of BuildItem implementations in "
"core] for more information"
msgstr ""
"��������� link:all-builditems[core ��� BuildItem "
"������������������������������]���������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:399
#, fuzzy
msgid ""
"Go back to the generated `org.acme.quarkus.greeting.deployment."
"GreetingProcessor` class."
msgstr ""
"��������������� `org.acme.quarkus.greeting.deployment.GreetingProcessor` "
"���������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:415
#, no-wrap
msgid ""
"    @BuildStep // <1>\n"
"    FeatureBuildItem feature() {\n"
"        return new FeatureBuildItem(FEATURE); // <2>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:422
#, fuzzy
msgid ""
"`feature()` method is annotated with `@BuildStep` which means it is "
"identified as a deployment task Quarkus will have to execute during the "
"deployment.  `BuildStep` methods are run concurrently at augmentation time "
"to augment the application.  They use a producer/consumer model, where a "
"step is guaranteed not to be run until all the items that it is consuming "
"have been produced."
msgstr ""
"`feature()` ������������������ `@BuildStep` "
"���������������������������������������������������������Quarkus��������������������������������������������������������������������������������������������������������� "
"`BuildStep` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:425
#, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.FeatureBuildItem` is an implementation of "
"`BuildItem` which represents the description of an extension.  This "
"`BuildItem` will be used by Quarkus to display information to the users when "
"the application is starting."
msgstr ""
"`io.quarkus.deployment.builditem.FeatureBuildItem` "
"������������������������������������ `BuildItem` ������������������������ "
"`BuildItem` "
"������������������������������������������������������������������������������������������Quarkus���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:428
#, fuzzy
msgid ""
"There are many `BuildItem` implementations, each one represents an aspect of "
"the deployment process.  Here are some examples:"
msgstr ""
"��������� `BuildItem` "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:430
#, fuzzy
msgid ""
"`ServletBuildItem`: describes a Servlet (name, path, etc.) we want to "
"generate during the deployment."
msgstr ""
"`ServletBuildItem`: "
"���������������������������������������������������(���������������������)���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:431
#, fuzzy
msgid ""
"`BeanContainerBuildItem`: describes a container used to store and retrieve "
"object instances during the deployment."
msgstr ""
"`BeanContainerBuildItem`: "
"���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:434
#, fuzzy
msgid ""
"If you don't find a `BuildItem` for what you want to achieve, you can create "
"your own implementation. Keep in mind that a `BuildItem` should be as fine-"
"grained as possible, representing a specific part of the deployment.  To "
"create your `BuildItem` you can extend:"
msgstr ""
"������������������������������������ `BuildItem` "
"��������������������������������������������������������������������������������������� "
"`BuildItem` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`BuildItem` ���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:436
#, fuzzy
msgid ""
"`io.quarkus.builder.item.SimpleBuildItem` if you need only a single instance "
"of the item during the deployment (e.g. `BeanContainerBuildItem`, you only "
"want one container)."
msgstr ""
"`io.quarkus.builder.item.SimpleBuildItem` "
"������������������������������������������������������1������������������������������(���:"
" `BeanContainerBuildItem`, ���������������1���������������������������)���"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:437
#, fuzzy
msgid ""
"`io.quarkus.builder.item.MultiBuildItem` if you want to have multiple "
"instances (e.g. `ServletBuildItem`, you can produce many Servlets during the "
"deployment)."
msgstr ""
"��������������������������������������������������� `io.quarkus.builder.item."
"MultiBuildItem` (���: `ServletBuildItem`, "
"���������������������������������������������������������������������������������)���"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:440
#, fuzzy
msgid ""
"It's now time to declare our HTTP endpoint. To do so, we need to produce a "
"`ServletBuildItem`.  At this point, we are sure you understood that if the "
"`quarkus-undertow` dependency proposes Servlet support for our `runtime` "
"module, we will need the `quarkus-undertow-deployment` dependency in our "
"`deployment` module to have access to the `io.quarkus.undertow.deployment."
"ServletBuildItem`."
msgstr ""
"������������HTTP "
"��������������������������������������������������������������������������������� "
"`ServletBuildItem` ��������������������������������������������������������� "
"`quarkus-undertow` ��������������� `runtime` ������������������ Servlet "
"������������������������������������������ `deployment` ������������������ "
"`quarkus-undertow-deployment` ��������������� `io.quarkus.undertow."
"deployment.ServletBuildItem` "
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:442
#, fuzzy
msgid "Update the `./quarkus-greeting/deployment/pom.xml` as follows:"
msgstr ""
"`./quarkus-greeting/deployment/pom.xml` "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:456
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId>\n"
"            <version>${project.version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-undertow-deployment</artifactId>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:459
#, fuzzy
msgid ""
"The dependency on `quarkus-core-deployment` generated by the `create-"
"extension` mojo can now be removed since `quarkus-undertow-deployment` "
"already depends on it."
msgstr ""
"`create-extension` mojo ������������������ `quarkus-core-deployment` "
"������������������ `quarkus-undertow-deployment` "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:461
#, fuzzy
msgid ""
"We can now update `org.acme.quarkus.greeting.deployment.GreetingProcessor`:"
msgstr ""
"`org.acme.quarkus.greeting.deployment.GreetingProcessor` "
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:470
#, no-wrap
msgid ""
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.builditem.FeatureBuildItem;\n"
"import org.acme.quarkus.greeting.GreetingServlet;\n"
"import io.quarkus.undertow.deployment.ServletBuildItem;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:487
#, no-wrap
msgid ""
"    @BuildStep\n"
"    ServletBuildItem createServlet() { // <1>\n"
"      ServletBuildItem servletBuildItem = ServletBuildItem."
"builder(\"greeting\", GreetingServlet.class.getName())\n"
"        .addMapping(\"/greeting\")\n"
"        .build(); // <2>\n"
"      return servletBuildItem;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:493
#, fuzzy
msgid ""
"We add a `createServlet` method which returns a `ServletBuildItem` and "
"annotate it with `@BuildStep`.  Now, Quarkus will process this new task "
"which will result in the bytecode generation of the Servlet registration at "
"build time."
msgstr ""
"`ServletBuildItem` ��������� `createServlet` ��������������������������� "
"`@BuildStep` "
"������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:495
#, fuzzy
msgid ""
"`ServletBuildItem` proposes a fluent API to instantiate a Servlet named "
"`greeting` of type `GreetingServlet` (it's our class provided by our "
"extension `runtime` module), and map it the `/greeting` path."
msgstr ""
"`ServletBuildItem` ������ `GreetingServlet` ������ `greeting` "
"��������������������������������������������������������� `/greeting` "
"������������������������������������������������ API "
"������������������������ (��������������������� `runtime` "
"������������������������������������������)���"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:496
#, no-wrap, fuzzy
msgid "Testing the Greeting feature"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:500
#, fuzzy
msgid ""
"When developing a Quarkus extension, you mainly want to test your feature is "
"properly deployed in an application and works as expected.  That's why the "
"tests will be hosted in the `deployment` module."
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`deployment` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:502
#, fuzzy
msgid ""
"Let's add the testing dependencies into the `./quarkus-greeting/deployment/"
"pom.xml` and `maven-surefire` configuration"
msgstr ""
"`./quarkus-greeting/deployment/pom.xml` ��� `maven-surefire` "
"������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:516
#, no-wrap
msgid ""
"    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven."
"apache.org/xsd/maven-4.0.0.xsd\">\n"
"    <modelVersion>4.0.0</modelVersion>\n"
"    <parent>\n"
"        <groupId>org.acme</groupId>\n"
"        <artifactId>quarkus-greeting-parent</artifactId>\n"
"        <version>1.0-SNAPSHOT</version>\n"
"        <relativePath>../pom.xml</relativePath>\n"
"    </parent>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:519
#, no-wrap
msgid ""
"    <artifactId>quarkus-greeting-deployment</artifactId>\n"
"    <name>Greeting Extension - Deployment</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:523
#, no-wrap
msgid ""
"    <properties>\n"
"        <maven.surefire.version>3.0.0-M4</maven.surefire.version>\n"
"    </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:545
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId>\n"
"            <version>${project.version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-undertow-deployment</artifactId>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-junit5-internal</artifactId> <!--1-->\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.rest-assured</groupId>\n"
"            <artifactId>rest-assured</artifactId> <!--2-->\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:573
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <groupId>org.apache.maven.plugins</groupId>\n"
"                <artifactId>maven-compiler-plugin</artifactId>\n"
"                <configuration>\n"
"                    <annotationProcessorPaths>\n"
"                        <path>\n"
"                            <groupId>io.quarkus</groupId>\n"
"                            <artifactId>quarkus-extension-processor</"
"artifactId>\n"
"                            <version>${quarkus.version}</version>\n"
"                        </path>\n"
"                    </annotationProcessorPaths>\n"
"                </configuration>\n"
"            </plugin>\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId> <!--3-->\n"
"                <version>${maven.surefire.version}</version>\n"
"                <configuration>\n"
"                    <systemPropertyVariables>\n"
"                        <java.util.logging.manager>org.jboss.logmanager."
"LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:579
#, fuzzy
msgid ""
"Quarkus proposes facilities to test extensions via the `quarkus-junit5-"
"internal` artifact, in particular the `io.quarkus.test.QuarkusUnitTest` "
"runner which starts an application with your extension."
msgstr ""
"Quarkus������ `quarkus-junit5-internal` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`io.quarkus.test.QuarkusUnitTest` ���������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:580
#, fuzzy
msgid ""
"We will use http://rest-assured.io[RestAssured] (massively used in Quarkus) "
"to test our HTTP endpoint."
msgstr ""
"link:http://rest-assured."
"io[RestAssured]���Quarkus���������������������������������������������������HTTP���������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:581
#, fuzzy
msgid ""
"In order to not fallback to JUnit 4 legacy mode you need to define a recent "
"version of `maven-surefire` plugin."
msgstr ""
"JUnit 4 "
"��������������������������������������������������������������������������������� "
"`maven-surefire` "
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:583
#, fuzzy
msgid ""
"Currently, the `create-extension` Maven Mojo does not create the test "
"structure. We'll create it ourselves:"
msgstr ""
"��������� `create-extension` Maven "
"Mojo���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:587
#, no-wrap
msgid ""
"mkdir -p ./quarkus-greeting/deployment/src/test/java/org/acme/quarkus/"
"greeting/deployment\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:590
#, fuzzy
msgid ""
"To start testing your extension, create the following `org.acme.quarkus."
"greeting.deployment.GreetingTest` test class:"
msgstr ""
"������������������������������������������������������ `org.acme.quarkus."
"greeting.deployment.GreetingTest` ���������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:601
#, no-wrap
msgid ""
"import io.quarkus.test.QuarkusUnitTest;\n"
"import io.restassured.RestAssured;\n"
"import org.jboss.shrinkwrap.api.ShrinkWrap;\n"
"import org.jboss.shrinkwrap.api.spec.JavaArchive;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.extension.RegisterExtension;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:603
#, no-wrap
msgid "import static org.hamcrest.Matchers.containsString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:605
#, no-wrap
msgid "public class GreetingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:609
#, no-wrap
msgid ""
"  @RegisterExtension\n"
"  static final QuarkusUnitTest config = new QuarkusUnitTest()\n"
"    .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)); // "
"<1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:614
#, no-wrap
msgid ""
"  @Test\n"
"  public void testGreeting() {\n"
"    RestAssured.when().get(\"/greeting\").then().statusCode(200)."
"body(containsString(\"Hello\")); // <2>\n"
"  }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:619
#, fuzzy
msgid ""
"We register a Junit Extension which will start a Quarkus application with "
"the Greeting extension."
msgstr ""
"������������������������������������Quarkus������������������������Junit���������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:620
#, fuzzy
msgid ""
"We verify the application has a `greeting` endpoint responding to a HTTP GET "
"request with a OK status (200) and a plain text body containing `Hello`"
msgstr ""
"��������������������������� `greeting` ��������������������������� OK "
"��������������� (200) ��� HTTP GET "
"��������������������������������������������������������������������������������������������������������������������������������������������� "
"`Hello`"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:622
#, fuzzy
msgid "Time to test!"
msgstr "������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:664
#, no-wrap
msgid ""
"$ mvn clean test\n"
"[INFO] Scanning for projects...\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Reactor Build Order:\n"
"[INFO]\n"
"[INFO] Greeting Extension - Parent                                        "
"[pom]\n"
"[INFO] Greeting Extension - Runtime                                       "
"[jar]\n"
"[INFO] Greeting Extension - Deployment                                    "
"[jar]\n"
"[INFO]\n"
"...\n"
"[INFO] --- maven-surefire-plugin:3.0.0-M4:test (default-test) @ quarkus-"
"greeting-deployment ---\n"
"[INFO] \n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quarkus.greeting.deployment.GreetingTest\n"
"2020-04-23 13:55:44,612 INFO  [io.quarkus] (main) Quarkus {quarkus-version} "
"started in 0.395s. Listening on: http://0.0.0.0:8081\n"
"2020-04-23 13:55:44,614 INFO  [io.quarkus] (main) Profile test activated. \n"
"2020-04-23 13:55:44,614 INFO  [io.quarkus] (main) Installed features: [cdi, "
"quarkus-greeting, servlet]\n"
"2020-04-23 13:55:45,876 INFO  [io.quarkus] (main) Quarkus stopped in 0.025s\n"
"[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.609 "
"s - in org.acme.quarkus.greeting.deployment.GreetingTest\n"
"[INFO] \n"
"[INFO] Results:\n"
"[INFO] \n"
"[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n"
"[INFO]\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Reactor Summary for getting-started-extension 1.0-SNAPSHOT:\n"
"[INFO]\n"
"[INFO] getting-started-extension .......................... SUCCESS [  0.076 "
"s]\n"
"[INFO] Greeting Extension - Parent ........................ SUCCESS [  0.002 "
"s]\n"
"[INFO] Greeting Extension - Runtime ....................... SUCCESS [  1.467 "
"s]\n"
"[INFO] Greeting Extension - Deployment .................... SUCCESS [  4.099 "
"s]\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Total time:  5.745 s\n"
"[INFO] Finished at: 2020-01-28T22:40:56+01:00\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:667
#, fuzzy
msgid "Looks good! Congratulations you just finished your first extension."
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:668
#, no-wrap, fuzzy
msgid "Debugging your extension"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:672
#, fuzzy
msgid ""
"_If debugging is the process of removing bugs, then programming must be the "
"process of putting them in._ Edsger W. Dijkstra"
msgstr ""
"_���������������������������������������������������������������������������������������������������������������������������������������������_���������������W���������������������"

#. type: Title ====
#: upstream/_guides/building-my-first-extension.adoc:674
#, no-wrap, fuzzy
msgid "Debugging your application build"
msgstr "���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:678
#, fuzzy
msgid ""
"Since your extension deployment is made during the application build, this "
"process is triggered by your build tool.  That means if you want to debug "
"this phase you need to launch your build tool with the remote debug mode "
"switched one."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title =====
#: upstream/_guides/building-my-first-extension.adoc:679
#, no-wrap, fuzzy
msgid "Maven"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:683
#, fuzzy
msgid ""
"You can activate Maven remote debugging by using `mvnDebug`.  You can launch "
"your application with the following command line:"
msgstr ""
"`mvnDebug` ������������������Maven "
"���������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:687
#, no-wrap
msgid "mvnDebug clean compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:691
#, fuzzy
msgid ""
"By default, Maven will wait for a connection on `localhost:8000`.  Now, you "
"can run your IDE `Remote` configuration to attach it to `localhost:8000`."
msgstr ""
"������������������������Maven������ `localhost:8000` "
"���������������������������������������������������������������������������������������IDE "
"`Remote` ��������������������������������������������� `localhost:8000`."

#. type: Title =====
#: upstream/_guides/building-my-first-extension.adoc:692
#, no-wrap, fuzzy
msgid "Gradle"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:696
#, fuzzy
msgid ""
"You can activate Gradle remote debugging by using the flags `org.gradle."
"debug=true` or `org.gradle.daemon.debug=true` in daemon mode.  You can "
"launch your application with the following command line:"
msgstr ""
"Gradle ������������������������������������������������������������������ "
"`org.gradle.debug=true` ��������� `org.gradle.daemon.debug=true` "
"������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:700
#, no-wrap
msgid "./gradlew quarkusDev -Dorg.gradle.daemon.debug=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:704
#, fuzzy
msgid ""
"By default, Gradle will wait for a connection on `localhost:5005`.  Now, you "
"can run your IDE `Remote` configuration to attach it to `localhost:5005`."
msgstr ""
"������������������������Gradle������ `localhost:5005` "
"��������������������������������������������������������� `localhost:5005` "
"��������������������������������������������� IDE `Remote` "
"������������������������������������������������"

#. type: Title ====
#: upstream/_guides/building-my-first-extension.adoc:706
#, no-wrap, fuzzy
msgid "Debugging your extension tests"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:710
#, fuzzy
msgid ""
"We have seen together how to test your extension and sometimes things don't "
"go so well and you want to debug your tests.  Same principle here, the trick "
"is to enable the Maven Surefire remote debugging in order to attach an IDE "
"`Remote` configuration."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������IDE "
"`Remote` ��������������������������������������� Maven Surefire "
"���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:715
#, no-wrap
msgid "$ cd ./greeting\n"
"$ mvn clean test -Dmaven.surefire.debug\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:718
#, fuzzy
msgid "By default, Maven will wait for a connection on `localhost:5005`."
msgstr ""
"������������������������Maven ��� `localhost:5005` "
"���������������������������"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:719
#, no-wrap, fuzzy
msgid "Extension publication"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:722
#, fuzzy
msgid ""
"Now that you just finished building your first extension you should be eager "
"to use it in a Quarkus application!"
msgstr ""
"���������������������������������������������������������������Quarkus���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:724
#, no-wrap, fuzzy
msgid "*Classic Maven publication*\n"
msgstr "*���������������������������������*"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:727
#, fuzzy
msgid ""
"Because your extension produces traditional JARs, the easiest way to share "
"your extension is to publish it to a Maven repository.  Once published you "
"can simply declare it with your project dependencies. Let's demonstrate that "
"by creating a simple Quarkus application"
msgstr ""
"������������������������������������ JAR "
"��������������������������������������������������������������������������� "
"Maven "
"������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:735
#, no-wrap
msgid ""
"$mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"     -DprojectGroupId=org.acme \\\n"
"     -DprojectArtifactId=greeting-app \\\n"
"     -DprojectVersion=1.0-SNAPSHOT \\\n"
"     -DnoExamples\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:738
#, fuzzy
msgid ""
"`cd` into `greeting-app` and add the dependency on `quarkus-greeting` "
"extension we created above."
msgstr ""
"`cd` ��� `greeting-app` ��������������������������������� `quarkus-greeting` "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:740
#, fuzzy
msgid ""
"`quarkus-greeting` extension has to be installed in the local Maven "
"repository to be usable in the application."
msgstr ""
"`quarkus-greeting` "
"������������������������������������������������������������������������������������������������ "
"Maven ������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:754
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId>\n"
"            <version>1.0-SNAPSHOT</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-resteasy</artifactId>\n"
"        </dependency>\n"
"        <!-- the rest of the application dependencies -->\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:757
#, fuzzy
msgid ""
"Run the application and notice the `Install Features` list contains the "
"`quarkus-greeting` extension."
msgstr ""
"������������������������������������������ `Install Features` "
"��������������� `quarkus-greeting` "
"������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:787
#, no-wrap
msgid ""
"$ mvn clean compile quarkus:dev\n"
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"[INFO] ---------------------< org.acme:code-with-quarkus >-------------------"
"--\n"
"[INFO] Building code-with-quarkus 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]-------------------------------"
"--\n"
"[INFO]\n"
"[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ code-with-quarkus -"
"--\n"
"[INFO] Deleting /tmp/code-with-quarkus/target\n"
"[INFO]\n"
"[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ code-"
"with-quarkus ---\n"
"[INFO] Using 'UTF-8' encoding to copy filtered resources.\n"
"[INFO] Copying 2 resources\n"
"[INFO]\n"
"[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ code-with-"
"quarkus ---\n"
"[INFO] Changes detected - recompiling the module!\n"
"[INFO] Compiling 1 source file to /tmp/code-with-quarkus/target/classes\n"
"[INFO]\n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:dev (default-cli) @ code-"
"with-quarkus ---\n"
"Listening for transport dt_socket at address: 5005\n"
"__  ____  __  _____   ___  __ ____  ______ \n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n"
"2020-04-23 14:17:36,137 INFO  [io.quarkus] (Quarkus Main Thread) greeting-"
"app 1.0-SNAPSHOT (powered by Quarkus {quarkus-version}) started in 0.985s. "
"Listening on: http://0.0.0.0:8080\n"
"2020-04-23 14:17:36,140 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev "
"activated. Live Coding activated.\n"
"2020-04-23 14:17:36,140 INFO  [io.quarkus] (Quarkus Main Thread) Installed "
"features: [cdi, quarkus-greeting, resteasy, servlet]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:792
#, fuzzy
msgid ""
"From an extension developer standpoint the Maven publication strategy is "
"very handy and fast but Quarkus wants to go one step further by also "
"ensuring a reliability of the ecosystem for the people who will use the "
"extensions.  Think about it, we all had a poor Developer Experience with an "
"unmaintained library, an incompatibility between dependencies (and we don't "
"even talk about legal issues).  That's why there is the Quarkus Platform."
msgstr ""
"���������������������������������������������������Maven������������������������������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus "
"Platform���������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:794
#, no-wrap, fuzzy
msgid "*Quarkus Platform*\n"
msgstr "*Quarkus������������������������*"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:796
#, fuzzy
msgid ""
"Quarkus proposes a `quarkus-universe-bom` which is a certified list of "
"extensions placed under the Quarkus Platform label. From an application "
"developer, the objectives of the platform are:"
msgstr ""
"Quarkus������Quarkus "
"Platform��������������������������������������������������������������������� "
"`quarkus-universe-bom` "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:798
#, fuzzy
msgid ""
"To guarantee a supportability of the extension (bugfix, security issues, "
"dependency upgrades)"
msgstr ""
"������������������������������������������������������ "
"(���������������������������������������������������������������������������������������)"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:799
#, fuzzy
msgid ""
"To ease the extension discovery through the Quarkus CLI or https://code."
"quarkus.io/"
msgstr ""
"Quarkus CLI��������� https://code.quarkus.io/ "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:800
#, fuzzy
msgid "To ensure a global consistency of the extension ecosystem"
msgstr ""
"������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/building-my-first-extension.adoc:802
#, no-wrap, fuzzy
msgid "Should I publish my extension to the platform?"
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:807
#, fuzzy
msgid ""
"If you feel your extensions is for you or a limited group, simply publishing "
"to Maven is fine.  If the extension solves a general problem, it is very "
"handy for Quarkus users to see it on https://code.quarkus.io.  But this "
"comes with some responsibility for you, keeping it up to date with Quarkus "
"minor releases (every month or so at the moment).  When in doubt, have a "
"conversation with the community in the https://groups.google.com/forum/"
"#!forum/quarkus-dev[Quarkus Google Group]. We can make a collective decision."
""
msgstr ""
"������������������������������������������������������������������������������������������������������Maven������������������������������������������������������������������������������������������������������Quarkus��������������������������� "
"https://code.quarkus.io  "
"���������������������������������������������������������������������������������������������Quarkus���������������������������������������������1���������1������������������������������������������������������������������������������������������������������������������������������Quarkus��� "
"link:https://groups.google.com/forum/#!forum/quarkus-"
"dev[Google������������]���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:811
#, fuzzy
msgid ""
"As for now, the process to propose a new extension is not defined yet.  Your "
"best chance is to present your extension on the https://groups.google.com/"
"forum/#!forum/quarkus-dev[Quarkus Google Group] and wait for an official "
"invitation to join the Quarkus Platform."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������ "
"link:https://groups.google.com/forum/#!forum/quarkus-dev[Quarkus "
"Google������������]������������������������������Quarkus "
"Platform������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:404
#, no-wrap
msgid "Conclusion"
msgstr "������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:815
#, fuzzy
msgid ""
"Creating new extensions may appear to be an intricate task at first but once "
"you understood the Quarkus game-changer paradigm (build time vs runtime) the "
"structure of an extension makes perfectly sense."
msgstr ""
"���������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:816
#, fuzzy
msgid ""
"As usual, along the path Quarkus simplifies things under the hood (Maven "
"Mojo, bytecode generation or testing) to make it pleasant to develop new "
"features."
msgstr ""
"������������������������Quarkus������������������������������������������������������������������������������������������������������������������������Maven "
"Mojo���������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/microprofile-graphql.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - GraphQL"
msgstr "Quarkus - GraphQL"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:12
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can utilize the "
"**Eclipse MicroProfile GraphQL** specification through the SmallRye GraphQL "
"extension."
msgstr ""
"������������������������Quarkus���������������������������SmallRye "
"GraphQL��������������������������� *Eclipse MicroProfile "
"GraphQL*������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:14
#, fuzzy
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr ""
"link:https://www.graphql.org/"
"[GraphQL���]���������������������������������������������������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:20
#, fuzzy
msgid ""
"GraphQL is a query language for APIs and a runtime for fulfilling those "
"queries with your existing data.  GraphQL provides a complete and "
"understandable description of the data in your API, gives clients the power "
"to ask for exactly what they need and nothing more, makes it easier to "
"evolve APIs over time, and enables powerful developer tools."
msgstr ""
"GraphQL���API������������������������������������������������������������������������������������������������������������������������GraphQL������API������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:23
#, no-wrap, fuzzy
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015.\n"
msgstr ""
"*GraphQL���*������������2012������ "
"*Facebook���*������������������������2015������������������������������������������������������������������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:26
#, fuzzy
msgid ""
"GraphQL is not a replacement for REST API specification but merely an "
"alternative. Unlike REST, GraphQL API's have the ability to benefit the "
"client by:"
msgstr ""
"GraphQL���REST "
"API���������������������������������������������������������������������������REST������������������GraphQL "
"API���������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/microprofile-graphql.adoc:27
#, no-wrap, fuzzy
msgid "Preventing Over-fetching and Under-fetching"
msgstr "������������������������������������������������������������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:33
#, fuzzy
msgid ""
"REST API's are server-driven fixed data responses that cannot be determined "
"by the client. Although the client does not require all the fields the "
"client must retrieve all the data hence `Over-fetching`. A client may also "
"require multiple REST API calls according to the first call (HATEOAS) to "
"retrieve all the data that is required thereby `Under-fetching`."
msgstr ""
"REST API "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`Over-fetching` "
"���������������������������������������������������������������������������������������������������������������������������HATEOAS������������������������REST "
"API������������������������������������������������������ `Under-fetching`."

#. type: Labeled list
#: upstream/_guides/microprofile-graphql.adoc:34
#, no-wrap, fuzzy
msgid "API Evolution"
msgstr "API���������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:38
#, fuzzy
msgid ""
"Since GraphQL API's returns data that are requested by the client adding "
"additional fields and capabilities to existing API will not create breaking "
"changes to existing clients."
msgstr ""
"GraphQL "
"API������������������������������������������������������������������������������API������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:26
#, fuzzy
msgid "less than 15 minutes"
msgstr "15���������"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:24
#, no-wrap, fuzzy
msgid "Architecture"
msgstr "������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:52
#, fuzzy
msgid ""
"In this guide, we build a simple GraphQL application that exposes a GraphQL "
"API at `/graphql`."
msgstr ""
"������������������������ `/graphql` ��� GraphQL API "
"������������������������������ GraphQL "
"���������������������������������������������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:54
#, fuzzy
msgid "This example was inspired by a popular GraphQL API."
msgstr ""
"������������������������������ GraphQL API "
"���������������������������������������������"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:31
#, no-wrap, fuzzy
msgid "Solution"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:35
#, fuzzy
msgid ""
"We recommend that you follow the instructions in the next sections and "
"create the application step by step.  However, you can go right to the "
"completed example."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:34
#, fuzzy
msgid ""
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download "
"an {quickstarts-archive-url}[archive]."
msgstr ""
"Git ���������������������������������������: `git clone {quickstarts-clone-"
"url}` ������������ {quickstarts-archive-url}[archive] "
"������������������������������������������"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:63
#, fuzzy
msgid ""
"The solution is located in the `microprofile-graphql-quickstart` "
"{quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr ""
"������������������������ `microprofile-graphql-quickstart` {quickstarts-tree-"
"url}/microprofile-graphql-quickstart[directory] ������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:45
#, no-wrap, fuzzy
msgid "Creating the Maven Project"
msgstr "Maven���������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:43
#, fuzzy
msgid ""
"First, we need a new project. Create a new project with the following "
"command:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:76
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-graphql-quickstart \\\n"
"    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n"
"    -Dextensions=\"graphql\"\n"
"cd microprofile-graphql-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:79
#, fuzzy
msgid ""
"This command generates a Maven project, importing the `smallrye-graphql` "
"extension which is an implementation of the MicroProfile GraphQL "
"specification used in Quarkus."
msgstr ""
"������������������������Quarkus������������������������MicroProfile "
"GraphQL������������������������ `smallrye-graphql` "
"������������������������������������Maven���������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:82
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the "
"`smallrye-graphql` extension to your project by running the following "
"command in your project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`smallrye-graphql` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:86
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"graphql\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:257
#, fuzzy
msgid "This will add the following to your `pom.xml`:"
msgstr "������������������ `pom.xml`."

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:96
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:98
#, no-wrap, fuzzy
msgid "Preparing an Application: GraphQL API"
msgstr "���������������������������������GraphQL API"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:101
#, fuzzy
msgid "In this section we will start creating the GraphQL API."
msgstr ""
"������������������������������GraphQL API������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:103
#, fuzzy
msgid ""
"First, create the following entities representing a film from a galaxy far "
"far away:"
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:107
#, no-wrap
msgid "package org.acme.microprofile.graphql;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:109
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:114
#, no-wrap
msgid ""
"    private String title;\n"
"    private Integer episodeID;\n"
"    private String director;\n"
"    private LocalDate releaseDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:118
#, no-wrap
msgid "    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:122
#, no-wrap
msgid ""
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:126
#, no-wrap
msgid "    public Integer getEpisodeID() {\n"
"        return episodeID;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:130
#, no-wrap
msgid ""
"    public void setEpisodeID(Integer episodeID) {\n"
"        this.episodeID = episodeID;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:134
#, no-wrap
msgid "    public String getDirector() {\n"
"        return director;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:138
#, no-wrap
msgid ""
"    public void setDirector(String director) {\n"
"        this.director = director;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:142
#, no-wrap
msgid ""
"    public LocalDate getReleaseDate() {\n"
"        return releaseDate;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:146
#, no-wrap
msgid ""
"    public void setReleaseDate(LocalDate releaseDate) {\n"
"        this.releaseDate = releaseDate;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:150
#, no-wrap
msgid "public class Hero {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:158
#, no-wrap
msgid ""
"    private String name;\n"
"    private String surname;\n"
"    private Double height;\n"
"    private Integer mass;\n"
"    private Boolean darkSide;\n"
"    private LightSaber lightSaber;\n"
"    private List<Integer> episodeIds = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:152
#, no-wrap
msgid "    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:156
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:170
#, no-wrap
msgid "    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:174
#, no-wrap
msgid ""
"    public void setSurname(String surname) {\n"
"        this.surname = surname;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:178
#, no-wrap
msgid "    public Double getHeight() {\n"
"        return height;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:182
#, no-wrap
msgid ""
"    public void setHeight(Double height) {\n"
"        this.height = height;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:186
#, no-wrap
msgid "    public Integer getMass() {\n"
"        return mass;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:190
#, no-wrap
msgid ""
"    public void setMass(Integer mass) {\n"
"        this.mass = mass;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:194
#, no-wrap
msgid "    public Boolean getDarkSide() {\n"
"        return darkSide;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:198
#, no-wrap
msgid ""
"    public void setDarkSide(Boolean darkSide) {\n"
"        this.darkSide = darkSide;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:202
#, no-wrap
msgid ""
"    public LightSaber getLightSaber() {\n"
"        return lightSaber;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:206
#, no-wrap
msgid ""
"    public void setLightSaber(LightSaber lightSaber) {\n"
"        this.lightSaber = lightSaber;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:210
#, no-wrap
msgid ""
"    public List<Integer> getEpisodeIds() {\n"
"        return episodeIds;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:215
#, no-wrap
msgid ""
"    public void setEpisodeIds(List<Integer> episodeIds) {\n"
"        this.episodeIds = episodeIds;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:219
#, no-wrap
msgid "enum LightSaber {\n"
"    RED, BLUE, GREEN\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:223
#, fuzzy
msgid ""
"The classes we have just created describe the GraphQL schema which is a set "
"of possible data (objects, fields, relationships) that a client can access."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"GraphQL ���������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:225
#, fuzzy
msgid ""
"Let's continue with an example CDI bean, that would work as a repository:"
msgstr ""
"������������������������������������CDI������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:230
#, no-wrap
msgid "@ApplicationScoped\n"
"public class GalaxyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:232
#, no-wrap
msgid "    private List<Hero> heroes = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:234
#, no-wrap
msgid "    private List<Film> films = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:236
#, no-wrap
msgid "    public GalaxyService() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:242
#, no-wrap
msgid ""
"        Film aNewHope = new Film();\n"
"        aNewHope.setTitle(\"A New Hope\");\n"
"        aNewHope.setReleaseDate(LocalDate.of(1977, Month.MAY, 25));\n"
"        aNewHope.setEpisodeID(4);\n"
"        aNewHope.setDirector(\"George Lucas\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:248
#, no-wrap
msgid ""
"        Film theEmpireStrikesBack = new Film();\n"
"        theEmpireStrikesBack.setTitle(\"The Empire Strikes Back\");\n"
"        theEmpireStrikesBack.setReleaseDate(LocalDate.of(1980, Month.MAY, "
"21));\n"
"        theEmpireStrikesBack.setEpisodeID(5);\n"
"        theEmpireStrikesBack.setDirector(\"George Lucas\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:254
#, no-wrap
msgid ""
"        Film returnOfTheJedi = new Film();\n"
"        returnOfTheJedi.setTitle(\"Return Of The Jedi\");\n"
"        returnOfTheJedi.setReleaseDate(LocalDate.of(1983, Month.MAY, 25));\n"
"        returnOfTheJedi.setEpisodeID(6);\n"
"        returnOfTheJedi.setDirector(\"George Lucas\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:258
#, no-wrap
msgid ""
"        films.add(aNewHope);\n"
"        films.add(theEmpireStrikesBack);\n"
"        films.add(returnOfTheJedi);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:267
#, no-wrap
msgid ""
"        Hero luke = new Hero();\n"
"        luke.setName(\"Luke\");\n"
"        luke.setSurname(\"Skywalker\");\n"
"        luke.setHeight(1.7);\n"
"        luke.setMass(73);\n"
"        luke.setLightSaber(LightSaber.GREEN);\n"
"        luke.setDarkSide(false);\n"
"        luke.getEpisodeIds().addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:275
#, no-wrap
msgid ""
"        Hero leia = new Hero();\n"
"        leia.setName(\"Leia\");\n"
"        leia.setSurname(\"Organa\");\n"
"        leia.setHeight(1.5);\n"
"        leia.setMass(51);\n"
"        leia.setDarkSide(false);\n"
"        leia.getEpisodeIds().addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:285
#, no-wrap
msgid ""
"        Hero vader = new Hero();\n"
"        vader.setName(\"Darth\");\n"
"        vader.setSurname(\"Vader\");\n"
"        vader.setHeight(1.9);\n"
"        vader.setMass(89);\n"
"        vader.setDarkSide(true);\n"
"        vader.setLightSaber(LightSaber.RED);\n"
"        vader.getEpisodeIds().addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:289
#, no-wrap
msgid ""
"        heroes.add(luke);\n"
"        heroes.add(leia);\n"
"        heroes.add(vader);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:989
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:295
#, no-wrap
msgid "    public List<Film> getAllFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:299
#, no-wrap
msgid "    public Film getFilm(int id) {\n"
"        return films.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:305
#, no-wrap
msgid ""
"    public List<Hero> getHeroesByFilm(Film film) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.getEpisodeIds().contains(film."
"getEpisodeID()))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:309
#, no-wrap
msgid "    public void addHero(Hero hero) {\n"
"        heroes.add(hero);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:313
#, no-wrap
msgid ""
"    public Hero deleteHero(int id) {\n"
"        return heroes.remove(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:320
#, no-wrap
msgid ""
"    public List<Hero> getHeroesBySurname(String surname) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.getSurname().equals(surname))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:323
#, fuzzy
msgid "Now, let's create our first GraphQL API."
msgstr "������������������ GraphQL API ���������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:325
#, fuzzy
msgid ""
"Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr ""
"`org.acme.microprofile.graphql.FilmResource` "
"������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:330
#, no-wrap
msgid "@GraphQLApi // <1>\n"
"public class FilmResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:333
#, no-wrap
msgid "    @Inject\n"
"    GalaxyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:340
#, no-wrap
msgid ""
"    @Query(\"allFilms\") // <2>\n"
"    @Description(\"Get all Films from a galaxy far far away\") // <3>\n"
"    public List<Film> getAllFilms() {\n"
"        return service.getAllFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:343
#, fuzzy
msgid ""
"`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL "
"endpoint"
msgstr ""
"`@GraphQLApi` ���������������������������CDI "
"Bean���GraphQL������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:344
#, fuzzy
msgid ""
"`@Query` annotation defines that this method will be queryable with the name "
"`allFilms`"
msgstr ""
"`@Query` "
"��������������������������������������������������������������������������������������������������������������������������� "
"`allFilms`"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:345
#, fuzzy
msgid "Documentation of the queryable method"
msgstr "������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:348
#, fuzzy
msgid ""
"The value of the `@Query` annotation is optional and would implicitly be "
"defaulted to the method name if absent."
msgstr ""
"`@Query` "
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:350
#, fuzzy
msgid ""
"This way we have created our first queryable API which we will later expand."
msgstr ""
"������������������������������������������������������API������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:351
#, no-wrap, fuzzy
msgid "Launch"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:354
#, fuzzy
msgid "Launch the quarkus app:"
msgstr "quarkus������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:241 upstream/_guides/vertx.adoc:562
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:359
#, no-wrap, fuzzy
msgid "Introspect"
msgstr "������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:362
#, fuzzy
msgid ""
"The full schema of the GraphQL API can be retrieved by calling the following:"
""
msgstr ""
"GraphQL "
"API������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:366
#, no-wrap
msgid "curl http://localhost:8080/graphql/schema.graphql\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:369
#, fuzzy
msgid "The server will return the complete schema of the GraphQL API."
msgstr "���������������GraphQL API������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:370
#, no-wrap, fuzzy
msgid "GraphiQL UI"
msgstr "������������QL UI"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:336
#, fuzzy
msgid "Experimental - not included in the MicroProfile specification"
msgstr "������ - MicroProfile���������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:375
#, fuzzy
msgid ""
"GraphiQL UI is a great tool permitting easy interaction with your GraphQL "
"APIs."
msgstr ""
"GraphiQL UI������GraphQL "
"API������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:378
#, fuzzy
msgid ""
"The Quarkus `smallrye-graphql` extension ships with `GraphiQL` and enables "
"it by default in `dev` and `test` modes, but it can also be explicitly "
"configured for `production` mode as well."
msgstr ""
"Quarkus `smallrye-graphql` ��������������� `GraphiQL` "
"������������������������������������������������ `dev` ��� `test` "
"��������������������������������������������� `production` "
"���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:380
#, fuzzy
msgid "GraphiQL can be accessed from http://localhost:8080/graphql-ui/ ."
msgstr ""
"GraphiQL ��� http://localhost:8080/graphql-ui/ "
"���������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:382
#, fuzzy
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:383
#, no-wrap, fuzzy
msgid "Query the GraphQL API"
msgstr "GraphQL API ���������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:386
#, fuzzy
msgid "Now visit the GraphiQL page that has been deployed in `dev` mode."
msgstr ""
"������������ `dev` ��������������������������������� GraphiQL "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:388
#, fuzzy
msgid "Enter the following query to GraphiQL and press the `play` button:"
msgstr ""
"GraphiQL������������������������������������ `play` "
"���������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:399
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:405
#, fuzzy
msgid ""
"Since our query contains all the fields in the `Film` class we will retrieve "
"all the fields in our response. Since GraphQL API responses are client "
"determined, the client can choose which fields it will require."
msgstr ""
"��������������� `Film` "
"���������������������������������������������������������������������������������������������������������������������������������������������������GraphQL "
"API "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:409
#, fuzzy
msgid ""
"Let's assume that our client only requires `title` and `releaseDate` making "
"the previous call to the API `Over-fetching` of unnecessary data."
msgstr ""
"��������������������������������� `title` ��� `releaseDate` "
"������������������������API `Over-fetching` "
"���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:411
#, fuzzy
msgid "Enter the following query into GraphiQL and hit the `play` button:"
msgstr ""
"GraphiQL������������������������������������ `play` "
"���������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:420
#, no-wrap
msgid "query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    releaseDate\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:424
#, fuzzy
msgid ""
"Notice in the response we have only retrieved the required fields.  "
"Therefore, we have prevented `Over-fetching`."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������� "
"`Over-fetching`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:427
#, fuzzy
msgid ""
"Let's continue to expand our GraphQL API by adding the following to the "
"`FilmResource` class."
msgstr ""
"��������������� `FilmResource` ��������������������������������� GraphQL API "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:435
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(@Name(\"filmId\") int id) {\n"
"        return service.getFilm(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:440
#, fuzzy
msgid ""
"Notice how we have excluded the value in the `@Query` annotation.  "
"Therefore, the name of the query is implicitly set as the method name "
"excluding the `get`."
msgstr ""
"`@Query` "
"��������������������������������������������������������������������������������������������������������������������������������������� "
"`get`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:442
#, fuzzy
msgid "This query will allow the client to retrieve the film by id."
msgstr ""
"������������������������������������������ID������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:444
#, fuzzy
msgid "Enter the following into `GraphiQL` and make a request."
msgstr ""
"`GraphiQL` ������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:455
#, no-wrap
msgid ""
"query getFilm {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:460
#, fuzzy
msgid ""
"The `film` query method requested fields can be determined as such in our "
"previous example. This way we can retrieve individual film information."
msgstr ""
"`film` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:464
#, fuzzy
msgid ""
"However, say our client requires both films with filmId `0` and `1`.  In a "
"REST API the client would have to make two calls to the API.  Therefore, the "
"client would be `Under-fetching`."
msgstr ""
"��������������������������������� filmId `0` ��� `1` "
"������������������������������������������������������������REST "
"API������������������������������API���������������������2������������������������������������������������������������������������ "
"`Under-fetching`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:466
#, fuzzy
msgid "In GraphQL it is possible to make multiple queries at once."
msgstr ""
"GraphQL���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:468
#, fuzzy
msgid "Enter the following into GraphiQL to retrieve two films:"
msgstr ""
"GraphiQL������������������������������������2���������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:485 upstream/_guides/microprofile-graphql.adoc:592
#, no-wrap
msgid ""
"query getFilms {\n"
"  film0: film(filmId: 0) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"  film1: film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:488
#, fuzzy
msgid ""
"This enabled the client to fetch the required data in a single request."
msgstr ""
"���������������������������������������1���������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:489
#, no-wrap, fuzzy
msgid "Expanding the API"
msgstr "API���������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:493
#, fuzzy
msgid ""
"Until now, we have created a GraphQL API to retrieve film data.  We now want "
"to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr ""
"���������������������������������������������������������GraphQL "
"API������������������������������������������������������������ `Hero` "
"������������������������������������������������ `Film`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:495 upstream/_guides/microprofile-graphql.adoc:601
#: upstream/_guides/microprofile-graphql.adoc:664
#, fuzzy
msgid "Add the following to our `FilmResource` class:"
msgstr "`FilmResource` ���������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:501
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) { // <1>\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:504
#, fuzzy
msgid ""
"Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr ""
"��������������������������� `List&amp;lt;Hero&amp;gt;` "
"������������������������������������������������ `Film`"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:508
#, fuzzy
msgid ""
"By adding this method we have effectively changed the schema of the GraphQL "
"API.  Although the schema has changed the previous queries will still work.  "
"Since we only expanded the API to be able to retrieve the `Hero` data of the "
"`Film`."
msgstr ""
"��������������������������������������������������������� GraphQL API "
"��������������������������������������������������������������������������������������������������������������������������������������� "
"`Hero` ��������������������������������������� API "
"��������������������������������� `Film`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:510
#, fuzzy
msgid "Enter the following into GraphiQL to retrieve the film and hero data."
msgstr ""
"GraphiQL������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:528
#, no-wrap
msgid ""
"query getFilmHeroes {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"    heroes {\n"
"      name\n"
"      height\n"
"      mass\n"
"      darkSide\n"
"      lightSaber\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:531
#, fuzzy
msgid "The response now includes the heroes of the film."
msgstr "���������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:532
#, no-wrap, fuzzy
msgid "Batching"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:536
#, fuzzy
msgid ""
"When you are exposing a `Collection` return like our `getAllFilms`, you "
"might want to use the batch form of the above, to more efficiently fetch the "
"heroes:"
msgstr ""
"`getAllFilms` ������������ `Collection` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:542
#, no-wrap
msgid ""
"    public List<List<Hero>> heroes(@Source List<Film> films) { // <1>\n"
"        // Here fetch all hero lists\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:545
#, fuzzy
msgid ""
"Here receive the films as a batch, allowing you to fetch the corresponding "
"heroes."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:546
#, no-wrap, fuzzy
msgid "Reactive"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:549
#, fuzzy
msgid ""
"Queries can be made reactive by using `Uni`, or `CompletionStage` as a "
"return type, for example:"
msgstr ""
"������������������������ `Uni` ��� `CompletionStage` "
"������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:557
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Uni<Film> getFilm(@Name(\"filmId\") int id) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:560
#, fuzzy
msgid ""
"Due to the underlying library, graphql-java, `Uni` is creating a "
"`CompletionStage` under the hood."
msgstr ""
"���������������������������������������graphql-java��������������� `Uni` ��� "
"`CompletionStage` ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:562
#, fuzzy
msgid "Or you can use `CompletionStage`:"
msgstr "������������ `CompletionStage`."

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:570
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public CompletionStage<Film> getFilm(@Name(\"filmId\") int id) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:573
#, fuzzy
msgid ""
"Using `Uni` or `CompletionStage` means that when a request contains more "
"than one query, they will be executed concurrently."
msgstr ""
"`Uni` ��� `CompletionStage` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:575
#, fuzzy
msgid ""
"For instance, the query below will fetch `film0` and `film1` concurrently:"
msgstr ""
"��������������������������������� `film0` ��� `film1` "
"������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:594
#, no-wrap, fuzzy
msgid "Mutations"
msgstr "������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:597
#, fuzzy
msgid "Mutations are used when data is created, updated or deleted."
msgstr ""
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:599
#, fuzzy
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr ""
"���������������GraphQL "
"API������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:609
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:614
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero deleteHero(int id) {\n"
"        return service.deleteHero(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:617
#, fuzzy
msgid "Enter the following into `GraphiQL` to insert a `Hero`:"
msgstr "`GraphiQL` ��������������������������������������� `Hero`."

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:635
#, no-wrap
msgid ""
"mutation addHero {\n"
"  createHero(hero: {\n"
"      name: \"Han\",\n"
"      surname: \"Solo\"\n"
"      height: 1.85\n"
"      mass: 80\n"
"      darkSide: false\n"
"      episodeIds: [4, 5, 6]\n"
"  \t}\n"
"  )\n"
"  {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:638
#, fuzzy
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr ""
"��������������������������������������������������������������� `Hero` "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:643
#, fuzzy
msgid ""
"Notice how in the response we have retrieved the `name` and `surname` of the "
"created Hero. This is because we selected to retrieve these fields in the "
"response within the `{ }` in the mutation query.  This can easily be a "
"server side generated field that the client may require."
msgstr ""
"��������������������������������������������������� `name` ��� `surname` "
"��������������������������������������������������������������������������������������������� "
"`{ }` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:645
#, fuzzy
msgid "Let's now try deleting an entry:"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:653
#, no-wrap
msgid "mutation DeleteHero {\n"
"  deleteHero(id :3){\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:657
#, fuzzy
msgid ""
"Similar to the `createHero` mutation method we also retrieve the `name` and "
"`surname` of the hero we have deleted which is defined in `{ }`."
msgstr ""
"`createHero` `{ }` ��������������������������������������������������������� "
"��� ��������������������� `name` `surname`"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:658
#, no-wrap, fuzzy
msgid "Creating Queries by fields"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:662
#, fuzzy
msgid ""
"Queries can also be done on individual fields. For example, let's create a "
"method to query heroes by their last name."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:671
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Hero> getHeroesWithSurname(@DefaultValue(\"Skywalker\") "
"String surname) {\n"
"        return service.getHeroesBySurname(surname);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:675
#, fuzzy
msgid ""
"By using the `@DefaultValue` annotation we have determined that the surname "
"value will be `Skywalker` when the parameter is not provided."
msgstr ""
"`@DefaultValue` "
"������������������������������������������������������������������������������������������������������������������ "
"`Skywalker` ������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:677
#, fuzzy
msgid "Test the following queries with GraphiQL:"
msgstr "���������������������GraphiQL������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:694
#, no-wrap
msgid ""
"query heroWithDefaultSurname {\n"
"  heroesWithSurname{\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
"query heroWithSurnames {\n"
"  heroesWithSurname(surname: \"Vader\") {\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:696
#, no-wrap, fuzzy
msgid "Context"
msgstr "������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:699
#, fuzzy
msgid ""
"You can get information about the GraphQL request anywhere in your code, "
"using this experimental, SmallRye specific feature:"
msgstr ""
"������������������ SmallRye "
"������������������������������������������������������������ GraphQL "
"������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:704
#, no-wrap
msgid "@Inject\n"
"Context context;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:707
#, fuzzy
msgid "The context object allows you to get:"
msgstr "������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:709
#, fuzzy
msgid "the original request (Query/Mutation)"
msgstr "��������������������� (���������/������������������������)"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:710
#, fuzzy
msgid "the arguments"
msgstr "������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:711
#, fuzzy
msgid "the path"
msgstr "������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:712
#, fuzzy
msgid "the selected fields"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:713
#, fuzzy
msgid "any variables"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:715
#, fuzzy
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:717
#, fuzzy
msgid ""
"See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/"
"smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr ""
"��������� link:https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/"
"latest/io/smallrye/graphql/api/Context."
"html[JavaDoc]������������������������������"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:718
#, no-wrap, fuzzy
msgid "GraphQL-Java"
msgstr "���������QL-Java"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:721
#, fuzzy
msgid ""
"This context object also allows you to fall down to the underlying https://"
"www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr ""
"������������������������������������������������������������������������������������������������������������ "
"link:https://www.graphql-java.com/[graphql-"
"java���]������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:725
#, no-wrap
msgid ""
"DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment."
"class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:728
#, fuzzy
msgid ""
"You can also get access to the underlying `graphql-java` during schema "
"generation, to add your own features directly:"
msgstr ""
"��������������������������������������������������������������������� "
"`graphql-java` "
"������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:732
#, no-wrap
msgid ""
"public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder "
"builder) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:739
#, no-wrap
msgid ""
"    // Here add your own features directly, example adding an Enum\n"
"    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n"
"            .name(\"SomeEnum\")\n"
"            .description(\"Adding some enum type\")\n"
"            .value(\"value1\")\n"
"            .value(\"value2\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:742
#, no-wrap
msgid "    return builder.additionalType(myOwnEnum);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:745
#, fuzzy
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr ""
"`@Observer` "
"���������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:746
#, no-wrap, fuzzy
msgid "Map to Scalar"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:750
#, fuzzy
msgid ""
"Another SmallRye specific experimental feature, allows you to map an "
"existing scalar (that is mapped by the implementation to a certain Java "
"type) to another type, or to map complex object, that would typically create "
"a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr ""
"���������������SmallRye���������������������������������������������������������������������������������������Java������������������������������������������������������������������������������������������������������������������������������������������������������������GraphQL��� "
"`Type` ��� `Input` ������������������������"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:751
#, no-wrap, fuzzy
msgid "Mapping an existing Scalar to another type:"
msgstr "������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:756
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:759
#, no-wrap
msgid "    @ToScalar(Scalar.Int.class)\n"
"    Long idLongThatShouldChangeToInt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:762 upstream/_guides/microprofile-graphql.adoc:777
#, no-wrap
msgid "    // ....\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:765
#, fuzzy
msgid ""
"Above will map the `Long` java type to an `Int` Scalar type, rather than the "
"https://download.eclipse.org/microprofile/microprofile-graphql-1.0/"
"microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr ""
"��������������������� `Long` java ������ link:https://download.eclipse.org/"
"microprofile/microprofile-graphql-1.0/microprofile-graphql."
"html#scalars[������������������] `BigInteger`.NET Framework ��������������� "
"`Int` Scalar ���������������������������"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:766
#, no-wrap, fuzzy
msgid "Mapping a complex object to a Scalar type:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:771
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:774
#, no-wrap
msgid "    @ToScalar(Scalar.String.class)\n"
"    Phone phone;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:780
#, fuzzy
msgid ""
"This will, rather than creating a `Type` or `Input` in GraphQL, map to a "
"String scalar."
msgstr ""
"������������������GraphQL��� `Type` ��� `Input` "
"���������������������������������String���������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:784
#, fuzzy
msgid ""
"To be able to do the above, the `Phone` object needs to have a constructor "
"that takes a String (or `Int` / `Date` / etc.), or have a setter method for "
"the String (or `Int` / `Date` / etc.), or have a `fromString` (or `fromInt` /"
" `fromDate` - depending on the Scalar type) static method."
msgstr ""
"������������������������������ `Phone` ��������������������� String "
"(��������� `Int` / `Date` / ������) "
"���������������������������������������������������String (��������� `Int` / "
"`Date` / ������) ������������������������������������������ `fromString` "
"(��������� `fromInt` / `fromDate` - Scalar "
"���������������������������������) "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:786
#, fuzzy
msgid "For example:"
msgstr "���������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:790
#, no-wrap
msgid "public class Phone {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:792
#, no-wrap
msgid "    private String number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:794
#, no-wrap
msgid "    // Getters and setters....\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:801
#, no-wrap
msgid ""
"    public static Phone fromString(String number) {\n"
"        Phone phone = new Phone();\n"
"        phone.setNumber(number);\n"
"        return phone;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:804
#, fuzzy
msgid ""
"See more about the `@ToScalar` feature in the https://javadoc.io/static/io."
"smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/"
"ToScalar.html[JavaDoc]."
msgstr ""
"link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index."
"html?io/smallrye/graphql/api/ToScalar.html[JavaDoc]������ `@ToScalar` "
"������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:805
#, no-wrap, fuzzy
msgid "Error code"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:808
#, fuzzy
msgid ""
"You can add an error code on the error output in the GraphQL response by "
"using the (SmallRye specific) `@ErrorCode`:"
msgstr ""
"(SmallRye���������) `@ErrorCode`."
"GraphQL���������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:815
#, no-wrap
msgid ""
"@ErrorCode(\"some-business-error-code\")\n"
"public class SomeBusinessException extends RuntimeException {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:818
#, fuzzy
msgid ""
"When `SomeBusinessException` occurs, the error output will contain the Error "
"code:"
msgstr ""
"`SomeBusinessException` "
"������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:845
#, no-wrap
msgid ""
"{\n"
"    \"errors\": [\n"
"        {\n"
"            \"message\": \"Unexpected failure in the system. Jarvis is "
"working to fix it.\",\n"
"            \"locations\": [\n"
"                {\n"
"                    \"line\": 2,\n"
"                    \"column\": 3\n"
"                }\n"
"            ],\n"
"            \"path\": [\n"
"                \"annotatedCustomBusinessException\"\n"
"            ],\n"
"            \"extensions\": {\n"
"                \"exception\": \"io.smallrye.graphql.test.apps.error.api."
"ErrorApi$AnnotatedCustomBusinessException\",\n"
"                \"classification\": \"DataFetchingException\",\n"
"                \"code\": \"some-business-error-code\" <1>\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"data\": {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:848
#, fuzzy
msgid "The error code"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:853
#, fuzzy
msgid ""
"MicroProfile GraphQL enables clients to retrieve the exact data that is "
"required preventing `Over-fetching` and `Under-fetching`."
msgstr ""
"MicroProfile GraphQL��������������������������������������������� `Over-"
"fetching` ��� `Under-fetching` "
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:856
#, fuzzy
msgid ""
"The GraphQL API can be expanded without breaking previous queries enabling "
"easy API `evolution`."
msgstr ""
"GraphQL API "
"������������������������������������������������������������������������������������ "
"API ������������������������������������ `evolution`."

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:219
#, no-wrap, fuzzy
msgid "Configuration Reference"
msgstr "������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/sending-emails.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Sending emails"
msgstr "Quarkus - ������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:11
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can send emails using "
"an SMTP server."
msgstr ""
"������������������������Quarkus���������������������������SMTP������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:18
#, fuzzy
msgid "The SMTP hostname, port and credentials, and an email address"
msgstr ""
"SMTP������������������������������������������������������������������ "
"���������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:22
#, fuzzy
msgid "GraalVM installed if you want to run in native mode."
msgstr ""
"���������������������������������������������������������GraalVM���������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:27
#, fuzzy
msgid ""
"In this guide, we are going to see how you can send emails from a Quarkus "
"application.  It covers simple emails, attachments, inlined attachments, the "
"reactive and imperative APIs..."
msgstr ""
"������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������API������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:31
#, fuzzy
msgid "Create a new project with the following command:"
msgstr "���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:39
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=sending-email-quickstart \\\n"
"    -Dextensions=\"mailer\"\n"
"cd sending-email-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:41
#, fuzzy
msgid "If you already have an existing project, add the `mailer` extension:"
msgstr ""
"������������������������������������������������ `mailer` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:45
#, no-wrap
msgid "./mvnw quarkus:add-extensions -Dextensions=\"mailer\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:56
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mailer</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:47
#, no-wrap, fuzzy
msgid "Configuring the mailer"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:51
#, fuzzy
msgid ""
"The Quarkus mailer is using SMTP. In the `src/main/resources/application."
"properties` file, you need to configure the host, port, username, password "
"as well as the other configuration aspect.  Note that the password can also "
"be configured using system properties and environment variables."
msgstr ""
"Quarkus������������������SMTP��������������������������� `src/main/resources/"
"application.properties` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:53
#, fuzzy
msgid "Here is an example using _sendgrid_:"
msgstr "������������ _sendgrid���_���������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:74
#, no-wrap
msgid ""
"quarkus.mailer.from=test@quarkus.io\n"
"quarkus.mailer.host=smtp.sendgrid.net\n"
"quarkus.mailer.port=465\n"
"quarkus.mailer.ssl=true\n"
"quarkus.mailer.username=....\n"
"quarkus.mailer.password=....\n"
"quarkus.mailer.mock=false\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mailer.adoc:82
#, fuzzy
msgid ""
"It is recommended to encrypt any sensitive data, such as the `quarkus.mailer."
"password`.  One approach is to save the value into a secure store like "
"HashiCorp Vault, and refer to it from the configuration.  Assuming for "
"instance that Vault contains key `mail-password` at path `myapps/myapp/"
"myconfig`, then the mailer extension can be simply configured as:"
msgstr ""
"`quarkus.mailer.password` "
"������������������������������������������������������������������������������������������������������������������������������HashiCorp "
"Vault "
"������������������������������������������������������������������������������������������������������������������������Vault "
"��������� `myapps/myapp/myconfig` ��������� `mail-password` "
"������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:88
#, no-wrap
msgid ""
"...\n"
"# path within the kv secret engine where is located the application "
"sensitive configuration\n"
"quarkus.vault.secret-config-kv-path=myapps/myapp/myconfig\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:91
#, no-wrap
msgid "...\n"
"quarkus.mailer.password=${mail-password}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:94
#, fuzzy
msgid ""
"Please note that the password value is evaluated only once, at startup time. "
"If `mail-password` was changed in Vault, the only way to get the new value "
"would be to restart the application."
msgstr ""
"���������������������������������������������������������������������������������������������������Vault "
"��� `mail-password` "
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:66
#, fuzzy
msgid ""
"For more information about the Mailer extension configuration please refer "
"to the <<configuration-reference, Configuration Reference>>."
msgstr ""
"��������������������������������������������������� link:#configuration-"
"reference[���������������������������]���������������������������"

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:67
#, no-wrap, fuzzy
msgid "Sending simple emails"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:70
#, fuzzy
msgid ""
"In a JAX-RS resource, or in a bean, you can inject the mailer as follows:"
msgstr ""
"JAX-"
"RS���������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:75
#, no-wrap
msgid "@Inject\n"
"Mailer mailer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:78
#, no-wrap
msgid "@Inject\n"
"ReactiveMailer reactiveMailer;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:81
#, fuzzy
msgid "There are 2 APIs:"
msgstr "API���2������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:83
#, fuzzy
msgid ""
"`io.quarkus.mailer.Mailer` provides the imperative (blocking and "
"synchronous) API;"
msgstr ""
"`io.quarkus.mailer.Mailer` "
"���������������������������������������������API���������������������������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:116
#, fuzzy
msgid ""
"`io.quarkus.mailer.reactive.ReactiveMailer` provides the reactive (non-"
"blocking and asynchronous) API"
msgstr ""
"`io.quarkus.mailer.reactive.ReactiveMailer` ��������������� "
"(���������������������������������������) API ���������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:86
#, fuzzy
msgid ""
"The two APIs are equivalent feature-wise. Actually the `Mailer` "
"implementation is built on top of the `ReactiveMailer` implementation."
msgstr ""
"2������API��������������������������������������������� `Mailer` "
"������������ `ReactiveMailer` ���������������������������������������������"

#. type: Block title
#: upstream/_guides/amqp.adoc:345
#, no-wrap, fuzzy
msgid "Deprecation"
msgstr "���������"

#. type: delimited block =
#: upstream/_guides/mailer.adoc:123
#, fuzzy
msgid ""
"`io.quarkus.mailer.ReactiveMailer` is deprecated in favor of `io.quarkus."
"mailer.reactive.ReactiveMailer`."
msgstr ""
"`io.quarkus.mailer.ReactiveMailer` ��� `io.quarkus.mailer.reactive."
"ReactiveMailer` ���������������������������������������������"

#. type: Block title
#: upstream/_guides/context-propagation.adoc:57
#, no-wrap, fuzzy
msgid "Mutiny"
msgstr "������"

#. type: delimited block =
#: upstream/_guides/mailer.adoc:129
#, fuzzy
msgid ""
"The reactive mailer uses Mutiny reactive types, if you're not familiar with "
"them, read the link:getting-started-reactive#mutiny[Getting Started with "
"Reactive guide] first."
msgstr ""
"���������������������������������Mutiny link:getting-started-"
"reactive#mutiny[���������������������������]���������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:88
#, fuzzy
msgid "To send a simple email, proceed as follows:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:139
#, no-wrap
msgid ""
"// Imperative API:\n"
"mailer.send(Mail.withText(\"to@acme.org\", \"A simple email from quarkus\", "
"\"This is my body.\"));\n"
"// Reactive API:\n"
"Uni<Void> stage = reactiveMailer.send(Mail.withText(\"to@acme.org\", \"A "
"reactive email from quarkus\", \"This is my body.\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:98
#, fuzzy
msgid "For example, you can use the `Mailer` in a JAX-RS endpoint as follows:"
msgstr ""
"������������JAX-RS ��������������������������� `Mailer` "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:107
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/simple\")\n"
"public Response sendASimpleEmail() {\n"
"    mailer.send(Mail.withText(\"to@acme.org\", \"A simple email from "
"quarkus\", \"This is my body\"));\n"
"    return Response.accepted().build();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:160
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/async\")\n"
"public CompletionStage<Response> sendASimpleEmailAsync() {\n"
"    return reactiveMailer.send(\n"
"            Mail.withText(\"to@acme.org\", \"A reactive email from "
"quarkus\", \"This is my body\"))\n"
"            .subscribeAsCompletionStage()\n"
"            .thenApply(x -> Response.accepted().build());\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mailer.adoc:165
#, fuzzy
msgid ""
"With the `quarkus-resteasy-mutiny` extension, you can return an instance of "
"`Uni` directly."
msgstr ""
"`quarkus-resteasy-mutiny` ������������������������������������������ `Uni` "
"������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:118
#, fuzzy
msgid ""
"With such a JAX-RS resource, you can check that everything is working with:"
msgstr ""
"���������������JAX-"
"RS������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:123
#, no-wrap
msgid "curl http://localhost:8080/simple\n"
"curl http://localhost:8080/async\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:128
#, fuzzy
msgid ""
"You can create new `io.quarkus.mailer.Mail` instances from the constructor "
"or from the `Mail.withText` and `Mail.withHtml` helper methods. The `Mail` "
"instance lets you add recipients (to, cc, or bcc), set the subject, headers, "
"sender (from) address..."
msgstr ""
"��������������������������������� `Mail.withText` ��� `Mail.withHtml` "
"������������������������������������������ `io.quarkus.mailer.Mail` "
"������������������������������������������ `Mail` "
"������������������������������������ (to, cc, bcc) "
"������������������������������������������ (from) "
"������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:130
#, fuzzy
msgid "You can also send several `Mail` objects in one call:"
msgstr ""
"��������������������������������� `Mail` "
"���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:134
#, no-wrap
msgid "mailer.send(mail1, mail2, mail3);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:136
#, no-wrap, fuzzy
msgid "Sending attachments"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:139
#, fuzzy
msgid ""
"To send attachment, just use the `addAttachment` methods on the `io.quarkus."
"mailer.Mail` instance:"
msgstr ""
"������������������������������������������ `io.quarkus.mailer.Mail` "
"��������������������� `addAttachment` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:151
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/attachment\")\n"
"public Response sendEmailWithAttachment() {\n"
"    mailer.send(Mail.withText(\"to@acme.org\", \"An email from quarkus with "
"attachment\",\n"
"            \"This is my body\")\n"
"            .addAttachment(\"my-file.txt\",\n"
"                \"content of my file\".getBytes(), \"text/plain\"));\n"
"    return Response.accepted().build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:154
#, fuzzy
msgid ""
"Attachments can be created from raw bytes (as shown in the snippet) or files."
""
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:155
#, no-wrap, fuzzy
msgid "Sending HTML emails with inlined attachments"
msgstr ""
"���������������������������������������������HTML������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:159
#, fuzzy
msgid ""
"When sending HTML email, you can add inlined attachments.  For example, you "
"can send an image with your email, and this image will be displayed in the "
"mail content. If you put the image file into resources folder, you should "
"specify the full path to the file. \"e.g.\" \"META-INF/resources/quarkus-"
"logo.png\" otherwise quarkus will lookup in the root folder of the project"
msgstr ""
"HTML���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������\"���\"\"META-"
"INF/resources/quarkus-logo.png\" "
"������������������quarkus������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:174
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/html\")\n"
"public Response sendingHTML() {\n"
"    String body = \"<strong>Hello!</strong>\" + \"\\n\" +\n"
"        \"<p>Here is an image for you: <img src=\\\"cid:my-image@quarkus."
"io\\\"/></p>\" +\n"
"        \"<p>Regards</p>\";\n"
"    mailer.send(Mail.withHtml(\"to@acme.org\", \"An email in HTML\", body)\n"
"        .addInlineAttachment(\"quarkus-logo.png\",\n"
"            new File(\"quarkus-logo.png\"),\n"
"            \"image/png\", \"<my-image@quarkus.io>\"));\n"
"    return Response.accepted().build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:180
#, fuzzy
msgid ""
"Note the _content-id_ format and reference.  By spec, when you create the "
"inline attachment, the content-id must be structured as follows: "
"`<id@domain>`.  If you don't wrap your content-id between `<>`, it is "
"automatically wrapped for you.  When you want to reference your attachment, "
"for instance in the `src` attribute, use `cid:id@domain` (without the `<` "
"and `>`)."
msgstr ""
"content _-id "
"���_���������������������������������������������������������������������������������������������������������������������content-"
"id��������������������������������������������������������� "
"`&amp;lt;id@domain&amp;gt;`. `&amp;lt;&amp;gt;` ��������� content-id "
"��������������������������������������������������������������������������������������������������������������������� "
"`src` ��������������������������������� `cid:id@domain` "
"������������������������������ `&amp;lt;` ��� `&amp;gt;` "
"���������������������������������������"

#. type: Title ==
#: upstream/_guides/mailer.adoc:231
#, no-wrap, fuzzy
msgid "Message Body Based on Qute Templates"
msgstr "Qute���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:234
#, fuzzy
msgid ""
"It's also possible to inject a mail template, where the message body is "
"created automatically using link:qute[Qute templates]."
msgstr ""
"��������� link:"
"qute[Qute������������������������]������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:239
#, no-wrap
msgid "@Path(\"\")\n"
"public class MailingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:244
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    class Templates {\n"
"        public static native MailTemplateInstance hello(String name); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:257
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/mail\")\n"
"    public CompletionStage<Response> send() {\n"
"        // the template looks like: Hello {name}! <2>\n"
"        return Templates.hello(\"John\")\n"
"           .to(\"to@acme.org\") <3>\n"
"           .subject(\"Hello from Qute template\")\n"
"           .send() <4>\n"
"           .subscribeAsCompletionStage()\n"
"           .thenApply(x -> Response.accepted().build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:260
#, fuzzy
msgid ""
"By convention, the enclosing class name and method names are used to locate "
"the template. In this particular case, we will use the `MailingResource/"
"hello.html` and `MailingResource/hello.txt` templates to create the message "
"body."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`MailingResource/hello.html` ��������� `MailingResource/hello.txt` "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:261 upstream/_guides/mailer.adoc:288
#, fuzzy
msgid "Set the data used in the template."
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:262 upstream/_guides/mailer.adoc:287
#, fuzzy
msgid "Create a mail template instance and set the recipient."
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:263 upstream/_guides/mailer.adoc:289
#, fuzzy
msgid ""
"`MailTemplate.send()` triggers the rendering and, once finished, sends the e-"
"mail via a `Mailer` instance."
msgstr ""
"`MailTemplate.send()` "
"������������������������������������������������������������������������������ "
"`Mailer` "
"���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:265 upstream/_guides/mailer.adoc:291
#, fuzzy
msgid ""
"Injected mail templates are validated during build. If there is no matching "
"template in `src/main/resources/templates` the build fails."
msgstr ""
"��������������������������������������������������������������������������������������������������� "
"`src/main/resources/templates` "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:267
#, fuzzy
msgid "You can also do this without type-safe templates:"
msgstr "���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:272
#, no-wrap
msgid "@Inject\n"
"MailTemplate hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:284
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/mail\")\n"
"public CompletionStage<Response> send() {\n"
"    return hello.to(\"to@acme.org\") <2>\n"
"       .subject(\"Hello from Qute template\")\n"
"       // the template looks like: Hello {name}!\n"
"       .data(\"name\", \"John\") <3>\n"
"       .send() <4>\n"
"       .subscribeAsCompletionStage()\n"
"       .thenApply(x -> Response.accepted().build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:286
#, fuzzy
msgid ""
"If there is no `@ResourcePath` qualifier provided, the field name is used to "
"locate the template. In this particular case, we will use the `hello.html` "
"and `hello.txt` templates to create the message body."
msgstr ""
"`@ResourcePath` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`hello.html` ��������� `hello.txt` "
"���������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:181
#, no-wrap, fuzzy
msgid "Testing email sending"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:186
#, fuzzy
msgid ""
"Because it is very inconvenient to send emails during development and "
"testing, you can set the `quarkus.mailer.mock` boolean configuration to "
"`true` to not actually send emails but print them on stdout and collect them "
"in a `MockMailbox` bean instead.  This is the default if you are running "
"Quarkus in `DEV` or `TEST` mode."
msgstr ""
"������������������������������������������������������������������������������������ "
"`quarkus.mailer.mock` ��������������������� `true` "
"��������������������������������������������������������������������������������������������������� "
"`MockMailbox` ������������������������������������������������������������ "
"`DEV` ��������� `TEST` "
"������������Quarkus������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:188
#, fuzzy
msgid ""
"You can then write tests to verify that your emails were sent, for example, "
"by a REST endpoint:"
msgstr ""
"���������������������������������������������REST������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:193
#, no-wrap
msgid "@QuarkusTest\n"
"class MailTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:195
#, no-wrap
msgid "    private static final String TO = \"foo@quarkus.io\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:198
#, no-wrap
msgid "    @Inject\n"
"    MockMailbox mailbox;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:203
#, no-wrap
msgid "    @BeforeEach\n"
"    void init() {\n"
"        mailbox.clear();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:213
#, no-wrap
msgid ""
"    @Test\n"
"    void testTextMail() throws MessagingException, IOException {\n"
"        // call a REST endpoint that sends email\n"
"        given()\n"
"        .when()\n"
"        .get(\"/send-email\")\n"
"        .then()\n"
"           .statusCode(202)\n"
"           .body(is(\"OK\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:220
#, no-wrap
msgid ""
"        // verify that it was sent\n"
"        List<Mail> sent = mailbox.getMessagesSentTo(TO);\n"
"        assertThat(sent).hasSize(1);\n"
"        Mail actual = sent.get(0);\n"
"        assertThat(actual.getText()).contains(\"Wake up!\");\n"
"        assertThat(actual.getSubject()).isEqualTo(\"Alarm!\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:224
#, no-wrap
msgid ""
"        assertThat(mailbox.getTotalMessagesSent()).isEqualTo(6);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:226
#, no-wrap, fuzzy
msgid "Gmail specific configuration"
msgstr "Gmail���������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:229
#, fuzzy
msgid ""
"If you want to use the Gmail SMTP server, first create a dedicated password "
"in `Google Account > Security > App passwords` or go to https://myaccount."
"google.com/apppasswords."
msgstr ""
"Gmail���SMTP������������������������������������������������ `Google Account "
"&amp;gt; Security &amp;gt; App passwords` "
"������������������������������������������������ https://myaccount.google."
"com/apppasswords ���"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:231
#, fuzzy
msgid ""
"When done, you can configure your Quarkus application by adding the "
"following properties to your `application.properties`:"
msgstr ""
"������������������ `application.properties`."
"Quarkus���������������������������������������������������������������������Quarkus���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:233
#, fuzzy
msgid "With TLS:"
msgstr "TLS������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:354
#, no-wrap
msgid ""
"quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN "
"LOGIN\n"
"quarkus.mailer.from=YOUREMAIL@gmail.com\n"
"quarkus.mailer.host=smtp.gmail.com\n"
"quarkus.mailer.port=587\n"
"quarkus.mailer.start-tls=REQUIRED\n"
"quarkus.mailer.username=YOUREMAIL@gmail.com\n"
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:245
#, fuzzy
msgid "Or with SSL:"
msgstr "������������SSL������"

#. type: Plain text
#: upstream/_guides/mailer.adoc:367
#, fuzzy
msgid ""
"  quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 "
"PLAIN LOGIN quarkus.mailer.from=YOUREMAIL@gmail.com quarkus.mailer.host=smtp."
"gmail.com quarkus.mailer.port=465 quarkus.mailer.ssl=true quarkus.mailer."
"username=YOUREMAIL@gmail.com quarkus.mailer.password="
"YOURGENERATEDAPPLICATIONPASSWORD"
msgstr ""
"<pre>quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 "
"PLAIN LOGIN quarkus.mailer.from=YOUREMAIL@gmail.com quarkus.mailer.host=smtp."
"gmail.com quarkus.mailer.port=465 quarkus.mailer.ssl=true quarkus.mailer."
"username=YOUREMAIL@gmail.com quarkus.mailer.password="
"YOURGENERATEDAPPLICATIONPASSWORD quarkus.mailer.username=YOUREMAIL@gmail.com "
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD</pre>"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:374
#, no-wrap
msgid ""
"[NOTE]\n"
"====\n"
"The `quarkus.mailer.auth-methods` configuration option is needed for the "
"Quarkus mailer to support password authentication with Gmail.\n"
"By default both the mailer and Gmail default to `XOAUTH2` which requires "
"registering an application, getting tokens, etc.\n"
"====\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:256
#, no-wrap, fuzzy
msgid "Using SSL with native executables"
msgstr "������������������������������������SSL���������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:379
msgid ""
"Note that if you enable SSL for the mailer and you want to build a native "
"executable, you will need to enable the SSL support.  Please refer to the "
"link:native-and-ssl[Using SSL With Native Executables] guide for more "
"information."
msgstr ""

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:261
#, no-wrap, fuzzy
msgid "Using the underlying Vert.x Mail Client"
msgstr "��������������� Vert.x ������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:265
#, fuzzy
msgid ""
"The Quarkus Mailer is implemented on top of the https://vertx.io/docs/vertx-"
"mail-client/java/[Vert.x Mail Client], providing an asynchronous and non-"
"blocking way to send emails.  If you need fine control on how the mail is "
"sent, for instance if you need to retrieve the message ids, you can inject "
"the underlying client, and use it directly:"
msgstr ""
"Quarkus Mailer������ link:https://vertx.io/docs/vertx-mail-client/java/[Vert."
"x������������������������������]���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ID���������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:386
msgid "[source, java]"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:388
#, fuzzy
msgid "@Inject MailClient client;"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:391
#, no-wrap
msgid "Three API flavors are exposed:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:396
#, no-wrap
msgid ""
"* the Mutiny client (`io.vertx.mutiny.ext.mail.MailClient`)\n"
"* the Axle client (`io.vertx.axle.ext.mail.MailClient`), using "
"`CompletionStage` and Reactive Streams `Publisher` - deprecated, it is "
"recommended to switch to the Mutiny client\n"
"* the RX Java 2 client (`io.vertx.reactivex.ext.mail.MailClient`) - "
"deprecated, it is recommended to switch to the Mutiny client\n"
"* the bare client (`io.vertx.ext.mail.MailClient`)\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:398
#, no-wrap
msgid ""
"Check the link:vertx[Using Vert.x guide] for further details about these "
"different APIs and how to select the most suitable for you.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:401
#, no-wrap
msgid ""
"The retrieved `MailClient` is configured using the configuration key "
"presented above.\n"
"You can also create your own instance, and pass your own configuration.\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:286
#, fuzzy
msgid ""
"This guide has shown how you can send emails from a Quarkus application.  "
"The _mailer_ extension works in JVM and native mode."
msgstr ""
"������������������������Quarkus������������������������������������������������������������������������������������ "
"_������������_������������������JVM������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:409
msgid "[[configuration-reference]]"
msgstr ""

#. type: Title ==
#: upstream/_guides/sending-emails.adoc:289
#, no-wrap, fuzzy
msgid "Mailer Configuration Reference"
msgstr "������������������������������������"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:411
msgid ""
"include::{generated-dir}/config/quarkus-mailer.adoc[opts=optional, "
"leveloffset=+1]"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/infinispan-client.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Infinispan Client"
msgstr "Quarkus - Infinispan������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:12
#, fuzzy
msgid ""
"Infinispan is an in memory data grid that allows running in a server outside "
"of application processes. This extension provides functionality to allow the "
"client that can connect to said server when running in Quarkus."
msgstr ""
"Infinispan���������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:15
#, fuzzy
msgid ""
"More information can be found about Infinispan at https://infinispan.org and "
"the client/server at https://infinispan.org/docs/dev/user_guide/user_guide."
"html#client_server"
msgstr ""
"Infinispan ������������������������ https://infinispan.org "
"������������������������/��������������������������� https://infinispan.org/"
"docs/dev/user_guide/user_guide.html#client_server "
"������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:992
#, no-wrap, fuzzy
msgid "Configuration"
msgstr "������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:20
#, fuzzy
msgid ""
"Once you have your Quarkus project configured you can add the `infinispan-"
"client` extension to your project by running the following from the command "
"line in your project base directory."
msgstr ""
"Quarkus��������������������������������������������������������������������������������������������������������������������������������������������� "
"`infinispan-client` "
"������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:24
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"infinispan-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:27
#, fuzzy
msgid "This will add the following to your pom.xml"
msgstr "��������������������������� pom.xml ������������������������"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:34
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-infinispan-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:39
#, fuzzy
msgid ""
"The Infinispan client is configurable in the `application.properties` file "
"that can be provided in the `src/main/resources` directory. These are the "
"properties that can be configured in this file:"
msgstr ""
"Infinispan ������������������������ `src/main/resources` "
"������������������������������������ `application.properties` "
"������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:45
#, fuzzy
msgid ""
"It is also possible to configure a `hotrod-client.properties` as described "
"in the Infinispan user guide. Note that the `hotrod-client.properties` "
"values overwrite any matching property from the other configuration values "
"(eg. near cache).  This properties file is build time only and if it is "
"changed, requires a full rebuild."
msgstr ""
"Infinispan ������������������������������������������������������ `hotrod-"
"client.properties` ��������������������������������������� `hotrod-client."
"properties` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:46
#, no-wrap, fuzzy
msgid "Serialization (Key Value types support)"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:51
#, fuzzy
msgid ""
"By default the client will support keys and values of the following types: "
"byte[], primitive wrappers (eg. Integer, Long, Double etc.), String, Date "
"and Instant. User types require some additional steps that are detailed here."
" Let's say we have the following user classes:"
msgstr ""
"������������������������������������������������������������������������������������������������:"
" byte[]���������������������������������(���: "
"Integer���Long���Double������)���String���Date���Instant���������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:52
#: upstream/_guides/infinispan-client.adoc:96
#, no-wrap, fuzzy
msgid "Author.java"
msgstr "���������.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:58
#, no-wrap
msgid ""
"public class Author {\n"
"   private final String name;\n"
"   private final String surname;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:65
#, no-wrap
msgid ""
"   public Author(String name, String surname) {\n"
"      this.name = Objects.requireNonNull(name);\n"
"      this.surname = Objects.requireNonNull(surname);\n"
"   }\n"
"   // Getter/Setter/equals/hashCode/toString omitted\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:67
#: upstream/_guides/infinispan-client.adoc:116
#, no-wrap, fuzzy
msgid "Book.java"
msgstr "Book.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:75
#, no-wrap
msgid ""
"public class Book {\n"
"   private final String title;\n"
"   private final String description;\n"
"   private final int publicationYear;\n"
"   private final Set<Author> authors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:84
#, no-wrap
msgid ""
"   public Book(String title, String description, int publicationYear, "
"Set<Author> authors) {\n"
"      this.title = Objects.requireNonNull(title);\n"
"      this.description = Objects.requireNonNull(description);\n"
"      this.publicationYear = publicationYear;\n"
"      this.authors = Objects.requireNonNull(authors);\n"
"   }\n"
"   // Getter/Setter/equals/hashCode/toString omitted\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:87
#, fuzzy
msgid ""
"Serialization of user types uses a library based on protobuf, called "
"Protostream."
msgstr ""
"������������������������������������������������Protostream���������������protobuf���������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/infinispan-client.adoc:88
#, no-wrap, fuzzy
msgid "Annotation based Serialization"
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:93
#, fuzzy
msgid ""
"This can be done automatically by adding protostream annotations to your "
"user classes.  In addition a single Initializer annotated interface is "
"required which controls how the supporting classes are generated."
msgstr ""
"��������������������������������� protostream "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"Initializer "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:95
#, fuzzy
msgid "Here is an example of how the preceding classes should be changed:"
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:104
#, no-wrap
msgid ""
"    @ProtoFactory\n"
"    public Author(String name, String surname) {\n"
"        this.name = Objects.requireNonNull(name);\n"
"        this.surname = Objects.requireNonNull(surname);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:109
#, no-wrap
msgid ""
"    @ProtoField(number = 1)\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:114
#, no-wrap
msgid ""
"    @ProtoField(number = 2)\n"
"    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:126
#, no-wrap
msgid ""
"    @ProtoFactory\n"
"    public Book(String title, String description, int publicationYear, "
"Set<Author> authors) {\n"
"        this.title = Objects.requireNonNull(title);\n"
"        this.description = Objects.requireNonNull(description);\n"
"        this.publicationYear = publicationYear;\n"
"        this.authors = Objects.requireNonNull(authors);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:131
#, no-wrap
msgid ""
"    @ProtoField(number = 1)\n"
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:136
#, no-wrap
msgid ""
"    @ProtoField(number = 2)\n"
"    public String getDescription() {\n"
"        return description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:141
#, no-wrap
msgid ""
"    @ProtoField(number = 3, defaultValue = \"-1\")\n"
"    public int getPublicationYear() {\n"
"        return publicationYear;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:146
#, no-wrap
msgid ""
"    @ProtoField(number = 4)\n"
"    public Set<Author> getAuthors() {\n"
"        return authors;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:149
#, fuzzy
msgid ""
"If your classes have only mutable fields, then the `ProtoFactory` annotation "
"is not required, assuming your class has a no arg constructor."
msgstr ""
"������������ mutable ��������������������������������������� `ProtoFactory` "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:152
#, fuzzy
msgid ""
"Then all that is required is a very simple `SerializationContextInitializer` "
"interface with an annotation on it to specify configuration settings"
msgstr ""
"������������������������������������������ `SerializationContextInitializer` "
"������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:153
#, no-wrap, fuzzy
msgid "BookContextInitializer.java"
msgstr "BookContextInitializer.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:159
#, no-wrap
msgid ""
"@AutoProtoSchemaBuilder(includeClasses = { Book.class, Author.class }, "
"schemaPackageName = \"book_sample\")\n"
"interface BookContextInitializer extends SerializationContextInitializer {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:164
#, fuzzy
msgid ""
"So in this case we will automatically generate the marshaller and schemas "
"for the included classes and place them in the schema package automatically. "
"The package does not have to be provided, but if you utilize querying, you "
"must know the generated package."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:166
#, fuzzy
msgid ""
"In Quarkus the `schemaFileName` and `schemaFilePath` attributes should NOT "
"be set on the `AutoProtoSchemaBuilder` annotation, setting either will cause "
"native runtime to error."
msgstr ""
"Quarkus��������� `schemaFileName` ��� `schemaFilePath` ������������ "
"`AutoProtoSchemaBuilder` "
"���������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/infinispan-client.adoc:167
#, no-wrap, fuzzy
msgid "User written serialization"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:173
#, fuzzy
msgid ""
"The previous method is suggested for any case when the user can annotate "
"their classes.  Unfortunately the user may not be able to annotate all "
"classes they will put in the cache. In this case you must define your schema "
"and create your own Marshaller(s)  yourself."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/infinispan-client.adoc:174
#, no-wrap, fuzzy
msgid "Protobuf schema"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:175
#, fuzzy
msgid "You can supply a protobuf schema through either one of two ways."
msgstr ""
"2������������������������������protobuf���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:176
#, fuzzy
msgid "Proto File"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:179
#, fuzzy
msgid ""
"+ You can put the `.proto` file in the `META-INF` directory of the project. "
"These files will automatically be picked up at initialization time."
msgstr ""
"+ ��������������������� `META-INF` ��������������������� `.proto` "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:180
#, no-wrap, fuzzy
msgid "library.proto"
msgstr "���������������������������"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:183
#, no-wrap
msgid "package book_sample;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:188
#, no-wrap
msgid ""
"message Book {\n"
"  required string title = 1;\n"
"  required string description = 2;\n"
"  required int32 publicationYear = 3; // no native Date type available in "
"Protobuf\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:191
#, no-wrap
msgid "  repeated Author authors = 4;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:196
#, no-wrap
msgid ""
"message Author {\n"
"  required string name = 1;\n"
"  required string surname = 2;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:198
#, fuzzy
msgid "In Code"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:201
#, fuzzy
msgid ""
"+ Or you can define the proto schema directly in user code by defining a "
"produced bean of type `org.infinispan.protostream.FileDescriptorSource`."
msgstr ""
"`org.infinispan.protostream.FileDescriptorSource`+ "
"���������������������������������������proto���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:221
#, no-wrap
msgid ""
"   @Produces\n"
"   FileDescriptorSource bookProtoDefinition() {\n"
"      return FileDescriptorSource.fromString(\"library.proto\", \"package "
"book_sample;\\n\" +\n"
"            \"\\n\" +\n"
"            \"message Book {\\n\" +\n"
"            \"  required string title = 1;\\n\" +\n"
"            \"  required string description = 2;\\n\" +\n"
"            \"  required int32 publicationYear = 3; // no native Date type "
"available in Protobuf\\n\" +\n"
"            \"\\n\" +\n"
"            \"  repeated Author authors = 4;\\n\" +\n"
"            \"}\\n\" +\n"
"            \"\\n\" +\n"
"            \"message Author {\\n\" +\n"
"            \"  required string name = 1;\\n\" +\n"
"            \"  required string surname = 2;\\n\" +\n"
"            \"}\");\n"
"   }\n"
msgstr ""

#. type: Labeled list
#: upstream/_guides/infinispan-client.adoc:222
#, no-wrap, fuzzy
msgid "User Marshaller"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:226
#, fuzzy
msgid ""
"The last thing to do is to provide a `org.infinispan.protostream."
"MessageMarshaller` implementation for each user class defined in the proto "
"schema. This class is then provided via `@Produces` in a similar fashion to "
"the code based proto schema definition above."
msgstr ""
"������������������������������proto "
"��������������������������������������������������������� `org.infinispan."
"protostream.MessageMarshaller` "
"��������������������������������������������������������������������������������������� "
"proto ������������������������������������������ `@Produces` "
"���������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:228
#, fuzzy
msgid "Here is the Marshaller class for our Author & Book classes."
msgstr ""
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:230
#, fuzzy
msgid ""
"The type name must match the `<protobuf package>.<protobuf message>` "
"exactly!"
msgstr ""
"��������������� `&amp;lt;protobuf package&amp;gt;.&amp;lt;protobuf "
"message&amp;gt;` ���������������������������������������������������!"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:231
#, no-wrap, fuzzy
msgid "AuthorMarshaller.java"
msgstr "AuthorMarshaller.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:235
#, no-wrap
msgid "public class AuthorMarshaller implements MessageMarshaller<Author> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:240
#, no-wrap
msgid ""
"   @Override\n"
"   public String getTypeName() {\n"
"      return \"book_sample.Author\";\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:245
#, no-wrap
msgid ""
"   @Override\n"
"   public Class<? extends Author> getJavaClass() {\n"
"      return Author.class;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:251
#, no-wrap
msgid ""
"   @Override\n"
"   public void writeTo(ProtoStreamWriter writer, Author author) throws "
"IOException {\n"
"      writer.writeString(\"name\", author.getName());\n"
"      writer.writeString(\"surname\", author.getSurname());\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:259
#, no-wrap
msgid ""
"   @Override\n"
"   public Author readFrom(ProtoStreamReader reader) throws IOException {\n"
"      String name = reader.readString(\"name\");\n"
"      String surname = reader.readString(\"surname\");\n"
"      return new Author(name, surname);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:261
#, no-wrap, fuzzy
msgid "BookMarshaller.java"
msgstr "BookMarshaller.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:265
#, no-wrap
msgid "public class BookMarshaller implements MessageMarshaller<Book> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:270
#, no-wrap
msgid ""
"   @Override\n"
"   public String getTypeName() {\n"
"      return \"book_sample.Book\";\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:275
#, no-wrap
msgid ""
"   @Override\n"
"   public Class<? extends Book> getJavaClass() {\n"
"      return Book.class;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:283
#, no-wrap
msgid ""
"   @Override\n"
"   public void writeTo(ProtoStreamWriter writer, Book book) throws "
"IOException {\n"
"      writer.writeString(\"title\", book.getTitle());\n"
"      writer.writeString(\"description\", book.getDescription());\n"
"      writer.writeInt(\"publicationYear\", book.getPublicationYear());\n"
"      writer.writeCollection(\"authors\", book.getAuthors(), Author.class);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:293
#, no-wrap
msgid ""
"   @Override\n"
"   public Book readFrom(ProtoStreamReader reader) throws IOException {\n"
"      String title = reader.readString(\"title\");\n"
"      String description = reader.readString(\"description\");\n"
"      int publicationYear = reader.readInt(\"publicationYear\");\n"
"      Set<Author> authors = reader.readCollection(\"authors\", new "
"HashSet<>(), Author.class);\n"
"      return new Book(title, description, publicationYear, authors);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:296
#, fuzzy
msgid "And you pass the marshaller by defining the following:"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:303
#, no-wrap
msgid ""
"   @Produces\n"
"   MessageMarshaller authorMarshaller() {\n"
"      return new AuthorMarshaller();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:308
#, no-wrap
msgid ""
"   @Produces\n"
"   MessageMarshaller bookMarshaller() {\n"
"      return new BookMarshaller();\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:310
#, fuzzy
msgid ""
"The above produced Marshaller method MUST return `MessageMarshaller` without "
"types or else it will not be found."
msgstr ""
"���������������������������������Marshaller������������������������������ "
"`MessageMarshaller` ������������������������������������(MUST)���"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:311
#, no-wrap, fuzzy
msgid "Dependency Injection"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:317
#, fuzzy
msgid ""
"As you saw above we support the user injecting Marshaller configuration. You "
"can do the inverse with the Infinispan client extension providing injection "
"for `RemoteCacheManager` and `RemoteCache` objects.  There is one global "
"`RemoteCacheManager` that takes all of the configuration parameters setup in "
"the above sections."
msgstr ""
"������������������������Marshaller "
"������������������������������������������������������������������������������������������������Infinispan "
"��������������������������������������������������� `RemoteCacheManager` ��� "
"`RemoteCache` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`RemoteCacheManager` ������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:320
#, fuzzy
msgid ""
"It is very simple to inject these components. All you need to do is to add "
"the Inject annotation to the field, constructor or method. In the below code "
"we utilize field and constructor injection."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:321
#, no-wrap, fuzzy
msgid "SomeClass.java"
msgstr "SomeClass.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:327
#, no-wrap
msgid ""
"    @Inject SomeClass(RemoteCacheManager remoteCacheManager) {\n"
"       this.remoteCacheManager = remoteCacheManager;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:330
#, no-wrap
msgid "    @Inject @Remote(\"myCache\")\n"
"    RemoteCache<String, Book> cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:332
#, no-wrap
msgid "    RemoteCacheManager remoteCacheManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:337
#, fuzzy
msgid ""
"If you notice the `RemoteCache` declaration has an additional optional "
"annotation named `Remote`.  This is a qualifier annotation allowing you to "
"specify which named cache that will be injected. This annotation is not "
"required and if it is not supplied, the default cache will be injected."
msgstr ""
"`RemoteCache` ��������� `Remote` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:339
#, fuzzy
msgid ""
"Other types may be supported for injection, please see other sections for "
"more information"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:340
#, no-wrap, fuzzy
msgid "Querying"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:345
#, fuzzy
msgid ""
"The Infinispan client supports both indexed and non indexed querying as long "
"as the `ProtoStreamMarshaller` is configured above. This allows the user to "
"query based on the properties of the proto schema."
msgstr ""
"Infinispan ��������������������������������� `ProtoStreamMarshaller` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:350
#, fuzzy
msgid ""
"Query builds upon the proto definitions you can configure when setting up "
"the `ProtoStreamMarshaller`.  Either method of Serialization above will "
"automatically register the schema with the server at startup, meaning that "
"you will automatically gain the ability to query objects stored in the "
"remote Infinispan Server."
msgstr ""
"Query ������ `ProtoStreamMarshaller` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"Infinispan "
"���������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:352
#, fuzzy
msgid ""
"You can read more about this at https://infinispan.org/docs/stable/titles/"
"developing/developing.html#query_dsl."
msgstr ""
"������������������������ https://infinispan.org/docs/stable/titles/"
"developing/developing.html#query_dsl ���"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:355
#, fuzzy
msgid ""
"You can use either the Query DSL or the Ickle Query language with the "
"Quarkus Infinispan client extension."
msgstr ""
"Quarkus "
"Infinispan������������������������������������������������������������DSL���������Ickle������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:356
#, no-wrap, fuzzy
msgid "Counters"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:360
#, fuzzy
msgid ""
"Infinispan also has a notion of counters and the Quarkus Infinispan client "
"supports them out of the box."
msgstr ""
"Infinispan������������������������������������������������Quarkus "
"Infinispan������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:364
#, fuzzy
msgid ""
"The Quarkus Infinispan client extension allows for Dependency Injection of "
"the `CounterManager` directly. All you need to do is annotate your field, "
"constructor or method and you get it with no fuss. You can then use counters "
"as you would normally."
msgstr ""
"Quarkus Infinispan��������������������������������������������������� "
"`CounterManager` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:369
#, no-wrap
msgid "@Inject\n"
"CounterManager counterManager;\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:371
#, no-wrap, fuzzy
msgid "Near Caching"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:377
#, fuzzy
msgid ""
"Near caching is disabled by default, but you can enable it by setting the "
"profile config property `quarkus.infinispan-client.near-cache-max-entries` "
"to a value greater than 0. You can also configure a regular expression so "
"that only a subset of caches have near caching applied through the `quarkus."
"infinispan-client.near-cache-name-pattern` attribute."
msgstr ""
"������������������������������������������������������������������������������������������������������������������ "
"`quarkus.infinispan-client.near-cache-max-entries` ��� 0 "
"��������������������������������������������������������������������������������� "
"��������������������������������������������������������������������������������� "
"`quarkus.infinispan-client.near-cache-name-pattern` "
"���������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:378
#, no-wrap, fuzzy
msgid "Encryption"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:381
#, fuzzy
msgid "Encryption at this point requires additional steps to get working."
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:385
#, fuzzy
msgid ""
"The first step is to configure the `hotrod-client.properties` file to point "
"to your truststore and/or keystore. This is further detailed at https://"
"infinispan.org/docs/dev/user_guide/user_guide.html#hr_encryption."
msgstr ""
"��������������������������� `hotrod-client.properties` ��������������� "
"truststore ���������/��������� keystore "
"������������������������������������������������������ https://infinispan."
"org/docs/dev/user_guide/user_guide.html#hr_encryption  "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:388
#, fuzzy
msgid ""
"The Infinispan Client extension enables SSL by default. You can read more "
"about this at link:native-and-ssl[Using SSL With Native Executables]."
msgstr ""
"Infinispan������������������������������������������������������SSL������������������������������������������������������ "
"link:native-and-ssl[Using SSL With Native Executables] "
"������������������������������"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:389
#, no-wrap, fuzzy
msgid "Authentication"
msgstr "������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:393
#, fuzzy
msgid ""
"This chart illustrates what mechanisms have been verified to be working "
"properly with the Quarkus Infinispan Client extension."
msgstr ""
"���������������Quarkus "
"Infinispan���������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:394
#, no-wrap, fuzzy
msgid "Mechanisms"
msgstr "���������������"

#. type: Table
#: upstream/_guides/infinispan-client.adoc:413
#, no-wrap, fuzzy
msgid ""
"| Name | Verified\n"
"\n"
"| DIGEST-MD5\n"
"| [green]*Y*\n"
"\n"
"| PLAIN\n"
"| [green]*Y*\n"
"\n"
"| EXTERNAL\n"
"| [green]*Y*\n"
"\n"
"| GSSAPI\n"
"| [red]*N*\n"
"\n"
"| Custom\n"
"| [red]*N*\n"
"\n"
msgstr "| ������������������������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:417
#, fuzzy
msgid ""
"The guide for configuring these can be found at https://infinispan.org/docs/"
"dev/user_guide/user_guide.html#authentication.  However you need to "
"configure these through the `hotrod-client.properties` file if using "
"Dependency Injection."
msgstr ""
"��������������������������������������������� https://infinispan.org/docs/"
"dev/user_guide/user_guide.html#authentication  "
"��������������������������������������������������������������������������������������� "
"`hotrod-client.properties` "
"������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:418
#, no-wrap, fuzzy
msgid "Additional Features"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:422
#, fuzzy
msgid ""
"The Infinispan Client has additional features that were not mentioned here. "
"This means this feature was not tested in a Quarkus environment and they may "
"or may not work. Please let us know if you need these added!"
msgstr ""
"Infinispan������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-event-bus.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using the event bus"
msgstr "Quarkus - ���������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:13
#, fuzzy
msgid ""
"Quarkus allows different beans to interact using asynchronous events, thus "
"promoting loose-coupling.  The messages are sent to _virtual addresses_.  It "
"offers 3 types of delivery mechanism:"
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"_������������������_������������������������3���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:15
#, fuzzy
msgid ""
"point-to-point - send the message, one consumer receives it. If several "
"consumers listen to the address, a round robin is applied;"
msgstr ""
"point-to-point - ������������������������������1 "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:16
#, fuzzy
msgid ""
"publish/subscribe - publish a message, all the consumers listening to the "
"address are receiving the message;"
msgstr ""
"publish/subscribe - "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:17
#, fuzzy
msgid ""
"request/reply - send the message and expect a response. The receiver can "
"respond to the message in an asynchronous-fashion"
msgstr ""
"request/reply - "
"������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:19
#, fuzzy
msgid ""
"All these delivery mechanism are non-blocking, and are providing one of the "
"fundamental brick to build reactive applications."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������1������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:22
#, fuzzy
msgid ""
"The asynchronous message passing feature allows replying to messages which "
"is not supported by Reactive Messaging.  However, it is limited to single-"
"event behavior (no stream) and to local messages."
msgstr ""
"���������������������������������������������������Reactive "
"Messaging���������������������������������������������������������������������������������������������������������������������������������(���������������������)������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:20
#, no-wrap, fuzzy
msgid "Installing"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:27
#, fuzzy
msgid ""
"This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` "
"extension to use this feature.  If you are creating a new project, set the "
"`extensions` parameter are follows:"
msgstr ""
"������������������Vert.x "
"EventBus��������������������������������������������������������������� "
"`vertx` "
"��������������������������������������������������������������������������������������������������������� "
"`extensions` ������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:36
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -Dextensions=\"vertx,resteasy-mutiny\" \\\n"
"    -DnoExamples\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:36
#, fuzzy
msgid ""
"If you have an already created project, the `vertx` extension can be added "
"to an existing Quarkus project with the `add-extension` command:"
msgstr ""
"��������������������������������������������������������������� `vertx` "
"������������������������Quarkus������������������������������������������ "
"`add-extension` ���������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:44
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx,resteasy-mutiny\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:43
#, fuzzy
msgid ""
"Otherwise, you can manually add this to the dependencies section of your "
"`pom.xml` file:"
msgstr ""
"������������������������ `pom.xml` "
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:50
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:56
#, no-wrap, fuzzy
msgid "Consuming events"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:59
#, fuzzy
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr ""
"������������������������������������ `io.quarkus.vertx.ConsumeEvent` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:251 upstream/_guides/vertx.adoc:316
#: upstream/_guides/vertx.adoc:500
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:65
#: upstream/_guides/reactive-event-bus.adoc:113
#: upstream/_guides/reactive-event-bus.adoc:335
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:619
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:70
#: upstream/_guides/reactive-event-bus.adoc:121
#: upstream/_guides/reactive-event-bus.adoc:340
#, no-wrap
msgid "@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:76
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:78
#, fuzzy
msgid ""
"If not set, the address is the fully qualified name of the bean, for "
"instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������� "
"`org.acme.vertx.GreetingService`."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:79
#, fuzzy
msgid ""
"The method parameter is the message body. If the method returns _something_ "
"it's the message response."
msgstr ""
"������������������������������������������������������������������������������ "
"_���������_������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:84
#, fuzzy
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's "
"called on the Vert.x event loop.  If your processing is blocking, use the "
"`blocking` attribute:"
msgstr ""
"������������������������Vert.x "
"������������������������������������������������������������������������������������������ "
"_������_��������������������������������������������������������������������������������������������������������� "
"`blocking` ������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:91
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:94
#, fuzzy
msgid ""
"Alternatively, you can annotate your method with `@io.smallrye.common."
"annotation.Blocking`:"
msgstr ""
"������������������������������ `@io.smallrye.common.annotation.Blocking` "
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:101
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:104
#, fuzzy
msgid ""
"When using `@Blocking`, it ignores the value of the `blocking` attribute of "
"`@ConsumeEvent`."
msgstr ""
"`@Blocking` ������������������������ `@ConsumeEvent` ��� `blocking` "
"������������������������������������"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:107
#, fuzzy
msgid ""
"Asynchronous processing is also possible by returning either an `io.smallrye."
"mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""
"`io.smallrye.mutiny.Uni` ��������� `java.util.concurrent.CompletionStage`."
"NET ���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:118
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:127
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is "
"finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:134
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:140
#, fuzzy
msgid ""
"The previous example uses Mutiny reactive types, if you're not familiar with "
"them, we recommend reading the link:getting-started-reactive#mutiny[Getting "
"Started with Reactive guide]."
msgstr ""
"��������������� Mutiny "
"��������������������������������������������������������������������������������������������������� "
"link:getting-started-reactive#mutiny[Reactive "
"������������������]���������������������������������������"

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:142
#, no-wrap, fuzzy
msgid "Configuring the address"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:145
#, fuzzy
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr ""
"`@ConsumeEvent` "
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:152
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:154
#, fuzzy
msgid "Receive the messages sent to the `greeting` address"
msgstr ""
"`greeting` ������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:155
#, no-wrap, fuzzy
msgid "Replying"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:159
#, fuzzy
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used as "
"response to the incoming message.  For instance, in the following snippet, "
"the returned `String` is the response."
msgstr ""
"`@ConsumeEvent` ������������������������������������������������ "
"_������_��������������������������������������������������������������������������������������������������������������������������������� "
"`String` ���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:166
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:169
#, fuzzy
msgid ""
"You can also return a `Uni<T>` or a `CompletionStage<T>` to handle "
"asynchronous reply:"
msgstr ""
"��������� `Uni&amp;lt;T&amp;gt;` ��� `CompletionStage&amp;lt;T&amp;gt;` "
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:176
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:181
#, fuzzy
msgid ""
"You can inject an `executor` if you use the Context Propagation extension:"
msgstr ""
"Context Propagation ��������������������������� `executor` "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:184
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:187
#, no-wrap, fuzzy
msgid "Implementing fire and forget interactions"
msgstr "fire and forget���������������������������������"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:192
#, fuzzy
msgid ""
"You don't have to reply to received messages.  Typically for a _fire and "
"forget_ interaction, the messages are consumed and the sender does not need "
"to know about it.  To implement this, your consumer method just returns "
"`void`"
msgstr ""
"������������������������������������������������������������������������������ "
"_fire and "
"forget_��������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"consumer ��������������� `void`"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:199
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:201
#, no-wrap, fuzzy
msgid "Dealing with messages"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:204
#, fuzzy
msgid ""
"As said above, this mechanism is based on the Vert.x event bus. So, you can "
"also use `Message` directly:"
msgstr ""
"������������������������������������������������Vert."
"x��������������������������������������������������������������������� "
"`Message` ���������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:212
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:214
#, no-wrap, fuzzy
msgid "Sending messages"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:218
#, fuzzy
msgid ""
"Ok, we have seen how to receive messages, let's now switch to the _other "
"side_: the sender.  Sending and publishing messages use the Vert.x event bus:"
""
msgstr ""
"��������������������������������������������������������������������������������������� "
"_���_������������������������������������������������������������������ Vert."
"x ������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:227
#: upstream/_guides/reactive-event-bus.adoc:301
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:260
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:236
#: upstream/_guides/reactive-event-bus.adoc:310
#, no-wrap
msgid "@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:239
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                       // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:248
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:250
#, fuzzy
msgid "Inject the Event bus"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:251
#, fuzzy
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr ""
"������������ `greeting` "
"������������������������������������������������������������������������������������ "
"`name`"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:253
#, fuzzy
msgid "The `EventBus` object provides methods to:"
msgstr ""
"`EventBus` "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:255
#, fuzzy
msgid ""
"`send` a message to a specific address - one single consumer receives the "
"message."
msgstr ""
"`send` ������������������������������������������ - "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:256
#, fuzzy
msgid ""
"`publish` a message to a specific address - all consumers receive the "
"messages."
msgstr ""
"`publish` ������������������������������������������������ - "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:257
#, fuzzy
msgid "`send` a message and expect reply"
msgstr "`send` ������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:267
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are "
"you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:269
#, no-wrap, fuzzy
msgid "Putting things together - bridging HTTP and messages"
msgstr "��������������������� - HTTP���������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:275
#, fuzzy
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing "
"to delegate the call to a separated bean.  It uses the request/reply "
"dispatching mechanism.  Instead of implementing the business logic inside "
"the JAX-RS endpoint, we are sending a message.  This message is consumed by "
"another bean and the response is sent using the _reply_ mechanism."
msgstr ""
"������HTTP���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������/"
"������������������������������������������������������������������������JAX-"
"RS���������������������������������������������������������������������������������������������������������������������������������������������������������Bean������������������������������������ "
"_������_������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:277
#, fuzzy
msgid "First create a new project using:"
msgstr "���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:286
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-http-quickstart \\\n"
"    -Dextensions=\"vertx\" \\\n"
"    -DnoExamples\n"
"cd vertx-http-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:289
#, fuzzy
msgid ""
"You can already start the application in _dev mode_ using `./mvnw compile "
"quarkus:dev`."
msgstr ""
"`./mvnw compile quarkus:dev` ��������������������������� "
"_������������������_������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:291
#, fuzzy
msgid "Then, creates a new JAX-RS resource with the following content:"
msgstr ""
"������������������������������JAX-"
"RS������������������������������������������"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:293
#, no-wrap, fuzzy
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr "src/main/java/org/acme/vertx/ventResource.java"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:313
#, no-wrap
msgid "    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:322
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:324
#, fuzzy
msgid "send the `name` to the `greeting` address and request a response"
msgstr "`name` `greeting` ������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:325
#, fuzzy
msgid "when we get the response, extract the body and send it to the user"
msgstr ""
"������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:328
#, fuzzy
msgid ""
"If you call this endpoint, you will wait and get a timeout. Indeed, no one "
"is listening.  So, we need a consumer listening on the `greeting` address. "
"Create a `GreetingService` bean with the following content:"
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`greeting` "
"��������������������������������������������������������������������������������������������������� "
"`GreetingService` ������������������������������"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:330
#, no-wrap, fuzzy
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr "src/main/java/org/acme/vertx/GreetingService.java"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:345
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:350
#, fuzzy
msgid "This bean receives the name, and returns the greeting message."
msgstr ""
"������Bean������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:352
#, fuzzy
msgid ""
"Now, open your browser to http://localhost:8080/async/Quarkus, and you "
"should see:"
msgstr ""
"��������������������������������� http://localhost:8080/async/Quarkus ���"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:356
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:359
#, fuzzy
msgid ""
"To better understand, let's detail how the HTTP request/response has been "
"handled:"
msgstr ""
"������������������������������������������HTTP���������������/"
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:361
#, fuzzy
msgid "The request is received by the `hello` method"
msgstr "������������������ `hello` ���������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:362
#, fuzzy
msgid "a message containing the _name_ is sent to the event bus"
msgstr ""
"_���������_������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:363
#, fuzzy
msgid "Another bean receives this message and computes the response"
msgstr ""
"������Bean���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:364
#, fuzzy
msgid "This response is sent back using the reply mechanism"
msgstr ""
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:365
#, fuzzy
msgid ""
"Once the reply is received by the sender, the content is written to the HTTP "
"response"
msgstr ""
"���������������������������������������HTTP���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:367
#, fuzzy
msgid "This application can be packaged using:"
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:371
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:374
#, fuzzy
msgid "You can also compile it as a native executable with:"
msgstr ""
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:378
#, no-wrap
msgid "./mvnw clean package -Pnative\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:380
#, no-wrap, fuzzy
msgid "Using codecs"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:385
#, fuzzy
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses "
"codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default "
"codec for local delivery.  So you can exchange objects as follows:"
msgstr ""
"link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert."
"x���������������������]��������������������������������������������������������� "
"_������������������_��� "
"_���������������������_������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:395
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:400
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:403
#, fuzzy
msgid ""
"If you want to use a specific codec, you need to explicitly set it on both "
"ends:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:414
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // "
"<1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:419
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // "
"<2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:421
#, fuzzy
msgid "Set the name of the codec to use to send the message"
msgstr ""
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:421
#, fuzzy
msgid "Set the codec to use to receive the message"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Title =
#: upstream/_guides/quarkus-intro.adoc:1
#, no-wrap, fuzzy
msgid "What is Quarkus"
msgstr "���������������������"

#.  tag::intro[]
#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:19
#, fuzzy
msgid ""
"Quarkus is a Cloud Native, Container First framework for writing Java "
"applications."
msgstr ""
"Quarkus������Java������������������������������������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:21
#, no-wrap, fuzzy
msgid "Container First"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:23
#, fuzzy
msgid ""
"Minimal footprint Java applications optimized for running in containers"
msgstr ""
"���������������������������������������������������������������������������������Java������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:23
#: upstream/_guides/quarkus-intro.adoc:56
#, no-wrap, fuzzy
msgid "Cloud Native"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:25
#, fuzzy
msgid "Embraces 12 factor architecture in environments like Kubernetes"
msgstr "Kubernetes���������������������12������������������������������������"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:25
#, no-wrap, fuzzy
msgid "Unify imperative and reactive"
msgstr "������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:27
#, fuzzy
msgid ""
"Brings under one programming model non blocking and imperative styles of "
"development"
msgstr ""
"������������������������������������������������������������1������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:27
#, no-wrap, fuzzy
msgid "Standards-based"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:29
#, fuzzy
msgid ""
"Based on the standards and the libraries you love and use (RESTEasy, "
"Hibernate, Netty, Eclipse Vert.x, Apache Camel...)"
msgstr ""
"���������������������������������������������RESTEasy���Hibernate���Netty���Eclipse "
"Vert.x���Apache Camel...������������������������������"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:29
#, no-wrap, fuzzy
msgid "Microservice First"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:31
#, fuzzy
msgid "Brings lightning fast startup time to Java applications"
msgstr "Java���������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:31
#, no-wrap, fuzzy
msgid "Extreme productivity"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:33
#, fuzzy
msgid ""
"Instant hot code replacement: don't allow build, deploy, boot delays disrupt "
"your flow"
msgstr ""
"���������������������������������������������������: "
"���������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:33
#, no-wrap, fuzzy
msgid "Developer Joy"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:35
#, fuzzy
msgid ""
"Development-centric experience without compromises to bring your amazing "
"applications to life in no time"
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:37
#, fuzzy
msgid "All under one framework."
msgstr "������������������������������������������"

#.  end::intro[]
#. type: Title ==
#: upstream/_guides/quarkus-intro.adoc:40
#, no-wrap, fuzzy
msgid "Scratch pad"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:44
#, fuzzy
msgid "Quarkus believes in developer Joy."
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:48
#, fuzzy
msgid ""
"It unifies imperative and reactive.  It is a Microservice first toolkit."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:51
#, fuzzy
msgid ""
"Standards based Quarkus brings all the standards and frameworks you love and "
"use: RESTEasy, Hibernate, Netty, vert.x, Camel...)"
msgstr ""
"������������������Quarkus���������������������������������������������������������������������������������������������������������RESTEasy���Hibernate���Netty���vert."
"x���Camel���������������)"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:53
#, fuzzy
msgid "Imperative and Reactive"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:55
#, fuzzy
msgid "ahead-of-time native binary (executable binary)"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:57
#, fuzzy
msgid "Java"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:58
#, fuzzy
msgid "modular"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:59
#, fuzzy
msgid "Substrate VM native"
msgstr "������ VM ���������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:61
#, fuzzy
msgid "Seamlessly build container optimal"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:63
#, fuzzy
msgid "Container affinity"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:65
#, fuzzy
msgid "Container optimal"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:67
#, fuzzy
msgid "low memory"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:68
#, fuzzy
msgid "low startup time"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:69
#, fuzzy
msgid "ahead of time optimal"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:71
#, fuzzy
msgid "Unifying Imperative and Reactive under one framework."
msgstr ""
"Imperative���Reactive���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:73
#, fuzzy
msgid "Usability"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:74
#, fuzzy
msgid "easy to use"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:75
#, fuzzy
msgid "productive environment"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:76
#, fuzzy
msgid "hot reload"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:78
#, fuzzy
msgid "Standards based"
msgstr "������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-ses.adoc:6
#, no-wrap
msgid "Quarkus - Amazon SES Client"
msgstr "Quarkus - Amazon SES ������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:13
msgid ""
"Amazon Simple Email Service (SES) is a flexible and highly-scalable email "
"sending and receiving service.  Using SES, you can send emails with any type "
"of correspondence. You can find more information about SES at https://aws."
"amazon.com/ses/[the Amazon SES website]."
msgstr ""
"Amazon Simple Email "
"Service���SES���������������������������������������������������������������������������SES������������������������������������������������������������������������������������������������SES��������������������������� "
"link:https://aws.amazon.com/ses/[Amazon "
"SES���������������������]������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:16
msgid ""
"The SES extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/"
"developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the "
"1.x code base that offers two programming models (Blocking & Async)."
msgstr ""
"SES������������������������������ link:https://docs.aws.amazon.com/sdk-for-"
"java/v2/developer-guide/welcome.html[AWS Java SDK 2."
"x]������������������������������2���������������������������������������Blocking "
"&amp; Async������������������1."
"x������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:23
#, fuzzy
msgid "The Quarkus extension supports two programming models:"
msgstr ""
"Quarkus������������������2���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:25
#, fuzzy
msgid ""
"Blocking access using URL Connection HTTP client (by default) or the Apache "
"HTTP Client"
msgstr ""
"URL Connection HTTP ������������������ (���������������) ��������� Apache "
"HTTP ���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:26
#, fuzzy
msgid ""
"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async."
"html[Asynchronous programming] based on JDK's `CompletableFuture` objects "
"and the Netty HTTP client."
msgstr ""
"JDK ��� `CompletableFuture` ��������������������� Netty HTTP "
"��������������������������������������� link:https://docs.aws.amazon.com/sdk-"
"for-java/v2/developer-guide/basics-async."
"html[������������������������������]���"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:25
msgid ""
"In this guide, we see how you can get your REST services to use SES locally "
"and on AWS."
msgstr ""
"������������������������REST������������������������������������������AWS������SES���������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:34
msgid "An AWS Account to access the SES service"
msgstr "SES������������������������������������������AWS���������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:35
msgid "Docker for your system to run SES locally for testing purposes"
msgstr "���������������������������������SES������������������������Docker"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:36
#, no-wrap
msgid "Set up SES locally"
msgstr "���������������SES���������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:40
msgid ""
"The easiest way to start working with SES is to run a local instance as a "
"container.  However, local instance of SES is only mocks the SES APIs "
"without the actual email sending capabilities. You can still use it for this "
"guide to verify an API communication or integration test purposes."
msgstr ""
"SES������������������������������������������������������������������������������������������������������������������������������������������SES������������������������������������������������������������������������������������SES���API���������������������������������������������������������������������������������API���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:44
#, no-wrap
msgid ""
"docker run --rm --name local-ses -p 8012:4579 -e SERVICES=ses -e START_WEB=0 "
"-d localstack/localstack:0.11.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:46
msgid "This starts a SES instance that is accessible on port `8012`."
msgstr ""
"��������������������� `8012` ������������������������ SES "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:48
msgid "Create an AWS profile for your local instance using AWS CLI:"
msgstr ""
"AWS "
"CLI���������������������������������������������AWS���������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:55
#, no-wrap
msgid ""
"$ aws configure --profile localstack\n"
"AWS Access Key ID [None]: test-key\n"
"AWS Secret Access Key [None]: test-secret\n"
"Default region name [None]: us-east-1\n"
"Default output format [None]:\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:57
#, no-wrap
msgid "Using SES on your AWS account"
msgstr "AWS������������������SES���������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:61
msgid ""
"Amazon applies certain restrictions to new Amazon SES accounts, mainly to "
"prevent fraud and abuse. All new accounts are in the Amazon SES *sandbox*.  "
"All the features of the Amazon SES are still available while in sandbox, but "
"a following restrictions applies:"
msgstr ""
"Amazon������������������������������������������������Amazon "
"SES������������������������������������������������������������������������������������������������������Amazon "
"SES��� "
"*���������������������*������������������������������������������������������������Amazon "
"SES������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:62
msgid ""
"You can send mail to verified email addresses and domains or to the https://"
"docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-simulator."
"html[Amazon SES mailbox simulator]"
msgstr ""
"������������������������������������������������������������������������������������ "
"link:https://docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-"
"simulator.html[Amazon "
"SES������������������������������������������]���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:63
msgid "You can only send mail from verified email addresses and domains"
msgstr ""
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:64
msgid "You can send a maximum of 1 message per second."
msgstr ""
"1���������������1���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:66
msgid ""
"Going production, you'd need to get your account of the sandbox following "
"the https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-"
"access.html[Amazon procedure]."
msgstr ""
"������������������������ link:https://docs.aws.amazon.com/ses/latest/"
"DeveloperGuide/request-production-access."
"html[Amazon���������]������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/amazon-ses.adoc:67
#, no-wrap
msgid "Set up AWS SES"
msgstr "AWS SES���������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:71
msgid ""
"We assume you are going to use AWS SES sandbox for the sake of this guide. "
"But before sending any email, you must verify sender and recipient email "
"addresses using AWS CLI.  You can use your personal email or any temporary "
"email service available if you wish."
msgstr ""
"������������������������AWS "
"SES������������������������������������������������������������������������������������������������������������������AWS "
"CLI���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:76
#, no-wrap
msgid ""
"aws ses verify-email-identity --email-address <sender@email.address>\n"
"aws ses verify-email-identity --email-address <recipient@email.address>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:78
msgid ""
"Now, you need to open a mailboxes of those email addresses in order to "
"follow confirmation procedure. Once email is approved you can use it in your "
"application."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:81
msgid ""
"If you are using local SES you still need to verify email addresses, "
"otherwise your send email in order to let local SES accepting your request.  "
"However, no emails to be send as it only mocks the service APIs."
msgstr ""
"������������SES���������������������������������������������������������������������������������������������������������������������������������������SES������������������������������������������������������������������������������������������������������API������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:86
#, no-wrap
msgid ""
"aws ses verify-email-identity --email-address <sender@email.address> --"
"profile localstack --endpoint-url=http://localhost:8012\n"
"aws ses verify-email-identity --email-address <recipient@email.address> --"
"profile localstack --endpoint-url=http://localhost:8012\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:90
msgid ""
"The application built here allows sending text emails to the recipients that "
"are verified on AWS SES."
msgstr ""
"������������������������������������������������������AWS "
"SES���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:97
msgid ""
"The solution is located in the `amazon-ses-quickstart` {quickstarts-tree-"
"url}/amazon-ses-quickstart[directory]."
msgstr ""
"������������������������ `amazon-ses-quickstart` {quickstarts-tree-url}/"
"amazon-ses-quickstart[directory] ������������������"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:40
#, no-wrap, fuzzy
msgid "Creating the Maven project"
msgstr "Maven���������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:111
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-ses-quickstart \\\n"
"    -DclassName=\"org.acme.ses.QuarkusSesSyncResource\" \\\n"
"    -Dpath=\"/sync\" \\\n"
"    -Dextensions=\"resteasy-jackson,amazon-ses,resteasy-mutiny\"\n"
"cd amazon-ses-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:115
msgid ""
"This command generates a Maven structure importing the RESTEasy/JAX-RS, "
"Mutiny and Amazon SES Client extensions.  After this, the `amazon-ses` "
"extension has been added to your `pom.xml` as well as the Mutiny support for "
"RESTEasy."
msgstr ""
"������������������������RESTEasy/JAX-RS���Mutiny���Amazon SES "
"Client������������������������������������������������Maven��������������������������������������������� "
"`pom.xml` ������������RESTEasy���Mutiny��������������������������� `amazon-"
"ses` ������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:115
#, no-wrap, fuzzy
msgid "Creating JSON REST service"
msgstr "JSON REST���������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:119
msgid ""
"Lets create a `org.acme.ses.QuarkusSesSyncResource` that will provide an API "
"to send emails using the synchronous client."
msgstr ""
"������������������������������������������������������������������������������API��������������� "
"`org.acme.ses.QuarkusSesSyncResource` ���������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:123 upstream/_guides/amazon-ses.adoc:225
#, no-wrap
msgid "package org.acme.ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:132
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.ses.model.Email;\n"
"import software.amazon.awssdk.services.ses.SesClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:137
#, no-wrap
msgid ""
"@Path(\"/sync\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarkusSesSyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:140
#, no-wrap
msgid "    @Inject\n"
"    SesClient ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:152
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/email\")\n"
"    public String encrypt(Email data) {\n"
"        return ses.sendEmail(req -> req\n"
"            .source(data.getFrom())\n"
"            .destination(d -> d.toAddresses(data.getTo()))\n"
"            .message(msg -> msg\n"
"                .subject(sub -> sub.data(data.getSubject()))\n"
"                .body(b -> b.text(txt -> txt.data(data.getBody())))))."
"messageId();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:154
#, no-wrap
msgid "Configuring SES clients"
msgstr "SES���������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:159
msgid ""
"Both SES clients (sync and async) are configurable via the `application."
"properties` file that can be provided in the `src/main/resources` directory. "
" Additionally, you need to add to the classpath a proper implementation of "
"the sync client. By default the extension uses the URL connection HTTP "
"client, so you need to add a URL connection client dependency to the `pom."
"xml` file:"
msgstr ""
"SES ������������������ (sync ��� async) ������ `src/main/resources` "
"��������������������������� `application.properties` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"URL ������ HTTP ������������������������������������������URL "
"������������������������������������������ `pom.xml` "
"���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:329
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:169
msgid ""
"If you want to use Apache HTTP client instead, configure it as follows:"
msgstr ""
"������������Apache "
"HTTP������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:172
#, no-wrap
msgid "quarkus.ses.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:175
msgid "And add the following dependency to the application `pom.xml`:"
msgstr ""
"��������������������������������������������������������������� `pom."
"xml`���������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:344
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:184
msgid "If you're going to use a local SES instance, configure it as follows:"
msgstr ""
"���������������SES���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:188
#, no-wrap
msgid "quarkus.ses.endpoint-override=http://localhost:8012\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:193
#, no-wrap
msgid ""
"quarkus.ses.aws.region=us-east-1\n"
"quarkus.ses.aws.credentials.type=static\n"
"quarkus.ses.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.ses.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:196
msgid ""
"`quarkus.ses.aws.region` - It's required by the client, but since you're "
"using a local SES instance use `us-east-1` as it's a default region of "
"localstack's SES."
msgstr ""
"`quarkus.ses.aws.region` - "
"������������������������������������������������������SES���������������������������������������������������������������������������SES������������������������������������������ "
"`us-east-1` ������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:197
msgid ""
"`quarkus.ses.aws.credentials.type` - Set `static` credentials provider with "
"any values for `access-key-id` and `secret-access-key`"
msgstr ""
"`quarkus.ses.aws.credentials.type` - `static` "
"������������������������������������������ `access-key-id` ��� `secret-"
"access-key`���������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:198
msgid ""
"`quarkus.ses.endpoint-override` - Override the SES client to use a local "
"instance instead of an AWS service"
msgstr ""
"`quarkus.ses.endpoint-override` - SES "
"������������������������������������������������ AWS "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:201
msgid ""
"If you want to work with an AWS account, you can simply remove or comment "
"out all Amazon SES related properties. By default, the SES client extension "
"will use the `default` credentials provider chain that looks for credentials "
"in this order:"
msgstr ""
"AWS���������������������������������������������Amazon "
"SES���������������������������������������������������������������������������������������������������������������������SES������������������������������������������������`default` "
"���������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:205
msgid "And the region from your AWS CLI profile will be used."
msgstr ""
"������������AWS "
"CLI������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:374
#, no-wrap, fuzzy
msgid "Next steps"
msgstr "������������������"

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:376
#, no-wrap, fuzzy
msgid "Packaging"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:212
msgid ""
"Packaging your application is as simple as `./mvnw clean package`.  It can "
"be run with `java -jar target/amazon-ses-quickstart-1.0-SNAPSHOT-runner.jar`."
""
msgstr ""
"������������������������������������������������ `./mvnw clean package` "
"��������������������������� `java -jar target/amazon-ses-quickstart-1.0-"
"SNAPSHOT-runner.jar` ������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:383
#, fuzzy
msgid ""
"With GraalVM installed, you can also create a native executable binary: `./"
"mvnw clean package -Dnative`.  Depending on your system, that will take some "
"time."
msgstr ""
"GraalVM���������������������������������������������������������������������������������������������������������������:"
" `./mvnw clean package -Dnative`."
"���������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:384
#, no-wrap, fuzzy
msgid "Going asynchronous"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:387
#, fuzzy
msgid ""
"Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the "
"asynchronous programming model out of the box."
msgstr ""
"Quarkus������������������������������������AWS SDK v2."
"x���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:221
msgid ""
"Create a `org.acme.ses.QuarkusSesAsyncResource` REST resource that will be "
"similar to our `QuarkusSesSyncResource` but using an asynchronous "
"programming model."
msgstr ""
"`org.acme.ses.QuarkusSesAsyncResource` REST��������������������������������� "
"`QuarkusSesSyncResource` "
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:236
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.ses.model.Email;\n"
"import software.amazon.awssdk.services.ses.SesAsyncClient;\n"
"import software.amazon.awssdk.services.ses.model.SendEmailResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:241
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarkusSesAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:244
#, no-wrap
msgid "    @Inject\n"
"    SesAsyncClient ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:259
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/email\")\n"
"    public Uni<String> encrypt(Email data) {\n"
"        return Uni.createFrom()\n"
"            .completionStage(\n"
"                ses.sendEmail(req -> req\n"
"                    .source(data.getFrom())\n"
"                    .destination(d -> d.toAddresses(data.getTo()))\n"
"                    .message(msg -> msg\n"
"                        .subject(sub -> sub.data(data.getSubject()))\n"
"                        .body(b -> b.text(txt -> txt.data(data."
"getBody()))))))\n"
"            .onItem().apply(SendEmailResponse::messageId);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:261
msgid ""
"We create `Uni` instances from the `CompletionStage` objects returned by the "
"asynchronous SES client, and then transform the emitted item."
msgstr ""
"���������SES������������������������������������ `CompletionStage` "
"������������������������ `Uni` "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:263
msgid "And we need to add the Netty HTTP client dependency to the `pom.xml`:"
msgstr ""
"������������NETTY HTTP��������������������������������� `pom."
"xml`���������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:477
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/performance-measure.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Measuring Performance"
msgstr "Quarkus - ������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:11
#, fuzzy
msgid "This guide covers:"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:13
#, fuzzy
msgid "how we measure memory usage"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:14
#, fuzzy
msgid "how we measure startup time"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:15
#, fuzzy
msgid "which additional flags will Quarkus apply to native-image by default"
msgstr ""
"Quarkus������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:18
#, fuzzy
msgid ""
"All of our tests are run on the same hardware for a given batch.  It goes "
"without saying but it's better when you say it."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/performance-measure.adoc:19
#, no-wrap, fuzzy
msgid "How do we measure memory usage"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:24
#, fuzzy
msgid ""
"When measuring the footprint of a Quarkus application, we measure https://en."
"wikipedia.org/wiki/Resident_set_size[Resident Set Size (RSS)] and not the "
"JVM heap size which is only a small part of the overall problem.  The JVM "
"not only allocates native memory for heap (`-Xms`, `-Xmx`) but also "
"structures required by the jvm to run your application. Depending on the JVM "
"implementation, the total memory allocated for an application will include, "
"but not limited to:"
msgstr ""
"Quarkus��������������������������������������������������������������������������� "
"link:https://en.wikipedia.org/wiki/"
"Resident_set_size[���������������������������RSS������]������������JVM���������������������������������������������������������������������������������JVM���������������������������������������������( "
"`-Xms`, `-"
"Xmx`)������������������������������������������������������������������������������������jvm���������������������������������������������������JVM���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:26
#, fuzzy
msgid "Heap space"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:27
#, fuzzy
msgid "Class metadata"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:28
#, fuzzy
msgid "Thread stacks"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:29
#, fuzzy
msgid "Compiled code"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:30
#, fuzzy
msgid "Garbage collection"
msgstr "���������������"

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:31
#, no-wrap, fuzzy
msgid "Native Memory Tracking"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:34
#, fuzzy
msgid ""
"In order to view the native memory used by the JVM, you can enable the https:"
"//docs.oracle.com/javase/8/docs/technotes/guides/vm/nmt-8.html[Native Memory "
"Tracking] (NMT) feature in hotspot;"
msgstr ""
"JVM������������������������������������������������������������������������hotspot���NMT( "
"link:https://docs.oracle.com/javase/8/docs/technotes/guides/vm/nmt-8."
"html[Native Memory Tracking])������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:36
#, fuzzy
msgid "Enable NMT on the command line;"
msgstr "������������������������NMT������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:38
#, no-wrap, fuzzy
msgid " -XX:NativeMemoryTracking=[off | summary | detail] <1>\n"
msgstr ""
"<pre>-XX:NativeMemoryTracking=[off | summary | detail]<b class="
"\"conum\">(1)</b></pre>"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:40
#, fuzzy
msgid ""
"NOTE: this feature will add cause an approximately 5-10% performance "
"overhead"
msgstr ""
"<div class=\"title\">\n"
"  ������������ \n"
"</div>  ��������������������� 5-10% "
"���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:42
#, fuzzy
msgid ""
"It is then possible to use jcmd to dump a report of the native memory usage "
"of the Hotspot JVM running your application;"
msgstr ""
"������������jcmd���������������������������������������������������������Hotspot "
"JVM���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:44
#, no-wrap, fuzzy
msgid ""
" jcmd <pid> VM.native_memory [summary | detail | baseline | summary.diff | "
"detail.diff | shutdown] [scale= KB | MB | GB]\n"
msgstr ""
"<pre>jcmd &lt;pid&gt; VM.native_memory [summary | detail | baseline | "
"summary.diff | detail.diff | shutdown] [scale= KB | MB | GB] [scale= KB | MB "
"| GB</pre>"

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:45
#, no-wrap, fuzzy
msgid "Cloud Native Memory Limits"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:49
#, fuzzy
msgid ""
"It is important to measure the whole memory to see the impact of a Cloud "
"Native application.  It is particularly true of container environments which "
"will kill a process based on its full RSS memory usage."
msgstr ""
"Cloud "
"Native������������������������������������������������������������������������������������������������������������������������������������������������RSS���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:53
#, fuzzy
msgid ""
"Likewise, don't fall into the trap of only measuring private memory which is "
"what the process uses that is not shareable with other processes.  While "
"private memory might be useful in a environment deploying many different "
"applications (and thus sharing memory a lot), it is very misleading in "
"environments like Kubernetes/OpenShift."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Kubernetes/"
"OpenShift���������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:54
#, no-wrap, fuzzy
msgid "Platform Specific Memory Reporting"
msgstr "������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:57
#, fuzzy
msgid ""
"In order to not incur the performance overhead of running with NVM enabled, "
"we measure the total RSS of an JVM application using tools specific to each "
"platform."
msgstr ""
"NVM���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������JVM������������������������������RSS���������������������"

#. type: Labeled list
#: upstream/_guides/performance-measure.adoc:58
#, no-wrap, fuzzy
msgid "Linux"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:61
#, fuzzy
msgid ""
"The linux https://linux.die.net/man/1/pmap[pmap] and https://linux.die.net/"
"man/1/ps[ps] tools provide a report on the native memory map for a process"
msgstr ""
"Linux ��� link:https://linux.die.net/man/1/pmap[pmap]��� link:https://linux."
"die.net/man/1/"
"ps[ps]������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:65
#, no-wrap
msgid " $ ps -o pid,rss,command -p <pid>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:68
#, no-wrap
msgid ""
"   PID   RSS COMMAND\n"
" 11229 12628 ./target/getting-started-1.0-SNAPSHOT-runner\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:73
#, no-wrap
msgid " $ pmap -x <pid>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:87
#, no-wrap
msgid ""
" 13150:   /data/quarkus-application -Xmx100m -Xmn70m\n"
" Address           Kbytes     RSS   Dirty Mode  Mapping\n"
" 0000000000400000   55652   30592       0 r-x-- quarkus-application\n"
" 0000000003c58000       4       4       4 r-x-- quarkus-application\n"
" 0000000003c59000    5192    4628     748 rwx-- quarkus-application\n"
" 00000000054c0000     912     156     156 rwx--   [ anon ]\n"
" ...\n"
" 00007fcd13400000    1024    1024    1024 rwx--   [ anon ]\n"
" ...\n"
" 00007fcd13952000       8       4       0 r-x-- libfreebl3.so\n"
" ...\n"
" ---------------- ------- ------- -------\n"
" total kB         9726508  256092  220900\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:90
#, fuzzy
msgid "Each Memory region that has been allocated for the process is listed;"
msgstr ""
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:92
#, fuzzy
msgid "Address: Start address of virtual address space"
msgstr "������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:93
#, fuzzy
msgid "Kbytes: Size (kilobytes) of virtual address space reserved for region"
msgstr ""
"Kbytes������������������������������������������������������������������������������������������������ "
"(���������������)"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:94
#, no-wrap, fuzzy
msgid ""
"RSS:     Resident set size (kilobytes).  This is the measure of how much "
"memory space is actually being used\n"
msgstr ""
"RSS������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:95
#, no-wrap, fuzzy
msgid "Dirty:   dirty pages (both shared and private) in kilobytes\n"
msgstr ""
"������������: ������������������������ "
"(������������������������������������������) "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:96
#, no-wrap, fuzzy
msgid "Mode:    Access mode for memory region\n"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:97
#, no-wrap, fuzzy
msgid ""
"Mapping: Includes application regions and Shared Object (.so) mappings for "
"process\n"
msgstr ""
"���������������������������������������������������������������������������������������������(."
"so)���������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:99
#, fuzzy
msgid ""
"The Total RSS (kB) line reports the total native memory the process is using."
""
msgstr ""
"Total RSS "
"(kB)������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/performance-measure.adoc:100
#, no-wrap, fuzzy
msgid "macOS"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:102
#, fuzzy
msgid ""
"On macOS, you can use `ps x -o pid,rss,command -p <PID>` which list the RSS "
"for a given process in KB (1024 bytes)."
msgstr ""
"macOS���������������������������������RSS���KB(1024���������)��������������������������� "
"`ps x -o pid,rss,command -p &amp;lt;PID&amp;gt;` "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:106
#, no-wrap
msgid "$ ps x -o pid,rss,command -p 57160\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:109
#, no-wrap
msgid ""
"  PID    RSS COMMAND\n"
"57160 288548 /Applications/IntelliJ IDEA CE.app/Contents/jdk/Contents/Home/"
"jre/bin/java\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:112
#, fuzzy
msgid "Which means IntelliJ IDEA consumes 281,8 MB of resident memory."
msgstr ""
"������������IntelliJ "
"IDEA���281,8MB���������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/performance-measure.adoc:113
#, no-wrap, fuzzy
msgid "How do we measure startup time"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:118
#, fuzzy
msgid ""
"Some frameworks use aggressive lazy initialization techniques.  It is "
"important to measure the startup time to first request to most accurately "
"reflect how long a framework needs to start.  Otherwise, you will miss the "
"time the framework _actually_ takes to initialize."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"_���������_������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:120
#, fuzzy
msgid "Here is how we measure startup time in our tests."
msgstr ""
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:122
#, fuzzy
msgid ""
"We create a sample application that logs timestamps for certain points in "
"the application lifecycle."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:127
#, no-wrap
msgid "@Path(\"/\")\n"
"public class GreetingEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:129
#, no-wrap
msgid "    private static final String template = \"Hello, %s!\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:138
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/greeting\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public Greeting greeting(@QueryParam(\"name\") String name) {\n"
"        System.out.println(new SimpleDateFormat(\"HH:mm:ss.SSS\").format(new "
"java.util.Date(System.currentTimeMillis())));\n"
"        String suffix = name != null ? name : \"World\";\n"
"        return new Greeting(String.format(template, suffix));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:143
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent startup) {\n"
"        System.out.println(new SimpleDateFormat(\"HH:mm:ss.SSS\").format(new "
"Date()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:146
#, fuzzy
msgid ""
"We start looping in a shell, sending requests to the rest endpoint of the "
"sample application we are testing."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:150
#, no-wrap
msgid ""
"$ while [[ \"$(curl -s -o /dev/null -w ''%{http_code}'' localhost:8080/api/"
"greeting)\" != \"200\" ]]; do sleep .00001; done\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:153
#, fuzzy
msgid ""
"In a separate terminal, we start the timing application that we are testing, "
"printing the time the application starts"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:157
#, no-wrap
msgid "$ date +\"%T.%3N\" &&  ./target/quarkus-timing-runner\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/performance-measure.adoc:163
#, no-wrap
msgid ""
"10:57:32.508\n"
"10:57:32.512\n"
"2019-04-05 10:57:32,512 INFO  [io.quarkus] (main) Quarkus 0.11.0 started in "
"0.002s. Listening on: http://127.0.0.1:8080\n"
"2019-04-05 10:57:32,512 INFO  [io.quarkus] (main) Installed features: [cdi, "
"resteasy, resteasy-jackson]\n"
"10:57:32.537\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:166
#, fuzzy
msgid ""
"The difference between the final timestamp and the first timestamp is the "
"total startup time for the application to serve the first request."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/performance-measure.adoc:167
#, no-wrap, fuzzy
msgid "Additional flags applied by Quarkus"
msgstr "Quarkus���������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:170
#, fuzzy
msgid ""
"When Quarkus invokes GraalVM `native-image` it will apply some additional "
"flags by default."
msgstr ""
"Quarkus���GraalVM��������������������� `native-image` "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:172
#, fuzzy
msgid ""
"You might want to know about the following ones in case you're comparing "
"performance properties with other builds."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:173
#, no-wrap, fuzzy
msgid "Disable fallback images"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:177
#, fuzzy
msgid ""
"Fallback native images are a feature of GraalVM to \"fall back\" to run your "
"application in the normal JVM, should the compilation to native code fail "
"for some reason."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������JVM������������������������������������������������������������������GraalVM������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:180
#, fuzzy
msgid ""
"Quarkus disables this feature by setting `-H:FallbackThreshold=0`: this will "
"ensure you get a compilation failure rather risking to not notice that the "
"application is unable to really run in native mode."
msgstr ""
"Quarkus������ `-H:FallbackThreshold=0` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:182
#, fuzzy
msgid ""
"If you instead want to just run in Java mode, that's totally possible: just "
"skip the native-image build and run it as a jar."
msgstr ""
"������������ Java "
"��������������������������������������������������������������������������������������������������� "
"jar ���������������������������������������������"

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:183
#, no-wrap, fuzzy
msgid "Disable Isolates"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:186
#, fuzzy
msgid ""
"Isolates are a neat feature of GraalVM, but Quarkus isn't using them at this "
"stage."
msgstr ""
"���������������������GraalVM������������������������������Quarkus���������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:188
#, fuzzy
msgid "Disable via `-H:-SpawnIsolates`."
msgstr "`-H:-SpawnIsolates` ���������������������"

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:189
#, no-wrap, fuzzy
msgid "Disable auto-registration of all Service Loader implementations"
msgstr ""
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:193
#, fuzzy
msgid ""
"Quarkus extensions can automatically pick the right services they need, "
"while GraalVM's native-image defaults to include all services it's able to "
"find on the classpath."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������GraalVM���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:195
#, fuzzy
msgid ""
"We prefer listing services explicitly as it produces better optimised "
"binaries. Disable it as well by setting `-H:-UseServiceLoaderFeature`."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������ "
"`-H:-UseServiceLoaderFeature`."

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:196
#, no-wrap, fuzzy
msgid "Better default for Garbage Collection implementation"
msgstr ""
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:199
#, fuzzy
msgid ""
"The default in GraalVM seems meant to optimise for short lived processes."
msgstr ""
"GraalVM���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:202
#, no-wrap, fuzzy
msgid ""
"Quarkus defaults to server applications, so we switch to a better default by "
"setting\n"
" `-H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge."
"CollectionPolicy$BySpaceAndTime`.\n"
msgstr ""
"Quarkus������������������������������������������������������������������������������������ "
"`-H:InitialCollectionPolicy=com.oracle.svm.core.genscavenge."
"CollectionPolicy$BySpaceAndTime`."

#. type: Title ===
#: upstream/_guides/performance-measure.adoc:203
#, no-wrap, fuzzy
msgid "Others ..."
msgstr "���������..."

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:208
#, no-wrap, fuzzy
msgid ""
"This section is provided as high level guidance, but can't presume to be "
"comprehensive as some flags are controlled\n"
" dynamically by the extensions, the platform you're building on, "
"configuration details, your code and possibly\n"
" a combination of any of these.\n"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:211
#, fuzzy
msgid ""
"Generally speaking the ones listed here are those most likely to affect "
"performance metrics, but in the right circumstances one could observe non "
"negligible impact from the other flags too."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/performance-measure.adoc:214
#, fuzzy
msgid ""
"If you're to investigate some differences in detail make sure to check what "
"Quarkus is invoking exactly: when the build plugin is producing a native "
"image, the full command lines are logged."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cassandra.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using the Cassandra Client"
msgstr "Quarkus - Cassandra���������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:13
#, fuzzy
msgid ""
"Apache Cassandra�� is a free and open-source, distributed, wide column "
"store, NoSQL database management system designed to handle large amounts of "
"data across many commodity servers, providing high availability with no "
"single point of failure."
msgstr ""
"Apache "
"Cassandra�����������������������������������������������������������������������������������NoSQL���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:15
#, fuzzy
msgid ""
"In this guide, we will see how you can get your REST services to use a "
"Cassandra database."
msgstr ""
"������������������������REST���������������Cassandra���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:25
#, fuzzy
msgid ""
"GraalVM installed with `GRAALVM_HOME` configured appropriately if you want "
"to use the native mode."
msgstr ""
"������������������������������������������������������ `GRAALVM_HOME` "
"������������������������ GraalVM ������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:27
#, fuzzy
msgid "Cassandra or Docker installed"
msgstr "Cassandra���������Docker���������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:32
#, fuzzy
msgid ""
"The application built in this guide is quite simple: the user can add "
"elements in a list using a form, and the items list is updated."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:34
#, fuzzy
msgid ""
"All the information between the browser and the server is formatted as JSON."
msgstr ""
"������������������������������������������������JSON������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:36
#, fuzzy
msgid "The elements are stored in the Cassandra database."
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:45
#, fuzzy
msgid ""
"The solution is located in the `quickstart` link:https://github.com/datastax/"
"cassandra-quarkus/tree/master/quickstart[directory]."
msgstr ""
"������������������������ `quickstart`  link:https://github.com/datastax/"
"cassandra-quarkus/tree/master/"
"quickstart[������������������]������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:50
#, fuzzy
msgid ""
"First, create a new Maven project and copy the `pom.xml` file that is "
"present in the `quickstart` directory."
msgstr ""
"������������������Maven��������������������������������� `quickstart` "
"��������������������������������� `pom.xml` "
"������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:53
#, fuzzy
msgid ""
"The `pom.xml` is importing the RESTEasy/JAX-RS, JSON-B, Context Propagation "
"and Cassandra Client extensions."
msgstr ""
"`pom.xml` ������RESTEasy/JAX-RS���JSON-B���Context "
"Propagation���Cassandra������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:57
#, fuzzy
msgid ""
"We will be building a REST application using the link:https://docs.datastax."
"com/en/developer/java-driver/latest/manual/mapper[DataStax Object Mapper] to "
"simplify the Data Access Layer code."
msgstr ""
"link:https://docs.datastax.com/en/developer/java-driver/latest/manual/"
"mapper[DataStax Object "
"Mapper]������������REST���������������������������������������Data Access "
"Layer���������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:59
#, fuzzy
msgid ""
"The most important part of the `pom.xml` is adding the `cassandra-quarkus` "
"extension:"
msgstr ""
"`pom.xml` ��������������������������� `cassandra-quarkus` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:67
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.datastax.oss.quarkus</groupId>\n"
"    <artifactId>cassandra-quarkus-client</artifactId>\n"
"    <version>${quarkus.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:73
#, fuzzy
msgid ""
"Also make sure to follow the link:https://docs.datastax.com/en/developer/"
"java-driver/latest/manual/mapper/config/[instructions] on how to add an "
"annotation processor to the compiler configuration. When the project is "
"compiled, additional mapper classes are generated."
msgstr ""
"������������������������������������������������������������������������������������������������ "
"link:https://docs.datastax.com/en/developer/java-driver/latest/manual/mapper/"
"config/"
"[������]���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:98
#, fuzzy
msgid ""
"In this example, we will create an application to manage a list of fruits."
msgstr ""
"������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:100
#, fuzzy
msgid "First, let's create the `Fruit` bean as follows:"
msgstr ""
"��������������������������� `Fruit` Bean ���������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:84
#, no-wrap
msgid "@Entity\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:88
#, no-wrap
msgid ""
"    @PartitionKey private String storeId;\n"
"    @ClusteringColumn private String name;\n"
"    private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:90
#, no-wrap
msgid "    public Fruit() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:96
#, no-wrap
msgid ""
"    public Fruit(String storeId, String name, String description) {\n"
"      this.storeId = storeId;\n"
"      this.name = name;\n"
"      this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:99
#, no-wrap
msgid "    // getters, setters, hashCode and equals omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:105
#, fuzzy
msgid ""
"We are using DataStax Java driver Object Mapper, which is why this class is "
"annotated with an `@Entity`. Also, the `storeId` field represents a "
"Cassandra partition key and `name` represents a clustering column, and so we "
"are using the corresponding annotations from the Object Mapper library.  It "
"will allow the Mapper to generate proper CQL queries underneath."
msgstr ""
"DataStax Java���������������Object "
"Mapper��������������������������������������������������� `@Entity` "
"������������������������������������������������������ `storeId` "
"������������������ Cassandra ������������������������������������������ "
"`name` ���������������������������������������������������������������Object "
"Mapper "
"���������������������������������������������������������������������������������������������������Mapper������������������������CQL������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:107
#, fuzzy
msgid "Entity classes are required to have a default no-args constructor."
msgstr ""
"��������������������������������������������������� no-args "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:109
#, fuzzy
msgid "To leverage the Mapper logic in this app we need to create a DAO:"
msgstr ""
"������������������Mapper������������������������������������DAO���������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:116
#, no-wrap
msgid ""
"@Dao\n"
"public interface FruitDao {\n"
"  @Update\n"
"  void update(Fruit fruit);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:120
#, no-wrap
msgid "  @Select\n"
"  PagingIterable<Fruit> findById(String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:123
#, fuzzy
msgid "This class exposes operations that will be used in the REST service."
msgstr ""
"���������������������REST���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:125
#, fuzzy
msgid "Finally, the Mapper itself:"
msgstr "���������Mapper���������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:133
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  @DaoFactory\n"
"  FruitDao fruitDao();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:138
#, fuzzy
msgid ""
"The mapper is responsible for constructing instances of `FruitDao`. In the "
"example above, the `FruitDao` instance will be connected to the same "
"keyspace as the underlying session. More on that below."
msgstr ""
"��������������� `FruitDao` "
"������������������������������������������������������������������������������ "
"`FruitDao` "
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:142
#, fuzzy
msgid ""
"It is also possible to create DAO instances for different keyspaces. To "
"learn how, see link:https://docs.datastax.com/en/developer/java-driver/4.7/"
"manual/mapper/mapper/#dao-parameterization[DAO parameterization] in the "
"driver docs."
msgstr ""
"��������������������������������� DAO "
"������������������������������������������������������������������������������������������������������������������ "
"link:https://docs.datastax.com/en/developer/java-driver/4.7/manual/mapper/"
"mapper/#dao-parameterization[DAO "
"������������������]������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:146
#, fuzzy
msgid ""
"Next, we need a component to create our DAO instances: `FruitDaoProducer`. "
"Indeed, Mapper and Dao instances are stateful objects, and should be created "
"only once, as application-scoped singletons.  This component will do exactly "
"that, leveraging Quarkus Dependency Injection container:"
msgstr ""
"���������DAO "
"������������������������������������������������������������������������������:"
" `FruitDaoProducer`."
"���������Mapper���Dao������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus "
"Dependency "
"Injection���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:155
#, no-wrap
msgid ""
"import com.datastax.oss.driver.api.core.CqlIdentifier;\n"
"import com.datastax.oss.quarkus.runtime.api.config.CassandraClientConfig;\n"
"import com.datastax.oss.quarkus.runtime.api.session.QuarkusCqlSession;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:157
#, no-wrap
msgid "public class FruitDaoProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:160
#, no-wrap
msgid ""
"  private final FruitDao fruitDao;\n"
"  private final FruitDaoReactive fruitDaoReactive;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:169
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitDaoProducer(QuarkusCqlSession session) {\n"
"    // create a mapper\n"
"    FruitMapper mapper = new FruitMapperBuilder(session).build();\n"
"    // instantiate our Daos\n"
"    fruitDao = mapper.fruitDao();\n"
"    fruitDaoReactive = mapper.fruitDaoReactive();\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:175
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  FruitDao produceFruitDao() {\n"
"    return fruitDao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:182
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  FruitDaoReactive produceFruitDaoReactive() {\n"
"    return fruitDaoReactive;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:186
#, fuzzy
msgid ""
"Note how the `QuarkusCqlSession` instance is injected automatically by the "
"cassandra-quarkus extension in the `FruitDaoProducer` constructor."
msgstr ""
"`QuarkusCqlSession` ������������������������ `FruitDaoProducer` "
"������������������������ cassandra-quarkus "
"���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:189
#, fuzzy
msgid ""
"Also note that `FruitMapperBuilder` is one of the classes generated "
"automatically by the `java-driver-mapper-processor` annotation processor."
msgstr ""
"��������� `FruitMapperBuilder` ��� `java-driver-mapper-processor` "
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:192
#, fuzzy
msgid ""
"Now create a `FruitService` that will be the business layer of our "
"application and store/load the fruits from the Cassandra database."
msgstr ""
"��������������������������������������������������������������������� "
"`FruitService` "
"���������������Cassandra���������������������������������������/"
"���������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:197
#, no-wrap
msgid "@ApplicationScoped\n"
"public class FruitService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:199
#, no-wrap
msgid "  private final FruitDao dao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:204
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitService(FruitDao dao) {\n"
"    this.dao = dao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:208
#, no-wrap
msgid "  public void save(Fruit fruit) {\n"
"    dao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:213
#, no-wrap
msgid ""
"  public List<Fruit> get(String id) {\n"
"    return dao.findById(id).all();\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:217
#, fuzzy
msgid ""
"Note how the service receives a `FruitDao` instance in the constructor. This "
"DAO instance is provided by `FruitDaoProducer` and injected automatically."
msgstr ""
"��������������������������������������� `FruitDao` "
"��������������������������������������������������������������������������� "
"DAO ��������������������� `FruitDaoProducer` "
"������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:219
#, fuzzy
msgid ""
"The last missing piece is the REST API that will expose GET and POST methods:"
""
msgstr ""
"���������������������������������GET���POST���������������������������REST "
"API���������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:139
#, no-wrap
msgid "@Path(\"/fruits\")\n"
"public class FruitResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:226
#, no-wrap
msgid "  private static final String STORE_NAME = \"acme\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:228
#, no-wrap
msgid "  @Inject FruitService fruitService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:235
#, no-wrap
msgid ""
"  @GET\n"
"  public List<FruitDto> list() {\n"
"    return fruitService.get(STORE_NAME).stream()\n"
"        .map(fruit -> new FruitDto(fruit.getName(), fruit.getDescription()))\n"
"        .collect(Collectors.toList());\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:240
#, no-wrap
msgid ""
"  @POST\n"
"  public void add(FruitDto fruit) {\n"
"    fruitService.save(covertFromDto(fruit));\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:245 upstream/_guides/cassandra.adoc:527
#, no-wrap
msgid ""
"  private Fruit covertFromDto(FruitDto fruitDto) {\n"
"    return new Fruit(fruitDto.getName(), fruitDto.getDescription(), "
"STORE_NAME);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:251
#, fuzzy
msgid ""
"The `list` and `add` operations are executed for the `storeId` \"acme\". "
"This is the partition key of our data model. We can easily retrieve all rows "
"from cassandra using that partition key.  They will be sorted by the "
"clustering column. `FruitResource` is using `FruitService` which "
"encapsulates the data access logic."
msgstr ""
"`list` ��� `add` ��������������� `storeId` \"acme\" "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������cassandra��������������������������������������������������������������������� "
"`FruitResource` "
"��������������������������������������������������������������������� "
"`FruitService` ���������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:257
#, fuzzy
msgid ""
"When creating the REST API we should not share the same entity object "
"between REST API and data access layers. They should not be coupled to allow "
"the API to evolve independently of the storage layer. This is the reason why "
"the API is using a `FruitDto` class. This class will be used by Quarkus to "
"convert JSON to java objects for client requests and java objects to JSON "
"for the responses. The translation is done by quarkus-resteasy extension."
msgstr ""
"REST API���������������������������REST "
"API���������������������������������������������������������������������������������������������������������������������������������������API������������������������������������������������������������������������������������������������������������������������API��� "
"`FruitDto` "
"������������������������������������������������������������������Quarkus������������������������������������������������������JSON���java������������������������������������������������������java���������������������JSON���������������������������������������������������quarkus-"
"resteasy������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:261
#, no-wrap
msgid "public class FruitDto {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:264
#, no-wrap
msgid "  private String name;\n"
"  private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:266
#, no-wrap
msgid "  public FruitDto() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:273
#, no-wrap
msgid ""
"  public FruitDto(String name, String description) {\n"
"    this.name = name;\n"
"    this.description = description;\n"
"  }\n"
"  // getters and setters omitted for brevity\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:277
#, fuzzy
msgid ""
"DTO classes used by the JSON serialization layer are required to have a "
"default no-arg constructor."
msgstr ""
"JSON ������������������������������������������������������������ DTO "
"��������������������������������� no-arg "
"������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:278
#, no-wrap, fuzzy
msgid "Configuring the Cassandra database"
msgstr "Cassandra���������������������������"

#. type: Title ===
#: upstream/_guides/cassandra.adoc:280
#, no-wrap, fuzzy
msgid "Connecting to Apache Cassandra or DataStax Enterprise (DSE)"
msgstr "Apache Cassandra���������DataStax Enterprise���DSE���������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:284
#, fuzzy
msgid ""
"The main properties to configure are: `contact-points`, to access the "
"Cassandra database, `local-datacenter`, which is required by the driver, and "
"��� optionally ��� the keyspace to bind to."
msgstr ""
"������������������������������������������������������������ `contact-"
"points` ���Cassandra������������������������������������������������ `local-"
"datacenter` ��������������������������������������������� "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:286
#, fuzzy
msgid "A sample configuration should look like this:"
msgstr "���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:292
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points={cassandra_ip}:9042\n"
"quarkus.cassandra.local-datacenter={dc_name}\n"
"quarkus.cassandra.keyspace={keyspace}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:296
#, fuzzy
msgid ""
"In this example, we are using a single instance running on localhost, and "
"the keyspace containing our data is `k1`:"
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������� "
"`k1`."

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:302
#, no-wrap
msgid ""
"quarkus.cassandra.contact-points=127.0.0.1:9042\n"
"quarkus.cassandra.local-datacenter=datacenter1\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:306
#, fuzzy
msgid ""
"If your cluster requires plain text authentication, you can also provide two "
"more settings: `username` and `password`."
msgstr ""
"��������������������������������������������������������������������� "
"`username` ��� `password`."

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:311
#, no-wrap
msgid ""
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cassandra.adoc:313
#, no-wrap, fuzzy
msgid "Connecting to a cloud DataStax Astra database"
msgstr "������������DataStax Astra������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:318
#, fuzzy
msgid ""
"When connecting to Astra, instead of providing a contact point and a "
"datacenter, you should provide `secure-connect-bundle`, which should point "
"to a valid path to an Astra secure connect bundle, as well as `username` "
"and`password`, since authentication is always required on Astra clusters."
msgstr ""
"`username` Astra "
"������������������������������������������������������������������������������������������������������������ "
"`secure-connect-bundle` ��������������������������������������� ��� Astra "
"secure connect bundle "
"���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:320
#, fuzzy
msgid "A sample configuration for DataStax Astra should look like this:"
msgstr "DataStax Astra������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:327
#, no-wrap
msgid ""
"quarkus.cassandra.cloud.secure-connect-bundle=/path/to/secure-connect-bundle."
"zip\n"
"quarkus.cassandra.auth.username=john\n"
"quarkus.cassandra.auth.password=s3cr3t\n"
"quarkus.cassandra.keyspace=k1\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cassandra.adoc:329
#, no-wrap, fuzzy
msgid "Advanced driver configuration"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:336
#, fuzzy
msgid ""
"You can configure other Java driver settings using `application.conf` or "
"`application.json` files.  They need to be located in the classpath of your "
"application.  All settings will be passed automatically to the underlying "
"driver configuration mechanism.  Settings defined in `application."
"properties` with the `quarkus.cassandra` prefix will have priority over "
"settings defined in `application.conf` or `application.json`."
msgstr ""
"`application.conf` ��������� `application.json` "
"������������������������������������ Java "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`application.properties` ��� `quarkus.cassandra` "
"��������������������������������������������������������������� `application."
"conf` ��������� `application.json` "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:339
#, fuzzy
msgid ""
"To see the full list of settings, please refer to the link:https://docs."
"datastax.com/en/developer/java-driver/latest/manual/core/configuration/"
"reference/[driver settings reference]."
msgstr ""
"��������������������������������������� link:https://docs.datastax.com/en/"
"developer/java-driver/latest/manual/core/configuration/reference/"
"[������������������������������������������]���������������������������"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:340
#, no-wrap, fuzzy
msgid "Running a Cassandra Database"
msgstr "Cassandra���������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:344
#, fuzzy
msgid ""
"By default, `CassandraClient` is configured to access a local Cassandra "
"database on port 9042 (the default Cassandra port)."
msgstr ""
"������������������������ `CassandraClient` ��������������� "
"9042��������������������� Cassandra ��������������������������� Cassandra "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:347
#, fuzzy
msgid ""
"Make sure that the setting `quarkus.cassandra.local-datacenter` matches the "
"datacenter of your Cassandra cluster."
msgstr ""
"������ `quarkus.cassandra.local-datacenter` "
"������Cassandra���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:350
#, fuzzy
msgid ""
"If you don't know the name of your local datacenter, this value can be found "
"by running the following CQL query: `SELECT data_center FROM system.local`."
msgstr ""
"������������������������������������������������������������������������������������ "
"CQL "
"������������������������������������������������������������������������������ "
"��� `SELECT data_center FROM system.local`."

#. type: Plain text
#: upstream/_guides/cassandra.adoc:353
#, fuzzy
msgid ""
"If you want to use Docker to run a Cassandra database, you can use the "
"following command to launch one:"
msgstr ""
"Docker���������������Cassandra������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:366
#, no-wrap
msgid ""
"docker run \\\n"
"   --name local-cassandra-instance \\\n"
"   -p 7000:7000 \\\n"
"   -p 7001:7001 \\\n"
"   -p 7199:7199 \\\n"
"   -p 9042:9042 \\\n"
"   -p 9160:9160 \\\n"
"   -p 9404:9404 \\\n"
"   -d \\\n"
"   launcher.gcr.io/google/cassandra3\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:370
#, fuzzy
msgid ""
"Note that only the 9042 port is required. All others all optional but "
"provide enhanced features like JMX monitoring of the Cassandra instance."
msgstr ""
"9042������������������������������������������������������������������������������������������������������������������Cassandra���������������������JMX������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:373
#, fuzzy
msgid ""
"Next you need to create the keyspace and table that will be used by your "
"application. If you are using Docker, run the following commands:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������Docker���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:378
#, no-wrap
msgid ""
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE KEYSPACE IF NOT "
"EXISTS k1 WITH replication = {'class':'SimpleStrategy', 'replication_factor':"
"1}\"\n"
"docker exec -it local-cassandra-instance cqlsh -e \"CREATE TABLE IF NOT "
"EXISTS k1.fruit(store_id text, name text, description text, PRIMARY "
"KEY((store_id), name))\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:381
#, fuzzy
msgid ""
"If you're running Cassandra locally you can execute the cqlsh commands "
"directly:"
msgstr ""
"���������������Cassandra���������������������������������cqlsh������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:386
#, no-wrap
msgid ""
"cqlsh -e \"CREATE KEYSPACE IF NOT EXISTS k1 WITH replication = {'class':"
"'SimpleStrategy', 'replication_factor':1}\n"
"cqlsh -e \"CREATE TABLE IF NOT EXISTS k1.fruit(store_id text, name text, "
"description text, PRIMARY KEY((store_id), name))\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-json.adoc:241
#, no-wrap, fuzzy
msgid "Creating a frontend"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:391
#, fuzzy
msgid "Now let's add a simple web page to interact with our `FruitResource`."
msgstr ""
"��������������� `FruitResource` "
"������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:395
#, fuzzy
msgid ""
"Quarkus automatically serves static resources located under the `META-INF/"
"resources` directory.  In the `src/main/resources/META-INF/resources` "
"directory, add a `fruits.html` file with the content from this link:https://"
"github.com/datastax/cassandra-quarkus/tree/master/quickstart/src/main/"
"resources/META-INF/resources/fruits.html[fruits.html] file in it."
msgstr ""
"Quarkus������ `META-INF/resources` "
"������������������������������������������������������������������������������������ "
"`src/main/resources/META-INF/resources` ������������������������������ link:"
"https://github.com/datastax/cassandra-quarkus/tree/master/quickstart/src/"
"main/resources/META-INF/resources/fruits.html[fruits."
"html]������������������������������ `fruits.html` "
"���������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:248
#, fuzzy
msgid "You can now interact with your REST service:"
msgstr ""
"������������REST ���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:399 upstream/_guides/cassandra.adoc:542
#, fuzzy
msgid "start Quarkus with `mvn clean quarkus:dev`"
msgstr "������������������������������ `mvn clean quarkus:dev`"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:251
#, fuzzy
msgid "open a browser to `http://localhost:8080/fruits.html`"
msgstr ""
"��������������������� `&lt;a href=\"http://localhost:8080/fruits.html\" "
"class=\"bare\"&gt;http://localhost:8080/fruits.html&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:252
#, fuzzy
msgid "add new fruits to the list via the form"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:403
#, no-wrap, fuzzy
msgid "Reactive Cassandra Client"
msgstr "������������������Cassandra������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:407
#, fuzzy
msgid ""
"When using `QuarkusCqlSession` you have access to reactive variant of "
"methods that integrate with Quarkus and Mutiny."
msgstr ""
"`QuarkusCqlSession` ���������������������Quarkus ��� Mutiny "
"���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:410
#, fuzzy
msgid ""
"If you're not familiar with Mutiny, read the link:https://quarkus.io/guides/"
"getting-started-reactive[Getting Started with Reactive guide] first."
msgstr ""
"Mutiny���������������������������������������Get link:https://quarkus.io/"
"guides/getting-started-reactive[ting Started with "
"Reactive���������]���������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:412
#, fuzzy
msgid ""
"Let's rewrite the previous example using reactive programming with Mutiny."
msgstr ""
"������������������Mutiny���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:414
#, fuzzy
msgid "Firstly, we need to implement the `@Dao` that works in a reactive way:"
msgstr ""
"������������������������������������ `@Dao` "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:419
#, no-wrap
msgid "@Dao\n"
"public interface FruitDaoReactive {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:422
#, no-wrap
msgid "  @Update\n"
"  Uni<Void> updateAsync(Fruit fruitDao);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:426
#, no-wrap
msgid ""
"  @Select\n"
"  MutinyMappedReactiveResultSet<Fruit> findByIdAsync(String id);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:433
#, fuzzy
msgid ""
"Please note the usage of `MutinyMappedReactiveResultSet` - it is a "
"specialized `Mutiny` type converted from the original `Publisher` returned "
"by the driver, which also exposes a few extra methods, e.g. to obtain the "
"query execution info. If you don't need anything in that interface, you can "
"also simply declare your method to return `Multi`: `Multi<Fruit> "
"findByIdAsync(String id)`,"
msgstr ""
"`MutinyMappedReactiveResultSet` ��������������������������������������� - "
"��������������������������������������������������� `Publisher` "
"��������������������� `Mutiny` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`Multi` ��������������������������������������������������� : "
"`Multi&amp;lt;Fruit&amp;gt; findByIdAsync(String id)`."

#. type: Plain text
#: upstream/_guides/cassandra.adoc:436
#, fuzzy
msgid ""
"Similarly, the method `updateAsync` returns a `Uni` - it is automatically "
"converted from the original result set returned by the driver."
msgstr ""
"������������������������ `updateAsync` ��� `Uni` "
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:444
#, fuzzy
msgid ""
"The Cassandra driver uses the Reactive Streams `Publisher` API for reactive "
"calls. The Quarkus framework however uses Mutiny. Because of that, the "
"`CqlQuarkusSession` interface transparently converts the `Publisher` "
"instances returned by the driver into the reactive type `Multi`.  "
"`CqlQuarkusSession` is also capable of converting a `Publisher` into a `Uni` "
"��� in this case, the publisher is expected to emit at most one row, then "
"complete. This is suitable for write queries (they return no rows), or for "
"read queries guaranteed to return one row at most (count queries, for "
"example)."
msgstr ""
"Cassandra������������������������������������������������������Reactive "
"Streams `Publisher` "
"API���������������������������������Quarkus������������������������Mutiny������������������������������������������ "
"`CqlQuarkusSession` ��������������������������������������������������� "
"`Publisher` ������������������������������������������������������ `Multi` "
"��������������������� `CqlQuarkusSession` ������ `Publisher` ��� `Uni` "
"������������������������������������ - "
"��������������������������������������������������� 1 "
"��������������������������������������������������������������������������������������������������������������������������������������� "
"1 "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:446
#, fuzzy
msgid ""
"Next, we need to adapt the `FruitMapper` to construct a `FruitDaoReactive` "
"instance:"
msgstr ""
"��������� `FruitMapper` ������������������ `FruitDaoReactive` "
"���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:452
#, no-wrap
msgid ""
"@Mapper\n"
"public interface FruitMapper {\n"
"  // the existing method omitted\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:456
#, no-wrap
msgid "  @DaoFactory\n"
"  FruitDaoReactive fruitDaoReactive();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:460
#, fuzzy
msgid ""
"Now, we can create a `FruitReactiveService` that leverages the reactive "
"`@Dao`:"
msgstr ""
"������������������������������ `@Dao` ��������������� `FruitReactiveService` "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:465
#, no-wrap
msgid "@ApplicationScoped\n"
"public class FruitReactiveService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:467
#, no-wrap
msgid "  private final FruitDaoReactive fruitDao;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:472
#, no-wrap
msgid ""
"  @Inject\n"
"  public FruitReactiveService(FruitDaoReactive fruitDao) {\n"
"    this.fruitDao = fruitDao;\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:476
#, no-wrap
msgid ""
"  public Uni<Void> add(Fruit fruit) {\n"
"    return fruitDao.update(fruit);\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:481
#, no-wrap
msgid ""
"  public Multi<Fruit> get(String id) {\n"
"    return fruitDao.findById(id);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:485
#, fuzzy
msgid ""
"The `get()` method above returns `Multi`, and the `add()` method returns "
"`Uni`; these types are compatible with the Quarkus reactive REST API."
msgstr ""
"��������� `get()` ��������������� `Multi` ������������ `add()` "
"��������������� `Uni` ���������������������������������������������Quarkus "
"��������������������� REST API ������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:488
#, fuzzy
msgid ""
"To integrate the reactive logic with REST API, you need to have a dependency "
"to `quarkus-resteasy-mutiny`:"
msgstr ""
"���������������������������������REST API������������������������ `quarkus-"
"resteasy-mutiny`."

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:424
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:498
#, fuzzy
msgid ""
"It provides an integration layer between `Multi`, `Uni` and the REST API."
msgstr ""
"`Multi`, `Uni` ��� REST API ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:500
#, fuzzy
msgid "Finally, we can create a `FruitReactiveResource`:"
msgstr "������������ `FruitReactiveResource`."

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:509
#, no-wrap
msgid ""
"@Path(\"/reactive-fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitReactiveResource {\n"
"  private static final String STORE_NAME = \"acme\";\n"
"  @Inject FruitReactiveService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:516
#, no-wrap
msgid ""
"  @GET\n"
"  public Multi<FruitDto> getAll() {\n"
"    return service\n"
"        .get(STORE_NAME)\n"
"        .map(fruit -> new FruitDto(fruit.getName(), fruit."
"getDescription()));\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:522
#, no-wrap
msgid ""
"  @POST\n"
"  public Multi<FruitDto> add(FruitDto fruitDto) {\n"
"    Fruit fruit = covertFromDto(fruitDto);\n"
"    return service.add(fruit).then(ignored -> getAll());\n"
"  }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:530
#, fuzzy
msgid ""
"All methods exposed via REST interface are returning reactive types from the "
"Mutiny API."
msgstr ""
"REST���������������������������������������������������������������������������������������Mutiny "
"API���������������������������������������"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:531
#, no-wrap, fuzzy
msgid "Creating a reactive frontend"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:538
#, fuzzy
msgid ""
"Now let's add a simple web page to interact with our `FruitReactiveResource`."
"  In the `src/main/resources/META-INF/resources` directory, add a `reactive-"
"fruits.html` file with the content from this link:https://github.com/"
"datastax/cassandra-quarkus/tree/master/quickstart/src/main/resources/META-"
"INF/resources/reactive-fruits.html[reactive-fruits.html] file in it."
msgstr ""
"������������ `FruitReactiveResource` "
"������������������������������������������������������������������������������������ "
"`src/main/resources/META-INF/resources` ������������������������������ link:"
"https://github.com/datastax/cassandra-quarkus/tree/master/quickstart/src/"
"main/resources/META-INF/resources/reactive-fruits.html[reactive-fruits."
"html]������������������������������ `reactive-fruits.html` "
"���������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:540
#, fuzzy
msgid "You can now interact with your reactive REST service:"
msgstr ""
"��������������������������������� REST "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:543
#, fuzzy
msgid "open a browser to `http://localhost:8080/reactive-fruits.html`"
msgstr ""
"��������������������� `&lt;a href=\"http://localhost:8080/reactive-fruits."
"html\" class=\"bare\"&gt;http://localhost:8080/reactive-fruits.html&lt;/"
"a&gt;`"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:546
#, no-wrap, fuzzy
msgid "Connection Health Check"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:550
#, fuzzy
msgid ""
"If you are using the `quarkus-smallrye-health` extension, `cassandra-"
"quarkus` will automatically add a readiness health check to validate the "
"connection to the cluster."
msgstr ""
"`quarkus-smallrye-health` "
"��������������������������������������������������� `cassandra-quarkus` "
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:553
#, fuzzy
msgid ""
"So when you access the `/health/ready` endpoint of your application you will "
"have information about the connection validation status."
msgstr ""
"������������������������������������������ `/health/ready` "
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:556
#, fuzzy
msgid ""
"This behavior can be disabled by setting the `quarkus.cassandra.health."
"enabled` property to `false` in your `application.properties`."
msgstr ""
"������������������ `application.properties` ��� `quarkus.cassandra.health."
"enabled` ������������������ `false` "
"������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cassandra.adoc:557
#, no-wrap, fuzzy
msgid "Metrics"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:561
#, fuzzy
msgid ""
"If you are using the `quarkus-smallrye-metrics` extension, `cassandra-"
"quarkus` can provide metrics about QuarkusCqlSession and Cassandra nodes."
msgstr ""
"`quarkus-smallrye-metrics` ������������������������������������������ "
"`cassandra-quarkus` ������QuarkusCqlSession ��� Cassandra "
"������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:564
#, fuzzy
msgid ""
"This behavior must first be enabled by setting the `quarkus.cassandra."
"metrics.enabled` property to `true` in your `application.properties`."
msgstr ""
"��������������������������������������������� `application.properties`.NET "
"Framework ��� `quarkus.cassandra.metrics.enabled` ������������������ `true` "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:566
#, fuzzy
msgid ""
"The next step that you need to do is set explicitly which metrics should be "
"enabled."
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:571
#, fuzzy
msgid ""
"The `quarkus.cassandra.metrics.session-enabled` and `quarkus.cassandra."
"metrics.node-enabled` properties should be used for enabling metrics; the "
"former should contain a list of session-level metrics to enable, while the "
"latter should contain a list of node-level metrics to enable. Both "
"properties accept a comma-separated list of valid metric names."
msgstr ""
"`quarkus.cassandra.metrics.session-enabled` `quarkus.cassandra.metrics.node-"
"enabled` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:574
#, fuzzy
msgid ""
"For example, to enable `session.connected-nodes`, `session.bytes-sent`, and "
"`node.pool.open-connections` you should add the following settings to your "
"`application.properties`:"
msgstr ""
"������������ `session.connected-nodes`, `session.bytes-sent`, `node.pool."
"open-connections` ��������������������������������������������� `application."
"properties`."

#. type: delimited block -
#: upstream/_guides/cassandra.adoc:580
#, no-wrap
msgid ""
"quarkus.cassandra.metrics.enabled=true\n"
"quarkus.cassandra.metrics.session-enabled=connected-nodes,bytes-sent\n"
"quarkus.cassandra.metrics.node-enabled=pool.open-connections\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cassandra.adoc:585
#, fuzzy
msgid ""
"For the full list of available metrics, please refer to the link:https://"
"docs.datastax.com/en/developer/java-driver/latest/manual/core/configuration/"
"reference/[driver settings reference] and the `advanced.metrics` section."
msgstr ""
"��������������������������������������������������������������������� link:"
"https://docs.datastax.com/en/developer/java-driver/latest/manual/core/"
"configuration/reference/[���������������������������������������]��� "
"`advanced.metrics` ������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:588
#, fuzzy
msgid ""
"When metrics are properly enabled and when you access the `/metrics` "
"endpoint of your application, you will see metric reports for all enabled "
"metrics."
msgstr ""
"������������������������������������������������������������������������ `/"
"metrics` "
"��������������������������������������������������������������������������������������������������������������� "
"������������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:253
#, no-wrap, fuzzy
msgid "Building a native executable"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:592
#, fuzzy
msgid "You can use the Cassandra client in a native executable."
msgstr ""
"������������������������������������Cassandra���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:594
#, fuzzy
msgid ""
"You can build a native executable with the `mvn clean package -Dnative` "
"command."
msgstr ""
"`mvn clean package -Dnative` "
"������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:596
#, fuzzy
msgid ""
"Running it is as simple as executing `./target/quickstart-1.0.0-SNAPSHOT-"
"runner`."
msgstr ""
"��������� `./target/quickstart-1.0.0-SNAPSHOT-runner` "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:260
#, fuzzy
msgid ""
"You can then point your browser to `http://localhost:8080/fruits.html` and "
"use your application."
msgstr ""
"��������������������������� `&lt;a href=\"http://localhost:8080/fruits."
"html\" class=\"bare\"&gt;http://localhost:8080/fruits.html&lt;/"
"a&gt;`������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cassandra.adoc:603
#, fuzzy
msgid ""
"Accessing a Cassandra database from a client application is easy with "
"Quarkus and the Cassandra extension, which provides configuration and native "
"support for the DataStax Java driver for Apache Cassandra."
msgstr ""
"������������������������������������������������������Cassandra������������������������������������������Quarkus���Cassandra���������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/software-transactional-memory.adoc:6
#, no-wrap, fuzzy
msgid "Using Software Transactional Memory in Quarkus"
msgstr ""
"Quarkus������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:20
#, fuzzy
msgid ""
"Software Transactional Memory (STM) has been around in research environments "
"since the late 1990's and has relatively recently started to appear in "
"products and various programming languages. We won't go into all of the "
"details behind STM but the interested reader could look at https://groups."
"csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95.pdf[this paper].  "
"However, suffice it to say that STM offers an approach to developing "
"transactional applications in a highly concurrent environment with some of "
"the same characteristics of ACID transactions, which you've probably already "
"used through JTA. Importantly though, the Durability property is relaxed "
"(removed) within STM implementations, or at least made optional. This is not "
"the situation with JTA, where state changes are made durable to a relational "
"database which supports https://pubs.opengroup.org/onlinepubs/009680699/toc."
"pdf[the X/Open XA standard]."
msgstr ""
"���������������������������������������������������������(STM)������1990 "
"���������������������������������������������������������������������������������������������������������������������������������������������������STM "
"��������������������������������������������������������������������������������������������� "
"link:https://groups.csail.mit.edu/tds/papers/Shavit/ShavitTouitou-podc95."
"pdf[���������������]���������������������������������������STM ������JTA "
"��������������������������������������� ACID "
"������������������������������������������������������������������������������������������������������ "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������STM "
"��������������� Durability "
"������������������������������������������������������������������������������������������������������������������������������������ "
"link:https://pubs.opengroup.org/onlinepubs/009680699/toc.pdf[X/Open XA "
"������]��������������������������������������������������������������������������������������������������������������������������������������� "
"JTA ���������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:24
#, fuzzy
msgid ""
"Note, the STM implementation provided by Quarkus is based on the https://"
"narayana.io/docs/project/index.html#d0e16066[Narayana STM] implementation. "
"This document isn't meant to be a replacement for that project's "
"documentation so you may want to look at that for more detail. However, we "
"will try to focus more on how you can combine some of the key capabilities "
"into Quarkus when developing Kubernetes native applications and "
"microservices."
msgstr ""
"Quarkus���������������STM��������������� link:https://narayana.io/docs/"
"project/index.html#d0e16066[Narayana "
"STM���]������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Kubernetes���������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:25
#, no-wrap, fuzzy
msgid "Why use STM with Quarkus?"
msgstr "������Quarkus���STM������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:31
#, fuzzy
msgid ""
"Now you may still be asking yourself \"Why STM instead of JTA?\" or \"What "
"are the benefits to STM that I don't get from JTA?\" Let's try to answer "
"those or similar questions, with a particular focus on why we think they're "
"great for Quarkus, microservices and Kubernetes native applications. So in "
"no specific order ..."
msgstr ""
"������������������������\"������JTA������������STM������������\"���\"JTA���������������������STM���������������������������\"������������������������������������������������������������������Quarkus������������������������������Kubernetes������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"..."

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:40
#, fuzzy
msgid ""
"The goal of STM is to simplify object reads and writes from multiple threads/"
"protect state from concurrent updates. The Quarkus STM implementation will "
"safely manage any conflicts between these threads using whatever isolation "
"model has been chosen to protect that specific state instance (object in the "
"case of Quarkus). In Quarkus STM, there are two isolation implementations, "
"pessimistic (the default), which would cause conflicting threads to be "
"blocked until the original has completed its updates (committed or aborted "
"the transaction); then there's the optimistic approach which allows all of "
"the threads to proceed and checks for conflicts at commit time, where one or "
"more of the threads may be forced to abort if there have been conflicting "
"updates."
msgstr ""
"STM������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���STM���������������������������������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus "
"STM���������2���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:54
#, fuzzy
msgid ""
"STM objects have state but it doesn't need to be persistent (durable). In "
"fact the default behaviour is for objects managed within transactional "
"memory to be volatile, such that if the service or microservice within which "
"they are being used crashes or is spawned elsewhere, e.g., by a scheduler, "
"all state in memory is lost and the objects start from scratch. But surely "
"you get this and more with JTA (and a suitable transactional datastore) and "
"don't need to worry about restarting your application? Not quite. There's a "
"trade-off here: we're doing away with persistent state and the overhead of "
"reading from and then writing (and sync-ing) to the datastore during each "
"transaction. This makes updates to (volatile) state very fast but you still "
"get the benefits of atomic updates across multiple STM objects (e.g., "
"objects your team wrote then calling objects you inherited from another team "
"and requiring them to make all-or-nothing updates), as well as consistency "
"and isolation in the presence of concurrent threads/users (common in "
"distributed microservices architectures).  Furthermore, not all stateful "
"applications need to be durable - even when JTA transactions are used, it "
"tends to be the exception and not the rule. And as you'll see later, because "
"applications can optionally start and control transactions, it's possible to "
"build microservices which can undo state changes and try alternative paths."
msgstr ""
"STM "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"JTA (������������������������������������������������������) "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������:"
" ���������������������������������������������������������������������������������������������������������������������(���������������)������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"STM "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"- JTA "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:61
#, fuzzy
msgid ""
"Another benefit of STM is composability and modularity. You can write "
"concurrent Quarkus objects/services that can be easily composed with any "
"other services built using STM, without exposing the details of how the "
"objects/services are implemented. As we discussed earlier, this ability to "
"compose objects you wrote with those other teams may have written weeks, "
"months or years earlier, and have A, C and I properties can be hugely "
"beneficial. Furthermore, some STM implementations, including the one Quarkus "
"uses, support nested transactions and these allow changes made within the "
"context of a nested (sub) transaction to later be rolled back by the parent "
"transaction."
msgstr ""
"STM���������1���������������������������������������������������������������������������������/"
"���������������������������������������������������������������������������������������������STM���������������������������������������������������������������������������������������������������Quarkus������������������/"
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������A���C���I������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������STM���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:66
#, fuzzy
msgid ""
"Although the default for STM object state is volatile, it is possible to "
"configure the STM implementation such that an object's state is durable. "
"Although it's possible to configure Narayana such that different backend "
"datastores can be used, including relational databases, the default is the "
"local operating system file system, which means you don't need to configure "
"anything else with Quarkus such as a database."
msgstr ""
"STM������������������������������������������������������������������������������������������������������������������������������STM���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Narayana������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:70
#, fuzzy
msgid ""
"Many STM implementations allow \"plain old language objects\" to be made STM-"
"aware with little or no changes to the application code. You can build, test "
"and deploy applications without wanting them to be STM-aware and then later "
"add those capabilities if they become necessary and without much development "
"overhead at all."
msgstr ""
"��������� STM "
"��������������������������������������������������������������������������������������������������������������������������������� "
"STM ������������������������������������������������������������������ STM "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:71
#, no-wrap, fuzzy
msgid "Building STM applications"
msgstr "STM���������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:78
#, fuzzy
msgid ""
"There is also a fully worked example in the quickstarts which you may access "
"by cloning the Git repository: `git clone {quickstarts-clone-url}`, or by "
"downloading an {quickstarts-archive-url}[archive].  Look for the `software-"
"transactional-memory-quickstart` example. This will help to understand how "
"you can build STM-aware applications with Quarkus. However, before we do so "
"there are a few basic concepts which we need to cover."
msgstr ""
"Quickstarts ������������������������������������������Git "
"���������������������������������������������������������������������: `git "
"clone {quickstarts-clone-url}` ������������ {quickstarts-archive-"
"url}[archive] ������������������������������������������ `software-"
"transactional-memory-quickstart` "
"������������������������������������������Quarkus������������STM������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:84
#, fuzzy
msgid ""
"Note, as you will see, STM in Quarkus relies on a number of annotations to "
"define behaviours. The lack of these annotations causes sensible defaults to "
"be assumed but it is important for the developer to understand what these "
"may be. Please refer to the https://narayana.io/docs/project/index."
"html#d0e16066[Narayana STM manual] and the https://narayana.io//docs/project/"
"index.html#d0e16133[STM annotations guide] for more details on all of the "
"annotations Narayana STM provides."
msgstr ""
"���������������������Quarkus���STM������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Narayana "
"STM���������������������������������������������������������������������������Naray "
"link:https://narayana.io/docs/project/index.html#d0e16066[ana "
"STM���������������]��� link:https://narayana.io//docs/project/index."
"html#d0e16133[STM������������������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:25
#, no-wrap, fuzzy
msgid "Setting it up"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:90
#, fuzzy
msgid ""
"To use the extension include it as a dependency in your application pom:"
msgstr ""
"������������������������������������������������������������������������������������������ "
"pom ������������������������������������������"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:101
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- STM extension -->\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-narayana-stm</artifactId>\n"
"      <version>${quarkus.version}</version>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:103
#, no-wrap, fuzzy
msgid "Defining STM-aware classes"
msgstr "STM������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:111
#, fuzzy
msgid ""
"In order for the STM subsystem to have knowledge about which classes are to "
"be managed within the context of transactional memory it is necessary to "
"provide a minimal level of instrumentation. This occurs by categorising STM-"
"aware and STM-unaware classes through an interface boundary; specifically "
"all STM-aware objects must be instances of classes which inherit from "
"interfaces that themselves have been annotated to identify them as STM-aware."
" Any other objects (and their classes) which do not follow this rule will "
"not be managed by the STM subsystem and hence any of their state changes "
"will not be rolled back, for example."
msgstr ""
"STM "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"STM ������������������������������STM "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������STM "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:114
#, fuzzy
msgid ""
"The specific annotation that STM-aware application interfaces must use is "
"`org.jboss.stm.annotations.Transactional`.  For example:"
msgstr ""
"STM��������������������������������������������������������������������������������������������������������������������������� "
"`org.jboss.stm.annotations.Transactional`."
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:122
#, no-wrap
msgid ""
"@Transactional\n"
"public interface FlightService {\n"
"    int getNumberOfBookings();\n"
"    void makeBooking(String details);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:129
#, fuzzy
msgid ""
"Classes which implement this interface are able to use additional "
"annotations from Narayana to tell the STM subsystem about things such as "
"whether a method will modify the state of the object, or what state "
"variables within the class should be managed transactionally, e.g., some "
"instance variables may not need to be rolled back if a transaction aborts. "
"As mentioned earlier, if those annotations are not present then defaults are "
"chosen to guarantee safety, such as assuming all methods will modify state."
msgstr ""
"���������������������������������������������������������Narayana "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"STM "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:136
#, no-wrap
msgid ""
"public class FlightServiceImpl implements FlightService {\n"
"    @ReadLock\n"
"    public int getNumberOfBookings() { ... }\n"
"    public void makeBooking(String details) {...}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:140
#, no-wrap
msgid "    @NotState\n"
"    private int timesCalled;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:146
#, fuzzy
msgid ""
"For example, by using the `@ReadLock` annotation on the "
"`getNumberOfBookings` method, we are able to tell the STM subsystem that no "
"state modifications will occur in this object when it is used in the "
"transactional memory. Also, the `@NotState` annotation tells the system to "
"ignore `timesCalled` when transactions commit or abort, so this value only "
"changes due to application code."
msgstr ""
"������������ `getNumberOfBookings` ��������������� `@ReadLock` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"STM ��������������������������������������������������������������� "
"`@NotState` "
"��������������������������������������������������������������������������������������������������� "
"`timesCalled` "
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:149
#, fuzzy
msgid ""
"Please refer to the Narayana guide for details of how to exert finer grained "
"control over the transactional behaviour of objects that implement "
"interfaces marked with the `@Transactional` annotation."
msgstr ""
"`@Transactional` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:150
#, no-wrap, fuzzy
msgid "Creating STM objects"
msgstr "STM���������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:156
#, fuzzy
msgid ""
"The STM subsystem needs to be told about which objects it should be managing."
" The Quarkus (aka Narayana) STM implementation does this by providing "
"containers of transactional memory within which these object instances "
"reside. Until an object is placed within one of these STM containers it "
"cannot be managed within transactions and any state changes will not possess "
"the A, C, I (or even D) properties."
msgstr ""
"STM���������������������������������������������������������������������������������������������������������Quarkus���������������������������STM������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������STM���������������������������������������������������������������������������������������������������������������������������A���C���I���������������D������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:160
#, fuzzy
msgid ""
"Note, the term \"container\" was defined within the STM implementation years "
"before Linux containers came along. It may be confusing to use especially in "
"a Kubernetes native environment such as Quarkus, but hopefully the reader "
"can do the mental mapping."
msgstr ""
"������\"������������\"���������������������Linux������������������������������������������STM������������������������������������������������Quarkus������������Kubernetes���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:166
#, fuzzy
msgid ""
"The default STM container (`org.jboss.stm.Container`) provides support for "
"volatile objects that can only be shared between threads in the same "
"microservice/JVM instance. When a STM-aware object is placed into the "
"container it returns a handle through which that object should then be used "
"in the future. It is important to use this handle as continuing to access "
"the object through the original reference will not allow the STM subsystem "
"to track access and manage state and concurrency control."
msgstr ""
"������������������ STM ������������ ( `org.jboss.stm.Container`) "
"������������������������������������/JVM "
"���������������������������������������������������������������������������������������������������������������������������STM "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������STM "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:170
#, no-wrap
msgid "    import org.jboss.stm.Container;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:294
#, no-wrap
msgid "    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:176
#, no-wrap
msgid ""
"    Container<FlightService> container = new Container<>(); <1>\n"
"    FlightServiceImpl instance = new FlightServiceImpl(); <2>\n"
"    FlightService flightServiceProxy = container.create(instance); <3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:180
#, fuzzy
msgid ""
"You need to tell each Container about the type of objects for which it will "
"be responsible. In this example it will be instances that implement the "
"FlightService interface."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������FlightService "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:182
#, fuzzy
msgid ""
"Then you create an instance that implements `FlightService`. You should not "
"use it directly at this stage because access to it is not being managed by "
"the STM subsystem."
msgstr ""
"��������� `FlightService` "
"���������������������������������������������������������������������������STM "
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:184
#, fuzzy
msgid ""
"To obtain a managed instance, pass the original object to the STM "
"`container` which then returns a reference through which you will be able to "
"perform transactional operations. This reference can be used safely from "
"multiple threads."
msgstr ""
"������������������������������������������������������������������������������������ "
"STM `container` "
"������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:185
#, no-wrap, fuzzy
msgid "Defining transaction boundaries"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:190
#, fuzzy
msgid ""
"Once an object is placed within an STM container the application developer "
"can manage the scope of transactions within which it is used. There are some "
"annotations which can be applied to the STM-aware class to have the "
"container automatically create a transaction whenever a specific method is "
"invoked."
msgstr ""
"���������������������������STM���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������STM-"
"aware "
"������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/software-transactional-memory.adoc:191
#, no-wrap, fuzzy
msgid "Declarative approach"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:200
#, fuzzy
msgid ""
"If the `@NestedTopLevel` or `@Nested` annotation is placed on a method "
"signature then the STM container will start a new transaction when that "
"method is invoked and attempt to commit it when the method returns. If there "
"is a transaction already associated with the calling thread then each of "
"these annotations behaves slightly differently: the former annotation will "
"always create a new top-level transaction within which the method will "
"execute, so the enclosing transaction does not behave as a parent, i.e., the "
"nested top-level transaction will commit or abort independently; the latter "
"annotation will create a transaction with is properly nested within the "
"calling transaction, i.e., that transaction acts as the parent of this newly "
"created transaction."
msgstr ""
"`@NestedTopLevel` ��������� `@Nested` "
"���������������������������������������������������������������������������������������STM "
"������������������������������������������������������������������������������������������ "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/software-transactional-memory.adoc:201
#, no-wrap, fuzzy
msgid "Programmatic approach"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:204
#, fuzzy
msgid ""
"The application can programmatically start a transaction before accessing "
"the methods of STM objects:"
msgstr ""
"������������������������������STM���������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:208
#, no-wrap
msgid "AtomicAction aa = new AtomicAction(); <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/software-transactional-memory.adoc:221
#, no-wrap
msgid ""
"aa.begin(); <2>\n"
"{\n"
"    try {\n"
"        flightService.makeBooking(\"BA123 ...\");\n"
"        taxiService.makeBooking(\"East Coast Taxis ...\"); <3>\n"
"        <4>\n"
"        aa.commit();\n"
"        <5>\n"
"    } catch (Exception e) {\n"
"        aa.abort(); <6>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:226
#, fuzzy
msgid ""
"An object for manually controlling transaction boundaries (AtomicAction and "
"many other useful classes are included in the extension).  Refer https://"
"narayana.io//docs/api/com/arjuna/ats/arjuna/AtomicAction.html[to the "
"javadoc] for more detail."
msgstr ""
"������������������������������������������������������������������������������������ "
"(AtomicAction "
"���������������������������������������������������������������������������)������������ "
"link:https://narayana.io//docs/api/com/arjuna/ats/arjuna/AtomicAction."
"html[javadoc]������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:227
#, fuzzy
msgid "Programmatically begin a transaction."
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:230
#, fuzzy
msgid ""
"Notice that object updates can be composed which means that updates to "
"multiple objects can be committed together as a single action.  [Note that "
"it is also possible to begin nested transactions so that you can perform "
"speculative work which may then be abandoned without abandoning other work "
"performed by the outer transaction]."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:231
#, fuzzy
msgid ""
"Since the transaction has not yet been committed the changes made by the "
"flight and taxi services are not visible outside of the transaction."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:234
#, fuzzy
msgid ""
"Since the commit was successful the changes made by the flight and taxi "
"services are now visible to other threads.  Note that other transactions "
"that relied on the old state may or may not now incur conflicts when they "
"commit (the STM library provides a number of features for managing "
"conflicting behaviour and these are covered in the Narayana STM manual)."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������STM "
"��������������������������������������������������������������������������������������������������������������������������� "
"Narayana STM ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:235
#, fuzzy
msgid ""
"Programmatically decide to abort the transaction which means that the "
"changes made by the flight and taxi services are discarded."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/software-transactional-memory.adoc:236
#, no-wrap, fuzzy
msgid "Distributed transactions"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/software-transactional-memory.adoc:241
#, fuzzy
msgid ""
"Sharing a transaction between multiple services is possible but is currently "
"an advanced use case only and the Narayana documentation should be consulted "
"if this behaviour is required. In particular, STM does not yet support the "
"features described in the link:context-propagation[Context Propagation "
"guide]."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Narayana������������������������������������������������������������STM��������������������������� "
"link:context-"
"propagation[���������]������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-credentials.adoc:2
#, fuzzy
msgid "Java System Properties - `aws.accessKeyId` and `aws.secretAccessKey`"
msgstr ""
"Java������������������������������ - `aws.accessKeyId` ��� `aws."
"secretAccessKey`"

#. type: Plain text
#: upstream/_guides/amazon-credentials.adoc:3
#, fuzzy
msgid ""
"Environment Variables - `AWS_ACCESS_KEY_ID` and `AWS_SECRET_ACCESS_KEY`"
msgstr "������������ - `AWS_ACCESS_KEY_ID` ��� `AWS_SECRET_ACCESS_KEY`"

#. type: Plain text
#: upstream/_guides/amazon-credentials.adoc:4
#, fuzzy
msgid ""
"Credential profiles file at the default location (`~/.aws/credentials`) "
"shared by all AWS SDKs and the AWS CLI"
msgstr ""
"Credential profiles file at default location ( `~/.aws/credentials`) at all "
"AWS SDKs and AWS CLI shared by all AWS SDKs"

#. type: Plain text
#: upstream/_guides/amazon-credentials.adoc:5
#, fuzzy
msgid ""
"Credentials delivered through the Amazon ECS if the "
"`AWS_CONTAINER_CREDENTIALS_RELATIVE_URI` environment variable is set and the "
"security manager has permission to access the variable,"
msgstr ""
"`AWS_CONTAINER_CREDENTIALS_RELATIVE_URI` "
"������������������������������������������������������������������������������������������������������������������������������������������������Amazon "
"ECS ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-credentials.adoc:5
#, fuzzy
msgid ""
"Instance profile credentials delivered through the Amazon EC2 metadata "
"service"
msgstr ""
"Amazon "
"EC2���������������������������������������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/gradle-config.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Gradle Plugin Repositories"
msgstr "Quarkus - Gradle������������������������������"

#.  tag::repositories[]
#. type: Plain text
#: upstream/_guides/gradle-config.adoc:12
#, fuzzy
msgid ""
"The Quarkus Gradle plugin is published to the https://plugins.gradle.org/"
"plugin/io.quarkus[Gradle Plugin Portal]."
msgstr ""
"Quarkus Gradle���������������������Gradle link:https://plugins.gradle.org/"
"plugin/io.quarkus[���������������������������]������������������������������"

#. type: Plain text
#: upstream/_guides/gradle-config.adoc:14
#, fuzzy
msgid "To use it, add the following to your `build.gradle` file:"
msgstr ""
"��������������������� `build.gradle` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/gradle-config.adoc:21
#, no-wrap
msgid "plugins {\n"
"    id 'java'\n"
"    id 'io.quarkus'\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-config.adoc:24
#, fuzzy
msgid ""
"You also need to add the following at the top of your `settings.gradle` file:"
""
msgstr ""
"��������� `settings.gradle` "
"���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/gradle-config.adoc:35
#, no-wrap
msgid ""
"pluginManagement {\n"
"    repositories {\n"
"        mavenCentral()\n"
"        gradlePluginPortal()\n"
"    }\n"
"    plugins {\n"
"      id 'io.quarkus' version \"${quarkusPluginVersion}\"\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/gradle-config.adoc:38
#, fuzzy
msgid ""
"the `plugins{}` method in `settings.gradle` is not supported in Gradle 5.x. "
"In this case make sure to explicitly declare the plugin version in the "
"`build.gradle` file like the example below:"
msgstr ""
"`settings.gradle` ��� `plugins{}` ��������������� Gradle 5.x "
"��������������������������������������������������������������������������������� "
"`build.gradle` "
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/gradle-config.adoc:45
#, no-wrap
msgid ""
"plugins {\n"
"    id 'java'\n"
"    id 'io.quarkus' version '{quarkus-version}'\n"
"}\n"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/spring-cloud-config-client.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Reading properties from Spring Cloud Config Server"
msgstr ""
"Quarkus - Spring Cloud Config Server������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:12
#, fuzzy
msgid ""
"This guide explains how your Quarkus application can read configuration "
"properties at runtime from the https://cloud.spring.io/spring-cloud-"
"config[Spring Cloud Config Server]."
msgstr ""
"������������������������Quarkus��������������������������������������� link:"
"https://cloud.spring.io/spring-cloud-config[Spring Cloud Config "
"Server]������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:28
#, fuzzy
msgid ""
"We recommend that you follow the instructions in the next sections and "
"create the application step by step."
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/spring-cloud-config-client.adoc:29
#, no-wrap, fuzzy
msgid "Stand up a Config Server"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:33
#, fuzzy
msgid ""
"To stand up the Config Server required for this guide, please follow the "
"instructions outlined https://github.com/spring-guides/gs-centralized-"
"configuration#stand-up-a-config-server[here].  The end result of that "
"process is a running Config Server that will provide the `Hello world` value "
"for a configuration property named `message` when the application querying "
"the server is named `a-bootiful-client`."
msgstr ""
"��������������������������� Config Server ��������������������������� link:"
"https://github.com/spring-guides/gs-centralized-configuration#stand-up-a-"
"config-"
"server[���������]��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`a-bootiful-client` ������������������ `message` "
"��������������������������������������������������� `Hello world` "
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-cloud-config-client.adoc:47
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=spring-cloud-config-quickstart \\\n"
"    -DclassName=\"org.acme.spring.cloud.config.client.GreetingResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"spring-cloud-config-client\"\n"
"cd spring-cloud-config-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:50
#, fuzzy
msgid ""
"This command generates a Maven project with a REST endpoint and imports the "
"`spring-cloud-config-client` extension."
msgstr ""
"������������������������REST������������������������������Maven��������������������������������� "
"`spring-cloud-config-client` ���������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:53
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `spring-"
"cloud-config-client` extension to your project by running the following "
"command in your project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`spring-cloud-config-client` "
"���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-cloud-config-client.adoc:57
#, no-wrap
msgid ""
"./mvnw quarkus:add-extension -Dextensions=\"spring-cloud-config-client\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-cloud-config-client.adoc:67
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-cloud-config-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/consul-config.adoc:80
#, no-wrap, fuzzy
msgid "GreetingController"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:73
#, fuzzy
msgid ""
"The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS "
"resource in the `src/main/java/org/acme/spring/cloud/config/client/"
"GreetingResource.java` file that looks like:"
msgstr ""
"Quarkus Maven��������������������� `src/main/java/org/acme/spring/cloud/"
"config/client/GreetingResource.java` ������������������ `GreetingResource` "
"JAX-"
"RS���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-cloud-config-client.adoc:77
#: upstream/_guides/spring-cloud-config-client.adoc:99
#, no-wrap
msgid "package org.acme.spring.spring.cloud.config.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:93
#: upstream/_guides/consul-config.adoc:115
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:289
#, no-wrap
msgid "@Path(\"/hello\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:103
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/consul-config.adoc:106
#, fuzzy
msgid ""
"As we want to use configuration properties obtained from the Config Server, "
"we will update the `GreetingResource` to inject the `message` property. The "
"updated code will look like this:"
msgstr ""
"Config "
"Server������������������������������������������������������������������ "
"`GreetingResource` ��������������� `message` "
"���������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:117
#, no-wrap
msgid "import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-cloud-config-client.adoc:112
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"message\", defaultValue=\"hello default\")\n"
"    String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:130
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return message;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/consul-config.adoc:132
#, no-wrap, fuzzy
msgid "Configuring the application"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:124
#, fuzzy
msgid ""
"Quarkus provides various configuration knobs under the `quarkus.spring-cloud-"
"config` root. For the purposes of this guide, our Quarkus application is "
"going to be configured in `application.properties` as follows:"
msgstr ""
"Quarkus������ `quarkus.spring-cloud-config` "
"���������������������������������������������������������������������������������������������������������������������Quarkus��������������������������������������������� "
"`application.properties` ������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-cloud-config-client.adoc:133
#, no-wrap
msgid ""
"# use the same name as the application name that was configured when "
"standing up the Config Server\n"
"quarkus.application.name=a-bootiful-client\n"
"# enable retrieval of configuration from the Config Server - this is off by "
"default\n"
"quarkus.spring-cloud-config.enabled=true\n"
"# configure the URL where the Config Server listens to HTTP requests - this "
"could have been left out since http://localhost:8888 is the default\n"
"quarkus.spring-cloud-config.url=http://localhost:8888\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/scheduler.adoc:204
#, no-wrap, fuzzy
msgid "Package and run the application"
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:167
#, fuzzy
msgid ""
"Run the application with: `./mvnw compile quarkus:dev`.  Open your browser "
"to http://localhost:8080/greeting."
msgstr ""
"������������������������������������������������������������������������������:"
" `./mvnw compile quarkus:dev`.��������������� http://localhost:8080/greeting "
" ������������������"

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:141
#, fuzzy
msgid ""
"The result should be: `Hello world` as it is the value obtained from the "
"Spring Cloud Config server."
msgstr ""
"������������Spring Cloud Config������������������������������������������ "
"`Hello world` ������������������������"

#. type: Title ==
#: upstream/_guides/consul-config.adoc:170
#, no-wrap, fuzzy
msgid "Run the application as a native executable"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:173
#, fuzzy
msgid ""
"You can of course create a native image using the instructions of the link:"
"building-native-image[Building a native executable guide]."
msgstr ""
"��������������� link:building-native-"
"image[���������������������������������������������������]���������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/spring-web.adoc:514
#, no-wrap, fuzzy
msgid "More Spring guides"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:517
#, fuzzy
msgid ""
"Quarkus has more Spring compatibility features. See the following guides for "
"more details:"
msgstr ""
"Quarkus������������������������Spring������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:519
#, fuzzy
msgid "link:spring-di[Quarkus - Extension for Spring DI]"
msgstr "link:spring-di[Quarkus - ������DI������������������������]"

#. type: Plain text
#: upstream/_guides/spring-cloud-config-client.adoc:152
#, fuzzy
msgid "link:spring-web[Quarkus - Extension for Spring Web]"
msgstr "link:spring-web[Quarkus - Spring Web������������������]"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:520
#, fuzzy
msgid "link:spring-data-jpa[Quarkus - Extension for Spring Data JPA]"
msgstr "link:spring-data-jpa[Quarkus - Spring Data JPA���������������]"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:521
#, fuzzy
msgid "link:spring-security[Quarkus - Extension for Spring Security]"
msgstr ""
"link:spring-security[Quarkus - Spring Security������������������������]"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:523
#, fuzzy
msgid ""
"link:spring-boot-properties[Quarkus - Extension for Spring Boot properties]"
msgstr ""
"link:spring-boot-properties[Quarkus - Spring "
"Boot������������������������������]"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:524
#, fuzzy
msgid "link:spring-cache[Quarkus - Extension for Spring Cache]"
msgstr "link:spring-cache[Quarkus - Spring Cache���������������]"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:524
#, fuzzy
msgid "link:spring-scheduled[Quarkus - Extension for Spring Scheduled]"
msgstr "link:spring-scheduled[��������������� - ������������������]"

#. type: Title ==
#: upstream/_guides/spring-cloud-config-client.adoc:159
#, no-wrap, fuzzy
msgid "Spring Cloud Config Client Reference"
msgstr "Spring Cloud Config������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/microprofile-health.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - MicroProfile Health"
msgstr "Quarkus - MicroProfile Health"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:12
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can utilize the "
"MicroProfile Health specification through the SmallRye Health extension."
msgstr ""
"������������������������Quarkus���������������������������SmallRye "
"Health���������������������������MicroProfile "
"Health������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:17
#, fuzzy
msgid ""
"MicroProfile Health allows applications to provide information about their "
"state to external viewers which is typically useful in cloud environments "
"where automated processes must be able to determine whether the application "
"should be discarded or restarted."
msgstr ""
"MicroProfile Health "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:32
#, fuzzy
msgid ""
"In this guide, we build a simple REST application that exposes MicroProfile "
"Health functionalities at the `/health/live` and `/health/ready` endpoints "
"according to the specification."
msgstr ""
"������������������������������������������ `/health/live` ��������� `/health/"
"ready` ������������������������ MicroProfile Health "
"������������������������������������ REST "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:37
#, fuzzy
msgid ""
"We recommend that you follow the instructions in the next sections and "
"create the application step by step. However, you can go right to the "
"completed example."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:43
#, fuzzy
msgid ""
"The solution is located in the `microprofile-health-quickstart` {quickstarts-"
"tree-url}/microprofile-health-quickstart[directory]."
msgstr ""
"������������������������ `microprofile-health-quickstart` {quickstarts-tree-"
"url}/microprofile-health-quickstart[directory] ������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:55
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-health-quickstart \\\n"
"    -Dextensions=\"health\"\n"
"cd microprofile-health-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:59
#, fuzzy
msgid ""
"This command generates a Maven project, importing the `smallrye-health` "
"extension which is an implementation of the MicroProfile Health "
"specification used in Quarkus."
msgstr ""
"������������������������Quarkus������������������������MicroProfile "
"Health������������������������ `smallrye-health` "
"������������������������������������Maven���������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:62
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the "
"`smallrye-health` extension to your project by running the following command "
"in your project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`smallrye-health` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:66
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"smallrye-health\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:76
#: upstream/_guides/microprofile-health.adoc:368
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-health</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:78
#, no-wrap, fuzzy
msgid "Running the health check"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:81
#, fuzzy
msgid ""
"Importing the `smallrye-health` extension directly exposes three REST "
"endpoints:"
msgstr ""
"`smallrye-health` ���������������������������������������������������3 "
"������ REST ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:83
#, fuzzy
msgid "`/health/live` - The application is up and running."
msgstr "`/health/live` - ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:84
#, fuzzy
msgid "`/health/ready` - The application is ready to serve requests."
msgstr ""
"`/health/ready` - "
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:85
#, fuzzy
msgid ""
"`/health` - Accumulating all health check procedures in the application."
msgstr ""
"`/health` - "
"������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:87
#, fuzzy
msgid "To check that the `smallrye-health` extension is working as expected:"
msgstr ""
"`smallrye-health` "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:89
#, fuzzy
msgid "start your Quarkus application with `./mvnw compile quarkus:dev`"
msgstr ""
"���Quarkus��������������������������������������������� `./mvnw compile "
"quarkus:dev`"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:91
#, fuzzy
msgid ""
"access the `http://localhost:8080/health/live` endpoint using your browser "
"or `curl http://localhost:8080/health/live`"
msgstr ""
"������������ `&lt;a href=\"http://localhost:8080/health/live\" class="
"\"bare\"&gt;http://localhost:8080/health/live&lt;/"
"a&gt;`������������������������������������������������������������ `curl "
"&lt;a href=\"http://localhost:8080/health/live\" class=\"bare\"&gt;http://"
"localhost:8080/health/live&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:93
#, fuzzy
msgid ""
"All of the health REST endpoints return a simple JSON object with two fields:"
""
msgstr ""
"���������������������REST���������������������������2���������������������������������������������JSON������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:95
#, fuzzy
msgid "`status` -- the overall result of all the health check procedures"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:96
#, fuzzy
msgid "`checks` -- an array of individual checks"
msgstr ""
"`checks`������Zs_2009-ASEMANSIBLEAN-������Zs_2009-"
"ASEMANSIAN���������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:100
#, fuzzy
msgid ""
"The general `status` of the health check is computed as a logical AND of all "
"the declared health check procedures. The `checks` array is empty as we have "
"not specified any health check procedure yet so let's define some."
msgstr ""
"������������������������������������ `status` "
"��������������������������������������������������������������������������������� "
"AND ������������������������������ `checks` "
"������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:101
#, no-wrap, fuzzy
msgid "Creating your first health check"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:104
#, fuzzy
msgid "In this section, we create our first simple health check procedure."
msgstr ""
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:106
#, fuzzy
msgid "Create the `org.acme.microprofile.health.SimpleHealthCheck` class:"
msgstr ""
"`org.acme.microprofile.health.SimpleHealthCheck` "
"������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:110
#: upstream/_guides/microprofile-health.adoc:164
#: upstream/_guides/microprofile-health.adoc:210
#: upstream/_guides/microprofile-health.adoc:281
#, no-wrap
msgid "package org.acme.microprofile.health;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:114
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Liveness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:120
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped <1> <2>\n"
"public class SimpleHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:126
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Simple health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:128
#, fuzzy
msgid ""
"It's recommended to annotate the health check class with "
"`@ApplicationScoped` or the `@Singleton` scope so that a single bean "
"instance is used for all health check requests."
msgstr ""
"��������������������������������� `@ApplicationScoped` ��� `@Singleton` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:129
#, fuzzy
msgid ""
"If a bean class annotated with one of the health check annotations declares "
"no scope then the `@Singleton` scope is used automatically."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@Singleton` ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:131
#, fuzzy
msgid ""
"As you can see, the health check procedures are defined as CDI beans that "
"implement the `HealthCheck` interface and are annotated with one of the "
"health check qualifiers, such as:"
msgstr ""
"��������������������������������������������������������� `HealthCheck` "
"��������������������������������������� CDI "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:133
#, fuzzy
msgid "`@Liveness` - the liveness check accessible at `/health/live`"
msgstr ""
"`@Liveness` - "
"��������������������������������������������������������������������������������������������������������� "
"`/health/live`"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:134
#, fuzzy
msgid "`@Readiness` - the readiness check accessible at `/health/ready`"
msgstr ""
"`@Readiness` - "
"��������������������������������������������������������������������������������� "
"`/health/ready`"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:138
#, fuzzy
msgid ""
"`HealthCheck` is a functional interface whose single method `call` returns a "
"`HealthCheckResponse` object which can be easily constructed by the fluent "
"builder API shown in the example."
msgstr ""
"`HealthCheck` ������������������������ `call` ��� `HealthCheckResponse` "
"������������������������������������������������������������������������������������ "
"fluent ������������ API ���������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:144
#, fuzzy
msgid ""
"As we have started our Quarkus application in dev mode simply repeat the "
"request to `http://localhost:8080/health/live` by refreshing your browser "
"window or by using `curl http://localhost:8080/health/live`. Because we "
"defined our health check to be a liveness procedure (with `@Liveness` "
"qualifier) the new health check procedure is now present in the `checks` "
"array."
msgstr ""
"������������������Quarkus������������������������������������������������������������������������������������������������������������ "
"`&lt;a href=\"http://localhost:8080/health/live\" class=\"bare\"&gt;http://"
"localhost:8080/health/live&lt;/"
"a&gt;`������������������������������������������������������������ `curl "
"&lt;a href=\"http://localhost:8080/health/live\" class=\"bare\"&gt;http://"
"localhost:8080/health/live&lt;/a&gt;`."
"������������������������liveness������������������( `@Liveness` "
"���������������)��������������������������������������������������������������������������� "
"`checks` ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:147
#, fuzzy
msgid ""
"Congratulations! You've created your first Quarkus health check procedure. "
"Let's continue by exploring what else can be done with the MicroProfile "
"Health specification."
msgstr ""
"������������������������������������������Quarkus���������������������������������������������������������������MicroProfile "
"Health���������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:148
#, no-wrap, fuzzy
msgid "Adding a readiness health check procedure"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:154
#, fuzzy
msgid ""
"In the previous section, we created a simple liveness health check procedure "
"which states whether our application is running or not. In this section, we "
"will create a readiness health check which will be able to state whether our "
"application is able to process requests."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:158
#, fuzzy
msgid ""
"We will create another health check procedure that simulates a connection to "
"an external service provider such as a database. For starters, we will "
"always return the response indicating the application is ready."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:160
#, fuzzy
msgid ""
"Create `org.acme.microprofile.health.DatabaseConnectionHealthCheck` class:"
msgstr ""
"`org.acme.microprofile.health.DatabaseConnectionHealthCheck` "
"������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:168
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:174
#: upstream/_guides/microprofile-health.adoc:222
#, no-wrap
msgid ""
"@Readiness\n"
"@ApplicationScoped\n"
"public class DatabaseConnectionHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:180
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.up(\"Database connection health check\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:190
#, fuzzy
msgid ""
"If you now rerun the health check at `http://localhost:8080/health/live` the "
"`checks` array will contain only the previously defined `SimpleHealthCheck` "
"as it is the only check defined with the `@Liveness` qualifier. However, if "
"you access `http://localhost:8080/health/ready` (in the browser or with "
"`curl http://localhost:8080/health/ready`) you will see only the `Database "
"connection health check` as it is the only health check defined with the "
"`@Readiness` qualifier as the readiness health check procedure."
msgstr ""
"��������������������������������������������������� `&lt;a href=\"http://"
"localhost:8080/health/live\" class=\"bare\"&gt;http://localhost:8080/health/"
"live&lt;/a&gt;` `checks` ������������������ `@Liveness` "
"������������������������������������������������������������������������������������ "
"`SimpleHealthCheck` ��������������������������������������������� `&lt;a "
"href=\"http://localhost:8080/health/ready\" class=\"bare\"&gt;http://"
"localhost:8080/health/ready&lt;/a&gt;`(��������������� `curl &lt;a href="
"\"http://localhost:8080/health/ready\" class=\"bare\"&gt;http://localhost:"
"8080/health/ready&lt;/a&gt;`)��������� `Database connection health check` "
"������������������������������������������ `@Readiness` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:192
#, fuzzy
msgid ""
"If you access `http://localhost:8080/health` you will get back both checks."
msgstr ""
"������������������������ `&lt;a href=\"http://localhost:8080/health\" class="
"\"bare\"&gt;http://localhost:8080/health&lt;/"
"a&gt;`������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:197
#, fuzzy
msgid ""
"More information about which health check procedures should be used in which "
"situation is detailed in the MicroProfile Health specification. Generally, "
"the liveness procedures determine whether the application should be "
"restarted while readiness procedures determine whether it makes sense to "
"contact the application with requests."
msgstr ""
"���������������������������������������������������������������������������������������������������������MicroProfile "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:198
#, no-wrap, fuzzy
msgid "Negative health check procedures"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:204
#, fuzzy
msgid ""
"In this section, we extend our `Database connection health check` with the "
"option of stating that our application is not ready to process requests as "
"the underlying database connection cannot be established. For simplicity "
"reasons, we only determine whether the database is accessible or not by a "
"configuration property."
msgstr ""
"������������������������������ `Database connection health check` "
"������������������������������������������������������������������������������������������ "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:206
#, fuzzy
msgid ""
"Update the `org.acme.microprofile.health.DatabaseConnectionHealthCheck` "
"class:"
msgstr ""
"`org.acme.microprofile.health.DatabaseConnectionHealthCheck` "
"������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:216
#, no-wrap
msgid ""
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import org.eclipse.microprofile.health.HealthCheckResponseBuilder;\n"
"import org.eclipse.microprofile.health.Readiness;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:225
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"database.up\", defaultValue = \"false\")\n"
"    private boolean databaseUp;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:228
#, no-wrap
msgid "    @Override\n"
"    public HealthCheckResponse call() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:230
#, no-wrap
msgid ""
"        HealthCheckResponseBuilder responseBuilder = HealthCheckResponse."
"named(\"Database connection health check\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:238
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down();\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:241
#, no-wrap
msgid "        return responseBuilder.build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:248
#, no-wrap
msgid ""
"    private void simulateDatabaseConnectionVerification() {\n"
"        if (!databaseUp) {\n"
"            throw new IllegalStateException(\"Cannot contact database\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:255
#, fuzzy
msgid ""
"Until now we used a simplified method of building a `HealthCheckResponse` "
"through the `HealthCheckResponse#up(String)` (there is also "
"`HealthCheckResponse#down(String)`) which will directly build the response "
"object.  From now on, we utilize the full builder capabilities provided by "
"the `HealthCheckResponseBuilder` class."
msgstr ""
"������������������ `HealthCheckResponse#up(String)` ( "
"`HealthCheckResponse#down(String)` ���������������) ������������ "
"`HealthCheckResponse` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`HealthCheckResponseBuilder` "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:260
#, fuzzy
msgid ""
"If you now rerun the readiness health check (at `http://localhost:8080/"
"health/ready`)  the overall `status` should be DOWN. You can also check the "
"liveness check at `http://localhost:8080/health/live` which will return the "
"overall `status` UP because it isn't influenced by the readiness checks."
msgstr ""
"��������������������������������������������������������������� ( `&lt;a "
"href=\"http://localhost:8080/health/ready\" class=\"bare\"&gt;http://"
"localhost:8080/health/ready&lt;/a&gt;`) `status` "
"������������������������������������������������������������������������������������������ "
"`&lt;a href=\"http://localhost:8080/health/live\" class=\"bare\"&gt;http://"
"localhost:8080/health/live&lt;/"
"a&gt;`������������������������������������������������������������������������ "
"`status` UP ������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:264
#, fuzzy
msgid ""
"As we shouldn't leave this application with a readiness check in a DOWN "
"state and because we are running Quarkus in dev mode you can add `database."
"up=true` in `src/main/resources/application.properties` and rerun the "
"readiness health check again"
msgstr ""
"���������������������������������DOWN������������������������������������������������������������������������������������������Quarkus���dev��������������������������������������� "
"`database.up=true` ��� `src/main/resources/application.properties` "
"������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:265
#, fuzzy
msgid "it should be up again."
msgstr "������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:267
#, no-wrap, fuzzy
msgid "Adding user-specific data to the health check response"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:275
#, fuzzy
msgid ""
"In previous sections, we saw how to create simple health checks with only "
"the minimal attributes, namely, the health check name and its status (UP or "
"DOWN). However, the MicroProfile specification also provides a way for the "
"applications to supply arbitrary data in the form of key-value pairs sent to "
"the consuming end. This can be done by using the `withData(key, value)` "
"method of the health check response builder API."
msgstr ""
"���������������������������������������������������������������������������������������������������������������(UP���������DOWN)������������������������������������������������������������������������������������MicroProfile "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"API ��� `withData(key, value)` "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:277
#, fuzzy
msgid ""
"Let's create a new health check procedure `org.acme.microprofile.health."
"DataHealthCheck`:"
msgstr ""
"��������������������������������������������������������� `org.acme."
"microprofile.health.DataHealthCheck`."

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:285
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Liveness;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:291
#, no-wrap
msgid ""
"@Liveness\n"
"@ApplicationScoped\n"
"public class DataHealthCheck implements HealthCheck {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:301
#, no-wrap
msgid ""
"    @Override\n"
"    public HealthCheckResponse call() {\n"
"        return HealthCheckResponse.named(\"Health check with data\")\n"
"                .up()\n"
"                .withData(\"foo\", \"fooValue\")\n"
"                .withData(\"bar\", \"barValue\")\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:307
#, fuzzy
msgid ""
"If you rerun the liveness health check procedure by accessing the `/health/"
"live` endpoint you can see that the new health check `Health check with "
"data` is present in the `checks` array. This check contains a new attribute "
"called `data` which is a JSON object consisting of the properties we have "
"defined in our health check procedure."
msgstr ""
"`/health/live` ������������������������������������������ liveness "
"��������������������������������������������������������������� `checks` "
"��������������������������������������� `Health check with data` "
"������������������������������������������������������������������ `data` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"JSON ���������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:310
#, fuzzy
msgid ""
"This functionality is specifically useful in failure scenarios where you can "
"pass the error along with the health check response."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:322
#, no-wrap
msgid ""
"        try {\n"
"            simulateDatabaseConnectionVerification();\n"
"            responseBuilder.up();\n"
"        } catch (IllegalStateException e) {\n"
"            // cannot access the database\n"
"            responseBuilder.down()\n"
"                    .withData(\"error\", e.getMessage()); // pass the "
"exception message\n"
"        }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:324
#, no-wrap, fuzzy
msgid "Extension health checks"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:327
#, fuzzy
msgid ""
"Some extension may provide default health checks, including the extension "
"will automatically register its health checks."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:330
#, fuzzy
msgid ""
"For example, `quarkus-agroal` that is used to manage Quarkus datasource(s) "
"automatically register a readiness health check that will validate each "
"datasources: link:datasource#datasource-health-check[Datasource Health "
"Check]."
msgstr ""
"������������Quarkus������������������������������������������������������������������ "
"`quarkus-agroal` "
"��������������������������������������������������������������������������������������������������������������� "
"link:datasource#datasource-health-check[Datasource Health Check]."

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:332
#, fuzzy
msgid ""
"You can disable extension health check via the property `quarkus.health."
"extensions.enabled` so none will be automatically registered."
msgstr ""
"��������������� `quarkus.health.extensions.enabled` "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/microprofile-health.adoc:333
#, no-wrap, fuzzy
msgid "Health UI "
msgstr "������UI"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:338
#, fuzzy
msgid "`health-ui` allows you to see your Health Checks in a Web GUI."
msgstr ""
"`health-ui` ���������Web GUI "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:340
#, fuzzy
msgid ""
"The Quarkus `smallrye-health` extension ships with `health-ui` and enables "
"it by default in dev and test modes, but it can also be explicitly "
"configured for production mode as well."
msgstr ""
"Quarkus `smallrye-health` ��������������� `health-ui` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:342
#, fuzzy
msgid "`health-ui` can be accessed from http://localhost:8080/health-ui/ ."
msgstr ""
"`health-ui` ��� http://localhost:8080/health-ui/ "
"���������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:344
#, fuzzy
msgid "image:health-ui-screenshot01.png[alt=Health UI]"
msgstr "image:health-ui-screenshot01.png[alt=Health UI]"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:351
#, fuzzy
msgid ""
"MicroProfile Health provides a way for your application to distribute "
"information about its healthiness state to state whether or not it is able "
"to function properly.  Liveness checks are utilized to tell whether the "
"application should be restarted and readiness checks are used to tell "
"whether the application is able to process requests."
msgstr ""
"MicroProfile Health "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:353
#, fuzzy
msgid ""
"All that is needed to enable the MicroProfile Health features in Quarkus is:"
msgstr ""
"Quarkus���MicroProfile "
"Health������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:356
#, fuzzy
msgid ""
"adding the `smallrye-health` Quarkus extension to your project using the "
"`quarkus-maven-plugin`: +"
msgstr ""
"`smallrye-health` "
"Quarkus��������������������������������������������������������� `quarkus-"
"maven-plugin`.\n"
"<br>"

#. type: delimited block -
#: upstream/_guides/microprofile-health.adoc:359
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"health\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-health.adoc:362
#, fuzzy
msgid "or simply adding the following Maven dependency: +"
msgstr ""
"���������������������������Maven������������������������������������������\n"
"<br>"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security.adoc:6
#, no-wrap
msgid "Quarkus - Security Architecture and Guides"
msgstr "Quarkus - ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:11
msgid ""
"Quarkus Security provides the architecture, multiple authentication and "
"authorization mechanisms, and other tools for the developers to build a "
"production-quality security for their Quarkus applications."
msgstr ""
"Quarkus "
"Security���������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:13
msgid ""
"This document provides a brief overview of Quarkus Security and links to the "
"individual guides."
msgstr ""
"���������������������������������Quarkus "
"Security���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:17
msgid ""
"`HttpAuthenticationMechanism` is the main entry into Quarkus HTTP Security."
msgstr ""
"`HttpAuthenticationMechanism`  ������Quarkus HTTP "
"Security���������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:20
msgid ""
"Quarkus Security Manager uses `HttpAuthenticationMechanism` to extract the "
"authentication credentials from the HTTP request and delegates to "
"`IdentityProvider` to complete the conversion of these credentials to "
"`SecurityIdentity`."
msgstr ""
"Quarkus Security Manager������ `HttpAuthenticationMechanism`  "
"���������������HTTP������������������������������������������������������ "
"`IdentityProvider`  ��������������������������������������������� "
"`SecurityIdentity`  ������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:22
msgid ""
"For example, the credentials may be coming with the HTTP `Authorization` "
"header, client HTTPS certificates or cookies."
msgstr ""
"������������������������������HTTP `Authorization`  "
"������������������������������������ HTTPS "
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:24
msgid ""
"`IdentityProvider` verifies the authentication credentials and maps them to "
"`SecurityIdentity` which contains the username, roles, the original "
"authentication credentials, and other attributes."
msgstr ""
"`IdentityProvider`  "
"������������������������������������������������������������������������������������������������������������������������������ "
"`SecurityIdentity`  ������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:26
msgid ""
"For every authenticated resource, you can inject a `SecurityIdentity` "
"instance to get the authenticated identity information."
msgstr ""
"������������������������������������ `SecurityIdentity`  "
"��������������������������������������������������� ID "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:29
msgid ""
"In some other contexts you may have other parallel representations of the "
"same information (or parts of it) such as `SecurityContext` for JAX-RS or "
"`JsonWebToken` for JWT."
msgstr ""
"���������������������JAX-RS������������ `SecurityContext`  "
"���JWT������������ `JsonWebToken`  "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:30
#, no-wrap
msgid "Authentication mechanisms"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:33
msgid ""
"Quarkus supports several sources to load authentication information from."
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/security.adoc:34
#, no-wrap
msgid "Basic and Form Authentication Mechanisms"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:38
msgid ""
"Basic and Form HTTP-based authentication mechanisms are the core "
"authentication mechanisms supported in Quarkus.  Please see link:security-"
"built-in-authentication#basic-auth[Basic HTTP Authentication] and link:"
"security-built-in-authentication#form-auth[Form HTTP Authentication] for "
"more information."
msgstr ""
"Basic HTTP������������������������������������Form "
"HTTP���������������������������������������Quarkus��������������������������������������������������������������������������������������������� "
"link:security-built-in-authentication#basic-auth[������HTTP������]��� link:"
"security-built-in-authentication#form-"
"auth[������������HTTP������]������������������������������"

#. type: Title ===
#: upstream/_guides/security.adoc:39
#, no-wrap
msgid "Mutual TLS Authentication"
msgstr "������TLS������"

#. type: Plain text
#: upstream/_guides/security.adoc:42
msgid ""
"Quarkus provides Mutual TLS authentication so that you can authenticate "
"users based on their X.509 certificates."
msgstr ""
"Quarkus���������TLS������������������������������������X."
"509������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:44
msgid ""
"Please see link:security-built-in-authentication#mutual-tls[Mutual TLS "
"Authentication] for more information."
msgstr ""
"������������ link:security-built-in-authentication#mutual-"
"tls[������TLS������] ������������������������"

#. type: Title ===
#: upstream/_guides/security.adoc:45
#, no-wrap
msgid "OpenId Connect"
msgstr "OpenId Connect"

#. type: Plain text
#: upstream/_guides/security.adoc:48
msgid ""
"`quarkus-oidc` extension provides a reactive, interoperable, multi-tenant "
"enabled OpenId Connect adapter which supports `Bearer Token` and "
"`Authorization Code Flow` authentication mechanisms."
msgstr ""
"`quarkus-oidc`  ������������������������������ `Bearer Token`  ��������� "
"`Authorization Code Flow`  "
"��������������������������������������������������������������������������������������������������������������������� "
"OpenId Connect ���������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:51
msgid ""
"`Bearer Token` mechanism extracts the token from HTTP `Authorization` header."
"  `Authorization Code Flow` mechanism uses OpenId Connect Authorization Code "
"flow. It redirects the user to IDP to authenticate and completes the "
"authentication process after the user has been redirected back to Quarkus by "
"exchanging the provided code grant for ID, access and refresh tokens."
msgstr ""
"`Bearer Token`  ���������������������HTTP `Authorization`  "
"��������������������������������������������������� `Authorization Code "
"Flow`  ���������������������OpenId Connect Authorization Code "
"Flow������������������������������������IDP������������������������������������������������������������Code "
"Grant���ID������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:53
msgid ""
"ID and access `JWT` tokens are verified with the refreshable `JWK` key set "
"but both JWT and opaque (binary) tokens can be introspected remotely."
msgstr ""
"ID ��������������� `JWT` ��������������������������������������������� `JWK` "
"������������������������������������������JWT ��������������� "
"(���������������) "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:55
msgid ""
"See the link:security-openid-connect[Using OpenID Connect to Protect Service "
"Applications] guide for more information about `Bearer Token` authentication "
"mechanism."
msgstr ""
"`Bearer Token` ������������������������������������������������ link:"
"security-openid-connect[Using OpenID Connect to Protect Service "
"Applications]���������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:57
msgid ""
"See the link:security-openid-connect-web-authentication[Using OpenID Connect "
"to Protect Web Application] guide for more information about `Authorization "
"Code Flow` authentication mechanism."
msgstr ""
"`Authorization Code Flow`  ������������������������������������������������ "
"link:security-openid-connect-web-authentication[Using OpenID Connect to "
"Protect Web Application]���������������������������������������"

#. type: delimited block =
#: upstream/_guides/security.adoc:61
msgid ""
"Both `quarkus-oidc` `Bearer` and `Authorization Code Flow` Authentication "
"mechanisms use <<smallrye-jwt, SmallRye JWT>> to represent JWT tokens as "
"Microprofile JWT `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""
"`quarkus-oidc` ���`Bearer` ��� `Authorization Code Flow`  "
"������������������������������������ link:#smallrye-jwt[SmallRye JWT "
"]������������������JWT ��������������� Microprofile JWT `org.eclipse."
"microprofile.jwt.JsonWebToken` ���������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:64
msgid ""
"See link:security-openid-connect-multitenancy[Using OpenID Connect Multi-"
"Tenancy] for more information about multiple tenants which can support "
"`Bearer` or `Authorization Code Flow` authentication mechanism and "
"configured statically or dynamically."
msgstr ""
"`Bearer`  ��������� `Authorization Code Flow`  "
"��������������������������������������������������������������������������������������������������������������������������������� "
"link:security-openid-connect-multitenancy[OpenID Connect "
"������������������������������]������������������������������"

#. type: delimited block =
#: upstream/_guides/security.adoc:69
msgid ""
"If you would like to have Quarkus OIDC extension enabled at runtime then set "
"`quarkus.oidc.tenant-enabled=false` at build time and re-enable it at "
"runtime using a system property.  See also link:security-openid-connect-"
"multitenancy#disable-tenant[Disabling Tenant Configurations] for more "
"information about managing the individual tenant configurations in the multi-"
"tenant OIDC deployments."
msgstr ""
"������������Quarkus "
"OIDC������������������������������������������������������������������������ "
"`quarkus.oidc.tenant-enabled=false` "
"���������������������������������������������������������������������������������������������������������������������OIDC������������������������������������������������������������������������������������������������������ "
"link:security-openid-connect-multitenancy#disable-"
"tenant[������������������]������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:72
msgid ""
"If you use Keycloak and Bearer tokens then also see the link:security-"
"keycloak-authorization[Using Keycloak to Centralize Authorization] guide."
msgstr ""
"Keycloak ��� Bearer ��������������������������������������� link:security-"
"keycloak-authorization[Using Keycloak to Centralize "
"Authorization]���������������������������������������"

#. type: delimited block =
#: upstream/_guides/security.adoc:76
msgid ""
"If you need to configure Keycloak programmatically then consider using https:"
"//www.keycloak.org/docs/latest/server_development/#admin-rest-api[Keycloak "
"Admin REST API] with the help of the `quarkus-keycloak-admin-client` "
"extension."
msgstr ""
"Keycloak������������������������������������������������������������ "
"`quarkus-keycloak-admin-client` "
"������������������������������������������������ link:https://www.keycloak."
"org/docs/latest/server_development/#admin-rest-api[Keycloak Admin REST "
"API]���������������������������������������"

#. type: Title ===
#: upstream/_guides/security.adoc:79
#, no-wrap
msgid "SmallRye JWT"
msgstr "SmallRye JWT"

#. type: Plain text
#: upstream/_guides/security.adoc:82
msgid ""
"`quarkus-smallrye-jwt` provides Microprofile JWT 1.1.1 implementation and "
"many more options to verify signed and encrypted `JWT` tokens and represent "
"them as `org.eclipse.microprofile.jwt.JsonWebToken`."
msgstr ""
"`quarkus-smallrye-jwt` ���Microprofile JWT 1.1.1.1 "
"������������������������������������������ `JWT` ��������������������������� "
"`org.eclipse.microprofile.jwt.JsonWebToken` "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:84
msgid ""
"It provides an alternative to `quarkus-oidc` Bearer Token Authentication "
"Mechanism. It can currently verify only `JWT` tokens using the PEM keys or "
"refreshable `JWK` key set."
msgstr ""
"��������� `quarkus-oidc` "
"���������������������������������������������������������������������������������������������PEM "
"��������������������������� `JWK` ��������������������������� `JWT` "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:86
msgid ""
"Additionally it provides `JWT Generation API` for creating `signed`, `inner-"
"signed` and/or `encrypted` `JWT` tokens with ease."
msgstr ""
"������������ `JWT Generation API` ������������������ `signed` , `inner-"
"signed` , ���������/��������� `encrypted` "
"`JWT`������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:88
msgid ""
"See the link:security-jwt[Using SmallRye JWT] guide for more information."
msgstr ""
"������������������������ link:security-jwt[Using SmallRye "
"JWT]���������������������������������������"

#. type: Title ===
#: upstream/_guides/security.adoc:89
#, no-wrap
msgid "OAuth2"
msgstr "OAuth2"

#. type: Plain text
#: upstream/_guides/security.adoc:92
msgid ""
"`quarkus-elytron-security-oauth2` provides an alternative to `quarkus-oidc` "
"Bearer Token Authentication Mechanism. It is based on `Elytron` and is "
"primarily meant for introspecting the opaque tokens remotely."
msgstr ""
"`quarkus-elytron-security-oauth2`  ��� `quarkus-oidc`  Bearer Token "
"������������������������������������������������������������������ `Elytron` "
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:94
msgid "See the link:security-oauth2[Using OAuth2] guide for more information."
msgstr ""
"������������������������ link:security-oauth2[OAuth2 "
"���������]���������������������������������������"

#. type: Title ===
#: upstream/_guides/security.adoc:95
#, no-wrap
msgid "LDAP"
msgstr "LDAP"

#. type: Plain text
#: upstream/_guides/security.adoc:98
msgid ""
"Please see the link:security-ldap[Authenticate with LDAP] guide for more "
"information about LDAP authentication mechanism."
msgstr ""
"LDAP������������������������������������������������ link:security-"
"ldap[Authenticate with LDAP]���������������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:100
#, no-wrap
msgid "Identity Providers"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:103
msgid ""
"`IdentityProvider` converts the authentication credentials provided by "
"`HttpAuthenticationMechanism` to `SecurityIdentity`."
msgstr ""
"`IdentityProvider`  ������ `HttpAuthenticationMechanism`  "
"������������������������������������ `SecurityIdentity`  "
"���������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:106
msgid ""
"Some extensions such as `OIDC`, `OAuth2`, `SmallRye JWT`, `LDAP` have the "
"inlined `IdentityProvider` implementations which are specific to the "
"supported authentication flow.  For example, `quarkus-oidc` uses its own "
"`IdentityProvider` to convert a token to `SecurityIdentity`."
msgstr ""
"`OIDC` , `OAuth2` , `SmallRye JWT` , `LDAP`  "
"������������������������������������������������������������������������������������������������ "
"`IdentityProvider` ������������������������������������������������������ "
"`quarkus-oidc` ������������ `IdentityProvider` "
"������������������������������ `SecurityIdentity` ���������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:108
msgid ""
"If you use `Basic` or `Form` HTTP-based authentication then you have to add "
"an `IdentityProvider` which can convert a user name and password to "
"`SecurityIdentity`."
msgstr ""
"`Basic` ��������� `Form` HTTP "
"��������������������������������������������������������������������������������������� "
"`SecurityIdentity` ������������������ `IdentityProvider` "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:111
msgid ""
"See link:security-jpa[JPA IdentityProvider] and link:security-jdbc[JDBC "
"IdentityProvider] for more information.  You can also use link:security-"
"testing#configuring-user-information[User Properties IdentityProvider] for "
"testing."
msgstr ""
"������������ link:security-jpa[JPA IdentityProvider]��������� link:security-"
"jdbc[JDBC "
"IdentityProvider]��������������������������������������������������� link:"
"security-testing#configuring-user-information[User Properties "
"IdentityProvider ���]������������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:112
#, no-wrap
msgid "Combining Authentication Mechanisms"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:116
msgid ""
"One can combine multiple authentication mechanisms if they get the "
"authentication credentials from the different sources.  For example, "
"combining built-in `Basic` and `quarkus-oidc` `Bearer` authentication "
"mechanisms is allowed, but combining `quarkus-oidc` `Bearer` and `smallrye-"
"jwt` authentication mechanisms is not allowed because both will attempt to "
"verify the token extracted from the HTTP `Authorization Bearer` scheme."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`Basic`  ��� `Bearer`   `quarkus-oidc`  "
"������������������������������������������������������������ `quarkus-oidc`  "
" `Bearer`  ��� `smallrye-jwt`  "
"��������������������������������������������������������������������������������������� "
"HTTP `Authorization Bearer`  "
"���������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:117
#, no-wrap
msgid "Proactive Authentication"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:121
msgid ""
"By default, Quarkus does what we call proactive authentication. This means "
"that if an incoming request has a credential then that request will always "
"be authenticated (even if the target page does not require authentication)."
msgstr ""
"������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:123
msgid ""
"See link:security-built-in-authentication#proactive-authentication[Proactive "
"Authentication] for more information."
msgstr ""
"������������������������ link:security-built-in-authentication#proactive-"
"authentication[���������������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:124
#, no-wrap
msgid "Authorization"
msgstr "������"

#. type: Plain text
#: upstream/_guides/security.adoc:127
msgid ""
"See link:security-authorization[Security Authorization] for more information "
"about Role Based Access Control and other authorization options."
msgstr ""
"��������������������������������������������������������������������������������������������������������� "
"link:security-"
"authorization[������������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:128
#, no-wrap
msgid "Customization and other useful tips"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:131
msgid ""
"Quarkus Security is highly customizable. One can register custom "
"``HttpAuthenticationMechanism``s, ``IdentityProvider``s and "
"``SecurityidentityAugmentor``s."
msgstr ""
"Quarkus "
"Security��������������������������������������������������������������� "
"`HttpAuthenticationMechanism` ��� `IdentityProvider` ��� "
"`SecurityidentityAugmentor` ���������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:133
msgid ""
"See link:security-customization[Security Customization] for more information "
"about customizing Quarkus Security and other useful tips about the reactive "
"security, registering the security providers, etc."
msgstr ""
"Quarkus "
"Security������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"link:security-"
"customization[������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:134
#, no-wrap
msgid "Secure connections with SSL"
msgstr "SSL������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:137
msgid ""
"See the link:http-reference#ssl[Supporting secure connections with SSL] "
"guide for more information."
msgstr ""
"������������������������ link:http-reference#ssl[SSL "
"���������������������������������������]���������������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:138
#, no-wrap
msgid "Cross-Origin Resource Sharing"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:141
msgid ""
"If you plan to make your Quarkus application accessible to another "
"application running on a different domain, you will need to configure CORS "
"(Cross-Origin Resource Sharing). Please read the link:http-reference#cors-"
"filter[HTTP CORS documentation] for more information."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������CORS���Cross-"
"Origin Resource "
"Sharing������������������������������������������������������������������ "
"link:http-reference#cors-filter[HTTP "
"CORS���������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:750
#, no-wrap, fuzzy
msgid "SameSite cookies"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/security.adoc:145
msgid ""
"Please see link:vertx#same-site-cookie for information about adding a https:/"
"/developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/"
"SameSite[SameSite] cookie property to any of the cookies set by a Quarkus "
"endpoint."
msgstr ""
"Quarkus���������������������������������������������������Cookie��� link:"
"https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/"
"SameSite[SameSite]Cookie������������������������������������������������������ "
"link:vertx#sam-site-cookie ������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:146
#, no-wrap
msgid "Testing"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/security.adoc:149
msgid ""
"See link:security-testing[Security Testing] for more information about "
"testing Quarkus Security."
msgstr ""
"Quarkus Security��������������������������������������� link:security-"
"testing[������������������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/security.adoc:150
#, no-wrap
msgid "Secret Engines"
msgstr "������������������������������"

#. type: Title ===
#: upstream/_guides/vault-auth.adoc:282
#, no-wrap, fuzzy
msgid "Vault"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/security.adoc:152
msgid ""
"Quarkus provides a very comprehensive HashiCorp Vault support, please see "
"the link:vault[Quarkus and HashiCorp Vault] documentation for more "
"information."
msgstr ""
"Quarkus������������������������ HashiCorp Vault "
"������������������������������������������������������ link:vault[Quarkus "
"and HashiCorp Vault] ������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:21
#, fuzzy
msgid "Apache Maven 3.6.2+"
msgstr "Apache Maven 3.6.2+"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:38
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=sending-email-quickstart \\\n"
"    -Dextensions=\"mailer\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:62
#, no-wrap
msgid ""
"quarkus.mailer.from=test@quarkus.io\n"
"quarkus.mailer.host=smtp.sendgrid.net\n"
"quarkus.mailer.port=465\n"
"quarkus.mailer.ssl=true\n"
"quarkus.mailer.username=....\n"
"quarkus.mailer.password=....\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:84
#, fuzzy
msgid ""
"`io.quarkus.mailer.ReactiveMailer` provides the reactive (non-blocking and "
"asynchronous) API"
msgstr ""
"`io.quarkus.mailer.ReactiveMailer` ��������������� "
"(���������������������������������������) API ���������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:95
#, no-wrap
msgid ""
"// Imperative API:\n"
"mailer.send(Mail.withText(\"to@acme.org\", \"A simple email from quarkus\", "
"\"This is my body.\"));\n"
"// Reactive API:\n"
"CompletionStage<Void> stage = reactiveMailer.send(Mail.withText(\"to@acme."
"org\", \"A reactive email from quarkus\", \"This is my body.\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:115
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/async\")\n"
"public CompletionStage<Response> sendASimpleEmailAsync() {\n"
"    return reactiveMailer.send(\n"
"            Mail.withText(\"to@acme.org\", \"A reactive email from "
"quarkus\", \"This is my body\"))\n"
"            .thenApply(x -> Response.accepted().build());\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:242
#, no-wrap
msgid ""
"quarkus.mailer.from=YOUREMAIL@gmail.com\n"
"quarkus.mailer.host=smtp.gmail.com\n"
"quarkus.mailer.port=587\n"
"quarkus.mailer.start-tls=REQUIRED\n"
"quarkus.mailer.username=YOUREMAIL@gmail.com\n"
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:254
#, no-wrap
msgid ""
"quarkus.mailer.from=YOUREMAIL@gmail.com\n"
"quarkus.mailer.host=smtp.gmail.com\n"
"quarkus.mailer.port=465\n"
"quarkus.mailer.ssl=true\n"
"quarkus.mailer.username=YOUREMAIL@gmail.com\n"
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:260
#, fuzzy
msgid ""
"Note that if you enable SSL for the mailer and you want to build a native "
"executable, you will need to enable the SSL support.  Please refer to the "
"native-and-ssl-guide.html[Using SSL With Native Executables] guide for more "
"information."
msgstr ""
"���������������SSL���������������������������������������������������������������������������������SSL������������������������������������������������������������������������������������������native-"
"and-ssl-guide.html[Using SSL With Native "
"Executables]���������������������������������������"

#. type: delimited block -
#: upstream/_guides/sending-emails.adoc:269
#, no-wrap
msgid "@Inject MailClient client;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:272
#, fuzzy
msgid "Three API flavors are exposed:"
msgstr "3������API���������������������������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:274
#, fuzzy
msgid ""
"the Axle client (`io.vertx.axle.ext.mail.MailClient`), using "
"`CompletionStage` and Reactive Streams `Publisher`"
msgstr ""
"Axle ������������������ ( `io.vertx.axle.ext.mail.MailClient`) "
"������������������ `CompletionStage` ��� Reactive Streams "
"��������������������� `Publisher`"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:275
#, fuzzy
msgid "the RX Java 2 client (`io.vertx.reactivex.ext.mail.MailClient`)"
msgstr ""
"RX Java 2 ������������������ ( `io.vertx.reactivex.ext.mail.MailClient`)"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:276
#, fuzzy
msgid "the bare client (`io.vertx.ext.mail.MailClient`)"
msgstr "������������������������ ( `io.vertx.ext.mail.MailClient`)"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:278
#, fuzzy
msgid ""
"Check the link:using-vertx.html[Using Vert.x guide] for further details "
"about these different APIs and how to select the most suitable for you."
msgstr ""
"��������������������� API ������������������������������������������ API "
"��������������������������������������� link:using-vertx.html[Using Vert.x "
"������������]���������������������������"

#. type: Plain text
#: upstream/_guides/sending-emails.adoc:281
#, fuzzy
msgid ""
"The retrieved `MailClient` is configured using the configuration key "
"presented above.  You can also create your own instance, and pass your own "
"configuration."
msgstr ""
"������������ `MailClient` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus gRPC"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:13
#, fuzzy
msgid ""
"https://grpc.io/[gRPC] is a high-performance RPC framework.  It can "
"efficiently connect services implemented using various languages and "
"frameworks.  It is also applicable in the last mile of distributed computing "
"to connect devices, mobile applications, and browsers to backend services."
msgstr ""
"link:https://grpc.io/"
"[gRPC���]������������RPC���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:16
#, fuzzy
msgid ""
"In general, gRPC uses HTTP/2, TLS, and https://developers.google.com/"
"protocol-buffers[Protobuf (Protocol Buffers)].  In a microservice "
"architecture, gRPC is an efficient, type-safe alternative to HTTP."
msgstr ""
"���������������gRPC���HTTP/2���TLS��� link:https://developers.google.com/"
"protocol-"
"buffers[Protobuf������������������������������������]������������������������������������������������������������������������gRPC���HTTP���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:19
#, fuzzy
msgid "The Quarkus gRPC extension integrate gRPC in Quarkus application.  It:"
msgstr ""
"Quarkus���gRPC������������������Quarkus���������������������������gRPC������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:21
#, fuzzy
msgid "supports implementing gRPC services"
msgstr "gRPC������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:22
#, fuzzy
msgid "supports consuming gRPC services"
msgstr "gRPC ������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:23
#, fuzzy
msgid ""
"integrates with the reactive engine from Quarkus as well as the reactive "
"development model"
msgstr ""
"������Quarkus���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:24
#, fuzzy
msgid ""
"allows plain-text communication as well as TLS, and TLS with mutual "
"authentication"
msgstr ""
"������������������������TLS������������������������TLS������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:26
#, fuzzy
msgid ""
"Quarkus gRPC is based on https://vertx.io/docs/vertx-grpc/java/[Vert.x gRPC]."
""
msgstr ""
"Quarkus gRPC��� link:https://vertx.io/docs/vertx-grpc/java/[Vert.x "
"gRPC���]������������������������������"

#. type: Plain text
#: upstream/_guides/grpc.adoc:28
#, fuzzy
msgid "link:./grpc-getting-started.adoc[Getting Started]"
msgstr "link:./grpc-getting-started.adoc[������������]"

#. type: Plain text
#: upstream/_guides/grpc.adoc:29
#, fuzzy
msgid "link:./grpc-service-implementation.adoc[Implementing a gRPC Service]"
msgstr "link:./grpc-service-implementation.adoc[gRPC���������������������]"

#. type: Plain text
#: upstream/_guides/grpc.adoc:29
#, fuzzy
msgid "link:./grpc-service-consumption.adoc[Consuming a gRPC Service]"
msgstr ""
"link:./grpc-service-consumption.adoc[gRPC ���������������������������]"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/tika.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using Apache Tika"
msgstr "Quarkus - Apache Tika���������"

#. type: Plain text
#: upstream/_guides/tika.adoc:11
#, fuzzy
msgid ""
"This guide explains how your Quarkus application can use https://tika.apache."
"org/[Apache Tika] to parse the documents."
msgstr ""
"������������������������Quarkus��������������������������� link:https://tika."
"apache.org/[Apache "
"Tika]������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/tika.adoc:13
#, fuzzy
msgid ""
"https://tika.apache.org/[Apache Tika] is a content analysis toolkit which is "
"used to parse the documents in PDF, Open Document, Excel and many other well "
"known binary and text formats using a simple uniform API. Both the document "
"text and properties (metadata) are available once the document has been "
"parsed."
msgstr ""
"link:https://tika.apache.org/[Apache Tika "
"���]������������������������������������������������������������������ API "
"������������ PDF, Open Document, Excel "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"(���������������) "
"������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/tika.adoc:17
#, fuzzy
msgid ""
"If you are planning to run the application as a native executable and parse "
"documents that may have been created with charsets different than the "
"standard ones supported in Java such as `UTF-8` then you should configure "
"Quarkus Maven Plugin to get the native image generator include all the "
"charsets available to the JVM:"
msgstr ""
"��������������������������������������������������������������������������������� "
"`UTF-8` "
"������������Java���������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus "
"Maven "
"Plugin������������������������������������������������������������������JVM���������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:35
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-maven-plugin</artifactId>\n"
"    <executions>\n"
"        <execution>\n"
"            <id>native-image</id>\n"
"            <goals>\n"
"                <goal>native-image</goal>\n"
"            </goals>\n"
"            <configuration>\n"
"                <addAllCharsets>true</addAllCharsets>\n"
"                ...\n"
"            </configuration>\n"
"        </execution>\n"
"    </executions>\n"
"</plugin>\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/tika.adoc:44
#, fuzzy
msgid "less than 20 minutes"
msgstr "������������"

#. type: delimited block =
#: upstream/_guides/tika.adoc:48
#, fuzzy
msgid "Docker"
msgstr "������������"

#. type: delimited block =
#: upstream/_guides/tika.adoc:49
#, fuzzy
msgid ""
"link:building-native-image[GraalVM installed if you want to run in native "
"mode]"
msgstr ""
"link:building-native-"
"image[���������������������������������������������������������GraalVM������������������������������������������]"

#. type: delimited block =
#: upstream/_guides/tika.adoc:58
#, fuzzy
msgid ""
"The solution is located in the `tika-quickstart` {quickstarts-tree-url}/tika-"
"quickstart[directory]."
msgstr ""
"������������������������ `tika-quickstart` {quickstarts-tree-url}/tika-"
"quickstart[directory] ������������������"

#. type: Plain text
#: upstream/_guides/tika.adoc:62
#, fuzzy
msgid ""
"The provided solution contains a few additional elements such as tests and "
"testing infrastructure."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:78
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme.example \\\n"
"    -DprojectArtifactId=tika-quickstart \\\n"
"    -DclassName=\"org.acme.tika.TikaParserResource\" \\\n"
"    -Dpath=\"/parse\" \\\n"
"    -Dextensions=\"tika,resteasy\"\n"
"cd tika-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tika.adoc:81
#, fuzzy
msgid ""
"This command generates a Maven project, importing the `tika` and `resteasy` "
"extensions."
msgstr ""
"������������������������ `tika` ��� `resteasy` "
"���������������������������������������Maven "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/tika.adoc:84
#, fuzzy
msgid ""
"If you already have your Quarkus project configured you can add the `tika` "
"and `resteasy` extensions to your project by running the following command "
"in your project base directory."
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`tika` ��� `resteasy` "
"���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:88
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"tika,resteasy\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:102
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-tika</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/tika.adoc:104
#, no-wrap, fuzzy
msgid "Examine the generated JAX-RS resource"
msgstr "���������������JAX-RS������������������������"

#. type: Plain text
#: upstream/_guides/tika.adoc:107
#, fuzzy
msgid ""
"Open the `src/main/java/org/acme/tika/TikaParserResource.java` file and see "
"the following content:"
msgstr ""
"`src/main/java/org/acme/tika/TikaParserResource.java` "
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:111 upstream/_guides/tika.adoc:135
#, no-wrap
msgid "package org.acme.tika;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:119
#, no-wrap
msgid "@Path(\"/parse\")\n"
"public class TikaParserResource {\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/tika.adoc:128
#, no-wrap, fuzzy
msgid "Update the JAX-RS resource"
msgstr "JAX-RS���������������������"

#. type: Plain text
#: upstream/_guides/tika.adoc:131
#, fuzzy
msgid ""
"Next update `TikaParserResource` to accept and parse PDF and OpenDocument "
"format documents:"
msgstr ""
"������ `TikaParserResource` ������������������PDF ��������� OpenDocument "
"������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:139
#, no-wrap
msgid ""
"import java.io.InputStream;\n"
"import java.time.Duration;\n"
"import java.time.Instant;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:146
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:149
#, no-wrap
msgid "import io.quarkus.tika.TikaParser;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:153
#, no-wrap
msgid ""
"@Path(\"/parse\")\n"
"public class TikaParserResource {\n"
"    private static final Logger log = Logger.getLogger(TikaParserResource."
"class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:156
#, no-wrap
msgid "    @Inject\n"
"    TikaParser parser;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:163
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/text\")\n"
"    @Consumes({\"application/pdf\", \"application/vnd.oasis.opendocument."
"text\"})\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String extractText(InputStream stream) {\n"
"        Instant start = Instant.now();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:165
#, no-wrap
msgid "        String text = parser.getText(stream);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:167
#, no-wrap
msgid "        Instant finish = Instant.now();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:169
#, no-wrap
msgid ""
"        log.info(Duration.between(start, finish).toMillis() + \" mls have "
"passed\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/tika.adoc:173
#, no-wrap
msgid "        return text;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tika.adoc:176
#, fuzzy
msgid ""
"As you can see the JAX-RS resource method was renamed to `extractText`, "
"`@GET` annotation was replaced with `POST` and `@Path(/text)` annotation was "
"added, and `@Consumes` annotation shows that PDF and OpenDocument media type "
"formats can now be accepted. An injected `TikaParser` is used to parse the "
"documents and report the extracted text. It also measures how long does it "
"take to parse a given document."
msgstr ""
"���������������������JAX-RS��������������������������������������� "
"`extractText` ������������������ `@GET` ������������������������ `POST` "
"��������������������� `@Path(/text)` ��������������������������������������� "
"`@Consumes` ������������������������������PDF ��� OpenDocument "
"��������������������������������������������������������������������������������������������������������������������������������������� "
"`TikaParser` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/tika.adoc:177
#, no-wrap, fuzzy
msgid "Run the application"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/tika.adoc:180
#, fuzzy
msgid "Now we are ready to run our application. Use:"
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/tika.adoc:187
#, fuzzy
msgid "and you should see output similar to:"
msgstr "���������������������������������������������������"

#. type: Block title
#: upstream/_guides/tika.adoc:188
#, no-wrap, fuzzy
msgid "quarkus:dev Output"
msgstr "quarkus:dev ������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:206
#, no-wrap
msgid ""
"$ ./mvnw clean compile quarkus:dev\n"
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"INFO] --------------------< org.acme.example:apache-tika >-------------------"
"-\n"
"[INFO] Building apache-tika 1.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]-------------------------------"
"--\n"
"...\n"
"Listening for transport dt_socket at address: 5005\n"
"2019-10-15 14:23:26,442 INFO  [io.qua.dep.QuarkusAugmentor] (main) Beginning "
"quarkus augmentation\n"
"2019-10-15 14:23:26,960 INFO  [io.qua.resteasy] (build-15) Resteasy running "
"without servlet container.\n"
"2019-10-15 14:23:26,960 INFO  [io.qua.resteasy] (build-15) - Add quarkus-"
"undertow to run Resteasy within a servlet container\n"
"2019-10-15 14:23:26,991 INFO  [io.qua.dep.QuarkusAugmentor] (main) Quarkus "
"augmentation completed in 549ms\n"
"2019-10-15 14:23:27,637 INFO  [io.quarkus] (main) Quarkus 999-SNAPSHOT "
"started in 1.361s. Listening on: http://0.0.0.0:8080\n"
"2019-10-15 14:23:27,638 INFO  [io.quarkus] (main) Profile dev activated. "
"Live Coding activated.\n"
"2019-10-15 14:23:27,639 INFO  [io.quarkus] (main) Installed features: [cdi, "
"resteasy, tika]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tika.adoc:209
#, fuzzy
msgid ""
"Now that the REST endpoint is running, we can get it to parse PDF and "
"OpenDocument documents using a command line tool like curl:"
msgstr ""
"REST ������������������������������������������������������curl "
"��������������������������������������������������������� PDF ��� "
"OpenDocument ���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:214
#, no-wrap
msgid ""
"$ curl -X POST -H \"Content-type: application/pdf\" --data-binary @target/"
"classes/quarkus.pdf http://localhost:8080/parse/text\n"
"Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tika.adoc:217
#, fuzzy
msgid "and"
msgstr "���������"

#. type: delimited block -
#: upstream/_guides/tika.adoc:222
#, no-wrap
msgid ""
"$ curl -X POST -H \"Content-type: Content-type: application/vnd.oasis."
"opendocument.text\" --data-binary @target/classes/quarkus.odt http://"
"localhost:8080/parse/text\n"
"Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/tika.adoc:228
#, fuzzy
msgid ""
"You can build a native executable with the usual command `./mvnw package -"
"Pnative`.  Running it is as simple as executing `./target/tika-quickstart-1."
"0-SNAPSHOT-runner`."
msgstr ""
"��������������������� `./mvnw package -Pnative` "
"��������������������������������������������������������������������������� "
"`./target/tika-quickstart-1.0-SNAPSHOT-runner` "
"���������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/spring-web.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Quarkus Extension for Spring Web API"
msgstr "Quarkus - Spring Web API������Quarkus������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:12
#, fuzzy
msgid ""
"While users are encouraged to use JAX-RS annotation for defining REST "
"endpoints, Quarkus provides a compatibility layer for Spring Web in the form "
"of the `spring-web` extension."
msgstr ""
"���������������REST���������������������������������JAX-"
"RS���������������������������������������������������������������������������Quarkus���Spring "
"Web������������������������������ `spring-web` "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:14
#, fuzzy
msgid ""
"This guide explains how a Quarkus application can leverage the well known "
"Spring Web annotations to define RESTful services."
msgstr ""
"������������������������Quarkus���������������������������������������������������Spring "
"Web������������������������������������RESTful���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:35
#, fuzzy
msgid ""
"The solution is located in the `spring-web-quickstart` {quickstarts-tree-"
"url}/spring-web-quickstart[directory]."
msgstr ""
"������������������������ `spring-web-quickstart` {quickstarts-tree-url}/"
"spring-web-quickstart[directory] ������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:49
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=spring-web-quickstart \\\n"
"    -DclassName=\"org.acme.spring.web.GreetingController\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"spring-web\"\n"
"cd spring-web-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:52
#, fuzzy
msgid ""
"This command generates a Maven project with a REST endpoint and imports the "
"`spring-web` extension."
msgstr ""
"������������������������REST������������������������������Maven��������������������������������� "
"`spring-web` ���������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:55
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `spring-"
"web` extension to your project by running the following command in your "
"project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`spring-web` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:59
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"spring-web\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:69
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-spring-web</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:75
#, fuzzy
msgid ""
"The Quarkus maven plugin automatically generated a controller with the "
"Spring Web annotations to define our REST endpoint (instead of the JAX-RS "
"ones used by default)  The `src/main/java/org/acme/spring/web/"
"GreetingController.java` file looks as follows:"
msgstr ""
"Quarkus���maven���������������������REST���������������������������������������������Spring "
"Web���������������������������������������������������������������������������������������������������������������������������JAX-"
"RS������������������������ `src/main/java/org/acme/spring/web/"
"GreetingController.java` ������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:79 upstream/_guides/spring-web.adoc:102
#: upstream/_guides/spring-web.adoc:175
#, no-wrap
msgid "package org.acme.spring.web;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:83
#, no-wrap
msgid ""
"import org.springframework.web.bind.annotation.GetMapping;\n"
"import org.springframework.web.bind.annotation.RequestMapping;\n"
"import org.springframework.web.bind.annotation.RestController;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:87 upstream/_guides/spring-web.adoc:150
#, no-wrap
msgid ""
"@RestController\n"
"@RequestMapping(\"/greeting\")\n"
"public class GreetingController {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:93
#, no-wrap
msgid ""
"    @GetMapping\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/spring-web.adoc:95
#, no-wrap, fuzzy
msgid "GreetingControllerTest"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:98
#, fuzzy
msgid "Note that a test for the controller has been created as well:"
msgstr ""
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:184
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:108 upstream/_guides/spring-web.adoc:181
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:111 upstream/_guides/spring-web.adoc:184
#, no-wrap
msgid "@QuarkusTest\n"
"public class GreetingControllerTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:120
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/greeting\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(is(\"hello\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:130
#, fuzzy
msgid "The result should be: `{\"message\": \"hello\"}`."
msgstr "��������� `{\"message\": \"hello\"}`."

#. type: Title ==
#: upstream/_guides/spring-web.adoc:135
#, no-wrap, fuzzy
msgid "Going further with an endpoint returning JSON"
msgstr "JSON������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:139
#, fuzzy
msgid ""
"The `GreetingController` above was an example of a very simple endpoint. In "
"many cases however it is required to return JSON content.  The following "
"example illustrates how that could be achieved using a Spring RestController:"
""
msgstr ""
"������ `GreetingController` "
"������������������������������������������������������������������������������������������JSON���������������������������������������������������������������Spring "
"RestController���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:146
#, no-wrap
msgid ""
"import org.springframework.web.bind.annotation.GetMapping;\n"
"import org.springframework.web.bind.annotation.PathVariable;\n"
"import org.springframework.web.bind.annotation.RequestMapping;\n"
"import org.springframework.web.bind.annotation.RestController;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:155
#, no-wrap
msgid ""
"    @GetMapping(\"/{name}\")\n"
"    public Greeting hello(@PathVariable(name = \"name\") String name) {\n"
"        return new Greeting(\"hello \" + name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:158
#, no-wrap
msgid ""
"    public static class Greeting {\n"
"        private final String message;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:162
#, no-wrap
msgid ""
"        public Greeting(String message) {\n"
"            this.message = message;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:168
#, no-wrap
msgid ""
"        public String getMessage(){\n"
"            return message;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:171
#, fuzzy
msgid "The corresponding test could look like:"
msgstr "������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:193
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/greeting/quarkus\")\n"
"          .then()\n"
"            .statusCode(200)\n"
"            .body(\"message\", is(\"hello quarkus\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:198
#, fuzzy
msgid ""
"It should be noted that when using the Spring Web support in Quarkus, link:"
"https://github.com/FasterXML/jackson[Jackson] is automatically added to the "
"classpath and properly setup."
msgstr ""
"���������������������Quarkus���Spring "
"Web������������������������������������ link:https://github.com/FasterXML/"
"jackson[Jackson���]������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/spring-web.adoc:199
#, no-wrap, fuzzy
msgid "Adding OpenAPI and Swagger-UI"
msgstr "OpenAPI���Swagger-UI���������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:202
#, fuzzy
msgid ""
"You can add support for link:https://www.openapis.org/[OpenAPI] and link:"
"https://swagger.io/tools/swagger-ui/[Swagger-UI] by using the `quarkus-"
"smallrye-openapi` extension."
msgstr ""
"`quarkus-smallrye-openapi` ������������������������������ link:https://www."
"openapis.org/[OpenAPI]��� link:https://swagger.io/tools/swagger-ui/[Swagger-"
"UI]������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:204
#, fuzzy
msgid "Add the extension by running this command:"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:208
#, no-wrap
msgid ""
"./mvnw quarkus:add-extension -Dextensions=\"io.quarkus:quarkus-smallrye-"
"openapi\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:218
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-openapi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:221
#, fuzzy
msgid ""
"This is enough to generate a basic OpenAPI schema document from your REST "
"Endpoints:"
msgstr ""
"������������REST ��������������������������������������� OpenAPI "
"������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:225
#, no-wrap
msgid "curl http://localhost:8080/openapi\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:228
#, fuzzy
msgid "You will see the generated OpenAPI schema document:"
msgstr ""
"��������������� OpenAPI "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:250 upstream/_guides/vault-auth.adoc:350
#, no-wrap
msgid "---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:268
#, no-wrap
msgid ""
"openapi: 3.0.1\n"
"info:\n"
"  title: Generated API\n"
"  version: \"1.0\"\n"
"paths:\n"
"  /greeting:\n"
"    get:\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
"  /greeting/{name}:\n"
"    get:\n"
"      parameters:\n"
"      - name: name\n"
"        in: path\n"
"        required: true\n"
"        schema:\n"
"          type: string\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                $ref: '#/components/schemas/Greeting'\n"
"components:\n"
"  schemas:\n"
"    Greeting:\n"
"      type: object\n"
"      properties:\n"
"        message:\n"
"          type: string\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:271
#, fuzzy
msgid ""
"Also see link:https://quarkus.io/guides/openapi-swaggerui[the OpenAPI Guide]"
msgstr ""
"link:https://quarkus.io/guides/openapi-"
"swaggerui[OpenAPI���������]������������������������������"

#. type: Title ===
#: upstream/_guides/spring-web.adoc:272
#, no-wrap, fuzzy
msgid "Adding MicroProfile OpenAPI Annotations"
msgstr "MicroProfile OpenAPI������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:276
#, fuzzy
msgid ""
"You can use link:https://github.com/eclipse/microprofile-open-"
"api[MicroProfile OpenAPI] to better document your schema, example, adding "
"the following to the class level of the `GreetingController`:"
msgstr ""
"link:https://github.com/eclipse/microprofile-open-api[MicroProfile OpenAPI "
"���]������������������������������������������������������������������������������������������ "
"`GreetingController`.NET Framework "
"���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:291
#, no-wrap
msgid ""
"@OpenAPIDefinition(\n"
"    info = @Info(\n"
"        title=\"Greeting API\",\n"
"        version = \"1.0.1\",\n"
"        contact = @Contact(\n"
"            name = \"Greeting API Support\",\n"
"            url = \"http://exampleurl.com/contact\",\n"
"            email = \"techsupport@example.com\"),\n"
"        license = @License(\n"
"            name = \"Apache 2.0\",\n"
"            url = \"http://www.apache.org/licenses/LICENSE-2.0.html\"))\n"
")\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:294
#, fuzzy
msgid "And describe your endpoints like this:"
msgstr ""
"������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:302
#, no-wrap
msgid ""
"@Tag(name = \"Hello\", description = \"Just say hello\")\n"
"@GetMapping(produces=MediaType.TEXT_PLAIN_VALUE)\n"
"public String hello() {\n"
"    return \"hello\";\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:308
#, no-wrap
msgid ""
"@GetMapping(value = \"/{name}\", produces=MediaType.APPLICATION_JSON_VALUE)\n"
"@Tag(name = \"Hello to someone\", description = \"Just say hello to "
"someone\")\n"
"public Greeting hello(@PathVariable(name = \"name\") String name) {\n"
"    return new Greeting(\"hello \" + name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/spring-web.adoc:311
#, fuzzy
msgid "will generate this OpenAPI schema:"
msgstr "���������OpenAPI���������������������������������"

#. type: delimited block -
#: upstream/_guides/spring-web.adoc:367
#, no-wrap
msgid ""
"openapi: 3.0.1\n"
"info:\n"
"  title: Greeting API\n"
"  contact:\n"
"    name: Greeting API Support\n"
"    url: http://exampleurl.com/contact\n"
"    email: techsupport@example.com\n"
"  license:\n"
"    name: Apache 2.0\n"
"    url: http://www.apache.org/licenses/LICENSE-2.0.html\n"
"  version: 1.0.1\n"
"tags:\n"
"- name: Hello\n"
"  description: Just say hello\n"
"- name: Hello to someone\n"
"  description: Just say hello to someone\n"
"paths:\n"
"  /greeting:\n"
"    get:\n"
"      tags:\n"
"      - Hello\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                type: string\n"
"  /greeting/{name}:\n"
"    get:\n"
"      tags:\n"
"      - Hello to someone\n"
"      parameters:\n"
"      - name: name\n"
"        in: path\n"
"        required: true\n"
"        schema:\n"
"          type: string\n"
"      responses:\n"
"        \"200\":\n"
"          description: OK\n"
"          content:\n"
"            '*/*':\n"
"              schema:\n"
"                $ref: '#/components/schemas/Greeting'\n"
"components:\n"
"  schemas:\n"
"    Greeting:\n"
"      type: object\n"
"      properties:\n"
"        message:\n"
"          type: string\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/spring-web.adoc:369
#, no-wrap, fuzzy
msgid "Using Swagger UI"
msgstr "Swagger���UI���������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:373
#, fuzzy
msgid ""
"Swagger UI is included by default when running in `Dev` or `Test` mode, and "
"can optionally added to `Prod` mode.  See link:https://quarkus.io/guides/"
"openapi-swaggerui#use-swagger-ui-for-development[the Swagger UI] Guide for "
"more details."
msgstr ""
"Swagger UI������ `Dev` ��������� `Test` "
"������������������������������������������������������������������������������������������������ "
"`Prod` "
"������������������������������������������������������������������������ "
"link:https://quarkus.io/guides/openapi-swaggerui#use-swagger-ui-for-"
"development[Swagger]UI���������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:375
#, fuzzy
msgid ""
"Navigate to link:http://localhost:8080/swagger-ui/[localhost:8080/swagger-ui/"
"] and you will see the Swagger UI screen:"
msgstr ""
"link:http://localhost:8080/swagger-ui/[localhost:8080/swagger-ui/"
"]���������������������Swagger UI���������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:377
#, fuzzy
msgid "image:spring-web-guide-screenshot01.png[alt=Swagger UI]"
msgstr "image:spring-web-guide-screenshot01.png[alt=Swagger UI]"

#. type: Title ==
#: upstream/_guides/spring-web.adoc:378
#, no-wrap, fuzzy
msgid "Supported Spring Web functionalities"
msgstr "���������������������������Spring Web���������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:382
#, fuzzy
msgid ""
"Quarkus currently supports a subset of the functionalities that Spring Web "
"provides. More specifically Quarkus supports the REST related features of "
"Spring Web (think of `@RestController` instead of `@Controller`)."
msgstr ""
"Quarkus������������Spring "
"Web������������������������������������������������������������������������������������������������Quarkus���Spring "
"Web���REST��������������������������������������������� `@Controller` "
"��������������� `@RestController` ������������������������������"

#. type: Title ===
#: upstream/_guides/spring-web.adoc:383
#, no-wrap, fuzzy
msgid "Annotations"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:386
#, fuzzy
msgid "The table below summarizes the supported annotations:"
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/spring-web.adoc:387
#, no-wrap, fuzzy
msgid "Supported Spring Web annotation"
msgstr "���������������������������Spring Web���������������������"

#. type: Table
#: upstream/_guides/spring-web.adoc:424
#, no-wrap, fuzzy
msgid ""
"|Name|Comments\n"
"\n"
"|@RestController\n"
"|\n"
"\n"
"|@RequestMapping\n"
"|\n"
"|@GetMapping\n"
"|\n"
"|@PostMapping\n"
"|\n"
"|@PutMapping\n"
"|\n"
"|@DeleteMapping\n"
"|\n"
"|@PatchMapping\n"
"|\n"
"|@RequestParam\n"
"|\n"
"|@RequestHeader\n"
"|\n"
"|@MatrixVariable\n"
"|\n"
"|@PathVariable\n"
"|\n"
"|@CookieValue\n"
"|\n"
"|@RequestBody\n"
"|\n"
"|@ResponseStatus\n"
"|\n"
"|@ExceptionHandler\n"
"|Can only be used in a @RestControllerAdvice class, not on a per-controller "
"basis\n"
"|@RestControllerAdvice\n"
"|Only the @ExceptionHandler capability is supported\n"
msgstr "|������|������������"

#. type: Title ===
#: upstream/_guides/spring-web.adoc:426
#, no-wrap, fuzzy
msgid "Controller method return types"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:429 upstream/_guides/spring-web.adoc:444
#, fuzzy
msgid "The following method return types are supported:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:431
#, fuzzy
msgid "Primitive types"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:432
#, fuzzy
msgid ""
"String (which will be used as a literal, no Spring MVC view support is "
"provided)"
msgstr ""
"��������� (������������������������������������������Spring MVC "
"������������������������������������������)"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:433
#, fuzzy
msgid "POJO classes which will be serialized via JSON"
msgstr "JSON ������������������������������������ POJO ���������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:434 upstream/_guides/spring-web.adoc:446
#, fuzzy
msgid "`org.springframework.http.ResponseEntity`"
msgstr "`org.springframework.http.ResponseEntity`"

#. type: Title ===
#: upstream/_guides/spring-web.adoc:435
#, no-wrap, fuzzy
msgid "Controller method parameter types"
msgstr "���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:440
#, fuzzy
msgid ""
"In addition to the method parameters that can be annotated with the "
"appropriate Spring Web annotations from the previous table, `javax.servlet."
"http.HttpServletRequest` and `javax.servlet.http.HttpServletResponse` are "
"also supported.  For this to function however, users need to add the "
"`quarkus-undertow` dependency."
msgstr ""
"���������������������Spring "
"Web������������������������������������������������������������������������������������������������ "
"`javax.servlet.http.HttpServletRequest` ��� `javax.servlet.http."
"HttpServletResponse` "
"������������������������������������������������������������������������������������ "
"`quarkus-undertow` ���������������������������������������������������"

#. type: Title ===
#: upstream/_guides/spring-web.adoc:441
#, no-wrap, fuzzy
msgid "Exception handler method return types"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:447
#, fuzzy
msgid "`java.util.Map`"
msgstr "`java.util.Map`"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:449
#, fuzzy
msgid ""
"Other return types mentioned in the Spring `https://docs.spring.io/spring-"
"framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/"
"ExceptionHandler.html[ExceptionHandler javadoc]` are not supported."
msgstr ""
"Spring��������������������������������������������� `&lt;a href=\"https://"
"docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/"
"web/bind/annotation/ExceptionHandler.html\"&gt;ExceptionHandler javadoc&lt;/"
"a&gt;`���������������������������������������"

#. type: Title ===
#: upstream/_guides/spring-web.adoc:450
#, no-wrap, fuzzy
msgid "Exception handler method parameter types"
msgstr "���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:453
#, fuzzy
msgid "The following parameter types are supported, in arbitrary order:"
msgstr "���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:455
#, fuzzy
msgid ""
"An exception argument: declared as a general `Exception` or as a more "
"specific exception. This also serves as a mapping hint if the annotation "
"itself does not narrow the exception types through its `value()`."
msgstr ""
"��������������������������� `Exception` "
"��������������������������������������������������������������������������������������������������������������������������������������������� "
"`value()`."

#. type: Plain text
#: upstream/_guides/spring-web.adoc:456
#, fuzzy
msgid ""
"Request and/or response objects (typically from the Servlet API). You may "
"choose any specific request/response type, e.g. `ServletRequest` / "
"`HttpServletRequest`. To use Servlet API, the `quarkus-undertow` dependency "
"needs to be added."
msgstr ""
"������������������������/������������������������������������������ "
"(��������������������������� API ������)��� `ServletRequest` "
"`HttpServletRequest`������������������������/"
"���������������������������������������������������������������Servlet API "
"��������������������� `quarkus-undertow` "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:458
#, fuzzy
msgid ""
"Other parameter types mentioned in the Spring `https://docs.spring.io/spring-"
"framework/docs/current/javadoc-api/org/springframework/web/bind/annotation/"
"ExceptionHandler.html[ExceptionHandler javadoc]` are not supported."
msgstr ""
"Spring������������������������������������������������������ `&lt;a href="
"\"https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/"
"springframework/web/bind/annotation/ExceptionHandler."
"html\"&gt;ExceptionHandler javadoc&lt;/"
"a&gt;`���������������������������������������"

#. type: Title ==
#: upstream/_guides/spring-web.adoc:459
#, no-wrap, fuzzy
msgid "Important Technical Note"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:465
#, fuzzy
msgid ""
"Please note that the Spring support in Quarkus does not start a Spring "
"Application Context nor are any Spring infrastructure classes run.  Spring "
"classes and annotations are only used for reading metadata and / or are used "
"as user code method return types or parameter types.  What that means for "
"end users, is that adding arbitrary Spring libraries will not have any "
"effect. Moreover Spring infrastructure classes (like `org.springframework."
"beans.factory.config.BeanPostProcessor` for example) will not be executed."
msgstr ""
"Quarkus���Spring������������������Spring���������������������������������������������������������������Spring������������������������������������������������������������������������������������������������������Spring���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Spring������������������������������������������������������������������������������������������Spring������������������������������������������(��������� "
"`org.springframework.beans.factory.config.BeanPostProcessor` "
"������������)���������������������������"

#. type: Title ==
#: upstream/_guides/spring-web.adoc:466
#, no-wrap, fuzzy
msgid "Conversion Table"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:469
#, fuzzy
msgid ""
"The following table shows how Spring Web annotations can be converted to JAX-"
"RS annotations."
msgstr ""
"���������������Spring Web������������������������JAX-"
"RS������������������������������������������������������������������"

#. type: Table
#: upstream/_guides/spring-web.adoc:512
#, no-wrap, fuzzy
msgid ""
"|Spring |JAX-RS |Comments\n"
"\n"
"|@RequestController\n"
"|\n"
"|There is no equivalent in JAX-RS. Annotating a class with @Path suffices\n"
"\n"
"|@RequestMapping(path=\"/api\")\n"
"|@Path(\"/api\")\n"
"|\n"
"\n"
"|@RequestMapping(consumes=\"application/json\")\n"
"|@Consumes(\"application/json\")\n"
"|\n"
"\n"
"|@RequestMapping(produces=\"application/json\")\n"
"|@Produces(\"application/json\")\n"
"|\n"
"\n"
"|@RequestParam\n"
"|@QueryParam\n"
"|\n"
"\n"
"|@PathVariable\n"
"|@PathParam\n"
"|\n"
"\n"
"|@RequestBody\n"
"|\n"
"|No equivalent in JAX-RS. Method parameters corresponding to the body of the "
"request are handled in JAX-RS without requiring any annotation\n"
"\n"
"|@RestControllerAdvice\n"
"|\n"
"|No equivalent in JAX-RS\n"
"\n"
"|@ResponseStatus\n"
"|\n"
"|No equivalent in JAX-RS\n"
"\n"
"|@ExceptionHandler\n"
"|\n"
"|No equivalent annotation in JAX-RS. Exceptions are handled by implementing "
"`javax.ws.rs.ext.ExceptionMapper`\n"
msgstr "|������JAX-RS���������������"

#. type: Plain text
#: upstream/_guides/spring-web.adoc:522
#, fuzzy
msgid ""
"link:spring-cloud-config-client[Quarkus - Reading properties from Spring "
"Cloud Config Server]"
msgstr ""
"link:spring-cloud-config-client[Quarkus - Spring Cloud Config "
"Server������������������������������������]"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/tooling.adoc:6
#, no-wrap
msgid "Quarkus - Using our Tooling"
msgstr "Quarkus - ������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:12
msgid ""
"Quarkus comes with a toolchain enabling developers from live reload all the "
"way down to deploying a Kubernetes application.  In this guide, we will "
"explore:"
msgstr ""
"Quarkus������������������������������������������������Kubernetes���������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:14
msgid "how to use link:maven-tooling[Maven] as a build tool"
msgstr "������������������������������ link:maven-tooling[Maven]������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:15
msgid "how to use link:gradle-tooling[Gradle] as a build tool"
msgstr ""
"������������������������������ link:gradle-tooling[Gradle]������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:16
msgid "how to use the native CLI for your toolchain (coming soon)"
msgstr ""
"���������������CLI��������������������������������������������� "
"(������������������)"

#. type: Plain text
#: upstream/_guides/tooling.adoc:17
msgid "how to create and scaffold a new project"
msgstr ""
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:18
msgid "how to deal with extensions"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:19
msgid "how to enable live reload"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:20
msgid "how to develop your application in your IDE"
msgstr "IDE������������������������������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:21
msgid "how to compile your application natively"
msgstr ""
"������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/tooling.adoc:23
#, no-wrap
msgid "Choosing your build tool"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:28
msgid ""
"Quarkus comes with a toolchain to help you at all development stages.  You "
"can use Maven or Gradle as build tool.  And we offer a native CLI that is "
"convenient to use (coming soon)."
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������������������������Maven���Gradle������������������������������������������������������������������������������CLI���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/tooling.adoc:30
msgid "link:maven-tooling[Maven]"
msgstr "link:maven-tooling[Maven]"

#. * link:cli-tooling[CLI]
#. type: Plain text
#: upstream/_guides/tooling.adoc:31
msgid "link:gradle-tooling[Gradle]"
msgstr "link:gradle-tooling[Gradle]"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amqp.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using AMQP with Reactive Messaging"
msgstr ""
"Quarkus - ������������������������������������������AMQP���������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:12
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can utilize "
"MicroProfile Reactive Messaging to interact with AMQP."
msgstr ""
"������������������������Quarkus���������������������������MicroProfile "
"Reactive "
"Messaging���������������AMQP������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:24
#, fuzzy
msgid ""
"A running AMQP 1.0 broker, or Docker Compose to start a development cluster"
msgstr ""
"������������AMQP 1.0���������������������������Docker "
"Compose������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:33
#, fuzzy
msgid ""
"In this guide, we are going to generate (random) prices in one component.  "
"These prices are written in an AMQP queue (`prices`).  A second component "
"reads from the `prices` queue and apply some magic conversion to the price.  "
"The result is sent to an in-memory stream consumed by a JAX-RS resource.  "
"The data is sent to a browser using server-sent events."
msgstr ""
"������������������������1������������������������������(���������������)������������������������������������������������AMQP���������( "
"`prices`)���������������������������2��������������������������������� "
"`prices` "
"������������������������������������������������������������������������������������������������������������JAX-"
"RS������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Target for macro image
#: upstream/_guides/amqp.adoc:34
#, no-wrap
msgid "amqp-guide-architecture.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:44
#, fuzzy
msgid ""
"The solution is located in the `amqp-quickstart` {quickstarts-tree-url}/amqp-"
"quickstart[directory]."
msgstr ""
"������������������������ `amqp-quickstart` {quickstarts-tree-url}/amqp-"
"quickstart[directory] ������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:56
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amqp-quickstart \\\n"
"    -Dextensions=\"amqp\"\n"
"cd amqp-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:59
#, fuzzy
msgid ""
"This command generates a Maven project, importing the Reactive Messaging and "
"AMQP connector extensions."
msgstr ""
"������������������������Reactive "
"Messaging���AMQP������������������������������������������Maven���������������������������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:60
#, no-wrap, fuzzy
msgid "Starting an AMQP broker"
msgstr "AMQP������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:64
#, fuzzy
msgid ""
"Then, we need an AMQP broker.  You can follow the instructions from the "
"https://activemq.apache.org/components/artemis/[Apache Artemis web site] or "
"create a `docker-compose.yaml` file with the following content:"
msgstr ""
"���������AMQP��������������������������������� link:https://activemq.apache."
"org/components/artemis/[Apache "
"Artemis���Web���������]������������������������������������������ `docker-"
"compose.yaml` ���������������������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:70
#, no-wrap
msgid ""
"# A docker compose file to start an Artemis AMQP broker\n"
"# more details on https://github.com/vromero/activemq-artemis-docker.\n"
"version: '2'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:72
#, no-wrap
msgid "services:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:82
#, no-wrap
msgid ""
"  artemis:\n"
"    image: vromero/activemq-artemis:2.8.0-alpine\n"
"    ports:\n"
"      - \"8161:8161\"\n"
"      - \"61616:61616\"\n"
"      - \"5672:5672\"\n"
"    environment:\n"
"      ARTEMIS_USERNAME: quarkus\n"
"      ARTEMIS_PASSWORD: quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:85
#, fuzzy
msgid "Once created, run `docker-compose up`."
msgstr "������������������ `docker-compose up` ���������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:87
#, fuzzy
msgid "This is a development cluster, do not use in production."
msgstr ""
"������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:88
#, no-wrap, fuzzy
msgid "The price generator"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:91
#, fuzzy
msgid ""
"Create the `src/main/java/org/acme/amqp/PriceGenerator.java` file, with the "
"following content:"
msgstr ""
"������������������ `src/main/java/org/acme/amqp/PriceGenerator.java` "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:95 upstream/_guides/amqp.adoc:137
#: upstream/_guides/amqp.adoc:178
#, no-wrap
msgid "package org.acme.amqp;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:98
#, no-wrap
msgid "import java.time.Duration;\n"
"import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:103
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:110
#, no-wrap
msgid ""
"/**\n"
" * A bean producing random prices every 5 seconds.\n"
" * The prices are written to a AMQP queue (prices). The AMQP configuration "
"is specified in the application configuration.\n"
" */\n"
"@ApplicationScoped\n"
"public class PriceGenerator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:152
#, no-wrap
msgid "    private Random random = new Random();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:119
#, no-wrap
msgid ""
"    @Outgoing(\"generated-price\")                        // <1>\n"
"    public Multi<Integer> generate() {                  // <2>\n"
"        return Multi.createFrom().ticks().every(Duration.ofSeconds(5))\n"
"                .onOverflow().drop()\n"
"                .map(tick -> random.nextInt(100));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:124
#, fuzzy
msgid ""
"Instruct Reactive Messaging to dispatch the items from returned stream to "
"`generated-price`."
msgstr ""
"��������������������������������� `generated-price` "
"��������������������������������������������������� Reactive Messaging "
"���������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:125
#, fuzzy
msgid ""
"The method returns a Mutiny _stream_ (`Multi`) emitting a random _price_ "
"every 5 seconds."
msgstr ""
"������������������������5��������������������������� _���������_������������ "
"Mutiny _���������������_( `Multi`) ������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:128
#, fuzzy
msgid ""
"The method returns a _Reactive Stream_. The generated items are sent to the "
"stream named `generated-price`.  This stream is mapped to an AMQP queue "
"using the `application.properties` file that we will create soon."
msgstr ""
"������������������������ _Reactive "
"���������������_������������������������������������������������ `generated-"
"price` "
"��������������������������������������������������������������������������������������������������������� "
"`application.properties` ��������������������������� AMQP "
"������������������������������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:129
#, no-wrap, fuzzy
msgid "The price converter"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:133
#, fuzzy
msgid ""
"The price converter reads the prices from AMQP, and transforms them.  Create "
"the `src/main/java/org/acme/amqp/PriceConverter.java` file with the "
"following content:"
msgstr ""
"���������������������������AMQP������������������������������������������������������������������ "
"`src/main/java/org/acme/amqp/PriceConverter.java` "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:141
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Broadcast;\n"
"import org.eclipse.microprofile.reactive.messaging.Incoming;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:150
#, no-wrap
msgid ""
"/**\n"
" * A bean consuming data from the \"prices\" AMQP queue and applying some "
"conversion.\n"
" * The result is pushed to the \"my-data-stream\" stream which is an in-"
"memory stream.\n"
" */\n"
"@ApplicationScoped\n"
"public class PriceConverter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:152
#, no-wrap
msgid "    private static final double CONVERSION_RATE = 0.88;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:159
#, no-wrap
msgid ""
"    @Incoming(\"prices\")                                  // <1>\n"
"    @Outgoing(\"my-data-stream\")                          // <2>\n"
"    @Broadcast                                           // <3>\n"
"    public double process(int priceInUsd) {\n"
"        return priceInUsd * CONVERSION_RATE;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:164
#, fuzzy
msgid "Indicates that the method consumes the items from the `prices` channel"
msgstr ""
"��������������� `prices` "
"���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:165
#, fuzzy
msgid ""
"Indicates that the objects returned by the method are sent to the `my-data-"
"stream` channel"
msgstr ""
"��������������������������������������������������������� `my-data-stream` "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:166
#, fuzzy
msgid "Indicates that the item are dispatched to all _subscribers_"
msgstr ""
"��������������������������� "
"_���������_������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:169
#, fuzzy
msgid ""
"The `process` method is called for every AMQP messages from the `prices` "
"queue (configured in the application configuration).  Every result is sent "
"to the `my-data-stream` in-memory stream."
msgstr ""
"`process` ������������������ `prices` "
"���������(������������������������������������������������������)��������� "
"AMQP ��������������������������������������������������������������������� "
"`my-data-stream` ���������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:170
#, no-wrap, fuzzy
msgid "The price resource"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:174
#, fuzzy
msgid ""
"Finally, let's bind our stream to a JAX-RS resource.  Creates the `src/main/"
"java/org/acme/amqp/PriceResource.java` file with the following content:"
msgstr ""
"������������������������������JAX-"
"RS��������������������������������������������������������������������� `src/"
"main/java/org/acme/amqp/PriceResource.java` "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:181
#, no-wrap
msgid ""
"import io.smallrye.reactive.messaging.annotations.Channel;\n"
"import org.reactivestreams.Publisher;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:193
#, no-wrap
msgid ""
"/**\n"
" * A simple resource retrieving the \"in-memory\" \"my-data-stream\" and "
"sending the items as server-sent events.\n"
" */\n"
"@Path(\"/prices\")\n"
"public class PriceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:196
#, no-wrap
msgid ""
"    @Inject\n"
"    @Channel(\"my-data-stream\") Publisher<Double> prices;         // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:202
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:210
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/stream\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)                     // <2>\n"
"    public Publisher<Double> stream() {                         // <3>\n"
"        return prices;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:212
#, fuzzy
msgid "Injects the `my-data-stream` channel using the `@Channel` qualifier"
msgstr ""
"`@Channel` ������������������������ `my-data-stream` "
"������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:213
#, fuzzy
msgid "Indicates that the content is sent using `Server Sent Events`"
msgstr ""
"������������������������������������������������������������������������������ "
"`Server Sent Events`"

#. type: Plain text
#: upstream/_guides/amqp.adoc:214
#, fuzzy
msgid "Returns the stream (_Reactive Stream_)"
msgstr "��������������� _���Reactive Stream_���������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:215
#, no-wrap, fuzzy
msgid "Configuring the AMQP connector"
msgstr "AMQP ���������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:219
#, fuzzy
msgid ""
"We need to configure the AMQP connector. This is done in the `application."
"properties` file.  The keys are structured as follows:"
msgstr ""
"AMQP ������������������������������������������������������������ "
"`application.properties` "
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:221
#, fuzzy
msgid "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"
msgstr "`mp.messaging.[outgoing|incoming].{channel-name}.property=value`"

#. type: Plain text
#: upstream/_guides/amqp.adoc:223
#, fuzzy
msgid ""
"The `channel-name` segment must match the value set in the `@Incoming` and "
"`@Outgoing` annotation:"
msgstr ""
"`channel-name` ��������������������� `@Incoming` ��������� `@Outgoing` "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:224
#, fuzzy
msgid "`generated-price` -> sink in which we write the prices"
msgstr "`generated-price` ��� ������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:225
#, fuzzy
msgid "`prices` -> source in which we read the prices"
msgstr "`prices` ��� ���������������������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:231
#, no-wrap
msgid ""
"# Configures the AMQP broker credentials.\n"
"amqp-username=quarkus\n"
"amqp-password=quarkus\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:235
#, no-wrap
msgid ""
"# Configure the AMQP connector to write to the `prices` address\n"
"mp.messaging.outgoing.generated-price.connector=smallrye-amqp\n"
"mp.messaging.outgoing.generated-price.address=prices\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:239
#, no-wrap
msgid ""
"# Configure the AMQP connector to read from the `prices` queue\n"
"mp.messaging.incoming.prices.connector=smallrye-amqp\n"
"mp.messaging.incoming.prices.durable=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:242
#, fuzzy
msgid ""
"More details about this configuration is available in the https://smallrye."
"io/smallrye-reactive-messaging/#_interacting_using_amqp[SmallRye Reactive "
"Messaging AMQP connector] documentation."
msgstr ""
"��������������������������������������� link:https://smallrye.io/smallrye-"
"reactive-messaging/#_interacting_using_amqp[SmallRye Reactive Messaging AMQP "
"���������������]������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:244
#, fuzzy
msgid ""
"What about `my-data-stream`? This is an in-memory stream, not connected to a "
"message broker."
msgstr ""
"`my-data-stream` "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:245
#, no-wrap, fuzzy
msgid "The HTML page"
msgstr "HTML���������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:248
#, fuzzy
msgid "Final touch, the HTML page reading the converted prices using SSE."
msgstr ""
"������������SSE���������������������������������������������������HTML������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:250
#, fuzzy
msgid ""
"Create the `src/main/resources/META-INF/resources/prices.html` file, with "
"the following content:"
msgstr ""
"������������������ `src/main/resources/META-INF/resources/prices.html` "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:258
#, no-wrap
msgid ""
"<!DOCTYPE html>\n"
"<html lang=\"en\">\n"
"<head>\n"
"    <meta charset=\"UTF-8\">\n"
"    <title>Prices</title>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:266
#, no-wrap
msgid ""
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/"
"css/patternfly.min.css\">\n"
"    <link rel=\"stylesheet\" type=\"text/css\"\n"
"          href=\"https://cdnjs.cloudflare.com/ajax/libs/patternfly/3.24.0/"
"css/patternfly-additions.min.css\">\n"
"</head>\n"
"<body>\n"
"<div class=\"container\">\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:281
#, no-wrap
msgid ""
"    <h2>Last price</h2>\n"
"    <div class=\"row\">\n"
"    <p class=\"col-md-12\">The last price is <strong><span id=\"content\">N/"
"A</span>&nbsp;&euro;</strong>.</p>\n"
"    </div>\n"
"</div>\n"
"</body>\n"
"<script src=\"https://code.jquery.com/jquery-3.3.1.min.js\"></script>\n"
"<script>\n"
"    var source = new EventSource(\"/prices/stream\");\n"
"    source.onmessage = function (event) {\n"
"        document.getElementById(\"content\").innerHTML = event.data;\n"
"    };\n"
"</script>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:284
#, fuzzy
msgid "Nothing spectacular here. On each received price, it updates the page."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/amqp.adoc:285
#, no-wrap, fuzzy
msgid "Get it running"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:289
#, fuzzy
msgid ""
"If you followed the instructions, you should have the AMQP broker running.  "
"Then, you just need to run the application using:"
msgstr ""
"���������������������AMQP���������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amqp.adoc:293
#, no-wrap
msgid "./mvnw quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:296
#, fuzzy
msgid "Open `http://localhost:8080/prices.html` in your browser."
msgstr ""
"������ `&lt;a href=\"http://localhost:8080/prices.html\" class="
"\"bare\"&gt;http://localhost:8080/prices.html&lt;/"
"a&gt;`���������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:298
#, fuzzy
msgid ""
"If you started the AMQP broker with docker compose, stop it using `CTRL+C` "
"followed by `docker-compose down`."
msgstr ""
"docker compose���AMQP������������������������������������������ `CTRL+C` "
"������������ `docker-compose down`."

#. type: Title ==
#: upstream/_guides/amqp.adoc:299
#, no-wrap, fuzzy
msgid "Running Native"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:302
#, fuzzy
msgid "You can build the native executable with:"
msgstr ""
"������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:580
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amqp.adoc:308
#, no-wrap, fuzzy
msgid "Imperative usage"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:311
#, fuzzy
msgid "Sometimes you need to have an imperative way of sending messages."
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:314
#, fuzzy
msgid ""
"For example, if you need to send a message to a stream from inside a REST "
"endpoint when receiving a POST request.  In this case, you cannot use "
"`@Outgoing` because your method has parameters."
msgstr ""
"������������POST ���������������������������������������REST "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@Outgoing` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:316
#, fuzzy
msgid "For this, you can use an `Emitter`."
msgstr "��������������������� `Emitter`."

#. type: delimited block -
#: upstream/_guides/amqp.adoc:321
#, no-wrap
msgid ""
"import org.eclipse.microprofile.reactive.messaging.Channel;\n"
"import org.eclipse.microprofile.reactive.messaging.Emitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:327
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:330
#, no-wrap
msgid "@Path(\"/prices\")\n"
"public class PriceResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:332
#, no-wrap
msgid "    @Inject @Channel(\"price-create\") Emitter<Double> priceEmitter;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amqp.adoc:339
#, no-wrap
msgid ""
"    @POST\n"
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    public void addPrice(Double price) {\n"
"        priceEmitter.send(price);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amqp.adoc:343
#, fuzzy
msgid ""
"The `Emitter` configuration is done the same way as the other stream "
"configuration used by `@Incoming` and `@Outgoing`.  In addition, you can use "
"`@OnOverflow` to configure a back-pressure strategy."
msgstr ""
"`Emitter` ��������������� `@Incoming` ��� `@Outgoing` "
"������������������������������������������������������������������������������������������ "
"`@OnOverflow` "
"������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/amqp.adoc:348
#, fuzzy
msgid ""
"The `io.smallrye.reactive.messaging.annotations.Emitter`, `io.smallrye."
"reactive.messaging.annotations.Channel` and `io.smallrye.reactive.messaging."
"annotations.OnOverflow` classes are now deprecated and replaced by:"
msgstr ""
"`io.smallrye.reactive.messaging.annotations.Emitter`, `io.smallrye.reactive."
"messaging.annotations.Channel`, `io.smallrye.reactive.messaging.annotations."
"OnOverflow` "
"���������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/amqp.adoc:350
#, fuzzy
msgid "`org.eclipse.microprofile.reactive.messaging.Emitter`"
msgstr "`org.eclipse.microprofile.reactive.messaging.Emitter`"

#. type: delimited block =
#: upstream/_guides/amqp.adoc:351
#, fuzzy
msgid "`org.eclipse.microprofile.reactive.messaging.Channel`"
msgstr "`org.eclipse.microprofile.reactive.messaging.Channel`"

#. type: delimited block =
#: upstream/_guides/amqp.adoc:352
#, fuzzy
msgid "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"
msgstr "`org.eclipse.microprofile.reactive.messaging.OnOverflow`"

#. type: delimited block =
#: upstream/_guides/amqp.adoc:354
#, fuzzy
msgid ""
"The new `Emitter.send` method returns a `CompletionStage` completed when the "
"produced message is acknowledged."
msgstr ""
"��������� `Emitter.send` "
"��������������������������������������������������������������������� "
"`CompletionStage` ������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:762
#, no-wrap, fuzzy
msgid "Going further"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:360
#, fuzzy
msgid ""
"This guide has shown how you can interact with AMQP using Quarkus.  It "
"utilizes MicroProfile Reactive Messaging to build data streaming "
"applications."
msgstr ""
"������������������������Quarkus���������������AMQP������������������������������������������������������������������MicroProfile "
"Reactive "
"Messaging������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:363
#, fuzzy
msgid ""
"If you did the Kafka quickstart, you have realized that it's the same code.  "
"The only difference is the connector configuration."
msgstr ""
"Kafka "
"������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amqp.adoc:364
#, fuzzy
msgid ""
"If you want to go further check the documentation of https://smallrye.io/"
"smallrye-reactive-messaging[SmallRye Reactive Messaging], the implementation "
"used in Quarkus."
msgstr ""
"������������������������������������������Quarkus��������������������������������������� "
"link:https://smallrye.io/smallrye-reactive-messaging[SmallRye Reactive "
"Messaging]���������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-dynamodb.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Amazon DynamoDB Client"
msgstr "Quarkus - Amazon DynamoDB������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:15
#, fuzzy
msgid ""
"DynamoDB is a scalable AWS managed *NoSQL* database.  It supports both key-"
"value and document data models, that enables to have a flexible schema for "
"your data.  This extension provides functionality that allows the client to "
"communicate with the service when running in Quarkus.  You can find more "
"information about DynamoDB at https://aws.amazon.com/dynamodb/[the Amazon "
"DynamoDB website]."
msgstr ""
"DynamoDB������AWS��������������������������������������������� "
"*NoSQL*���������������������������DynamoDB���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������DynamoDB��������������������������� "
"link:https://aws.amazon.com/dynamodb/[Amazon "
"DynamoDB���������������������]������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:19
#, fuzzy
msgid ""
"The DynamoDB extension is based on https://docs.aws.amazon.com/sdk-for-java/"
"v2/developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of "
"the 1.x code base that offers two programming models (Blocking & Async).  "
"Keep in mind it's actively developed and does not support yet all the "
"features available in SDK 1.x such as https://github.com/aws/aws-sdk-java-v2/"
"issues/36[Document APIs] or https://github.com/aws/aws-sdk-java-v2/issues/"
"35[Object Mappers]"
msgstr ""
"DynamoDB��������������������������� link:https://docs.aws.amazon.com/sdk-for-"
"java/v2/developer-guide/welcome.html[AWS Java SDK 2."
"x]���������������������������������1."
"x������������������������������������������������������������2������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"link:https://github.com/aws/aws-sdk-java-v2/issues/"
"36[������������������API]��� link:https://github.com/aws/aws-sdk-java-v2/"
"issues/35[������������������������������]������������SDK 1."
"x������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:28
#, fuzzy
msgid ""
"In this guide, we see how you can get your REST services to use the DynamoDB "
"locally and on AWS."
msgstr ""
"������������������������REST���������������DynamoDB������������������AWS������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:37
#, fuzzy
msgid "An AWS Account to access the DynamoDB service"
msgstr "DynamoDB������������������������������������������AWS���������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:38
#, fuzzy
msgid ""
"Optionally, Docker for your system to run DynamoDB locally for testing "
"purposes"
msgstr ""
"���������������������Docker���������������������������������������������������������DynamoDB���������������������������������������"

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:39
#, no-wrap, fuzzy
msgid "Setup DynamoDB locally"
msgstr "DynamoDB������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:42
#, fuzzy
msgid ""
"The easiest way to start working with DynamoDB is to run a local instance as "
"a container."
msgstr ""
"DynamoDB���������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:46
#, no-wrap
msgid ""
"docker run --publish 8000:8000 amazon/dynamodb-local:1.11.477 -jar "
"DynamoDBLocal.jar -inMemory -sharedDb\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:50
#, fuzzy
msgid ""
"This starts a DynamoDB instance that is accessible on port `8000`.  You can "
"check it's running by accessing the web shell on `http://localhost:8000/"
"shell`."
msgstr ""
"��������������������� `8000` ������������������������ DynamoDB "
"������������������������������������������Web������������������������������������������������������������������������������������������������ "
"`&lt;a href=\"http://localhost:8000/shell\" class=\"bare\"&gt;http://"
"localhost:8000/shell&lt;/a&gt;`."

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:52
#, fuzzy
msgid ""
"Have a look at the https://docs.aws.amazon.com/amazondynamodb/latest/"
"developerguide/DynamoDBLocal.html[Setting Up DynamoDB Local guide] for other "
"options to run DynamoDB."
msgstr ""
"DynamoDB��������������������������������������������������������������� link:"
"https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/"
"DynamoDBLocal.html[Setting Up DynamoDB "
"Local������������]���������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:54
#, fuzzy
msgid "Open `http://localhost:8000/shell` in your browser."
msgstr ""
"������ `&lt;a href=\"http://localhost:8000/shell\" class=\"bare\"&gt;http://"
"localhost:8000/shell&lt;/a&gt;`���������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:56
#, fuzzy
msgid "Copy and paste the following code to the shell and run it:"
msgstr ""
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:64
#, no-wrap
msgid ""
"var params = {\n"
"    TableName: 'QuarkusFruits',\n"
"    KeySchema: [{ AttributeName: 'fruitName', KeyType: 'HASH' }],\n"
"    AttributeDefinitions: [{  AttributeName: 'fruitName', AttributeType: "
"'S', }],\n"
"    ProvisionedThroughput: { ReadCapacityUnits: 1, WriteCapacityUnits: 1, }\n"
"};\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:68
#, no-wrap
msgid ""
"dynamodb.createTable(params, function(err, data) {\n"
"    if (err) ppJson(err);\n"
"    else ppJson(data);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:70
#, no-wrap
msgid "});\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/amazon-dynamodb.adoc:72
#, no-wrap, fuzzy
msgid "Set up Dynamodb on AWS"
msgstr "AWS������Dynamodb���������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:76
#, fuzzy
msgid ""
"Before you can use the AWS SDKs with DynamoDB, you must get an AWS access "
"key ID and secret access key.  For more information, see https://docs.aws."
"amazon.com/amazondynamodb/latest/developerguide/SettingUp.DynamoWebService."
"html[Setting Up DynamoDB (Web Service)]."
msgstr ""
"DynamoDB���AWS "
"SDK������������������������AWS���������������������ID��������������������������������������������������������������������������������������������� "
"link:https://docs.aws.amazon.com/amazondynamodb/latest/developerguide/"
"SettingUp.DynamoWebService."
"html[DynamoDB���Web���������������]���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:78
#, fuzzy
msgid "We recommend to use the AWS CLI to provision the table:"
msgstr ""
"���������������������������������������������AWS "
"CLI���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:85
#, no-wrap
msgid ""
"aws dynamodb create-table --table-name QuarkusFruits \\\n"
"                          --attribute-definitions AttributeName="
"fruitName,AttributeType=S \\\n"
"                          --key-schema AttributeName=fruitName,KeyType=HASH "
"\\\n"
"                          --provisioned-throughput ReadCapacityUnits="
"1,WriteCapacityUnits=1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:89
#, fuzzy
msgid ""
"The application built here allows to manage elements (fruits) stored in "
"Amazon DynamoDB."
msgstr ""
"������������������������������������������������������Amazon "
"DynamoDB���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:96
#, fuzzy
msgid ""
"The solution is located in the `amazon-dynamodb-quickstart` {quickstarts-"
"tree-url}/amazon-dynamodb-quickstart[directory]."
msgstr ""
"������������������������ `amazon-dynamodb-quickstart` {quickstarts-tree-url}/"
"amazon-dynamodb-quickstart[directory] ������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:110
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-dynamodb-quickstart \\\n"
"    -DclassName=\"org.acme.dynamodb.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy-jackson,amazon-dynamodb,resteasy-mutiny\"\n"
"cd amazon-dynamodb-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:114
#, fuzzy
msgid ""
"This command generates a Maven structure importing the RESTEasy/JAX-RS, "
"Mutiny and DynamoDB Client extensions.  After this, the `amazon-dynamodb` "
"extension has been added to your `pom.xml` as well as the Mutiny support for "
"RESTEasy."
msgstr ""
"������������������������RESTEasy/JAX-"
"RS���Mutiny���DynamoDB������������������������������������������������������Maven������������������������������ "
"`pom.xml` ������������RESTEasy���Mutiny��������������������������� `amazon-"
"dynamodb` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:118
#, fuzzy
msgid ""
"In this example, we will create an application to manage a list of fruits. "
"The example application will demonstrate the two programming models "
"supported by the extension."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������2���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:124
#: upstream/_guides/amazon-dynamodb.adoc:191
#: upstream/_guides/amazon-dynamodb.adoc:243
#: upstream/_guides/amazon-dynamodb.adoc:280
#: upstream/_guides/amazon-dynamodb.adoc:393
#: upstream/_guides/amazon-dynamodb.adoc:434
#, no-wrap
msgid "package org.acme.dynamodb;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:127
#, no-wrap
msgid "import java.util.Map;\n"
"import java.util.Objects;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:130
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.RegisterForReflection;\n"
"import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:133
#, no-wrap
msgid "@RegisterForReflection\n"
"public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:136
#, no-wrap
msgid "    private String name;\n"
"    private String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:112
#, no-wrap
msgid "    public Fruit() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:148
#, no-wrap
msgid ""
"    public static Fruit from(Map<String, AttributeValue> item) {\n"
"        Fruit fruit = new Fruit();\n"
"        if (item != null && !item.isEmpty()) {\n"
"            fruit.setName(item.get(AbstractService.FRUIT_NAME_COL).s());\n"
"            fruit.setDescription(item.get(AbstractService.FRUIT_DESC_COL)."
"s());\n"
"        }\n"
"        return fruit;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:160
#, no-wrap
msgid ""
"    public String getDescription() {\n"
"        return description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:164
#, no-wrap
msgid ""
"    public void setDescription(String description) {\n"
"        this.description = description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:170
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean equals(Object obj) {\n"
"        if (!(obj instanceof Fruit)) {\n"
"            return false;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:172
#, no-wrap
msgid "        Fruit other = (Fruit) obj;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:175
#, no-wrap
msgid "        return Objects.equals(other.name, this.name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:181
#, no-wrap
msgid ""
"    @Override\n"
"    public int hashCode() {\n"
"        return Objects.hash(this.name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:185
#, fuzzy
msgid ""
"Nothing fancy. One important thing to note is that having a default "
"constructor is required by the JSON serialization layer. The static `from` "
"method creates a bean based on the `Map` object provided by the DynamoDB "
"client response."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������JSON���������������������������������������������������������������������������������������������static "
"`from` ������������������DynamoDB "
"������������������������������������������������������ `Map` "
"���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:187
#, fuzzy
msgid ""
"Now create a `org.acme.dynamodb.AbstractService` that will consist of helper "
"methods that prepare DynamoDB request objects for reading and adding items "
"to the table."
msgstr ""
"������������������������������������������������������������������������������DynamoDB������������������������������������������������������������������������������������������ "
"`org.acme.dynamodb.AbstractService` ���������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:194
#, no-wrap
msgid "import java.util.HashMap;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:199
#, no-wrap
msgid ""
"import software.amazon.awssdk.services.dynamodb.model.AttributeValue;\n"
"import software.amazon.awssdk.services.dynamodb.model.GetItemRequest;\n"
"import software.amazon.awssdk.services.dynamodb.model.PutItemRequest;\n"
"import software.amazon.awssdk.services.dynamodb.model.ScanRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:201
#, no-wrap
msgid "public abstract class AbstractService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:204
#, no-wrap
msgid ""
"    public final static String FRUIT_NAME_COL = \"fruitName\";\n"
"    public final static String FRUIT_DESC_COL = \"fruitDescription\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:208
#, no-wrap
msgid ""
"    public String getTableName() {\n"
"        return \"QuarkusFruits\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:213
#, no-wrap
msgid ""
"    protected ScanRequest scanRequest() {\n"
"        return ScanRequest.builder().tableName(getTableName())\n"
"                .attributesToGet(FRUIT_NAME_COL, FRUIT_DESC_COL).build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:218
#, no-wrap
msgid ""
"    protected PutItemRequest putRequest(Fruit fruit) {\n"
"        Map<String, AttributeValue> item = new HashMap<>();\n"
"        item.put(FRUIT_NAME_COL, AttributeValue.builder().s(fruit.getName())."
"build());\n"
"        item.put(FRUIT_DESC_COL, AttributeValue.builder().s(fruit."
"getDescription()).build());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:224
#, no-wrap
msgid ""
"        return PutItemRequest.builder()\n"
"                .tableName(getTableName())\n"
"                .item(item)\n"
"                .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:228
#, no-wrap
msgid ""
"    protected GetItemRequest getRequest(String name) {\n"
"        Map<String, AttributeValue> key = new HashMap<>();\n"
"        key.put(FRUIT_NAME_COL, AttributeValue.builder().s(name).build());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:236
#, no-wrap
msgid ""
"        return GetItemRequest.builder()\n"
"                .tableName(getTableName())\n"
"                .key(key)\n"
"                .attributesToGet(FRUIT_NAME_COL, FRUIT_DESC_COL)\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:239
#, fuzzy
msgid ""
"Then, create a `org.acme.dynamodb.FruitSyncService` that will be the "
"business layer of our application and stores/loads the fruits from DynamoDB "
"using the synchronous client."
msgstr ""
"��������������������������������������������������������������������� `org."
"acme.dynamodb.FruitSyncService` "
"������������������������������������������������������ DynamoDB "
"���������������������������/���������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:246
#, no-wrap
msgid "import java.util.List;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:601
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:251
#, no-wrap
msgid "import software.amazon.awssdk.services.dynamodb.DynamoDbClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:254
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitSyncService extends AbstractService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:257
#, no-wrap
msgid "    @Inject\n"
"    DynamoDbClient dynamoDB;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:263
#, no-wrap
msgid ""
"    public List<Fruit> findAll() {\n"
"        return dynamoDB.scanPaginator(scanRequest()).items().stream()\n"
"                .map(Fruit::from)\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:268
#, no-wrap
msgid ""
"    public List<Fruit> add(Fruit fruit) {\n"
"        dynamoDB.putItem(putRequest(fruit));\n"
"        return findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:273
#, no-wrap
msgid ""
"    public Fruit get(String name) {\n"
"        return Fruit.from(dynamoDB.getItem(getRequest(name)).item());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:276
#, fuzzy
msgid "Now, edit the `org.acme.dynamodb.FruitResource` class as follows:"
msgstr ""
"������������ `org.acme.dynamodb.FruitResource` "
"������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:282
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:289
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:295
#, no-wrap
msgid "    @Inject\n"
"    FruitSyncService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:300
#, no-wrap
msgid ""
"    @GET\n"
"    public List<Fruit> getAll() {\n"
"        return service.findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:306
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}\")\n"
"    public Fruit getSingle(@PathParam(\"name\") String name) {\n"
"        return service.get(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:313
#, no-wrap
msgid ""
"    @POST\n"
"    public List<Fruit> add(Fruit fruit) {\n"
"        service.add(fruit);\n"
"        return getAll();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:316
#, fuzzy
msgid ""
"The implementation is pretty straightforward and you just need to define "
"your endpoints using the JAX-RS annotations and use the `FruitSyncService` "
"to list/add new fruits."
msgstr ""
"������������������������������JAX-"
"RS������������������������������������������������������������������������ "
"`FruitSyncService` ������������������������������������������������������/"
"���������������������������"

#. type: Title ==
#: upstream/_guides/amazon-dynamodb.adoc:317
#, no-wrap, fuzzy
msgid "Configuring DynamoDB clients"
msgstr "DynamoDB���������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:322
#, fuzzy
msgid ""
"Both DynamoDB clients (sync and async) are configurable via the `application."
"properties` file that can be provided in the `src/main/resources` directory. "
" Additionally, you need to add to the classpath a proper implementation of "
"the sync client. By default the extension uses the `java.net.URLConnection` "
"HTTP client, so you need to add a URL connection client dependency to the "
"`pom.xml` file:"
msgstr ""
"DynamoDB������������������(sync���async)������������������ `src/main/"
"resources` ������������������������������������������ `application."
"properties` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`java.net.URLConnection` HTTP ������������������������������������������URL "
"������������������������������������������ `pom.xml` "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:332
#, fuzzy
msgid ""
"If you want to use the Apache HTTP client instead, configure it as follows:"
msgstr ""
"������������Apache "
"HTTP���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:335
#, no-wrap
msgid "quarkus.dynamodb.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:338
#, fuzzy
msgid "And add following dependency to the application `pom.xml`:"
msgstr ""
"������������������������������������������������������������������������������ "
"`pom.xml`."

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:347
#, fuzzy
msgid ""
"If you're going to use a local DynamoDB instance, configure it as follows:"
msgstr ""
"���������������DynamoDB���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:351
#, no-wrap
msgid "quarkus.dynamodb.endpoint-override=http://localhost:8000\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:356
#, no-wrap
msgid ""
"quarkus.dynamodb.aws.region=eu-central-1\n"
"quarkus.dynamodb.aws.credentials.type=static\n"
"quarkus.dynamodb.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.dynamodb.aws.credentials.static-provider.secret-access-key=test-"
"secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:359
#, fuzzy
msgid ""
"`quarkus.dynamodb.aws.region` - It's required by the client, but since "
"you're using a local DynamoDB instance you can pick any valid AWS region."
msgstr ""
"`quarkus.dynamodb.aws.region` - "
"������������������������������������������������������DynamoDB���������������������������������������������������������AWS������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:360
#, fuzzy
msgid ""
"`quarkus.dynamodb.aws.credentials.type` - Set `static` credentials provider "
"with any values for `access-key-id` and `secret-access-key`"
msgstr ""
"`quarkus.dynamodb.aws.credentials.type` - `static` "
"��������������������������������� `access-key-id` "
"������������������������������������ `secret-access-key`"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:361
#, fuzzy
msgid ""
"`quarkus.dynamodb.endpoint-override` - Override the DynamoDB client to use a "
"local instance instead of an AWS service"
msgstr ""
"`quarkus.dynamodb.endpoint-override` - "
"DynamoDB���������������������AWS������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:363
#, fuzzy
msgid "If you want to work with an AWS account, you'd need to set it with:"
msgstr ""
"AWS���������������������������������������������AWS������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:367
#, no-wrap
msgid ""
"quarkus.dynamodb.aws.region=<YOUR_REGION>\n"
"quarkus.dynamodb.aws.credentials.type=default\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:370
#, fuzzy
msgid ""
"`quarkus.dynamodb.aws.region` you should set it to the region where you "
"provisioned the DynamoDB table,"
msgstr ""
"`quarkus.dynamodb.aws.region` "
"���DynamoDB���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:371
#, fuzzy
msgid ""
"`quarkus.dynamodb.aws.credentials.type` - use the `default` credentials "
"provider chain that looks for credentials in this order:"
msgstr ""
"`quarkus.dynamodb.aws.credentials.type` - `default` "
"���������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:380
#, fuzzy
msgid ""
"Packaging your application is as simple as `./mvnw clean package`.  It can "
"be run with `java -jar target/amazon-dynamodb-quickstart-1.0-SNAPSHOT-runner."
"jar`."
msgstr ""
"������������������������������������������������ `./mvnw clean package` "
"��������������������������� `java -jar target/amazon-dynamodb-quickstart-1.0-"
"SNAPSHOT-runner.jar` ������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:389
#, fuzzy
msgid ""
"Create a `org.acme.dynamodb.FruitAsyncService` that will be similar to our "
"`FruitSyncService` but using an asynchronous programming model."
msgstr ""
"`FruitSyncService` ������������ `org.acme.dynamodb.FruitAsyncService` "
"������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:397
#, no-wrap
msgid ""
"import java.util.List;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.stream.Collectors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:403
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import software.amazon.awssdk.services.dynamodb.DynamoDbAsyncClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:406
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class FruitAsyncService extends AbstractService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:409
#, no-wrap
msgid "    @Inject\n"
"    DynamoDbAsyncClient dynamoDB;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:414
#, no-wrap
msgid ""
"    public Uni<List<Fruit>> findAll() {\n"
"        return Uni.createFrom().completionStage(() -> dynamoDB."
"scan(scanRequest()))\n"
"                .onItem().transform(res -> res.items().stream().map(Fruit::"
"from).collect(Collectors.toList()));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:419
#, no-wrap
msgid ""
"    public Uni<List<Fruit>> add(Fruit fruit) {\n"
"        return Uni.createFrom().completionStage(() -> dynamoDB."
"putItem(putRequest(fruit)))\n"
"                .onItem().ignore().andSwitchTo(this::findAll);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:425
#, no-wrap
msgid ""
"    public Uni<Fruit> get(String name) {\n"
"        return Uni.createFrom().completionStage(() -> dynamoDB."
"getItem(getRequest(name)))\n"
"                .onItem().transform(resp -> Fruit.from(resp.item()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:428
#, fuzzy
msgid ""
"In the previous code, we create `Uni` instances from the `CompletionStage` "
"objects returned by the asynchronous DynamoDB client, and then transform the "
"emitted item."
msgstr ""
"������������������������������������������DynamoDB������������������������������������ "
"`CompletionStage` ������������������������ `Uni` "
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:430
#, fuzzy
msgid ""
"Then, create an asynchronous REST resource that consumes this async service:"
msgstr ""
"������������������������������������������������������������REST���������������������������������"

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:436
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:441
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.*;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:446
#, no-wrap
msgid ""
"@Path(\"/async-fruits\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class FruitAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:449
#, no-wrap
msgid "    @Inject\n"
"    FruitAsyncService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:454
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<List<Fruit>> getAll() {\n"
"        return service.findAll();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:460
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}\")\n"
"    public Uni<Fruit> getSingle(@PathParam(\"name\") String name) {\n"
"        return service.get(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-dynamodb.adoc:467
#, no-wrap
msgid ""
"    @POST\n"
"    public Uni<List<Fruit>> add(Fruit fruit) {\n"
"        return service.add(fruit)\n"
"                .onItem().ignore().andSwitchTo(this::getAll);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-dynamodb.adoc:470
#, fuzzy
msgid "And add Netty HTTP client dependency to the `pom.xml`:"
msgstr ""
"������������ `pom.xml`.NETTY "
"HTTP������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/consul-config.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Reading properties from Consul"
msgstr "Quarkus - ������������������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:12
#, fuzzy
msgid ""
"This guide explains how your Quarkus application can read configuration "
"properties at runtime from https://www.consul.io[Consul]."
msgstr ""
"������������������������Quarkus��������������������������������������� link:"
"https://www.consul."
"io[Consul]������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/consul-config.adoc:29
#, no-wrap, fuzzy
msgid "Introduction"
msgstr "������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:33
#, fuzzy
msgid ""
"Consul is a versatile system which among other things, provides a "
"distributed Key-Value store that is used in many architectures as a source "
"of configuration for services.  This Key-Value store is what the `quarkus-"
"consul-config` extension interacts with in order to allow Quarkus "
"applications to read runtime configuration properties from Consul."
msgstr ""
"Consul���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus "
"��������������������������� Consul "
"������������������������������������������������������������������������������������ "
"`quarkus-consul-config` ���������������������������������������������������"

#. type: Title ==
#: upstream/_guides/consul-config.adoc:34
#, no-wrap, fuzzy
msgid "Starting Consul"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:37
#, fuzzy
msgid ""
"There are various ways to start Consul that vary in complexity, but for the "
"purposes of this guide, we elect to start a single Consul server with no "
"persistence via Docker, like so:"
msgstr ""
"Consul "
"������������������������������������������������������������������������������������������������������Docker "
"��������������������������������������� Consul "
"���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:41
#, no-wrap
msgid ""
"docker run --rm --name consul -p 8500:8500 -p 8501:8501 consul:1.7 agent -"
"dev -ui -client=0.0.0.0 -bind=0.0.0.0 --https-port=8501\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/consul-config.adoc:44
#, fuzzy
msgid ""
"Please consult the https://www.consul.io/docs/install[documentation] to "
"learn more about the various Consul installation options."
msgstr ""
"���������Consul������������������������������������������������������ link:"
"https://www.consul.io/docs/"
"install[���������������������]���������������������������"

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:58
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=consul-config-quickstart \\\n"
"    -DclassName=\"org.acme.consul.config.GreetingResource\" \\\n"
"    -Dpath=\"/greeting\" \\\n"
"    -Dextensions=\"consul-config\"\n"
"cd consul-config-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/consul-config.adoc:61
#, fuzzy
msgid ""
"This command generates a Maven project with a REST endpoint and imports the "
"`consul-config` extension."
msgstr ""
"������������������������REST������������������������������Maven��������������������������������� "
"`consul-config` ���������������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:64
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `consul-"
"config` extension to your project by running the following command in your "
"project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`consul-config` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:68
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"consul-config\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:78
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-consul-config</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/consul-config.adoc:84
#, fuzzy
msgid ""
"The Quarkus Maven plugin automatically generated a `GreetingResource` JAX-RS "
"resource in the `src/main/java/org/acme/consul/config/client/"
"GreetingResource.java` file that looks like:"
msgstr ""
"Quarkus Maven��������������������� `src/main/java/org/acme/consul/config/"
"client/GreetingResource.java` ������������������ `GreetingResource` JAX-"
"RS���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:88
#: upstream/_guides/consul-config.adoc:110
#, no-wrap
msgid "package org.acme.consul.config.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:123
#, no-wrap
msgid ""
"    @ConfigProperty(name = \"message\", defaultValue=\"Hello from default\")\n"
"    String message;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/consul-config.adoc:135
#, fuzzy
msgid ""
"Quarkus provides various configuration knobs under the `quarkus.consul-"
"config` root. For the purposes of this guide, our Quarkus application is "
"going to be configured in `application.properties` as follows:"
msgstr ""
"Quarkus������ `quarkus.consul-config` "
"���������������������������������������������������������������������������������������������������������������������Quarkus��������������������������������������������� "
"`application.properties` ������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:144
#, no-wrap
msgid ""
"# use the same name as the application name that was configured when "
"standing up the Config Server\n"
"quarkus.application.name=consul-test\n"
"# enable retrieval of configuration from Consul - this is off by default\n"
"quarkus.consul-config.enabled=true\n"
"# this is a key in Consul's KV store that the Quarkus application will read "
"and try to extract properties from\n"
"quarkus.consul-config.properties-value-keys=config/${quarkus.application."
"name}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/consul-config.adoc:146
#, no-wrap, fuzzy
msgid "Add Configuration to Consul"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:150
#, fuzzy
msgid ""
"For the previous application configuration to work, we need to add a `config/"
"consul-test` key under Consul's Key Value store. The value of this key will "
"essentially be a properties \"file\" containing the application "
"configuration.  In this case we want to add the following data to the "
"`config/consul-test` key:"
msgstr ""
"������������������������������������������������������������������������Consul��������������������������������������� "
"`config/consul-test` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`config/consul-test` "
"���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/consul-config.adoc:154
#, no-wrap
msgid "greeting.message=Hello from Consul\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/consul-config.adoc:158
#, fuzzy
msgid ""
"When adding this configuration from the UI, Consul will automatically "
"convert the data into the necessary base64 encoding. If you instead add the "
"configuration via the Consul's https://www.consul.io/api/kv.html#create-"
"update-key[REST API], make sure to first encode the previous data into "
"base64."
msgstr ""
"UI ���������������������������������������Consul ������������������������ "
"base64 ��������������������������������������������������������������������� "
"Consul ��� link:https://www.consul.io/api/kv.html#create-update-key[REST API "
"���]������������������������������������������������������������������ "
"base64 ������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:162
#, fuzzy
msgid ""
"In this use case we made the value of the key as a properties \"file\", "
"because we used `quarkus.consul-config.properties-value-keys` in the "
"application. The extension also provides the ability to use the raw values "
"of keys when `quarkus.consul-config.raw-value-keys` is used. Furthermore, "
"these two properties can be used simultaneously, while each one also "
"supports setting multiple keys."
msgstr ""
"������������������������������������������������������������ `quarkus.consul-"
"config.properties-value-keys` "
"������������������������������������������������������������������������������������������������������������������������������������ "
"`quarkus.consul-config.raw-value-keys` "
"���������������������������������������������������������������������������������������������������������������2������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/consul-config.adoc:169
#, fuzzy
msgid ""
"The result should be: `Hello from Consul` as it is the value obtained from "
"the Consul Key Value store."
msgstr ""
"������������Consul������������������������������������������������������������ "
"`Hello from Consul` ������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-json.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Writing JSON REST Services"
msgstr "Quarkus - JSON REST���������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:11
#, fuzzy
msgid "JSON is now the _lingua franca_ between microservices."
msgstr ""
"JSON��������������������������������������������� "
"_���������_���������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:13
#, fuzzy
msgid ""
"In this guide, we see how you can get your REST services to consume and "
"produce JSON payloads."
msgstr ""
"������������������������REST ��������������� JSON "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:15
#, fuzzy
msgid ""
"there is another guide if you need a link:rest-client[REST client] "
"(including support for JSON)."
msgstr ""
"link:rest-client[REST "
"���������������������]��������������������������������������������������� "
"(JSON ������������������������)���"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:28
#, fuzzy
msgid ""
"The application built in this guide is quite simple: the user can add "
"elements in a list using a form and the list is updated."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:30
#, fuzzy
msgid ""
"All the information between the browser and the server are formatted as JSON."
""
msgstr ""
"������������������������������������������������JSON������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:39
#, fuzzy
msgid ""
"The solution is located in the `rest-json-quickstart` {quickstarts-tree-url}/"
"rest-json-quickstart[directory]."
msgstr ""
"������������������������ `rest-json-quickstart` {quickstarts-tree-url}/rest-"
"json-quickstart[directory] ������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:53
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-json-quickstart \\\n"
"    -DclassName=\"org.acme.rest.json.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy-jackson\"\n"
"cd rest-json-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:57
#, fuzzy
msgid ""
"This command generates a Maven structure importing the RESTEasy/JAX-RS and "
"https://github.com/FasterXML/jackson[Jackson] extensions, and in particular "
"adds the following dependency:"
msgstr ""
"������������������������RESTEasy/JAX-RS��� link:https://github.com/FasterXML/"
"jackson[Jackson]������������������������������Maven������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:64
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:69
#, fuzzy
msgid ""
"To improve user experience, Quarkus registers the three Jackson https://"
"github.com/FasterXML/jackson-modules-java8[Java 8 modules] so you don't need "
"to do it manually."
msgstr ""
"������������������������������������������������������������������Quarkus���3������Jackson "
"link:https://github.com/FasterXML/jackson-modules-java8[Java "
"8������������������]���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:72
#, fuzzy
msgid ""
"Quarkus also supports http://json-b.net/[JSON-B] so, if you prefer JSON-B "
"over Jackson, you can create a project relying on the RESTEasy JSON-B "
"extension instead:"
msgstr ""
"Quarkus��� link:http://json-b.net/[JSON-"
"B]������������������������������������Jackson���������JSON-"
"B������������������������������������RESTEasy JSON-"
"B������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:82
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-json-quickstart \\\n"
"    -DclassName=\"org.acme.rest.json.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy-jsonb\"\n"
"cd rest-json-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:86
#, fuzzy
msgid ""
"This command generates a Maven structure importing the RESTEasy/JAX-RS and "
"http://json-b.net/[JSON-B] extensions, and in particular adds the following "
"dependency:"
msgstr ""
"������������������������RESTEasy/JAX-RS��� link:http://json-b.net/[JSON-"
"B]������������������������������Maven������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:93
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jsonb</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-json.adoc:95
#, no-wrap, fuzzy
msgid "Creating your first JSON REST service"
msgstr "������������JSON REST���������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:104 upstream/_guides/rest-json.adoc:127
#: upstream/_guides/rest-json.adoc:311 upstream/_guides/rest-json.adoc:334
#: upstream/_guides/rest-json.adoc:464
#, no-wrap
msgid "package org.acme.rest.json;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:106
#, no-wrap
msgid "public class Fruit {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:109 upstream/_guides/rest-json.adoc:316
#, no-wrap
msgid "    public String name;\n"
"    public String description;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:118
#, no-wrap
msgid ""
"    public Fruit(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:121
#, fuzzy
msgid ""
"Nothing fancy. One important thing to note is that having a default "
"constructor is required by the JSON serialization layer."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������JSON������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:123
#, fuzzy
msgid "Now, edit the `org.acme.rest.json.FruitResource` class as follows:"
msgstr ""
"������������ `org.acme.rest.json.FruitResource` "
"������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:131
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashMap;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:136
#, no-wrap
msgid ""
"import javax.ws.rs.DELETE;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:141
#, no-wrap
msgid ""
"    private Set<Fruit> fruits = Collections.newSetFromMap(Collections."
"synchronizedMap(new LinkedHashMap<>()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:146
#, no-wrap
msgid ""
"    public FruitResource() {\n"
"        fruits.add(new Fruit(\"Apple\", \"Winter fruit\"));\n"
"        fruits.add(new Fruit(\"Pineapple\", \"Tropical fruit\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:151
#, no-wrap
msgid "    @GET\n"
"    public Set<Fruit> list() {\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:157
#, no-wrap
msgid ""
"    @POST\n"
"    public Set<Fruit> add(Fruit fruit) {\n"
"        fruits.add(fruit);\n"
"        return fruits;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:164
#, no-wrap
msgid ""
"    @DELETE\n"
"    public Set<Fruit> delete(Fruit fruit) {\n"
"        fruits.removeIf(existingFruit -> existingFruit.name."
"contentEquals(fruit.name));\n"
"        return fruits;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:167
#, fuzzy
msgid ""
"The implementation is pretty straightforward and you just need to define "
"your endpoints using the JAX-RS annotations."
msgstr ""
"������������������������������JAX-"
"RS���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:170
#, fuzzy
msgid ""
"The `Fruit` objects will be automatically serialized/deserialized by http://"
"json-b.net/[JSON-B] or https://github.com/FasterXML/jackson[Jackson], "
"depending on the extension you chose when initializing the project."
msgstr ""
"`Fruit` "
"������������������������������������������������������������������������������������������������ "
"link:http://json-b.net/[JSON-B]��������� link:https://github.com/FasterXML/"
"jackson[Jackson] ������������������������������������������/"
"������������������������������������"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:177
#, fuzzy
msgid ""
"When a JSON extension is installed such as `quarkus-resteasy-jackson` or "
"`quarkus-resteasy-jsonb`, Quarkus will use the `application/json` media type "
"by default for most return values, unless the media type is explicitly set "
"via `@Produces` or `@Consumes` annotations (there are some exceptions for "
"well known types, such as `String` and `File`, which default to `text/plain` "
"and `application/octet-stream` respectively)."
msgstr ""
"`quarkus-resteasy-jackson` ��� `quarkus-resteasy-jsonb` ��������� JSON "
"��������������������������������������������������������������������������������� "
"`@Produces` ��� `@Consumes` "
"���������������������������������������������������������������������Quarkus "
"������������������������������ `application/json` "
"������������������������������������������������������������ `String` ��� "
"`File` "
"������������������������������������������������������������������������ "
"`text/plain` ��� `application/octet-stream` "
"���������������������������������������������"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:180
#, fuzzy
msgid ""
"If you don't want JSON by default you can set `quarkus.resteasy-json.default-"
"json=false` and the default will change back to being auto-negotiated. If "
"you set this you will need to add `@Produces(MediaType.APPLICATION_JSON)` "
"and `@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to "
"use JSON."
msgstr ""
"������������������JSON������������������������������������ `quarkus.resteasy-"
"json.default-json=false` "
"���������������������������������������������������������������������������������������������������������������������JSON "
"��������������������������� `@Produces(MediaType.APPLICATION_JSON)` ��� "
"`@Consumes(MediaType.APPLICATION_JSON)` "
"���������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:183
#, fuzzy
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate "
"your endpoints with the `@Produces` and `@Consumes` annotations to define "
"precisely the expected content-types.  It will allow to narrow down the "
"number of JAX-RS providers (which can be seen as converters) included in the "
"native executable."
msgstr ""
"JSON ��������������������������������������������������������������������� "
"`@Produces` ��� `@Consumes` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"JAX-RS ��������������� (������������������������������������������������) "
"���������������������������������������������"

#. type: Title ===
#: upstream/_guides/rest-json.adoc:185
#, no-wrap, fuzzy
msgid "Configuring JSON support"
msgstr "JSON���������������������"

#. type: Title ====
#: upstream/_guides/rest-json.adoc:187
#, no-wrap, fuzzy
msgid "Jackson"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:191
#, fuzzy
msgid ""
"Quarkus makes it very easy to configure various Jackson settings via CDI "
"beans. The simplest (and suggested) approach is to define a CDI bean of type "
"`io.quarkus.jackson.ObjectMapperCustomizer` inside of which any Jackson "
"configuration can be applied."
msgstr ""
"Quarkus������CDI���������������������������������Jackson������������������������������������������������������������������������������������������������������������������������������������������ "
"`io.quarkus.jackson.ObjectMapperCustomizer` ������ CDI "
"���������������������������������������Jackson "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:193
#, fuzzy
msgid ""
"An example where a custom module needs to be registered would look like so:"
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:199
#, no-wrap
msgid ""
"import com.fasterxml.jackson.databind.ObjectMapper;\n"
"import io.quarkus.jackson.ObjectMapperCustomizer;\n"
"import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:202
#, no-wrap
msgid ""
"@Singleton\n"
"public class RegisterCustomModuleCustomizer implements "
"ObjectMapperCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:207
#, no-wrap
msgid ""
"    public void customize(ObjectMapper mapper) {\n"
"        mapper.registerModule(new CustomModule());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:212
#, fuzzy
msgid ""
"Users can even provide their own `ObjectMapper` bean if they so choose.  If "
"this is done, it is very important to manually inject and apply all `io."
"quarkus.jackson.ObjectMapperCustomizer` beans in the CDI producer that "
"produces `ObjectMapper`.  Failure to do so will prevent Jackson specific "
"customizations provided by various extensions from being applied."
msgstr ""
"������������������������������������������ `ObjectMapper` "
"��������������������������������������������������������������� "
"`ObjectMapper` ��������������� CDI "
"������������������������������������������ `io.quarkus.jackson."
"ObjectMapperCustomizer` "
"��������������������������������������������������������������������������������������������������������������������������������������������������� "
"Jackson ���������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/rest-json.adoc:213
#, no-wrap, fuzzy
msgid "JSON-B"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:216
#, fuzzy
msgid ""
"As stated above, Quarkus provides the option of using JSON-B instead of "
"Jackson via the use of the `quarkus-resteasy-jsonb` extension."
msgstr ""
"���������������������Quarkus��������� `quarkus-resteasy-jsonb` "
"���������������������������������������Jackson���������������JSON-"
"B���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:218
#, fuzzy
msgid ""
"Following the same approach as described in the previous section, JSON-B can "
"be configured using a `io.quarkus.jsonb.JsonbConfigCustomizer` bean."
msgstr ""
"��������������������������������������� `io.quarkus.jsonb."
"JsonbConfigCustomizer` bean���������������JSON-"
"B���������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:220
#, fuzzy
msgid ""
"If for example a custom serializer named `FooSerializer` for type `com."
"example.Foo` needs to be registered with JSON-B, the addition of a bean like "
"the following would suffice:"
msgstr ""
"������������ `FooSerializer` "
"��������������������������������������������������� `com.example.Foo` "
"������������ JSON-B "
"���������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:227
#, no-wrap
msgid ""
"import io.quarkus.jsonb.JsonbConfigCustomizer;\n"
"import javax.inject.Singleton;\n"
"import javax.json.bind.JsonbConfig;\n"
"import javax.json.bind.serializer.JsonbSerializer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:230
#, no-wrap
msgid ""
"@Singleton\n"
"public class FooSerializerRegistrationCustomizer implements "
"JsonbConfigCustomizer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:235
#, no-wrap
msgid ""
"    public void customize(JsonbConfig config) {\n"
"        config.withSerializers(new FooSerializer());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:240
#, fuzzy
msgid ""
"A more advanced option would be to directly provide a bean of `javax.json."
"bind.JsonbConfig` (with a `Dependent` scope) or in the extreme case to "
"provide a bean of type `javax.json.bind.Jsonb` (with a `Singleton` scope).  "
"If the latter approach is leveraged it is very important to manually inject "
"and apply all `io.quarkus.jsonb.JsonbConfigCustomizer` beans in the CDI "
"producer that produces `javax.json.bind.Jsonb`.  Failure to do so will "
"prevent JSON-B specific customizations provided by various extensions from "
"being applied."
msgstr ""
"��������������������������������������������� `javax.json.bind.JsonbConfig` "
"��� `Dependent` "
"��������������������������������������������������������������������������������� "
"`javax.json.bind.Jsonb` ��� `Singleton` "
"��������������������������������������������������������������������������������������������������������������������������������������������� "
"`javax.json.bind.Jsonb` ��������������� CDI ��������������������� `io."
"quarkus.jsonb.JsonbConfigCustomizer` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"JSON-B ���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:246
#, fuzzy
msgid ""
"Now let's add a simple web page to interact with our `FruitResource`.  "
"Quarkus automatically serves static resources located under the `META-INF/"
"resources` directory.  In the `src/main/resources/META-INF/resources` "
"directory, add a `fruits.html` file with the content from this {quickstarts-"
"blob-url}/rest-json-quickstart/src/main/resources/META-INF/resources/fruits."
"html[fruits.html] file in it."
msgstr ""
"������������ `FruitResource`."
"Quarkus������������������������������������������������������������������������������������Quarkus������ "
"`META-INF/resources` "
"������������������������������������������������������������������������������������ "
"`src/main/resources/META-INF/resources` ������������������������������ "
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/"
"resources/fruits.html[fruits.html] ������������������������������ `fruits."
"html` ���������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:250
#, fuzzy
msgid "start Quarkus with `./mvnw compile quarkus:dev`"
msgstr "������������������������������ `./mvnw compile quarkus:dev`"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:256
#, fuzzy
msgid ""
"You can build a native executable with the usual command `./mvnw package -"
"Pnative`."
msgstr ""
"��������������������� `./mvnw package -Pnative` "
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:258
#, fuzzy
msgid ""
"Running it is as simple as executing `./target/rest-json-quickstart-1.0-"
"SNAPSHOT-runner`."
msgstr ""
"��������� `./target/rest-json-quickstart-1.0-SNAPSHOT-runner` "
"���������������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:261
#, no-wrap, fuzzy
msgid "About serialization"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:264
#, fuzzy
msgid ""
"JSON serialization libraries use Java reflection to get the properties of an "
"object and serialize them."
msgstr ""
"JSON���������������������������������������Java������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:268
#, fuzzy
msgid ""
"When using native executables with GraalVM, all classes that will be used "
"with reflection need to be registered.  The good news is that Quarkus does "
"that work for you most of the time.  So far, we haven't registered any "
"class, not even `Fruit`, for reflection usage and everything is working fine."
""
msgstr ""
"GraalVM���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������ "
"`Fruit` "
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:271
#, fuzzy
msgid ""
"Quarkus performs some magic when it is capable of inferring the serialized "
"types from the REST methods.  When you have the following REST method, "
"Quarkus determines that `Fruit` will be serialized:"
msgstr ""
"Quarkus������REST������������������������������������������������������������������������������������������������������������������������������������������������������������REST������������������������������Quarkus������ "
"`Fruit` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:278
#, no-wrap
msgid "@GET\n"
"public List<Fruit> list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:282
#, fuzzy
msgid ""
"Quarkus does that for you automatically by analyzing the REST methods at "
"build time and that's why we didn't need any reflection registration in the "
"first part of this guide."
msgstr ""
"Quarkus���������������������REST���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:285
#, fuzzy
msgid ""
"Another common pattern in the JAX-RS world is to use the `Response` object.  "
"`Response` comes with some nice perks:"
msgstr ""
"JAX-RS������������������ `Response` "
"��������������������������������������������������������������������������������������� "
"`Response` ������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:287
#, fuzzy
msgid ""
"you can return different entity types depending on what happens in your "
"method (a `Legume` or an `Error` for instance);"
msgstr ""
"��������������������������������������������������������������������������������������������������������������� "
"(��������� `Legume` ��� `Error` )���"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:288
#, fuzzy
msgid ""
"you can set the attributes of the `Response` (the status comes to mind in "
"the case of an error)."
msgstr ""
"������������������������������ `Response` "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:290
#, fuzzy
msgid "Your REST method then looks like this:"
msgstr "REST���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:297
#, no-wrap
msgid "@GET\n"
"public Response list() {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:301
#, fuzzy
msgid ""
"It is not possible for Quarkus to determine at build time the type included "
"in the `Response` as the information is not available.  In this case, "
"Quarkus won't be able to automatically register for reflection the required "
"classes."
msgstr ""
"`Response` "
"���������������������������������������������������Quarkus������������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:303
#, fuzzy
msgid "This leads us to our next section."
msgstr "������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:304
#, no-wrap, fuzzy
msgid "Using Response"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:307
#, fuzzy
msgid ""
"Let's create the `Legume` class which will be serialized as JSON, following "
"the same model as for our `Fruit` class:"
msgstr ""
"`Fruit` ������������������������������������������JSON "
"������������������������������������ `Legume` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:313
#, no-wrap
msgid "public class Legume {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:319
#, no-wrap
msgid "    public Legume() {\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:325
#, no-wrap
msgid ""
"    public Legume(String name, String description) {\n"
"        this.name = name;\n"
"        this.description = description;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:328
#, fuzzy
msgid ""
"Now let's create a `LegumeResource` REST service with only one method which "
"returns the list of legumes."
msgstr ""
"������������������������������������������������������������������������������������ "
"`LegumeResource` REST ���������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:330
#, fuzzy
msgid "This method returns a `Response` and not a list of `Legume`."
msgstr ""
"��������������������� `Response` ������������ `Legume` "
"������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:338
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.LinkedHashSet;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:345
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:350
#, no-wrap
msgid ""
"@Path(\"/legumes\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class LegumeResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:352
#, no-wrap
msgid ""
"    private Set<Legume> legumes = Collections.synchronizedSet(new "
"LinkedHashSet<>());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:357
#, no-wrap
msgid ""
"    public LegumeResource() {\n"
"        legumes.add(new Legume(\"Carrot\", \"Root vegetable, usually "
"orange\"));\n"
"        legumes.add(new Legume(\"Zucchini\", \"Summer squash\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:363
#, no-wrap
msgid ""
"    @GET\n"
"    public Response list() {\n"
"        return Response.ok(legumes).build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:368
#, fuzzy
msgid ""
"Now let's add a simple web page to display our list of legumes.  In the `src/"
"main/resources/META-INF/resources` directory, add a `legumes.html` file with "
"the content from this {quickstarts-blob-url}/rest-json-quickstart/src/main/"
"resources/META-INF/resources/legumes.html[legumes.html] file in it."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������� "
"`src/main/resources/META-INF/resources` ������������������������������ "
"{quickstarts-blob-url}/rest-json-quickstart/src/main/resources/META-INF/"
"resources/legumes.html[legumes.html] ������������������������������ `legumes."
"html` ���������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:370
#, fuzzy
msgid ""
"Open a browser to http://localhost:8080/legumes.html and you will see our "
"list of legumes."
msgstr ""
"������������������������ http://localhost:8080/legumes.html "
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:372
#, fuzzy
msgid ""
"The interesting part starts when running the application as a native "
"executable:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:374 upstream/_guides/rest-json.adoc:405
#, fuzzy
msgid "create the native executable with `./mvnw package -Pnative`."
msgstr ""
"`./mvnw package -Pnative` "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:375 upstream/_guides/rest-json.adoc:406
#, fuzzy
msgid "execute it with `./target/rest-json-quickstart-1.0-SNAPSHOT-runner`"
msgstr ""
"��������������������� `./target/rest-json-quickstart-1.0-SNAPSHOT-runner`"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:376 upstream/_guides/rest-json.adoc:407
#, fuzzy
msgid "open a browser and go to http://localhost:8080/legumes.html"
msgstr "������������������������ http://localhost:8080/legumes.html"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:378
#, fuzzy
msgid "No legumes there."
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:381
#, fuzzy
msgid ""
"As mentioned above, the issue is that Quarkus was not able to determine the "
"`Legume` class will require some reflection by analyzing the REST endpoints. "
" The JSON serialization library tries to get the list of fields of `Legume` "
"and gets an empty list so it does not serialize the fields' data."
msgstr ""
"���������������������Quarkus��� `Legume` "
"������������������������������������������������������������������������REST "
"���������������������������������������������������������������������������������JSON��������������������������������������� "
"`Legume` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:386
#, fuzzy
msgid ""
"At the moment, when JSON-B or Jackson tries to get the list of fields of a "
"class, if the class is not registered for reflection, no exception will be "
"thrown.  GraalVM will simply return an empty list of fields."
msgstr ""
"������������������JSON-"
"B���Jackson���������������������������������������������������������������������������������������������������Reflection������������������������������������������������������������������������GraalVM������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/rest-json.adoc:388
#, fuzzy
msgid ""
"Hopefully, this will change in the future and make the error more obvious."
msgstr ""
"������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:391
#, fuzzy
msgid ""
"We can register `Legume` for reflection manually by adding the "
"`@RegisterForReflection` annotation on our `Legume` class:"
msgstr ""
"`Legume` ������������ `@RegisterForReflection` "
"��������������������������������������������������������� `Legume` "
"������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:282
#: upstream/_guides/kafka-streams.adoc:329
#: upstream/_guides/kafka-streams.adoc:684
#, no-wrap
msgid "import io.quarkus.runtime.annotations.RegisterForReflection;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:399
#, no-wrap
msgid "@RegisterForReflection\n"
"public class Legume {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:402
#, fuzzy
msgid "Let's do that and follow the same steps as before:"
msgstr ""
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:404
#, fuzzy
msgid "hit `Ctrl+C` to stop the application"
msgstr "`Ctrl+C` ������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:409
#, fuzzy
msgid "This time, you can see our list of legumes."
msgstr "������������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:411
#, no-wrap, fuzzy
msgid "Being reactive"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:415
#, fuzzy
msgid ""
"You can return _reactive types_ to handle asynchronous processing.  Quarkus "
"recommends the usage of https://smallrye.io/smallrye-mutiny[Mutiny] to write "
"reactive and asynchronous code."
msgstr ""
"��������������������������������������������� "
"_������������������_������������������������������Quarkus��������������������������������������������������������������������� "
"link:https://smallrye.io/smallrye-"
"mutiny[Mutiny]������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:417
#, fuzzy
msgid ""
"To integrate Mutiny and RESTEasy, you need to add the `quarkus-resteasy-"
"mutiny` dependency to your project:"
msgstr ""
"Mutiny ��� RESTEasy ������������������������ `quarkus-resteasy-mutiny` "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:427
#, fuzzy
msgid "Then, your endpoint can return `Uni` or `Multi` instances:"
msgstr ""
"������������������������������������ `Uni` ��� `Multi` "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:436
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/{name}\")\n"
"public Uni<Fruit> getOne(@PathParam String name) {\n"
"    return findByName(name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:441
#, no-wrap
msgid "@GET\n"
"public Multi<Fruit> getAll() {\n"
"    return findAll();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:445
#, fuzzy
msgid ""
"Use `Uni` when you have a single result.  Use `Multi` when you have multiple "
"items that may be emitted asynchronously."
msgstr ""
"��������������������������������� `Uni` ��������������������� `Multi` "
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:447
#, fuzzy
msgid ""
"You can use `Uni` and `Response` to return asynchronous HTTP responses: "
"`Uni<Response>`."
msgstr ""
"`Uni` ��� `Response` ��������������������������� HTTP "
"���������������������������������������������: `Uni&amp;lt;Response&amp;gt;`."
""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:449
#, fuzzy
msgid ""
"More details about Mutiny can be found in the link:getting-started-"
"reactive#mutiny[Getting Started with Reactive guide]."
msgstr ""
"Mutiny��������������������������� link:getting-started-"
"reactive#mutiny[Reactive������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:451
#, no-wrap, fuzzy
msgid "HTTP filters and interceptors"
msgstr "HTTP ������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:457
#, fuzzy
msgid ""
"Both HTTP request and response can be intercepted by providing "
"`ContainerRequestFilter` or `ContainerResponseFilter` implementations "
"respectively. These filters are suitable for processing the metadata "
"associated with a message: HTTP headers, query parameters, media type, and "
"other metadata. They also have the capability to abort the request "
"processing, for instance when the user does not have the permissions to "
"access the endpoint."
msgstr ""
"HTTP ��������������������������������������������������������������� "
"`ContainerRequestFilter` ��������� `ContainerResponseFilter` "
"������������������������������������ "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������HTTP "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:460
#, fuzzy
msgid ""
"Let's use `ContainerRequestFilter` to add logging capability to our service. "
"We can do that by implementing `ContainerRequestFilter` and annotating it "
"with the `@Provider` annotation:"
msgstr ""
"`ContainerRequestFilter` "
"������������������������������������������������������������������������������������ "
"`ContainerRequestFilter` ������������������ `@Provider` "
"���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:467
#, no-wrap
msgid ""
"import io.vertx.core.http.HttpServerRequest;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:473
#, no-wrap
msgid ""
"import javax.ws.rs.container.ContainerRequestContext;\n"
"import javax.ws.rs.container.ContainerRequestFilter;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.UriInfo;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:476
#, no-wrap
msgid ""
"@Provider\n"
"public class LoggingFilter implements ContainerRequestFilter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:478
#, no-wrap
msgid ""
"    private static final Logger LOG = Logger.getLogger(LoggingFilter."
"class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:481
#, no-wrap
msgid "    @Context\n"
"    UriInfo info;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:484
#, no-wrap
msgid "    @Context\n"
"    HttpServerRequest request;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:487
#, no-wrap
msgid ""
"    @Override\n"
"    public void filter(ContainerRequestContext context) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:491
#, no-wrap
msgid ""
"        final String method = context.getMethod();\n"
"        final String path = info.getPath();\n"
"        final String address = request.remoteAddress().toString();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:495
#, no-wrap
msgid ""
"        LOG.infof(\"Request %s %s from IP %s\", method, path, address);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:498
#, fuzzy
msgid ""
"Now, whenever a REST method is invoked, the request will be logged into the "
"console:"
msgstr ""
"������������REST������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:505
#, no-wrap
msgid ""
"2019-06-05 12:44:26,526 INFO  [org.acm.res.jso.LoggingFilter] (executor-"
"thread-1) Request GET /legumes from IP 127.0.0.1\n"
"2019-06-05 12:49:19,623 INFO  [org.acm.res.jso.LoggingFilter] (executor-"
"thread-1) Request GET /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:50:44,019 INFO  [org.acm.res.jso.LoggingFilter] (executor-"
"thread-1) Request POST /fruits from IP 0:0:0:0:0:0:0:1\n"
"2019-06-05 12:51:04,485 INFO  [org.acm.res.jso.LoggingFilter] (executor-"
"thread-1) Request GET /fruits from IP 127.0.0.1\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-json.adoc:507
#, no-wrap, fuzzy
msgid "CORS filter"
msgstr "CORS������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:512
#, fuzzy
msgid ""
"link:https://en.wikipedia.org/wiki/Cross-origin_resource_sharing[Cross-"
"origin resource sharing] (CORS) is a mechanism that allows restricted "
"resources on a web page to be requested from another domain outside the "
"domain from which the first resource was served."
msgstr ""
"link:https://en.wikipedia.org/wiki/Cross-"
"origin_resource_sharing[���������������������������������������]���CORS������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:515
#, fuzzy
msgid ""
"Quarkus comes with a CORS filter. Read the link:http-reference#cors-"
"filter[HTTP Reference Documentation] to learn how to use it."
msgstr ""
"Quarkus������CORS������������������������������������������������������������������������ "
"link:http-reference#cors-"
"filter[HTTP������������������������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:516
#, no-wrap, fuzzy
msgid "GZip Support"
msgstr "GZip������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:519
#, fuzzy
msgid ""
"Quarkus comes with GZip support (even though it is not enabled by default). "
"The following configuration knobs allow to configure GZip support."
msgstr ""
"Quarkus������GZip���������������������������������������������������������������������������������������������������������������������������������������������GZip������������������������������������"

#. type: delimited block -
#: upstream/_guides/rest-json.adoc:524
#, no-wrap
msgid ""
"quarkus.resteasy.gzip.enabled=true // <1>\n"
"quarkus.resteasy.gzip.max-input=10M // <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-json.adoc:527
#, fuzzy
msgid "Enable Gzip support."
msgstr "Gzip������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:529
#, fuzzy
msgid ""
"Configure the upper limit on deflated request body. This is useful to "
"mitigate potential attacks by limiting their reach. The default value is "
"`10M`.  This configuration option would recognize strings in this format "
"(shown as a regular expression): `[0-9]+[KkMmGgTtPpEeZzYy]?`. If no suffix "
"is given, assume bytes."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`10M` "
"���������������������������������������������������������������������������������������(���������������������������������)��� "
"`[0-9]+[KkMmGgTtPpEeZzYy]?`."
"���������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:530
#, no-wrap, fuzzy
msgid "Multipart Support"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:533
#, fuzzy
msgid ""
"RESTEasy supports multipart via the https://docs.jboss.org/resteasy/docs/4.5."
"6.Final/userguide/html/Multipart.html[RESTEasy Multipart Provider]."
msgstr ""
"RESTEasy��� link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/userguide/"
"html/Multipart.html[RESTEasy Multipart "
"Provider]���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:535
#, fuzzy
msgid ""
"Quarkus provides an extension called `quarkus-resteasy-multipart` to make "
"things easier for you."
msgstr ""
"Quarkus������ `quarkus-resteasy-multipart` "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:537
#, fuzzy
msgid ""
"This extension slightly differs from the RESTEasy default behavior as the "
"default charset (if none is specified in your request) is UTF-8 rather than "
"US-ASCII."
msgstr ""
"������������������������������������������������������������ US-ASCII "
"������������ UTF-8 ������������������RESTEasy "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:539
#, fuzzy
msgid ""
"You can configure this behavior with the following configuration properties:"
msgstr ""
"������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:542
#, no-wrap, fuzzy
msgid "Servlet compatibility"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:545
#, fuzzy
msgid ""
"In Quarkus, RESTEasy can either run directly on top of the Vert.x HTTP "
"server, or on top of Undertow if you have any servlet dependency."
msgstr ""
"Quarkus���������RESTEasy���Vert.x "
"HTTP���������������������������������������������������������������������������������������������Undertow���������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:552
#, fuzzy
msgid ""
"As a result, certain classes, such as `HttpServletRequest` are not always "
"available for injection. Most use-cases for this particular class are "
"covered by JAX-RS equivalents, except for getting the remote client's IP. "
"RESTEasy comes with a replacement API which you can inject: https://docs."
"jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/"
"HttpRequest.html[`HttpRequest`], which has the methods https://docs.jboss."
"org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest."
"html#getRemoteAddress--[`getRemoteAddress()`] and https://docs.jboss.org/"
"resteasy/docs/4.5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest."
"html#getRemoteHost--[`getRemoteHost()`] to solve this problem."
msgstr ""
"��������������� `HttpServletRequest` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"IP ������������������������������������JAX-RS "
"���������������������������������������������������RESTEasy "
"������������������������������������������������ API "
"���������������������������  link:https://docs.jboss.org/resteasy/docs/4.5.6."
"Final/javadocs/org/jboss/resteasy/spi/HttpRequest."
"html[`HttpRequest`]������������������������������������������������������  "
"link:https://docs.jboss.org/resteasy/docs/4.5.6.Final/javadocs/org/jboss/"
"resteasy/spi/HttpRequest.html#getRemoteAddress--"
"[`getRemoteAddress()`]���������  link:https://docs.jboss.org/resteasy/docs/4."
"5.6.Final/javadocs/org/jboss/resteasy/spi/HttpRequest.html#getRemoteHost--"
"[`getRemoteHost()`]������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:553
#, no-wrap, fuzzy
msgid "RESTEasy and REST Client interactions"
msgstr "RESTEasy ��� REST ���������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:557
#, fuzzy
msgid ""
"In Quarkus, the RESTEasy extension and link:rest-client[the REST Client "
"extension] share the same infrastructure.  One important consequence of this "
"consideration is that they share the same list of providers (in the JAX-RS "
"meaning of the word)."
msgstr ""
"Quarkus���������RESTEasy��������������������������� link:rest-"
"client[REST���������������������������������������������]���������������������������������������������������������������������������������������������������������������JAX-"
"RS���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:560
#, fuzzy
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default "
"intercept both the servers calls and the client calls, which might not be "
"the desired behavior."
msgstr ""
"������������ `WriterInterceptor` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:562
#, fuzzy
msgid ""
"However, you can change this default behavior and constrain a provider to:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:564
#, fuzzy
msgid ""
"only consider *server* calls by adding the `@ConstrainedTo(RuntimeType."
"SERVER)` annotation to your provider;"
msgstr ""
"������������������ `@ConstrainedTo(RuntimeType.SERVER)` "
"������������������������������������������������ "
"*���������*������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:565
#, fuzzy
msgid ""
"only consider *client* calls by adding the `@ConstrainedTo(RuntimeType."
"CLIENT)` annotation to your provider."
msgstr ""
"������������������ `@ConstrainedTo(RuntimeType.CLIENT)` "
"������������������������������������������������ "
"*���������������������������*���������������������������"

#. type: Title ==
#: upstream/_guides/rest-json.adoc:566
#, no-wrap, fuzzy
msgid "What's Different from Jakarta EE Development"
msgstr "���������������EE������������������"

#. type: Title ===
#: upstream/_guides/rest-json.adoc:568
#, no-wrap, fuzzy
msgid "No Need for `Application` Class"
msgstr "`Application` ������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:571
#, fuzzy
msgid ""
"Configuration via an application-supplied subclass of `Application` is "
"supported, but not required."
msgstr ""
"`Application` "
"���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/rest-json.adoc:572
#, no-wrap, fuzzy
msgid "Only a single JAX-RS application"
msgstr "���������JAX-RS������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:576
#, fuzzy
msgid ""
"In contrast to JAX-RS (and RESTeasy) running in a standard servlet-"
"container, Quarkus only supports the deployment of a single JAX-RS "
"application.  If multiple JAX-RS `Application` classes are defined, the "
"build will fail with the message `Multiple classes have been annotated with "
"@ApplicationPath which is currently not supported`."
msgstr ""
"JAX-"
"RS������������RESTeasy���������������������������������������������������������������������������������������������Quarkus������������JAX-"
"RS���������������������������������������������������������������������������������������JAX-"
"RS `Application` ������������������������������������������������������ "
"`Multiple classes have been annotated with @ApplicationPath which is "
"currently not supported`."

#. type: Plain text
#: upstream/_guides/rest-json.adoc:578
#, fuzzy
msgid ""
"If multiple JAX-RS applications are defined, the property `quarkus.resteasy."
"ignoreApplicationClasses=true` can be used to ignore all explicit "
"`Application` classes. This makes all resource-classes available via the "
"application-path as defined by `quarkus.resteasy.path` (default: `/`)."
msgstr ""
"��������� JAX-RS "
"������������������������������������������������������������������������ "
"`quarkus.resteasy.ignoreApplicationClasses=true` "
"������������������������������������������ `Application` "
"������������������������������������������������������������������������������������������������������ "
"`quarkus.resteasy.path` "
"��������������������������������������������������������������������������������������������������������������������� "
"`/` ������"

#. type: Title ===
#: upstream/_guides/rest-json.adoc:579
#, no-wrap, fuzzy
msgid "Lifecycle of Resources"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:583
#, fuzzy
msgid ""
"In Quarkus all JAX-RS resources are treated as CDI beans.  It's possible to "
"inject other beans via `@Inject`, bind interceptors using bindings such as "
"`@Transactional`, define `@PostConstruct` callbacks, etc."
msgstr ""
"Quarkus���������������������JAX-"
"RS���������������CDI������������������������������������ `@Inject` "
"������������������������������������������������ `@Transactional` "
"��������������������������������������������������������������������������������������������������� "
"`@PostConstruct` "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:589
#, fuzzy
msgid ""
"If there is no scope annotation declared on the resource class then the "
"scope is defaulted.  The default scope can be controlled through the "
"`quarkus.resteasy.singleton-resources` property.  If set to `true` (default) "
"then a *single instance* of a resource class is created to service all "
"requests (as defined by `@javax.inject.Singleton`).  If set to `false` then "
"a *new instance* of the resource class is created per each request.  An "
"explicit CDI scope annotation (`@RequestScoped`, `@ApplicationScoped`, etc.) "
"always overrides the default behavior and specifies the lifecycle of "
"resource instances."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`quarkus.resteasy.singleton-resources` "
"��������������������������������������� `true` (���������������) "
"���������������������( `@javax.inject.Singleton` "
"���������������������������������) "
"������������������������������������������������������������������������������������������ "
"*���������������������������*������������������������ `false` "
"������������������������������������������������������������������������ "
"*��������� ������������������*������������������������������������ CDI "
"������������������ ( `@RequestScoped`, `@ApplicationScoped`, ������) "
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:593
#, fuzzy
msgid ""
"Creating JSON REST services with Quarkus is easy as it relies on proven and "
"well known technologies."
msgstr ""
"Quarkus���������������JSON "
"REST������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:595
#, fuzzy
msgid ""
"As usual, Quarkus further simplifies things under the hood when running your "
"application as a native executable."
msgstr ""
"������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/rest-json.adoc:596
#, fuzzy
msgid ""
"There is only one thing to remember: if you use `Response` and Quarkus can't "
"determine the beans that are serialized, you need to annotate them with "
"`@RegisterForReflection`."
msgstr ""
"��������������������������������������������������������� `Response` "
"������������������������Quarkus "
"������������������������������������������������������������������������������ "
"`@RegisterForReflection`.NET "
"������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/platform-include.adoc:4
#, fuzzy
msgid ""
"This extension is developed by a third party and is part of the Quarkus "
"Platform."
msgstr ""
"���������������������������������������������������������������������������������Quarkus "
"Platform������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/kafka-streams.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using Apache Kafka Streams"
msgstr "Quarkus - Apache Kafka������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:11
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can utilize the Apache "
"Kafka Streams API to implement stream processing applications based on "
"Apache Kafka."
msgstr ""
"������������������������Quarkus���������������������������Apache Kafka "
"Streams API������������������Apache "
"Kafka���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:21
#, fuzzy
msgid "Docker Compose to start an Apache Kafka development cluster"
msgstr "Docker Compose���Apache Kafka���������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:24
#, fuzzy
msgid ""
"It is recommended, that you have read the {quickstarts-tree-url}/kafka-"
"quickstart[Kafka quickstart] before."
msgstr ""
"���������{quickstarts-tree-url}/kafka-quickstart[Kafka "
"quickstart]������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:29
#, fuzzy
msgid ""
"The Quarkus extension for Kafka Streams allows for very fast turnaround "
"times during development by supporting the Quarkus Dev Mode (e.g. via `./"
"mvnw compile quarkus:dev`).  After changing the code of your Kafka Streams "
"topology, the application will automatically be reloaded when the next input "
"message arrives."
msgstr ""
"Kafka Streams������Quarkus���������������������������������Quarkus Dev "
"Mode��������������������������������������������������������������������������������������������������� "
"`./mvnw compile quarkus:dev` ���������������Kafka "
"Streams������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:32
#, fuzzy
msgid ""
"A recommended development set-up is to have some producer which creates test "
"messages on the processed topic(s) in fixed intervals, e.g. every second and "
"observe the streaming application's output topic(s) using a tool such as "
"`kafkacat`.  Using the dev mode, you'll instantly see messages on the output "
"topic(s) as produced by the latest version of your streaming application "
"when saving."
msgstr ""
"��������������������������������������������������������������������������������������������������� "
"(������������������) "
"��������������������������������������������������������������������������� "
"`kafkacat` ��������������������������������������������������������� "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:34
#, fuzzy
msgid ""
"For the best development experience, we recommend applying the following "
"configuration settings to your Kafka broker:"
msgstr ""
"������������������������������������������������������������������ Kafka "
"������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:38
#, no-wrap
msgid "group.min.session.timeout.ms=250\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:41
#, fuzzy
msgid ""
"Also specify the following settings in your Quarkus `application.properties`:"
""
msgstr ""
"���������������������������Quarkus������������������ `application."
"properties`."

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:46
#, no-wrap
msgid ""
"kafka-streams.consumer.session.timeout.ms=250\n"
"kafka-streams.consumer.heartbeat.interval.ms=200\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:49
#, fuzzy
msgid ""
"Together, these settings will ensure that the application can very quickly "
"reconnect to the broker after being restarted in dev mode."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:56
#, fuzzy
msgid ""
"In this guide, we are going to generate (random) temperature values in one "
"component (named `generator`).  These values are associated to given weather "
"stations and are written in a Kafka topic (`temperature-values`).  Another "
"topic (`weather-stations`) contains just the master data about the weather "
"stations themselves (id and name)."
msgstr ""
"������������������������(���������������)������������ 1 "
"��������������������������� ( `generator`) "
"������������������������������������������������������������������������������������������������Kafka "
"������������ ( `temperature-values`) "
"��������������������������������������������� ( `weather-stations`) "
"��������������������������������������������������������������� (id "
"���������) ������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:58
#, fuzzy
msgid ""
"A second component (`aggregator`) reads from the two Kafka topics and "
"processes them in a streaming pipeline:"
msgstr ""
"2 ������������������������������ ( `aggregator`) ������2 ������ Kafka "
"���������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:60
#, fuzzy
msgid "the two topics are joined on weather station id"
msgstr ""
"������������������������������ID���������������2������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:61
#, fuzzy
msgid "per weather station the min, max and average temperature is determined"
msgstr ""
"���������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:62
#, fuzzy
msgid ""
"this aggregated data is written out to a third topic (`temperatures-"
"aggregated`)"
msgstr ""
"��������������������������������������������������������� ( `temperatures-"
"aggregated`) ���������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:66
#, fuzzy
msgid ""
"The data can be examined by inspecting the output topic.  By exposing a "
"Kafka Streams https://kafka.apache.org/22/documentation/streams/developer-"
"guide/interactive-queries.html[interactive query], the latest result for "
"each weather station can alternatively be obtained via a simple REST query."
msgstr ""
"������������������������������������������������������������������������������������������Kafka "
"Streams ��� link:https://kafka.apache.org/22/documentation/streams/developer-"
"guide/interactive-queries."
"html[���������������������]������������������������������������������������������������������������ "
"REST ������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:68
#, fuzzy
msgid "The overall architecture looks like so:"
msgstr "���������������������������������������������"

#. type: Target for macro image
#: upstream/_guides/kafka-streams.adoc:69
#, no-wrap
msgid "kafka-streams-guide-architecture.png"
msgstr ""

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:79
#, fuzzy
msgid ""
"The solution is located in the `kafka-streams-quickstart` {quickstarts-tree-"
"url}/kafka-streams-quickstart[directory]."
msgstr ""
"������������������������ `kafka-streams-quickstart` {quickstarts-tree-url}/"
"kafka-streams-quickstart[directory] ������������������"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:80
#, no-wrap, fuzzy
msgid "Creating the Producer Maven Project"
msgstr "Producer Maven ���������������������������"

#. type: delimited block =
#: upstream/_guides/kafka-streams.adoc:84
#, fuzzy
msgid ""
"First, we need a new project with the temperature value producer.  Create a "
"new project with the following command:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:93
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=kafka-streams-quickstart-producer \\\n"
"    -Dextensions=\"kafka\" \\\n"
"    -DnoExamples \\\n"
"    && mv kafka-streams-quickstart-producer producer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:96
#, fuzzy
msgid ""
"This command generates a Maven project, importing the Reactive Messaging and "
"Kafka connector extensions."
msgstr ""
"������������������������Reactive Messaging ��� Kafka "
"������������������������������������������ Maven "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:99
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the "
"`smallrye-reactive-messaging-kafka` extension to your project by running the "
"following command in your project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`smallrye-reactive-messaging-kafka` "
"���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:103
#, no-wrap
msgid ""
"./mvnw quarkus:add-extension -Dextensions=\"quarkus-smallrye-reactive-"
"messaging-kafka\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:113
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-reactive-messaging-kafka</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:115
#, no-wrap, fuzzy
msgid "The Temperature Value Producer"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:119
#, fuzzy
msgid ""
"Create the `producer/src/main/java/org/acme/kafka/streams/producer/generator/"
"ValuesGenerator.java` file, with the following content:"
msgstr ""
"������������������ `producer/src/main/java/org/acme/kafka/streams/producer/"
"generator/ValuesGenerator.java` ���������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:123
#, no-wrap
msgid "package org.acme.kafka.streams.producer.generator;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:132
#, no-wrap
msgid ""
"import java.math.BigDecimal;\n"
"import java.math.RoundingMode;\n"
"import java.time.Duration;\n"
"import java.time.Instant;\n"
"import java.util.Arrays;\n"
"import java.util.Collections;\n"
"import java.util.List;\n"
"import java.util.Random;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:139
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.reactive.messaging.kafka.Record;\n"
"import org.eclipse.microprofile.reactive.messaging.Outgoing;\n"
"import org.jboss.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:148
#, no-wrap
msgid ""
"/**\n"
" * A bean producing random temperature data every second.\n"
" * The values are written to a Kafka topic (temperature-values).\n"
" * Another topic contains the name of weather stations (weather-stations).\n"
" * The Kafka configuration is specified in the application configuration.\n"
" */\n"
"@ApplicationScoped\n"
"public class ValuesGenerator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:150
#, no-wrap
msgid ""
"    private static final Logger LOG = Logger.getLogger(ValuesGenerator."
"class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:165
#, no-wrap
msgid ""
"    private List<WeatherStation> stations = Collections.unmodifiableList(\n"
"            Arrays.asList(\n"
"                    new WeatherStation(1, \"Hamburg\", 13),\n"
"                    new WeatherStation(2, \"Snowdonia\", 5),\n"
"                    new WeatherStation(3, \"Boston\", 11),\n"
"                    new WeatherStation(4, \"Tokio\", 16),\n"
"                    new WeatherStation(5, \"Cusco\", 12),\n"
"                    new WeatherStation(6, \"Svalbard\", -7),\n"
"                    new WeatherStation(7, \"Porthsmouth\", 11),\n"
"                    new WeatherStation(8, \"Oslo\", 7),\n"
"                    new WeatherStation(9, \"Marrakesh\", 20)\n"
"            ));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:175
#, no-wrap
msgid ""
"    @Outgoing(\"temperature-values\")                                        "
"// <1>\n"
"    public Multi<Record<Integer, String>> generate() {\n"
"        return Multi.createFrom().ticks().every(Duration.ofMillis(500))    //"
" <2>\n"
"                .onOverflow().drop()\n"
"                .map(tick -> {\n"
"                    WeatherStation station = stations.get(random."
"nextInt(stations.size()));\n"
"                    double temperature = BigDecimal.valueOf(random."
"nextGaussian() * 15 + station.averageTemperature)\n"
"                            .setScale(1, RoundingMode.HALF_UP)\n"
"                            .doubleValue();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:180
#, no-wrap
msgid ""
"                    LOG.infov(\"station: {0}, temperature: {1}\", station."
"name, temperature);\n"
"                    return Record.of(station.id, Instant.now() + \";\" + "
"temperature);\n"
"                });\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:190
#, no-wrap
msgid ""
"    @Outgoing(\"weather-stations\")                                          "
"// <3>\n"
"    public Multi<Record<Integer, String>> weatherStations() {\n"
"        return Multi.createFrom().items(stations.stream()\n"
"            .map(s -> Record.of(\n"
"                    s.id,\n"
"                    \"{ \\\"id\\\" : \" + s.id +\n"
"                    \", \\\"name\\\" : \\\"\" + s.name + \"\\\" }\"))\n"
"        );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:192
#, no-wrap
msgid "    private static class WeatherStation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:196
#, no-wrap
msgid "        int id;\n"
"        String name;\n"
"        int averageTemperature;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:204
#, no-wrap
msgid ""
"        public WeatherStation(int id, String name, int averageTemperature) {\n"
"            this.id = id;\n"
"            this.name = name;\n"
"            this.averageTemperature = averageTemperature;\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:206
#, fuzzy
msgid ""
"Instruct Reactive Messaging to dispatch the items from the returned `Multi` "
"to `temperature-values`."
msgstr ""
"��������������� `Multi` ������ `temperature-values` "
"��������������������������������������� Reactive Messaging "
"���������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:207
#, fuzzy
msgid ""
"The method returns a Mutiny _stream_ (`Multi`) emitting a random temperature "
"value every 0.5 seconds."
msgstr ""
"������������������������0.5 "
"��������������������������������������������������� Mutiny "
"_���������������_( `Multi`) ������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:208
#, fuzzy
msgid ""
"Instruct Reactive Messaging to dispatch the items from the returned `Multi` "
"(static list of weather stations) to `weather-stations`."
msgstr ""
"������������ `Multi` (���������������������������������) ������ `weather-"
"stations` ��������������������������������������������������� Reactive "
"Messaging ���������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:210
#, fuzzy
msgid ""
"The two methods each return a _reactive stream_ whose items are sent to the "
"streams named `temperature-values` and `weather-stations`, respectively."
msgstr ""
"������ 2 ������������������������������������ `temperature-values` ��� "
"`weather-stations` "
"������������������������������������������������������������������ "
"_������������������������_������������������"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:211
#, no-wrap, fuzzy
msgid "Topic Configuration"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:215
#, fuzzy
msgid ""
"The two channels are mapped to Kafka topics using the Quarkus configuration "
"file `application.properties`.  For that, add the following to the file "
"`producer/src/main/resources/application.properties`:"
msgstr ""
"2���������������������������Quarkus������������������ `application."
"properties` "
"���������������Kafka������������������������������������������������������������������������������ "
"`producer/src/main/resources/application.properties` "
"������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:220
#, no-wrap
msgid ""
"# Configure the Kafka broker location\n"
"kafka.bootstrap.servers=localhost:9092\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:224
#, no-wrap
msgid ""
"mp.messaging.outgoing.temperature-values.connector=smallrye-kafka\n"
"mp.messaging.outgoing.temperature-values.key.serializer=org.apache.kafka."
"common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.temperature-values.value.serializer=org.apache.kafka."
"common.serialization.StringSerializer\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:228
#, no-wrap
msgid ""
"mp.messaging.outgoing.weather-stations.connector=smallrye-kafka\n"
"mp.messaging.outgoing.weather-stations.key.serializer=org.apache.kafka."
"common.serialization.IntegerSerializer\n"
"mp.messaging.outgoing.weather-stations.value.serializer=org.apache.kafka."
"common.serialization.StringSerializer\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:232
#, fuzzy
msgid ""
"This configures the Kafka bootstrap server, the two topics and the "
"corresponding (de-)serializers.  More details about the different "
"configuration options are available on the https://kafka.apache.org/"
"documentation/#producerconfigs[Producer configuration] and https://kafka."
"apache.org/documentation/#consumerconfigs[Consumer configuration] section "
"from the Kafka documentation."
msgstr ""
"������������Kafka ������������������������������������2 "
"������������������������������������������ "
"(���)������������������������������������������������������������������������������������������������������Kafka "
"��������������������� link:https://kafka.apache.org/documentation/"
"#producerconfigs[Producer ������]��� link:https://kafka.apache.org/"
"documentation/#consumerconfigs[Consumer "
"������]������������������������������������������������"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:233
#, no-wrap, fuzzy
msgid "Creating the Aggregator Maven Project"
msgstr "������������������Maven���������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:238
#, fuzzy
msgid ""
"With the producer application in place, it's time to implement the actual "
"aggregator application, which will run the Kafka Streams pipeline.  Create "
"another project like so:"
msgstr ""
"���������������������������������������������������������������Kafka Streams "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:247
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=kafka-streams-quickstart-aggregator \\\n"
"    -Dextensions=\"kafka-streams,resteasy-jackson\" \\\n"
"    -DnoExamples \\\n"
"    && mv kafka-streams-quickstart-aggregator aggregator\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:250
#, fuzzy
msgid ""
"This creates the `aggregator` project with the Quarkus extension for Kafka "
"Streams and with RESTEasy support for Jackson."
msgstr ""
"������������������Kafka "
"Streams������Quarkus���������������Jackson������RESTEasy������������������������ "
"`aggregator` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:253
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `kafka-"
"streams` extension to your project by running the following command in your "
"project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`kafka-streams` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:257
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"kafka-streams\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:267
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-kafka-streams</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:269
#, no-wrap, fuzzy
msgid "The Pipeline Implementation"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:273
#, fuzzy
msgid ""
"Let's begin the implementation of the stream processing application by "
"creating a few value objects for representing temperature measurements, "
"weather stations and for keeping track of aggregated values."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:276
#, fuzzy
msgid ""
"First, create the file `aggregator/src/main/java/org/acme/kafka/streams/"
"aggregator/model/WeatherStation.java`, representing a weather station, with "
"the following content:"
msgstr ""
"��������������������������������������� `aggregator/src/main/java/org/acme/"
"kafka/streams/aggregator/model/WeatherStation.java` ���������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:280
#: upstream/_guides/kafka-streams.adoc:298
#: upstream/_guides/kafka-streams.adoc:324
#: upstream/_guides/kafka-streams.adoc:682
#, no-wrap
msgid "package org.acme.kafka.streams.aggregator.model;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:285
#, no-wrap
msgid "@RegisterForReflection // <1>\n"
"public class WeatherStation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:289
#, no-wrap
msgid "    public int id;\n"
"    public String name;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:291
#, fuzzy
msgid ""
"By adding the `@RegisterForReflection` annotation, it is ensured that this "
"type can be instantiated reflectively when running the application in native "
"mode."
msgstr ""
"`@RegisterForReflection` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:294
#, fuzzy
msgid ""
"Then the file `aggregator/src/main/java/org/acme/kafka/streams/aggregator/"
"model/TemperatureMeasurement.java`, representing temperature measurements "
"for a given station:"
msgstr ""
"��������������������������������������������������������������������������������� "
"`aggregator/src/main/java/org/acme/kafka/streams/aggregator/model/"
"TemperatureMeasurement.java` ���"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:300
#: upstream/_guides/kafka-streams.adoc:367
#, no-wrap
msgid "import java.time.Instant;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:302
#, no-wrap
msgid "public class TemperatureMeasurement {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:307
#, no-wrap
msgid ""
"    public int stationId;\n"
"    public String stationName;\n"
"    public Instant timestamp;\n"
"    public double value;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:316
#, no-wrap
msgid ""
"    public TemperatureMeasurement(int stationId, String stationName, Instant "
"timestamp,\n"
"            double value) {\n"
"        this.stationId = stationId;\n"
"        this.stationName = stationName;\n"
"        this.timestamp = timestamp;\n"
"        this.value = value;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:320
#, fuzzy
msgid ""
"And finally `aggregator/src/main/java/org/acme/kafka/streams/aggregator/"
"model/Aggregation.java`, which will be used to keep track of the aggregated "
"values while the events are processed in the streaming pipeline:"
msgstr ""
"������������������ `aggregator/src/main/java/org/acme/kafka/streams/"
"aggregator/model/Aggregation.java` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:327
#, no-wrap
msgid "import java.math.BigDecimal;\n"
"import java.math.RoundingMode;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:332
#, no-wrap
msgid "@RegisterForReflection\n"
"public class Aggregation {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:340
#, no-wrap
msgid ""
"    public int stationId;\n"
"    public String stationName;\n"
"    public double min = Double.MAX_VALUE;\n"
"    public double max = Double.MIN_VALUE;\n"
"    public int count;\n"
"    public double sum;\n"
"    public double avg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:344
#, no-wrap
msgid ""
"    public Aggregation updateFrom(TemperatureMeasurement measurement) {\n"
"        stationId = measurement.stationId;\n"
"        stationName = measurement.stationName;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:349
#, no-wrap
msgid ""
"        count++;\n"
"        sum += measurement.value;\n"
"        avg = BigDecimal.valueOf(sum / count)\n"
"                .setScale(1, RoundingMode.HALF_UP).doubleValue();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:352
#, no-wrap
msgid ""
"        min = Math.min(min, measurement.value);\n"
"        max = Math.max(max, measurement.value);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:356
#, no-wrap
msgid "        return this;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:361
#, fuzzy
msgid ""
"Next, let's create the actual streaming query implementation itself in the "
"`aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/"
"TopologyProducer.java` file.  All we need to do for that is to declare a CDI "
"producer method which returns the Kafka Streams `Topology`; the Quarkus "
"extension will take care of configuring, starting and stopping the actual "
"Kafka Streams engine."
msgstr ""
"������������������������������������������������������������������ "
"`aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/"
"TopologyProducer.java` "
"������������������������������������������������������������������������������Kafka "
"Streams `Topology` ��������� CDI "
"������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:365
#: upstream/_guides/kafka-streams.adoc:598
#: upstream/_guides/kafka-streams.adoc:645
#: upstream/_guides/kafka-streams.adoc:869
#: upstream/_guides/kafka-streams.adoc:923
#, no-wrap
msgid "package org.acme.kafka.streams.aggregator.streams;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:370
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.inject.Produces;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:383
#, no-wrap
msgid ""
"import org.acme.kafka.streams.aggregator.model.Aggregation;\n"
"import org.acme.kafka.streams.aggregator.model.TemperatureMeasurement;\n"
"import org.acme.kafka.streams.aggregator.model.WeatherStation;\n"
"import org.apache.kafka.common.serialization.Serdes;\n"
"import org.apache.kafka.streams.StreamsBuilder;\n"
"import org.apache.kafka.streams.Topology;\n"
"import org.apache.kafka.streams.kstream.Consumed;\n"
"import org.apache.kafka.streams.kstream.GlobalKTable;\n"
"import org.apache.kafka.streams.kstream.Materialized;\n"
"import org.apache.kafka.streams.kstream.Produced;\n"
"import org.apache.kafka.streams.state.KeyValueBytesStoreSupplier;\n"
"import org.apache.kafka.streams.state.Stores;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:385
#, no-wrap
msgid "import io.quarkus.kafka.client.serialization.ObjectMapperSerde;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:388
#, no-wrap
msgid "@ApplicationScoped\n"
"public class TopologyProducer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:390
#, no-wrap
msgid ""
"    static final String WEATHER_STATIONS_STORE = \"weather-stations-"
"store\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:394
#, no-wrap
msgid ""
"    private static final String WEATHER_STATIONS_TOPIC = \"weather-"
"stations\";\n"
"    private static final String TEMPERATURE_VALUES_TOPIC = \"temperature-"
"values\";\n"
"    private static final String TEMPERATURES_AGGREGATED_TOPIC = "
"\"temperatures-aggregated\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:398
#, no-wrap
msgid ""
"    @Produces\n"
"    public Topology buildTopology() {\n"
"        StreamsBuilder builder = new StreamsBuilder();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:402
#, no-wrap
msgid ""
"        ObjectMapperSerde<WeatherStation> weatherStationSerde = new "
"ObjectMapperSerde<>(\n"
"                WeatherStation.class);\n"
"        ObjectMapperSerde<Aggregation> aggregationSerde = new "
"ObjectMapperSerde<>(Aggregation.class);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:405
#, no-wrap
msgid ""
"        KeyValueBytesStoreSupplier storeSupplier = Stores."
"persistentKeyValueStore(\n"
"                WEATHER_STATIONS_STORE);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:409
#, no-wrap
msgid ""
"        GlobalKTable<Integer, WeatherStation> stations = builder."
"globalTable( // <1>\n"
"                WEATHER_STATIONS_TOPIC,\n"
"                Consumed.with(Serdes.Integer(), weatherStationSerde));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:436
#, no-wrap
msgid ""
"        builder.stream(                                                      "
" // <2>\n"
"                        TEMPERATURE_VALUES_TOPIC,\n"
"                        Consumed.with(Serdes.Integer(), Serdes.String())\n"
"                )\n"
"                .join(                                                       "
" // <3>\n"
"                        stations,\n"
"                        (stationId, timestampAndValue) -> stationId,\n"
"                        (timestampAndValue, station) -> {\n"
"                            String[] parts = timestampAndValue.split(\";\");\n"
"                            return new TemperatureMeasurement(station.id, "
"station.name,\n"
"                                    Instant.parse(parts[0]), Double."
"valueOf(parts[1]));\n"
"                        }\n"
"                )\n"
"                .groupByKey()                                                "
" // <4>\n"
"                .aggregate(                                                  "
" // <5>\n"
"                        Aggregation::new,\n"
"                        (stationId, value, aggregation) -> aggregation."
"updateFrom(value),\n"
"                        Materialized.<Integer, Aggregation> "
"as(storeSupplier)\n"
"                            .withKeySerde(Serdes.Integer())\n"
"                            .withValueSerde(aggregationSerde)\n"
"                )\n"
"                .toStream()\n"
"                .to(                                                         "
" // <6>\n"
"                        TEMPERATURES_AGGREGATED_TOPIC,\n"
"                        Produced.with(Serdes.Integer(), aggregationSerde)\n"
"                );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:440
#, no-wrap
msgid "        return builder.build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:442
#, fuzzy
msgid ""
"The `weather-stations` table is read into a `GlobalKTable`, representing the "
"current state of each weather station"
msgstr ""
"`weather-stations` ��������������������������������������������������������� "
"`GlobalKTable` ���������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:443
#, fuzzy
msgid ""
"The `temperature-values` topic is read into a `KStream`; whenever a new "
"message arrives to this topic, the pipeline will be processed for this "
"measurement"
msgstr ""
"`temperature-values` ��������������� `KStream` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:444
#, fuzzy
msgid ""
"The message from the `temperature-values` topic is joined with the "
"corresponding weather station, using the topic's key (weather station id); "
"the join result contains the data from the measurement and associated "
"weather station message"
msgstr ""
"`temperature-values` "
"��������������������������������������������������������������� "
"(������������������������������ ID) "
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:445
#, fuzzy
msgid "The values are grouped by message key (the weather station id)"
msgstr ""
"������������������������������������������������������������ID���������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:446
#, fuzzy
msgid ""
"Within each group, all the measurements of that station are aggregated, by "
"keeping track of minimum and maximum values and calculating the average "
"value of all measurements of that station (see the `Aggregation` type)"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`Aggregation` ������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:447
#, fuzzy
msgid ""
"The results of the pipeline are written out to the `temperatures-aggregated` "
"topic"
msgstr ""
"������������������������������ `temperatures-aggregated` "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:450
#, fuzzy
msgid ""
"The Kafka Streams extension is configured via the Quarkus configuration file "
"`application.properties`.  Create the file `aggregator/src/main/resources/"
"application.properties` with the following contents:"
msgstr ""
"Kafka Streams������������������Quarkus��������������������� `application."
"properties` ��������������������������������� `aggregator/src/main/resources/"
"application.properties` ���������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:456
#, no-wrap
msgid ""
"quarkus.kafka-streams.bootstrap-servers=localhost:9092\n"
"quarkus.kafka-streams.application-server=${hostname}:8080\n"
"quarkus.kafka-streams.topics=weather-stations,temperature-values\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:463
#, no-wrap
msgid ""
"# pass-through options\n"
"kafka-streams.cache.max.bytes.buffering=10240\n"
"kafka-streams.commit.interval.ms=1000\n"
"kafka-streams.metadata.max.age.ms=500\n"
"kafka-streams.auto.offset.reset=earliest\n"
"kafka-streams.metrics.recording.level=DEBUG\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:470
#, fuzzy
msgid ""
"The options with the `quarkus.kafka-streams` prefix can be changed "
"dynamically at application startup, e.g. via environment variables or system "
"properties.  `bootstrap-servers` and `application-server` are mapped to the "
"Kafka Streams properties `bootstrap.servers` and `application.server`, "
"respectively.  `topics` is specific to Quarkus: the application will wait "
"for all the given topics to exist before launching the Kafka Streams engine. "
" This is to done to gracefully await the creation of topics that don't yet "
"exist at application startup time."
msgstr ""
"`quarkus.kafka-streams` `bootstrap-servers` ��� ������������������ Kafka "
"Streams ��������������� ��� ��������������������������� ��� Quarkus "
"��������������������������������������������������� Kafka Streams "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`application-server` `bootstrap.servers` `application.server` `topics`"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:473
#, fuzzy
msgid ""
"All the properties within the `kafka-streams` namespace are passed through "
"as-is to the Kafka Streams engine.  Changing their values requires a rebuild "
"of the application."
msgstr ""
"`kafka-streams` "
"������������������������������������������������������������������������ "
"Kafka Streams "
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:474
#, no-wrap, fuzzy
msgid "Building and Running the Applications"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:477
#, fuzzy
msgid "We now can build the `producer` and `aggregator` applications:"
msgstr ""
"`producer` ��� `aggregator` "
"������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:482
#, no-wrap
msgid ""
"./mvnw clean package -f producer/pom.xml\n"
"./mvnw clean package -f aggregator/pom.xml\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:487
#, fuzzy
msgid ""
"Instead of running them directly on the host machine using the Quarkus dev "
"mode, we're going to package them into container images and launch them via "
"Docker Compose.  This is done in order to demonstrate scaling the "
"`aggregator` aggregation to multiple nodes later on."
msgstr ""
"Quarkus���dev������������������������������������������������������������������������������������������������������������������������������������Docker "
"Compose��������������������������������������������� `aggregator` "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:490
#, fuzzy
msgid ""
"The `Dockerfile` created by Quarkus by default needs one adjustment for the "
"`aggregator` application in order to run the Kafka Streams pipeline.  To do "
"so, edit the file `aggregator/src/main/docker/Dockerfile.jvm` and replace "
"the line `FROM fabric8/java-alpine-openjdk8-jre` with `FROM fabric8/java-"
"centos-openjdk8-jdk`."
msgstr ""
"Quarkus��������������������������������� `Dockerfile` ������Kafka "
"Streams��������������������������������������������� `aggregator` "
"���������������������������1��������������������������������������������������� "
"`aggregator/src/main/docker/Dockerfile.jvm` ������������������������������ "
"`FROM fabric8/java-alpine-openjdk8-jre` ��������� `FROM fabric8/java-centos-"
"openjdk8-jdk` ������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:492
#, fuzzy
msgid ""
"Next create a Docker Compose file (`docker-compose.yaml`) for spinning up "
"the two applications as well as Apache Kafka and ZooKeeper like so:"
msgstr ""
"���������2 ��������������������������������������������������������� Docker "
"Compose ������������ ( `docker-compose.yaml`) ���������������Apache "
"Kafka���ZooKeeper ������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:496
#, no-wrap
msgid "version: '3.5'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:528
#, no-wrap
msgid ""
"services:\n"
"  zookeeper:\n"
"    image: strimzi/kafka:0.19.0-kafka-2.5.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/zookeeper-server-start.sh config/zookeeper.properties\"\n"
"    ]\n"
"    ports:\n"
"      - \"2181:2181\"\n"
"    environment:\n"
"      LOG_DIR: /tmp/logs\n"
"    networks:\n"
"      - kafkastreams-network\n"
"  kafka:\n"
"    image: strimzi/kafka:0.19.0-kafka-2.5.0\n"
"    command: [\n"
"      \"sh\", \"-c\",\n"
"      \"bin/kafka-server-start.sh config/server.properties --override "
"listeners=$${KAFKA_LISTENERS} --override advertised.listeners="
"$${KAFKA_ADVERTISED_LISTENERS} --override zookeeper.connect="
"$${KAFKA_ZOOKEEPER_CONNECT} --override num.partitions="
"$${KAFKA_NUM_PARTITIONS}\"\n"
"    ]\n"
"    depends_on:\n"
"      - zookeeper\n"
"    ports:\n"
"      - \"9092:9092\"\n"
"    environment:\n"
"      LOG_DIR: \"/tmp/logs\"\n"
"      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092\n"
"      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092\n"
"      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181\n"
"      KAFKA_NUM_PARTITIONS: 3\n"
"    networks:\n"
"      - kafkastreams-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:538
#, no-wrap
msgid ""
"  producer:\n"
"    image: quarkus-quickstarts/kafka-streams-producer:1.0\n"
"    build:\n"
"      context: producer\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      KAFKA_BOOTSTRAP_SERVERS: kafka:9092\n"
"    networks:\n"
"      - kafkastreams-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:548
#, no-wrap
msgid ""
"  aggregator:\n"
"    image: quarkus-quickstarts/kafka-streams-aggregator:1.0\n"
"    build:\n"
"      context: aggregator\n"
"      dockerfile: src/main/docker/Dockerfile.${QUARKUS_MODE:-jvm}\n"
"    environment:\n"
"      QUARKUS_KAFKA_STREAMS_BOOTSTRAP_SERVERS: kafka:9092\n"
"    networks:\n"
"      - kafkastreams-network\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:552
#, no-wrap
msgid "networks:\n"
"  kafkastreams-network:\n"
"    name: ks\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:556
#, fuzzy
msgid ""
"To launch all the containers, building the `producer` and `aggregator` "
"container images, run `docker-compose up --build`."
msgstr ""
"`producer` ��� `aggregator` "
"��������������������������������������������������������������������������������������������� "
"`docker-compose up --build` ���������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:558
#, fuzzy
msgid ""
"You should see log statements from the `producer` application about messages "
"being sent to the \"temperature-values\" topic."
msgstr ""
"`producer` ���������������������������������\"temperature-values\" "
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:561
#, fuzzy
msgid ""
"Now run an instance of the _debezium/tooling_ image, attaching to the same "
"network all the other containers run in.  This image provides several useful "
"tools such as _kafkacat_ and _httpie_:"
msgstr ""
"��������� _debezium/"
"tooling_������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"_kafkacat_��� _httpie_ "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:565
#, no-wrap
msgid "docker run --tty --rm -i --network ks debezium/tooling:1.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:568
#, fuzzy
msgid ""
"Within the tooling container, run _kafkacat_ to examine the results of the "
"streaming pipeline:"
msgstr ""
"������������������������������ "
"_kafkacat���_���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:572
#, no-wrap
msgid "kafkacat -b kafka:9092 -C -o beginning -q -t temperatures-aggregated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:577
#, no-wrap
msgid ""
"{\"avg\":34.7,\"count\":4,\"max\":49.4,\"min\":16.8,\"stationId\":"
"9,\"stationName\":\"Marrakesh\",\"sum\":138.8}\n"
"{\"avg\":15.7,\"count\":1,\"max\":15.7,\"min\":15.7,\"stationId\":"
"2,\"stationName\":\"Snowdonia\",\"sum\":15.7}\n"
"{\"avg\":12.8,\"count\":7,\"max\":25.5,\"min\":-13.8,\"stationId\":"
"7,\"stationName\":\"Porthsmouth\",\"sum\":89.7}\n"
"...\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:581
#, fuzzy
msgid ""
"You should see new values arrive as the producer continues to emit "
"temperature measurements, each value on the outbound topic showing the "
"minimum, maximum and average temperature values of the represented weather "
"station."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:582
#, no-wrap, fuzzy
msgid "Interactive Queries"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:590
#, fuzzy
msgid ""
"Subscribing to the `temperatures-aggregated` topic is a great way to react "
"to any new temperature values.  It's a bit wasteful though if you're just "
"interested in the latest aggregated value for a given weather station.  This "
"is where Kafka Streams interactive queries shine: they let you directly "
"query the underlying state store of the pipeline for the value associated to "
"a given key.  By exposing a simple REST endpoint which queries the state "
"store, the latest aggregation result can be retrieved without having to "
"subscribe to any Kafka topic."
msgstr ""
"`temperatures-aggregated` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Kafka "
"Streams "
"��������������������������������������������������������������������������������������������������������� "
"REST ������������������������������������������������Kafka "
"������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:592
#, fuzzy
msgid ""
"Let's begin by creating a new class `InteractiveQueries` in the file "
"`aggregator/src/main/java/org/acme/kafka/streams/aggregator/streams/"
"InteractiveQueries.java`:"
msgstr ""
"`InteractiveQueries` ��������������������� `aggregator/src/main/java/org/"
"acme/kafka/streams/aggregator/streams/InteractiveQueries.java`."

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:594
#, fuzzy
msgid ""
"one more method to the `KafkaStreamsPipeline` class which obtains the "
"current state for a given key:"
msgstr ""
"`KafkaStreamsPipeline` "
"���������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:608
#, no-wrap
msgid ""
"import org.acme.kafka.streams.aggregator.model.Aggregation;\n"
"import org.acme.kafka.streams.aggregator.model.WeatherStationData;\n"
"import org.apache.kafka.streams.KafkaStreams;\n"
"import org.apache.kafka.streams.errors.InvalidStateStoreException;\n"
"import org.apache.kafka.streams.state.QueryableStoreTypes;\n"
"import org.apache.kafka.streams.state.ReadOnlyKeyValueStore;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:611
#, no-wrap
msgid "@ApplicationScoped\n"
"public class InteractiveQueries {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:614
#, no-wrap
msgid "    @Inject\n"
"    KafkaStreams streams;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:617
#, no-wrap
msgid ""
"    public GetWeatherStationDataResult getWeatherStationData(int id) {\n"
"        Aggregation result = getWeatherStationStore().get(id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:625
#, no-wrap
msgid ""
"        if (result != null) {\n"
"            return GetWeatherStationDataResult.found(WeatherStationData."
"from(result)); // <1>\n"
"        }\n"
"        else {\n"
"            return GetWeatherStationDataResult.notFound();                   "
"          // <2>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:636
#, no-wrap
msgid ""
"    private ReadOnlyKeyValueStore<Integer, Aggregation> "
"getWeatherStationStore() {\n"
"        while (true) {\n"
"            try {\n"
"                return streams.store(TopologyProducer."
"WEATHER_STATIONS_STORE, QueryableStoreTypes.keyValueStore());\n"
"            } catch (InvalidStateStoreException e) {\n"
"                // ignore, store not ready yet\n"
"            }\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:638
#, fuzzy
msgid ""
"A value for the given station id was found, so that value will be returned"
msgstr ""
"������������������ID���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:639
#, fuzzy
msgid ""
"No value was found, either because a non-existing station was queried or no "
"measurement exists yet for the given station"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:641
#, fuzzy
msgid ""
"Also create the method's return type in the file `aggregator/src/main/java/"
"org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult.java`:"
msgstr ""
"������������������������������������������������������ `aggregator/src/main/"
"java/org/acme/kafka/streams/aggregator/streams/GetWeatherStationDataResult."
"java`."

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:648
#: upstream/_guides/kafka-streams.adoc:872
#, no-wrap
msgid "import java.util.Optional;\n"
"import java.util.OptionalInt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:650
#: upstream/_guides/kafka-streams.adoc:874
#, no-wrap
msgid "import org.acme.kafka.streams.aggregator.model.WeatherStationData;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:652
#: upstream/_guides/kafka-streams.adoc:876
#, no-wrap
msgid "public class GetWeatherStationDataResult {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:655
#, no-wrap
msgid ""
"    private static GetWeatherStationDataResult NOT_FOUND =\n"
"            new GetWeatherStationDataResult(null);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:657
#, no-wrap
msgid "    private final WeatherStationData result;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:661
#, no-wrap
msgid ""
"    private GetWeatherStationDataResult(WeatherStationData result) {\n"
"        this.result = result;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:665
#, no-wrap
msgid ""
"    public static GetWeatherStationDataResult found(WeatherStationData data) "
"{\n"
"        return new GetWeatherStationDataResult(data);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:669
#: upstream/_guides/kafka-streams.adoc:902
#, no-wrap
msgid ""
"    public static GetWeatherStationDataResult notFound() {\n"
"        return NOT_FOUND;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:674
#, no-wrap
msgid ""
"    public Optional<WeatherStationData> getResult() {\n"
"        return Optional.ofNullable(result);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:678
#, fuzzy
msgid ""
"Also create `aggregator/src/main/java/org/acme/kafka/streams/aggregator/"
"model/WeatherStationData.java`, which represents the actual aggregation "
"result for a weather station:"
msgstr ""
"��������������������������������������������������� `aggregator/src/main/"
"java/org/acme/kafka/streams/aggregator/model/WeatherStationData.java` "
"���������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:687
#, no-wrap
msgid "@RegisterForReflection\n"
"public class WeatherStationData {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:694
#, no-wrap
msgid ""
"    public int stationId;\n"
"    public String stationName;\n"
"    public double min = Double.MAX_VALUE;\n"
"    public double max = Double.MIN_VALUE;\n"
"    public int count;\n"
"    public double avg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:704
#, no-wrap
msgid ""
"    private WeatherStationData(int stationId, String stationName, double "
"min, double max,\n"
"            int count, double avg) {\n"
"        this.stationId = stationId;\n"
"        this.stationName = stationName;\n"
"        this.min = min;\n"
"        this.max = max;\n"
"        this.count = count;\n"
"        this.avg = avg;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:715
#, no-wrap
msgid ""
"    public static WeatherStationData from(Aggregation aggregation) {\n"
"        return new WeatherStationData(\n"
"                aggregation.stationId,\n"
"                aggregation.stationName,\n"
"                aggregation.min,\n"
"                aggregation.max,\n"
"                aggregation.count,\n"
"                aggregation.avg);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:719
#, fuzzy
msgid ""
"We now can add a simple REST endpoint (`aggregator/src/main/java/org/acme/"
"kafka/streams/aggregator/rest/WeatherStationEndpoint.java`), which invokes "
"`getWeatherStationData()` and returns the data to the client:"
msgstr ""
"������������ `getWeatherStationData()` "
"������������������������������������������������������������������������ "
"REST ��������������������� ( `aggregator/src/main/java/org/acme/kafka/"
"streams/aggregator/rest/WeatherStationEndpoint.java`) "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:723
#: upstream/_guides/kafka-streams.adoc:943
#, no-wrap
msgid "package org.acme.kafka.streams.aggregator.rest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:727
#: upstream/_guides/kafka-streams.adoc:947
#, no-wrap
msgid ""
"import java.net.URI;\n"
"import java.net.URISyntaxException;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:736
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.Status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:739
#, no-wrap
msgid ""
"import org.acme.kafka.streams.aggregator.streams."
"GetWeatherStationDataResult;\n"
"import org.acme.kafka.streams.aggregator.streams.KafkaStreamsPipeline;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:743
#: upstream/_guides/kafka-streams.adoc:966
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"@Path(\"/weather-stations\")\n"
"public class WeatherStationEndpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:746
#: upstream/_guides/kafka-streams.adoc:969
#, no-wrap
msgid "    @Inject\n"
"    InteractiveQueries interactiveQueries;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:751
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/data/{id}\")\n"
"    public Response getWeatherStationData(@PathParam(\"id\") int id) {\n"
"        GetWeatherStationDataResult result = interactiveQueries."
"getWeatherStationData(id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:761
#, no-wrap
msgid ""
"        if (result.getResult().isPresent()) {  // <1>\n"
"            return Response.ok(result.getResult().get()).build();\n"
"        }\n"
"        else {\n"
"            return Response.status(Status.NOT_FOUND.getStatusCode(),\n"
"                    \"No data found for weather station \" + id).build();\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:763
#, fuzzy
msgid ""
"Depending on whether a value was obtained, either return that value or a 404 "
"response"
msgstr ""
"������������������������������������������������������������������������404 "
"���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:765
#, fuzzy
msgid ""
"With this code in place, it's time to rebuild the application and the "
"`aggregator` service in Docker Compose:"
msgstr ""
"���������������������������������Docker "
"Compose������������������������������ `aggregator` "
"������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:771
#, no-wrap
msgid ""
"./mvnw clean package -f aggregator/pom.xml\n"
"docker-compose stop aggregator\n"
"docker-compose up --build -d\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:776
#, fuzzy
msgid ""
"This will rebuild the `aggregator` container and restart its service.  Once "
"that's done, you can invoke the service's REST API to obtain the temperature "
"data for one of the existing stations.  To do so, you can use `httpie` in "
"the tooling container launched before:"
msgstr ""
"������������������ `aggregator` "
"������������������������������������������������������������������������������������������������������������������ "
"REST API ��������������������������������������������������� 1 "
"��������������������������������������������������������������������������������������������������������������������������������� "
"`httpie` ���������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:780
#, no-wrap
msgid "http aggregator:8080/weather-stations/data/1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:786
#, no-wrap
msgid ""
"HTTP/1.1 200 OK\n"
"Connection: keep-alive\n"
"Content-Length: 85\n"
"Content-Type: application/json\n"
"Date: Tue, 18 Jun 2019 19:29:16 GMT\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:795
#, no-wrap
msgid ""
"{\n"
"    \"avg\": 12.9,\n"
"    \"count\": 146,\n"
"    \"max\": 41.0,\n"
"    \"min\": -25.6,\n"
"    \"stationId\": 1,\n"
"    \"stationName\": \"Hamburg\"\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:797
#, no-wrap, fuzzy
msgid "Scaling Out"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:804
#, fuzzy
msgid ""
"A very interesting trait of Kafka Streams applications is that they can be "
"scaled out, i.e. the load and state can be distributed amongst multiple "
"application instances running the same pipeline.  Each node will then "
"contain a subset of the aggregation results, but Kafka Streams provides you "
"with https://kafka.apache.org/22/documentation/streams/developer-guide/"
"interactive-queries.html#querying-remote-state-stores-for-the-entire-app[an "
"API] to obtain the information which node is hosting a given key.  The "
"application can then either fetch the data directly from the other instance, "
"or simply point the client to the location of that other node."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Kafka "
"Streams "
"��������������������������������������������������������������������������������������������� "
"link:https://kafka.apache.org/22/documentation/streams/developer-guide/"
"interactive-queries.html#querying-remote-state-stores-for-the-entire-app[API "
"���]���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:806
#, fuzzy
msgid ""
"Launching multiple instances of the `aggregator` application will make look "
"the overall architecture like so:"
msgstr ""
"`aggregator` "
"������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Target for macro image
#: upstream/_guides/kafka-streams.adoc:807
#, no-wrap
msgid "kafka-streams-guide-architecture-distributed.png"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:810
#, fuzzy
msgid ""
"The `InteractiveQueries` class must be adjusted slightly for this "
"distributed architecture:"
msgstr ""
"`InteractiveQueries` "
"���������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:819
#, no-wrap
msgid ""
"public GetWeatherStationDataResult getWeatherStationData(int id) {\n"
"    StreamsMetadata metadata = streams.metadataForKey(                  // "
"<1>\n"
"            TopologyProducer.WEATHER_STATIONS_STORE,\n"
"            id,\n"
"            Serdes.Integer().serializer()\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:827
#, no-wrap
msgid ""
"    if (metadata == null || metadata == StreamsMetadata.NOT_AVAILABLE) {\n"
"        LOG.warn(\"Found no metadata for key {}\", id);\n"
"        return GetWeatherStationDataResult.notFound();\n"
"    }\n"
"    else if (metadata.host().equals(host)) {                            // "
"<2>\n"
"        LOG.info(\"Found data for key {} locally\", id);\n"
"        Aggregation result = getWeatherStationStore().get(id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:845
#, no-wrap
msgid ""
"        if (result != null) {\n"
"            return GetWeatherStationDataResult.found(WeatherStationData."
"from(result));\n"
"        }\n"
"        else {\n"
"            return GetWeatherStationDataResult.notFound();\n"
"        }\n"
"    }\n"
"    else {                                                              // "
"<3>\n"
"        LOG.info(\n"
"            \"Found data for key {} on remote host {}:{}\",\n"
"            id,\n"
"            metadata.host(),\n"
"            metadata.port()\n"
"        );\n"
"        return GetWeatherStationDataResult.foundRemotely(metadata.host(), "
"metadata.port());\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:858
#, no-wrap
msgid ""
"public List<PipelineMetadata> getMetaData() {                           // "
"<4>\n"
"    return streams.allMetadataForStore(TopologyProducer."
"WEATHER_STATIONS_STORE)\n"
"            .stream()\n"
"            .map(m -> new PipelineMetadata(\n"
"                    m.hostInfo().host() + \":\" + m.hostInfo().port(),\n"
"                    m.topicPartitions()\n"
"                        .stream()\n"
"                        .map(TopicPartition::toString)\n"
"                        .collect(Collectors.toSet()))\n"
"            )\n"
"            .collect(Collectors.toList());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:860
#, fuzzy
msgid "The streams metadata for the given weather station id is obtained"
msgstr ""
"������������������������������ID���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:861
#, fuzzy
msgid ""
"The given key (weather station id) is maintained by the local application "
"node, i.e. it can answer the query itself"
msgstr ""
"���������������������(���������ID)������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:862
#, fuzzy
msgid ""
"The given key is maintained by another application node; in this case the "
"information about that node (host and port) will be returned"
msgstr ""
"���������������������������������������������������������������������������������������������������; "
"������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:863
#, fuzzy
msgid ""
"The `getMetaData()` method is added to provide callers with a list of all "
"the nodes in the application cluster."
msgstr ""
"`getMetaData()` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:865
#, fuzzy
msgid "The `GetWeatherStationDataResult` type must be adjusted accordingly:"
msgstr ""
"`GetWeatherStationDataResult` "
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:879
#, no-wrap
msgid ""
"    private static GetWeatherStationDataResult NOT_FOUND =\n"
"            new GetWeatherStationDataResult(null, null, null);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:883
#, no-wrap
msgid ""
"    private final WeatherStationData result;\n"
"    private final String host;\n"
"    private final Integer port;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:890
#, no-wrap
msgid ""
"    private GetWeatherStationDataResult(WeatherStationData result, String "
"host,\n"
"            Integer port) {\n"
"        this.result = result;\n"
"        this.host = host;\n"
"        this.port = port;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:894
#, no-wrap
msgid ""
"    public static GetWeatherStationDataResult found(WeatherStationData data) "
"{\n"
"        return new GetWeatherStationDataResult(data, null, null);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:898
#, no-wrap
msgid ""
"    public static GetWeatherStationDataResult foundRemotely(String host, int "
"port) {\n"
"        return new GetWeatherStationDataResult(null, host, port);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:906
#, no-wrap
msgid ""
"    public Optional<WeatherStationData> getResult() {\n"
"        return Optional.ofNullable(result);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:910
#, no-wrap
msgid ""
"    public Optional<String> getHost() {\n"
"        return Optional.ofNullable(host);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:915
#, no-wrap
msgid ""
"    public OptionalInt getPort() {\n"
"        return port != null ? OptionalInt.of(port) : OptionalInt.empty();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:919
#, fuzzy
msgid ""
"Also the return type for `getMetaData()` must be defined (`aggregator/src/"
"main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata.java`):"
msgstr ""
"��������� `getMetaData()` "
"������������������������������������������������������������ ( `aggregator/"
"src/main/java/org/acme/kafka/streams/aggregator/streams/PipelineMetadata."
"java`)���"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:925
#, no-wrap
msgid "import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:927
#, no-wrap
msgid "public class PipelineMetadata {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:930
#, no-wrap
msgid "    public String host;\n"
"    public Set<String> partitions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:936
#, no-wrap
msgid ""
"    public PipelineMetadata(String host, Set<String> partitions) {\n"
"        this.host = host;\n"
"        this.partitions = partitions;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:939
#, fuzzy
msgid "Lastly, the REST endpoint class must be updated:"
msgstr ""
"������������REST���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:958
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.Status;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:962
#, no-wrap
msgid ""
"import org.acme.kafka.streams.aggregator.streams."
"GetWeatherStationDataResult;\n"
"import org.acme.kafka.streams.aggregator.streams.KafkaStreamsPipeline;\n"
"import org.acme.kafka.streams.aggregator.streams.PipelineMetadata;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:976
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/data/{id}\")\n"
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public Response getWeatherStationData(@PathParam(\"id\") int id) {\n"
"        GetWeatherStationDataResult result = interactiveQueries."
"getWeatherStationData(id);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:990
#, no-wrap
msgid ""
"        if (result.getResult().isPresent()) {                     // <1>\n"
"            return Response.ok(result.getResult().get()).build();\n"
"        }\n"
"        else if (result.getHost().isPresent()) {                  // <2>\n"
"            URI otherUri = getOtherUri(result.getHost().get(), result."
"getPort().getAsInt(),\n"
"                    id);\n"
"            return Response.seeOther(otherUri).build();\n"
"        }\n"
"        else {                                                    // <3>\n"
"            return Response.status(Status.NOT_FOUND.getStatusCode(),\n"
"                    \"No data found for weather station \" + id).build();\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:997
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/meta-data\")\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    public List<PipelineMetadata> getMetaData() {                 // <4>\n"
"        return interactiveQueries.getMetaData();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1007
#, no-wrap
msgid ""
"    private URI getOtherUri(String host, int port, int id) {\n"
"        try {\n"
"            return new URI(\"http://\" + host + \":\" + port + \"/weather-"
"stations/data/\" + id);\n"
"        }\n"
"        catch (URISyntaxException e) {\n"
"            throw new RuntimeException(e);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1009
#, fuzzy
msgid "The data was found locally, so return it"
msgstr "������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1010
#, fuzzy
msgid ""
"The data is maintained by another node, so reply with a redirect (HTTP "
"status code 303) if the data for the given key is stored on one of the other "
"nodes."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������(HTTP������������������������303)������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1011
#, fuzzy
msgid "No data was found for the given weather station id"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1012
#, fuzzy
msgid ""
"Exposes information about all the hosts forming the application cluster"
msgstr ""
"������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1015
#, fuzzy
msgid ""
"Now stop the `aggregator` service again and rebuild it.  Then let's spin up "
"three instances of it:"
msgstr ""
"��������������� `aggregator` "
"������������������������������������������������������������3���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1021
#, no-wrap
msgid ""
"./mvnw clean package -f aggregator/pom.xml\n"
"docker-compose stop aggregator\n"
"docker-compose up --build -d --scale aggregator=3\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1026
#, fuzzy
msgid ""
"When invoking the REST API on any of the three instances, it might either be "
"that the aggregation for the requested weather station id is stored locally "
"on the node receiving the query, or it could be stored on one of the other "
"two nodes."
msgstr ""
"3������������������������������������������REST "
"API���������������������������������������������������������������������ID���������������������������������������������������������������������������������������������2���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1030
#, fuzzy
msgid ""
"As the load balancer of Docker Compose will distribute requests to the "
"`aggregator` service in a round-robin fashion, we'll invoke the actual nodes "
"directly.  The application exposes information about all the host names via "
"REST:"
msgstr ""
"Docker Compose������������������������������������������������������������ "
"`aggregator` "
"���������������������������������������������������������������������������������������������������������������������������������������������REST���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1034
#, no-wrap
msgid "http aggregator:8080/weather-stations/meta-data\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1040
#, no-wrap
msgid ""
"HTTP/1.1 200 OK\n"
"Connection: keep-alive\n"
"Content-Length: 202\n"
"Content-Type: application/json\n"
"Date: Tue, 18 Jun 2019 20:00:23 GMT\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1061
#, no-wrap
msgid ""
"[\n"
"    {\n"
"        \"host\": \"2af13fe516a9:8080\",\n"
"        \"partitions\": [\n"
"            \"temperature-values-2\"\n"
"        ]\n"
"    },\n"
"    {\n"
"        \"host\": \"32cc8309611b:8080\",\n"
"        \"partitions\": [\n"
"            \"temperature-values-1\"\n"
"        ]\n"
"    },\n"
"    {\n"
"        \"host\": \"1eb39af8d587:8080\",\n"
"        \"partitions\": [\n"
"            \"temperature-values-0\"\n"
"        ]\n"
"    }\n"
"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1065
#, fuzzy
msgid ""
"Retrieve the data from one of the three hosts shown in the response (your "
"actual host names will differ):"
msgstr ""
"��������������������������������������� 3 ��������������������������� 1 "
"������������������������������������ "
"(���������������������������������������)���"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1069
#, no-wrap
msgid "http 2af13fe516a9:8080/weather-stations/data/1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1072
#, fuzzy
msgid ""
"If that node holds the data for key \"1\", you'll get a response like this:"
msgstr ""
"���������������������������1���������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1080
#, no-wrap
msgid ""
"HTTP/1.1 200 OK\n"
"Connection: keep-alive\n"
"Content-Length: 74\n"
"Content-Type: application/json\n"
"Date: Tue, 11 Jun 2019 19:16:31 GMT\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1089
#, no-wrap
msgid ""
"{\n"
"  \"avg\": 11.9,\n"
"  \"count\": 259,\n"
"  \"max\": 50.0,\n"
"  \"min\": -30.1,\n"
"  \"stationId\": 1,\n"
"  \"stationName\": \"Hamburg\"\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1092
#, fuzzy
msgid "Otherwise, the service will send a redirect:"
msgstr ""
"������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1100
#, no-wrap
msgid ""
"HTTP/1.1 303 See Other\n"
"Connection: keep-alive\n"
"Content-Length: 0\n"
"Date: Tue, 18 Jun 2019 20:01:03 GMT\n"
"Location: http://1eb39af8d587:8080/weather-stations/data/1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1103
#, fuzzy
msgid ""
"You can also have _httpie_ automatically follow the redirect by passing the "
"`--follow option`:"
msgstr ""
"��������� `--follow option` ������������������ _httpie "
"���_������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1107
#, no-wrap
msgid "http --follow 2af13fe516a9:8080/weather-stations/data/1\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:1109
#, no-wrap, fuzzy
msgid "Running Natively"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1113
#, fuzzy
msgid ""
"The Quarkus extension for Kafka Streams enables the execution of stream "
"processing applications natively via GraalVM without further configuration."
msgstr ""
"Kafka "
"Streams������Quarkus���������������������������������GraalVM������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1116
#, fuzzy
msgid ""
"To run both the `producer` and `aggregator` applications in native mode, the "
"Maven builds can be executed using the `native` profile:"
msgstr ""
"`producer` ��� `aggregator` "
"��������������������������������������������������������������������������� "
"`native` ��������������������������������� Maven "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1121
#, no-wrap
msgid ""
"./mvnw clean package -f producer/pom.xml -Pnative -Dnative-image.container-"
"runtime=docker\n"
"./mvnw clean package -f aggregator/pom.xml -Pnative -Dnative-image.container-"
"runtime=docker\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1124
#, fuzzy
msgid ""
"Now create an environment variable named `QUARKUS_MODE` and with value set "
"to \"native\":"
msgstr ""
"������������ `QUARKUS_MODE` "
"���������������������������������������������������\"native\"���������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1128
#, no-wrap
msgid "export QUARKUS_MODE=native\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1133
#, fuzzy
msgid ""
"This is used by the Docker Compose file to use the correct `Dockerfile` when "
"building the `producer` and `aggregator` images.  The Kafka Streams "
"application can work with less than 50 MB RSS in native mode.  To do so, add "
"the `Xmx` option to the program invocation in `aggregator/src/main/docker/"
"Dockerfile.native`:"
msgstr ""
"������������ `producer` ��� `aggregator` "
"��������������������������������������� `Dockerfile` "
"������������������������ Docker Compose "
"������������������������������������Kafka Streams "
"������������������������������������������������������������ 50 MB ��������� "
"RSS ������������������������������������������ `aggregator/src/main/docker/"
"Dockerfile.native` ��������������������������������� `Xmx` "
"������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1137
#, no-wrap
msgid "CMD [\"./application\", \"-Dquarkus.http.host=0.0.0.0\", \"-Xmx32m\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1141
#, fuzzy
msgid ""
"Now start Docker Compose as described above (don't forget to rebuild the "
"container images)."
msgstr ""
"������������������������������Docker "
"Compose������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:1142
#, no-wrap, fuzzy
msgid "Kafka Streams Health Checks"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1145
#, fuzzy
msgid ""
"If you are using the `quarkus-smallrye-health` extension, `quarkus-kafka-"
"streams` will automatically add:"
msgstr ""
"`quarkus-smallrye-health` ��������������������������������������������� "
"`quarkus-kafka-streams` ������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1147
#, fuzzy
msgid ""
"a readiness health check to validate that all topics declared in the "
"`quarkus.kafka-streams.topics` property are created,"
msgstr ""
"`quarkus.kafka-streams.topics` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1148
#, fuzzy
msgid "a liveness health check based on the Kafka Streams state."
msgstr ""
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1150
#, fuzzy
msgid ""
"So when you access the `/health` endpoint of your application you will have "
"information about the state of the Kafka Streams and the available and/or "
"missing topics."
msgstr ""
"������������������������������������������ `/health` "
"������������������������������������������������Kafka "
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1152
#, fuzzy
msgid "This is an example of when the status is `DOWN`:"
msgstr "������������������������������ `DOWN`."

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1155
#, no-wrap
msgid "curl -i http://aggregator:8080/health\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1159
#, no-wrap
msgid ""
"HTTP/1.1 503 Service Unavailable\n"
"content-type: application/json; charset=UTF-8\n"
"content-length: 454\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1180
#, no-wrap
msgid ""
"{\n"
"    \"status\": \"DOWN\",\n"
"    \"checks\": [\n"
"        {\n"
"            \"name\": \"Kafka Streams state health check\",  <1>\n"
"            \"status\": \"DOWN\",\n"
"            \"data\": {\n"
"                \"state\": \"CREATED\"\n"
"            }\n"
"        },\n"
"        {\n"
"            \"name\": \"Kafka Streams topics health check\",  <2>\n"
"            \"status\": \"DOWN\",\n"
"            \"data\": {\n"
"                \"available_topics\": \"weather-stations,temperature-"
"values\",\n"
"                \"missing_topics\": \"hygrometry-values\"\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1182
#, fuzzy
msgid "Liveness health check. Also available at `/health/live` endpoint."
msgstr ""
"������������������������������������ `/health/live` "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1183
#, fuzzy
msgid "Readiness health check. Also available at `/health/ready` endpoint."
msgstr ""
"������������������������������������ `/health/ready` "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1185
#, fuzzy
msgid ""
"So as you can see, the status is `DOWN` as soon as one of the `quarkus.kafka-"
"streams.topics` is missing or the Kafka Streams `state` is not `RUNNING`."
msgstr ""
"��������������������������������� `quarkus.kafka-streams.topics` "
"��������������������������������������������������������������� `state` ��� "
"`RUNNING` ��������������������������������������� `DOWN` ������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1188
#, fuzzy
msgid ""
"If no topics are available, the `available_topics` key will not be present "
"in the `data` field of the `Kafka Streams topics health check`.  As well as "
"if no topics are missing, the `missing_topics` key will not be present in "
"the `data` field of the `Kafka Streams topics health check`."
msgstr ""
"������������������������������ `Kafka Streams topics health check`.��� "
"`data` ������������������ `available_topics` "
"��������������������������������������������������������������������������� "
"`Kafka Streams topics health check` ��� `data` ������������������ "
"`missing_topics` ���������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1190
#, fuzzy
msgid ""
"You can of course disable the health check of the `quarkus-kafka-streams` "
"extension by setting the `quarkus.kafka-streams.health.enabled` property to "
"`false` in your `application.properties`."
msgstr ""
"`quarkus.kafka-streams.health.enabled` `false` ��������������� `quarkus-"
"kafka-streams` "
"������������������������������������������������������������������������ "
"`application.properties`."

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1192
#, fuzzy
msgid ""
"Obviously you can create your liveness and readiness probes based on the "
"respective endpoints `/health/live` and `/health/ready`."
msgstr ""
"��������������������������������������������������� `/health/live` ��� `/"
"health/ready` "
"������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:1193
#, no-wrap, fuzzy
msgid "Liveness health check"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1196
#, fuzzy
msgid "Here is an example of the liveness check:"
msgstr "���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1200
#, no-wrap
msgid "curl -i http://aggregator:8080/health/live\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1204
#, no-wrap
msgid ""
"HTTP/1.1 503 Service Unavailable\n"
"content-type: application/json; charset=UTF-8\n"
"content-length: 225\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1217
#, no-wrap
msgid ""
"{\n"
"    \"status\": \"DOWN\",\n"
"    \"checks\": [\n"
"        {\n"
"            \"name\": \"Kafka Streams state health check\",\n"
"            \"status\": \"DOWN\",\n"
"            \"data\": {\n"
"                \"state\": \"CREATED\"\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1219
#, fuzzy
msgid "The `state` is coming from the `KafkaStreams.State` enum."
msgstr "`state` ��� `KafkaStreams.State` enum ������������������������"

#. type: Title ===
#: upstream/_guides/kafka-streams.adoc:1220
#, no-wrap, fuzzy
msgid "Readiness health check"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1223
#, fuzzy
msgid "Here is an example of the readiness check:"
msgstr ""
"������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1227
#, no-wrap
msgid "curl -i http://aggregator:8080/health/ready\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1231
#, no-wrap
msgid ""
"HTTP/1.1 503 Service Unavailable\n"
"content-type: application/json; charset=UTF-8\n"
"content-length: 265\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/kafka-streams.adoc:1244
#, no-wrap
msgid ""
"{\n"
"    \"status\": \"DOWN\",\n"
"    \"checks\": [\n"
"        {\n"
"            \"name\": \"Kafka Streams topics health check\",\n"
"            \"status\": \"DOWN\",\n"
"            \"data\": {\n"
"                \"missing_topics\": \"weather-stations,temperature-values\"\n"
"            }\n"
"        }\n"
"    ]\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/kafka-streams.adoc:1246
#, no-wrap, fuzzy
msgid "Going Further"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/kafka-streams.adoc:1252
#, fuzzy
msgid ""
"This guide has shown how you can build stream processing applications using "
"Quarkus and the Kafka Streams APIs, both in JVM and native modes.  For "
"running your KStreams application in production, you could also add health "
"checks and metrics for the data pipeline.  Refer to the Quarkus guides on "
"link:micrometer[Micrometer], link:microprofile-metrics[MicroProfile "
"Metrics], and link:microprofile-health[health checks] to learn more."
msgstr ""
"������������������������Quarkus���Kafka Streams "
"API������������������JVM���������������������������������������������������������������������������������������������������������������������������������KStreams������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"link:micrometer[������������������������]��� link:microprofile-"
"metrics[���������������������������������������������]��� link:microprofile-"
"health[���������������������]������������Quarkus������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-properties.adoc:6
#, no-wrap
msgid "Quarkus - Using Security with .properties File"
msgstr "Quarkus - .properties������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:13
msgid ""
"Quarkus provides support for properties file based authentication that is "
"intended for development and testing purposes. It is not recommended that "
"this be used in production as at present only plaintext and MD5 hashed "
"passwords are used, and properties files are generally too limited to use in "
"production."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������MD5������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:15
msgid "Add the following to your `pom.xml`:"
msgstr "��������� `pom.xml` ������������������������������"

#. type: delimited block -
#: upstream/_guides/security-properties.adoc:22
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-elytron-security-properties-file</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-properties.adoc:29
msgid ""
"The elytron-security-properties-file extension currently supports two "
"different realms for the storage of authentication and authorization "
"information. Both support storage of this information in properties files. "
"The following sections detail the specific configuration properties."
msgstr ""
"elytron-security-properties-file "
"���������������������������������������������������������������������2���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/security-properties.adoc:32
#, no-wrap
msgid "Properties Files Realm Configuration"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:35
msgid ""
"The properties files realm supports mapping of users to password and users "
"to roles with a combination of properties files. They are configured with "
"properties starting with `quarkus.security.users.file`."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`quarkus.security.users.file` "
"���������������������������������������������������������"

#. type: Block title
#: upstream/_guides/security-properties.adoc:36
#, no-wrap
msgid "example application.properties file section for property files realm"
msgstr ""
"��������������������������������������� application.properties "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/security-properties.adoc:44
#, no-wrap
msgid ""
"quarkus.security.users.file.enabled=true\n"
"quarkus.security.users.file.users=test-users.properties\n"
"quarkus.security.users.file.roles=test-roles.properties\n"
"quarkus.security.users.file.realm-name=MyRealm\n"
"quarkus.security.users.file.plain-text=true\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/security-properties.adoc:46
#, no-wrap
msgid "Users.properties"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:49
msgid ""
"The `quarkus.security.users.file.users` configuration property specifies a "
"classpath resource which is a properties file with a user to password "
"mapping, one per line. The following <<test-users-example>> illustrates the "
"format:"
msgstr ""
"`quarkus.security.users.file.users` "
"���������������������������������������������������������������������������������������1������1��������������������������������������������������������������������������������������������������������������� "
"link:#test-users-example[[test-users-example] "
"���]������������������������������������������������"

#. type: Block title
#: upstream/_guides/security-properties.adoc:51
#, no-wrap
msgid "example test-users.properties file"
msgstr "������test-users.properties������������"

#. type: delimited block -
#: upstream/_guides/security-properties.adoc:58
#, no-wrap
msgid "scott=jb0ss <1>\n"
"jdoe=p4ssw0rd <2>\n"
"stuart=test\n"
"noadmin=n0Adm1n\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-properties.adoc:60
msgid "User `scott` has password defined as `jb0ss`"
msgstr ""
"������������ `scott` ��������������������� `jb0ss` "
"������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:61
msgid "User `jdoe` has password defined as `p4ssw0rd`"
msgstr ""
"������������ `jdoe` ��������������������� `p4ssw0rd` "
"������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:65
msgid ""
"This file has the usernames and passwords stored in plain text, which is not "
"recommended. If plain-text is set to false (or omitted) in the config then "
"passwords must be stored in the form `MD5 ( username : realm : password )`. "
"This can be generated for the first example above by running the command "
"`echo -n scott:MyRealm:jb0ss | md5` from the command line."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"false ������������������������ (������������������������������) "
"��������������������������� `MD5 ( username : realm : password )` "
"��������������������������������������������������������������������������������������������������������������������� "
"`echo -n scott:MyRealm:jb0ss | md5` "
"������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/security-properties.adoc:66
#, no-wrap
msgid "Roles.properties"
msgstr "Roles.properties"

#. type: Block title
#: upstream/_guides/security-properties.adoc:68
#, no-wrap
msgid "example test-roles.properties file"
msgstr "������test-roles.properties������������"

#. type: delimited block -
#: upstream/_guides/security-properties.adoc:75
#, no-wrap
msgid ""
"scott=Admin,admin,Tester,user <1>\n"
"jdoe=NoRolesUser <2>\n"
"stuart=admin,user <3>\n"
"noadmin=user\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-properties.adoc:77
msgid ""
"User `scott` has been assigned the roles `Admin`, `admin`, `Tester` and "
"`user`"
msgstr ""
"������������ `scott` ������ `Admin`, `admin`, `Tester` ��������� `user`"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:78
msgid "User `jdoe` has been assigned the role `NoRolesUser`"
msgstr ""
"������������ `jdoe` ��������������������������������������������� "
"`NoRolesUser`"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:79
msgid "User `stuart` has been assigned the roles `admin` and `user`."
msgstr ""
"������������ `stuart` ������ `admin` ��� `user` "
"���������������������������������������������"

#. type: Title ===
#: upstream/_guides/security-properties.adoc:80
#, no-wrap
msgid "Embedded Realm Configuration"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:83
msgid ""
"The embedded realm also supports mapping of users to password and users to "
"roles. It uses the main `application.properties` Quarkus configuration file "
"to embed this information. They are configured with properties starting with "
"`quarkus.security.users.embedded`."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`application.properties` "
"Quarkus������������������������������������������������������ `quarkus."
"security.users.embedded` ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:85
msgid ""
"The following is an example application.properties file section illustrating "
"the embedded realm configuration:"
msgstr ""
"���������������������������������������������������application."
"properties���������������������������������������������"

#. type: Block title
#: upstream/_guides/security-properties.adoc:86
#, no-wrap
msgid "example application.properties file section for embedded realm"
msgstr ""
"���������������������������application."
"properties���������������������������������"

#. type: delimited block -
#: upstream/_guides/security-properties.adoc:99
#, no-wrap
msgid ""
"quarkus.security.users.embedded.enabled=true\n"
"quarkus.security.users.embedded.plain-text=true\n"
"quarkus.security.users.embedded.users.scott=jb0ss\n"
"quarkus.security.users.embedded.users.stuart=test\n"
"quarkus.security.users.embedded.users.jdoe=p4ssw0rd\n"
"quarkus.security.users.embedded.users.noadmin=n0Adm1n\n"
"quarkus.security.users.embedded.roles.scott=Admin,admin,Tester,user\n"
"quarkus.security.users.embedded.roles.stuart=admin,user\n"
"quarkus.security.users.embedded.roles.jdoe=NoRolesUser\n"
"quarkus.security.users.embedded.roles.noadmin=user\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-properties.adoc:104
msgid ""
"As with the first example this file has the usernames and passwords stored "
"in plain text, which is not recommended. If plain-text is set to false (or "
"omitted) in the config then passwords must be stored in the form `MD5 ( "
"username : realm : password )`. This can be generated for the first example "
"above by running the command `echo -n scott:MyRealm:jb0ss | md5` from the "
"command line."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"false ������������������������ (������������������������������) "
"��������������������������� `MD5 ( username : realm : password )` "
"������������������������������������������������������������������������������������������������������������������������ "
"`echo -n scott:MyRealm:jb0ss | md5` "
"������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/security-properties.adoc:106
#, no-wrap
msgid "Embedded Users"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:109
msgid ""
"The user to password mappings are specified in the `application.properties` "
"file by properties keys of the form `quarkus.security.users.embedded.users."
"<user>=<password>`. The following <<password-example>> illustrates the "
"syntax with 4 user to password mappings:"
msgstr ""
"������������������������������������������������������������ `application."
"properties` ������������������ `quarkus.security.users.embedded.users."
"&amp;lt;user&amp;gt;=&amp;lt;password&amp;gt;` "
"������������������������������������������������������������ link:#password-"
"example[[password-example] ���]���4 "
"���������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/security-properties.adoc:111
#, no-wrap
msgid "Example Passwords"
msgstr "���������������������"

#. type: delimited block -
#: upstream/_guides/security-properties.adoc:118
#, no-wrap
msgid ""
"quarkus.security.users.embedded.users.scott=jb0ss # <1>\n"
"quarkus.security.users.embedded.users.stuart=test # <2>\n"
"quarkus.security.users.embedded.users.jdoe=p4ssw0rd\n"
"quarkus.security.users.embedded.users.noadmin=n0Adm1n\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-properties.adoc:120
msgid "User `scott` has password `jb0ss`"
msgstr "������������ `scott` ������������������ `jb0ss` ���������������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:121
msgid "User `stuart` has password `test`"
msgstr "������������ `stuart` ������������������ `test` ���������������������"

#. type: Title ====
#: upstream/_guides/security-properties.adoc:122
#, no-wrap
msgid "Embedded Roles"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:125
msgid ""
"The user to role mappings are specified in the `application.properties` file "
"by properties keys of the form `quarkus.security.users.embedded.roles.<user>="
"role1[,role2[,role3[,...]]]`. The following <<roles-example>> illustrates "
"the syntax with 4 user to role mappings:"
msgstr ""
"��������������������������������������������� `application.properties` "
"��������������� `quarkus.security.users.embedded.roles.&amp;lt;user&amp;gt;="
"role1[,role2[,role3[,������]]]` "
"������������������������������������������������������������������ link:"
"#roles-example[[role-"
"example]]������4���������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/security-properties.adoc:127
#, no-wrap
msgid "Example Roles"
msgstr "���������������"

#. type: delimited block -
#: upstream/_guides/security-properties.adoc:134
#, no-wrap
msgid ""
"quarkus.security.users.embedded.roles.scott=Admin,admin,Tester,user # <1>\n"
"quarkus.security.users.embedded.roles.stuart=admin,user # <2>\n"
"quarkus.security.users.embedded.roles.jdoe=NoRolesUser\n"
"quarkus.security.users.embedded.roles.noadmin=user\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-properties.adoc:136
msgid "User `scott` has roles `Admin`, `admin`, `Tester`, and `user`"
msgstr ""
"������������ `scott` ������ `Admin`, `admin`, `Tester`, ��������� `user`"

#. type: Plain text
#: upstream/_guides/security-properties.adoc:137
msgid "User `stuart` has roles `admin` and `user`"
msgstr "������������ `stuart` ������ `admin` ��� `user`"

#. type: Title ==
#: upstream/_guides/security-authorization.adoc:229
#, no-wrap, fuzzy
msgid "References"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:231
#, fuzzy
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkus���������������������]"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/scheduler.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Scheduling Periodic Tasks"
msgstr "Quarkus - ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:12
#, fuzzy
msgid ""
"Modern applications often need to run specific tasks periodically.  In this "
"guide, you learn how to schedule periodic tasks."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:14
#, fuzzy
msgid ""
"If you need a clustered scheduler use the link:quartz[Quartz extension]."
msgstr ""
"������������������������������������������������������������������ link:"
"quartz[Quartz���������������]���������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:20
#, fuzzy
msgid "less than 10 minutes"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:28
#, fuzzy
msgid ""
"In this guide, we create a straightforward application accessible using HTTP "
"to get the current value of a counter.  This counter is periodically (every "
"10 seconds) incremented."
msgstr ""
"������������������������������������������������������������������������HTTP���������������������������������������������������������������������������������������������������������������������������(10������������)������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:30
#, fuzzy
msgid "image:scheduling-task-architecture.png[alt=Architecture]"
msgstr "image:scheduling-task-architecture.png[alt=Architecture]"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:39
#, fuzzy
msgid ""
"The solution is located in the `scheduler-quickstart` {quickstarts-tree-url}/"
"scheduler-quickstart[directory]."
msgstr ""
"������������������������ `scheduler-quickstart` {quickstarts-tree-url}/"
"scheduler-quickstart[directory] ������������������"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:53
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=scheduler-quickstart \\\n"
"    -DclassName=\"org.acme.scheduler.CountResource\" \\\n"
"    -Dpath=\"/count\" \\\n"
"    -Dextensions=\"scheduler\"\n"
"cd scheduler-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler.adoc:56
#, fuzzy
msgid "It generates:"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:58
#, fuzzy
msgid "the Maven structure"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:59
#, fuzzy
msgid "a landing page accessible on `http://localhost:8080`"
msgstr ""
"��������������������������� `&lt;a href=\"http://localhost:8080\" class="
"\"bare\"&gt;http://localhost:8080&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:60
#, fuzzy
msgid "example `Dockerfile` files for both `native` and `jvm` modes"
msgstr ""
"`native` ��� `jvm` ������������������������������������ `Dockerfile` "
"������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:61
#, fuzzy
msgid "the application configuration file"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:62
#, fuzzy
msgid "an `org.acme.scheduler.CountResource` resource"
msgstr "`org.acme.scheduler.CountResource` ������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:63
#, fuzzy
msgid "an associated test"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:65
#, fuzzy
msgid "The Maven project also imports the Quarkus scheduler extension."
msgstr ""
"Maven������������������������Quarkus������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:68
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the "
"`scheduler` extension to your project by running the following command in "
"your project base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`scheduler` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:72
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"scheduler\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:82
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-scheduler</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/scheduler.adoc:85
#, no-wrap, fuzzy
msgid "Creating a scheduled job"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:88
#, fuzzy
msgid ""
"In the `org.acme.scheduler` package, create the `CounterBean` class, with "
"the following content:"
msgstr ""
"`org.acme.scheduler` ��������������������������������������� `CounterBean` "
"������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:92 upstream/_guides/scheduler.adoc:152
#: upstream/_guides/scheduler.adoc:181
#, no-wrap
msgid "package org.acme.scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:97
#, no-wrap
msgid ""
"import java.util.concurrent.atomic.AtomicInteger;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import io.quarkus.scheduler.Scheduled;\n"
"import io.quarkus.scheduler.ScheduledExecution;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:100
#, no-wrap
msgid "@ApplicationScoped              // <1>\n"
"public class CounterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:102
#, no-wrap
msgid "    private AtomicInteger counter = new AtomicInteger();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:106
#, no-wrap
msgid "    public int get() {  // <2>\n"
"        return counter.get();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:111
#, no-wrap
msgid ""
"    @Scheduled(every=\"10s\")     // <3>\n"
"    void increment() {\n"
"        counter.incrementAndGet(); // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:117
#, no-wrap
msgid ""
"    @Scheduled(cron=\"0 15 10 * * ?\") <5>\n"
"    void cronJob(ScheduledExecution execution) {\n"
"        counter.incrementAndGet();\n"
"        System.out.println(execution.getScheduledFireTime());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:124
#, no-wrap
msgid ""
"    @Scheduled(cron = \"{cron.expr}\") <6>\n"
"    void cronJobWithExpressionInConfig() {\n"
"       counter.incrementAndGet();\n"
"       System.out.println(\"Cron expression configured in application."
"properties\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler.adoc:126
#, fuzzy
msgid "Declare the bean in the _application_ scope"
msgstr "_������������������������_���������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:127
#, fuzzy
msgid "The `get()` method allows retrieving the current value."
msgstr ""
"`get()` "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:130
#, fuzzy
msgid ""
"Use the `@Scheduled` annotation to instruct Quarkus to run this method every "
"10 seconds provided a worker thread is available (Quarkus is using 10 worker "
"threads for the scheduler). If it is not available the method invocation "
"should be re-scheduled by default i.e it should be invoked as soon as "
"possible. The invocation of the scheduled method does not depend on the "
"status or result of the previous invocation."
msgstr ""
"`@Scheduled` "
"������������������������������������������������������������������������������������������10������������������������������������������������������Quarkus���������������������Quarkus������������������������10���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:131
#, fuzzy
msgid ""
"The code is pretty straightforward. Every 10 seconds, the counter is "
"incremented."
msgstr ""
"������������������������������������10���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:132
#, fuzzy
msgid ""
"Define a job with a cron-like expression. The annotated method is executed "
"at 10:15am every day."
msgstr ""
"cron���������������������������������������������������������������������������������������������������������10���15���������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:133
#, fuzzy
msgid ""
"Define a job with a cron-like expression `cron.expr` which is configurable "
"in `application.properties`."
msgstr ""
"`cron.expr` `application.properties` ������������������ cron-like ��� "
"���������������������������������"

#. type: Title ==
#: upstream/_guides/scheduler.adoc:134
#, no-wrap, fuzzy
msgid "Updating the application configuration file"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:137
#, fuzzy
msgid ""
"Edit the `application.properties` file and add the `cron.expr` configuration:"
""
msgstr ""
"`application.properties` ��������������������������� `cron.expr` "
"������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:143
#, no-wrap
msgid ""
"# By default, the syntax used for cron expressions is based on Quartz - http:"
"//www.quartz-scheduler.org/documentation/quartz-2.3.0/tutorials/crontrigger."
"html\n"
"# You can change the syntax using the following property:\n"
"# quarkus.scheduler.cron-type=unix\n"
"cron.expr=*/5 * * * * ?\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/scheduler.adoc:145
#, no-wrap, fuzzy
msgid "Updating the resource and the test"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:148
#, fuzzy
msgid "Edit the `CountResource` class, and update the content to:"
msgstr ""
"`CountResource` ������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:161
#, no-wrap
msgid "@Path(\"/count\")\n"
"public class CountResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:164
#, no-wrap
msgid "    @Inject\n"
"    CounterBean counter;            // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:172
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"count: \" + counter.get();  // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler.adoc:174
#, fuzzy
msgid "Inject the `CounterBean`"
msgstr "��������������������� `CounterBean`"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:175
#, fuzzy
msgid "Send back the current counter value"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:177
#, fuzzy
msgid ""
"We also need to update the tests. Edit the `CountResourceTest` class to "
"match:"
msgstr ""
"������������������������������������������������ `CountResourceTest` "
"���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:187
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.containsString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:190
#, no-wrap
msgid "@QuarkusTest\n"
"public class CountResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler.adoc:199
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHelloEndpoint() {\n"
"        given()\n"
"          .when().get(\"/count\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(containsString(\"count\")); // <1>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler.adoc:203
#, fuzzy
msgid "Ensure that the response contains `count`"
msgstr ""
"��������������������������������������������������������������������������������� "
"`count`"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:209
#, fuzzy
msgid ""
"Run the application with: `./mvnw compile quarkus:dev`.  In another "
"terminal, run `curl localhost:8080/count` to check the counter value.  After "
"a few seconds, re-run `curl localhost:8080/count` to verify the counter has "
"been incremented."
msgstr ""
"`./mvnw compile quarkus:dev` "
"��������������������������������������������������������������������������������� "
"`curl localhost:8080/count` "
"��������������������������������������������������������������������� `curl "
"localhost:8080/count` "
"���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:212
#, fuzzy
msgid ""
"Observe the console to verify that the message `Cron expression configured "
"in application.properties` has been displayed indicating that the cron job "
"using an expression configured in `application.properties` has been "
"triggered."
msgstr ""
"��������������������������������� `application.properties` "
"������������������������������������ cron "
"������������������������������������������������������������ `Cron "
"expression configured in application.properties` "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler.adoc:215
#, fuzzy
msgid ""
"As usual, the application can be packaged using `./mvnw clean package` and "
"executed using the `-runner.jar` file.  You can also generate the native "
"executable with `./mvnw clean package -Pnative`."
msgstr ""
"������������������������ `./mvnw clean package` "
"��������������������������������������������������������������� `-runner."
"jar` ��������������������������������������������������������������������� `."
"/mvnw clean package -Pnative`."

#. type: Title ==
#: upstream/_guides/scheduler.adoc:217
#, no-wrap, fuzzy
msgid "Scheduler Configuration Reference"
msgstr "������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/vault.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using HashiCorp Vault"
msgstr "Quarkus - Using HashiCorp Vault"

#. type: Plain text
#: upstream/_guides/vault.adoc:21
#, fuzzy
msgid ""
"https://www.vaultproject.io/[HashiCorp Vault] is a multi-purpose tool aiming "
"at protecting sensitive data, such as credentials, certificates, access "
"tokens, encryption keys, ... In the context of Quarkus, several use cases "
"are supported:"
msgstr ""
"link:https://www.vaultproject.io/[HashiCorp "
"Vault]������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:24
#, fuzzy
msgid ""
"mounting a map of properties stored into the https://www.vaultproject.io/"
"docs/secrets/kv/index.html[Vault kv secret engine] as an Eclipse "
"MicroProfile config source"
msgstr ""
"link:https://www.vaultproject.io/docs/secrets/kv/index.html[Vault kv "
"������������������������������]������������������������������������������������ "
"Eclipse MicroProfile ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:25
#, fuzzy
msgid ""
"fetching credentials from Vault when configuring an Agroal datasource, as "
"documented in the {vault-datasource-guide}"
msgstr ""
"Agroal ������������������������������������������{vault-datasource-guide} "
"������������������������������������Vault "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:26
#, fuzzy
msgid "accessing Vault _kv secret engine_ programmatically"
msgstr ""
"Vault _kv ������������������������_������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:27
#, fuzzy
msgid ""
"support for the https://www.vaultproject.io/docs/secrets/totp[TOTP Secret "
"Engine]"
msgstr ""
"link:https://www.vaultproject.io/docs/secrets/"
"totp[TOTP���������������������������������]������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:29
#, fuzzy
msgid ""
"support for the https://www.vaultproject.io/docs/secrets/transit[Transit "
"Secret Engine] as documented in the {vault-transit-guide}"
msgstr ""
"link:https://www.vaultproject.io/docs/secrets/"
"transit[���������������������������������������������������]��������������� "
"{vault-transit-guide} ���������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:30
#, fuzzy
msgid ""
"support for several authentication methods as documented in the {vault-auth-"
"guide}"
msgstr ""
"������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:33
#, fuzzy
msgid ""
"Under the hood, the Quarkus Vault extension takes care of authentication "
"when negotiating a client Vault token plus any transparent token or lease "
"renewals according to _ttl_ and _max-ttl._"
msgstr ""
"Quarkus "
"Vault������������������������������������������Vault��������������������������������������������������������� "
"_ttl_��� _max-"
"ttl_������������������������������������������������������������������������ "
"_���_"

#. type: Plain text
#: upstream/_guides/vault.adoc:41
#, fuzzy
msgid "roughly 20 minutes"
msgstr "���������20���"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:47
#, fuzzy
msgid "Docker installed"
msgstr "Docker���������������������"

#. type: Title ==
#: upstream/_guides/vault.adoc:46
#, no-wrap, fuzzy
msgid "Starting Vault"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:49
#, fuzzy
msgid "Let's start Vault in development mode:"
msgstr "������������������Vault���������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:53
#, no-wrap
msgid ""
"docker run --rm --cap-add=IPC_LOCK -e VAULT_ADDR=http://localhost:8200 -p "
"8200:8200 -d --name=dev-vault vault:{vault-version}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:56
#, fuzzy
msgid "You can check that vault is running with:"
msgstr ""
"���Vault���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:59
#, no-wrap
msgid "docker logs dev-vault\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:411
#, fuzzy
msgid "You should see:"
msgstr "������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:66
#, no-wrap
msgid "==> Vault server configuration:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:75
#, no-wrap
msgid ""
"             Api Address: http://0.0.0.0:8200\n"
"                     Cgo: disabled\n"
"         Cluster Address: https://0.0.0.0:8201\n"
"              Listener 1: tcp (addr: \"0.0.0.0:8200\", cluster address: \"0."
"0.0.0:8201\", max_request_duration: \"1m30s\", max_request_size: "
"\"33554432\", tls: \"disabled\")\n"
"               Log Level: info\n"
"                   Mlock: supported: true, enabled: false\n"
"                 Storage: inmem\n"
"                 Version: Vault v{vault-version}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:79
#, no-wrap
msgid ""
"WARNING! dev mode is enabled! In this mode, Vault runs entirely in-memory\n"
"and starts unsealed with a single unseal key. The root token is already\n"
"authenticated to the CLI, so you can immediately begin using Vault.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:81
#, no-wrap
msgid "You may need to set the following environment variable:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:83
#, no-wrap
msgid "    $ export VAULT_ADDR='http://0.0.0.0:8200'\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:86
#, no-wrap
msgid ""
"The unseal key and root token are displayed below in case you want to\n"
"seal/unseal the Vault or re-authenticate.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:89
#, no-wrap
msgid ""
"Unseal Key: 0lZ2/vzpa92pH8gersSn2h9b5tmzd4m5sqIdMC/4PDs=\n"
"Root Token: {root-token}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:91
#, no-wrap
msgid "Development mode should NOT be used in production installations!\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:93
#, no-wrap
msgid "==> Vault server started! Log data will stream in below:\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:96
#, fuzzy
msgid ""
"In development mode, Vault gets configured with several options that makes "
"it convenient:"
msgstr ""
"������������������������Vault���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:99
#, fuzzy
msgid ""
"Vault is already initialized with one key share (whereas in normal mode this "
"has to be done explicitly and the number of key shares is 5 by default)"
msgstr ""
"Vault ������������ 1 ��������������������������������������������������� "
"��������������������������������������������������������������������������������������������������������������������� "
"5 ���������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:101
#, fuzzy
msgid ""
"the unseal key and the root token are displayed in the logs (please write "
"down the root token, we will need it in the following step)"
msgstr ""
"unseal ��������� root ������������������������������������������ (root "
"������������������������������������������������������������������������������������������)"

#. type: Plain text
#: upstream/_guides/vault.adoc:102
#, fuzzy
msgid "Vault is unsealed"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:103
#, fuzzy
msgid "in-memory storage"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:104
#, fuzzy
msgid "TLS is disabled"
msgstr "TLS���������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:105
#, fuzzy
msgid "a _kv secret engine v2_ is mounted at `secret/`"
msgstr ""
"_���������������������������������������������_������������������������ "
"`secret/`"

#. type: delimited block =
#: upstream/_guides/vault.adoc:111
#, fuzzy
msgid ""
"By default Quarkus assumes that a _kv secret engine_ in version *2* mounted "
"at path `secret/` will be used.  If that is not the case, please use "
"properties `quarkus.vault.kv-secret-engine-version` and `quarkus.vault.kv-"
"secret-engine-mount-path` accordingly."
msgstr ""
"������������������������Quarkus������������ `secret/` "
"��������������������������������������� *2*��� "
"_kv������������������������������_��������������������������������������������������������������������������������������� "
"`quarkus.vault.kv-secret-engine-version` ��� `quarkus.vault.kv-secret-engine-"
"mount-path` ������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:115
#, fuzzy
msgid ""
"In the following step, we are going to add a `userpass` authentication that "
"we will use from the Quarkus application, to access a secret stored in the "
"_kv secret engine_."
msgstr ""
"���������������������������Quarkus������������������������������������������ "
"`userpass` ������������������������ "
"_kv������������������_���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:117
#, fuzzy
msgid "First open a shell inside the vault container:"
msgstr "���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:121
#, no-wrap
msgid "docker exec -it dev-vault sh\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:124
#, fuzzy
msgid "Set the `VAULT_TOKEN` with the value that was printed in the logs:"
msgstr ""
"`VAULT_TOKEN` ������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:128
#, no-wrap
msgid "export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:131
#, fuzzy
msgid "You can check Vault's status using the CLI command `vault status`:"
msgstr ""
"Vault ������������������������CLI "
"��������������������������������������������� `vault status`."

#. type: delimited block -
#: upstream/_guides/vault.adoc:145
#, no-wrap
msgid ""
"Key             Value\n"
"---             -----\n"
"Seal Type       shamir\n"
"Initialized     true\n"
"Sealed          false\n"
"Total Shares    1\n"
"Threshold       1\n"
"Version         1.6.0\n"
"Cluster Name    vault-cluster-b07e80d8\n"
"Cluster ID      55bd74b6-eaaf-3862-f7ce-3473ab86c57f\n"
"HA Enabled      false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:148
#, fuzzy
msgid "Now let's add a secret configuration for our application:"
msgstr ""
"������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:152
#, no-wrap
msgid ""
"vault kv put secret/myapps/vault-quickstart/config a-private-key=123456\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:155
#, fuzzy
msgid ""
"We have defined a path `secret/myapps/vault-quickstart` in Vault that we "
"need to give access to from the Quarkus application."
msgstr ""
"Vault���������Quarkus��������������������������������������������������������������������������������������� "
"`secret/myapps/vault-quickstart` ������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:157
#, fuzzy
msgid ""
"Create a policy that gives read access to `secret/myapps/vault-quickstart` "
"and subpaths:"
msgstr ""
"`secret/myapps/vault-quickstart` "
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:165
#, no-wrap
msgid ""
"cat <<EOF | vault policy write vault-quickstart-policy -\n"
"path \"secret/data/myapps/vault-quickstart/*\" {\n"
"  capabilities = [\"read\"]\n"
"}\n"
"EOF\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault.adoc:175
#, fuzzy
msgid ""
"When using a _kv secret engine version 2_, secrets are written and fetched "
"at path `<mount>/*data*/<secret-path>` as opposed to `<mount>/<secret-path>` "
"in a _kv secret engine version 1_.  It does not change any of the CLI "
"commands (i.e. you do not specify `data` in your path).  However it does "
"change the policies, since capabilities are applied to the real path. In the "
"example above, the path is `secret/*data*/myapps/vault-quickstart/\\*` since "
"we are working with a _kv secret engine version 2_.  It would be `secret/"
"myapps/vault-quickstart/*` with a _kv secret engine version 1_."
msgstr ""
"_kv���������������������������������������������2���_������������������������������������������������������ "
"`&amp;lt;mount&amp;gt;/ *data*/&amp;lt;secret-"
"path&amp;gt;`��������������������� "
"_kv������������������������������������������������1_������ "
"`&amp;lt;mount&amp;gt;/&amp;lt;secret-path&amp;gt;` "
"���������������������������CLI���������������������������������(��������������������� "
"`data` "
"���������������������)��������������������������������������������������������������������������������������������������������������������������������� "
"`secret/ *data*/myapps/vault-quickstart/*`������������KV��������� "
"_������������������������������������2_������������������������������������ "
"_kv���������������������������������������������1_��� `secret/myapps/vault-"
"quickstart/*` ������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:178
#, fuzzy
msgid ""
"And finally, let's enable the _userpass auth secret engine_, and create user "
"`bob` with access to the `vault-quickstart-policy`:"
msgstr ""
"������������ _userpass auth "
"���������������������������������_������������������ `bob` "
"��������������������������������� `vault-quickstart-policy` "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:150
#, no-wrap
msgid ""
"vault auth enable userpass\n"
"vault write auth/userpass/users/bob password=sinclair policies=vault-"
"quickstart-policy\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vault.adoc:188
#, fuzzy
msgid ""
"Quarkus supports additional Vault Authentication methods. Check the {vault-"
"auth-guide} for details."
msgstr ""
"Quarkus���������������Vault���������������������������������������������������������������������{vault-"
"auth-guide}������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:191
#, fuzzy
msgid "To check that the configuration is correct, try logging in:"
msgstr ""
"���������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:195
#, no-wrap
msgid "vault login -method=userpass username=bob password=sinclair\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:204
#, no-wrap
msgid ""
"Success! You are now authenticated. The token information displayed below\n"
"is already stored in the token helper. You do NOT need to run \"vault "
"login\"\n"
"again. Future Vault requests will automatically use this token.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:215
#, no-wrap
msgid ""
"Key                    Value\n"
"---                    -----\n"
"token                  {client-token}\n"
"token_accessor         OKNipTAgxWbxsrjixASNiwdY\n"
"token_duration         768h\n"
"token_renewable        true\n"
"token_policies         [\"default\" \"vault-quickstart-policy\"]\n"
"identity_policies      []\n"
"policies               [\"default\" \"vault-quickstart-policy\"]\n"
"token_meta_username    bob\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:218
#, fuzzy
msgid ""
"Now set `VAULT_TOKEN` to the `token` above (instead of the root token), and "
"try reading the vault-quickstart secret config:"
msgstr ""
"������������������ `VAULT_TOKEN` ��� (���������������������������������) "
"`token` ���������������Vault-quickstart "
"������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:223
#, no-wrap
msgid ""
"export VAULT_TOKEN={client-token}\n"
"vault kv get secret/myapps/vault-quickstart/config\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:233
#, no-wrap
msgid ""
"======== Data ========\n"
"Key              Value\n"
"---              -----\n"
"a-private-key    123456\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vault.adoc:235
#, no-wrap, fuzzy
msgid "Create a Quarkus application with a secret configuration"
msgstr "������������������Quarkus���������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:246
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vault-quickstart \\\n"
"    -DclassName=\"org.acme.quickstart.GreetingResource\" \\\n"
"    -Dpath=\"/hello\" \\\n"
"    -Dextensions=\"vault\"\n"
"cd vault-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:250
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `vault` "
"extension to your project by running the following command in your project "
"base directory:"
msgstr ""
"���������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`vault` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:254
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vault\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:264
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vault</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:267
#, fuzzy
msgid "Configure access to Vault from the `{config-file}`:"
msgstr "`{config-file}` ������ Vault ���������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:272
#, no-wrap
msgid "# vault url\n"
"quarkus.vault.url=http://localhost:8200\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:276
#, no-wrap
msgid ""
"# vault authentication\n"
"quarkus.vault.authentication.userpass.username=bob\n"
"quarkus.vault.authentication.userpass.password=sinclair\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:279
#, no-wrap
msgid ""
"# path within the kv secret engine where is located the vault-quickstart "
"secret configuration\n"
"quarkus.vault.secret-config-kv-path=myapps/vault-quickstart/config\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:282
#, fuzzy
msgid ""
"This should mount whatever keys are stored in `secret/myapps/vault-"
"quickstart` as MicroProfile Config properties."
msgstr ""
"������������ `secret/myapps/vault-quickstart` "
"��������������������������������������������� MicroProfile Config "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:284
#, fuzzy
msgid "Let's verify that by adding a new endpoint in GreetingResource:"
msgstr ""
"GreetingResource������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:292
#, no-wrap
msgid "    @ConfigProperty(name = \"a-private-key\")\n"
"    String privateKey;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:302
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/private-key\")\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String privateKey() {\n"
"        return privateKey;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:305
#, fuzzy
msgid "Now compile the application and run it:"
msgstr ""
"���������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:86
#, no-wrap
msgid ""
"./mvnw clean install\n"
"java -jar target/vault-quickstart-1.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:313
#, fuzzy
msgid "Finally test the new endpoint:"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:92 upstream/_guides/vault-auth.adoc:163
#, no-wrap
msgid "curl http://localhost:8080/hello/private-key\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:324
#, no-wrap
msgid "123456\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vault.adoc:326
#, no-wrap, fuzzy
msgid "Programmatic access to the KV secret engine"
msgstr ""
"KV������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:331
#, fuzzy
msgid ""
"Sometimes secrets are retrieved from an arbitrary path that is known only at "
"runtime through an application specific property, or a method argument for "
"instance.  In that case it is possible to inject a Quarkus "
"`VaultKVSecretEngine`, and retrieve secrets programmatically."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus "
"`VaultKVSecretEngine` "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:333
#, fuzzy
msgid "For instance, in `GreetingResource`, add:"
msgstr "������������ `GreetingResource` ������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:338
#, no-wrap
msgid "@Inject\n"
"VaultKVSecretEngine kvSecretEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:401
#, no-wrap
msgid "...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:347
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/secrets/{vault-path}\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"public String getSecrets(@PathParam(\"vault-path\") String vaultPath) {\n"
"    return kvSecretEngine.readSecret(\"myapps/vault-quickstart/\" + "
"vaultPath).toString();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:350
#, fuzzy
msgid "Add a new key in Vault:"
msgstr "Vault���������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:353
#, no-wrap
msgid "vault kv put secret/myapps/vault-quickstart/private mysecret=abc\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:356
#, fuzzy
msgid ""
"Restart the application after rebuilding it, and test it with the new "
"endpoint:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:360
#, no-wrap
msgid "curl http://localhost:8080/hello/secrets/private\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:366
#, no-wrap
msgid "{mysecret=abc}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vault.adoc:369
#, no-wrap, fuzzy
msgid "TOTP Secrets Engine"
msgstr "TOTP������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:372
#, fuzzy
msgid ""
"The https://www.vaultproject.io/docs/secrets/totp/[Vault TOTP secrets "
"engine] generates time-based credentials according to the TOTP standard."
msgstr ""
"link:https://www.vaultproject.io/docs/secrets/totp/[Vault TOTP "
"���������������������������������]���TOTP "
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:374
#, fuzzy
msgid ""
"Vault TOTP supports both the generator scenario (like Google Authenticator) "
"and the provider scenario (like the Google.com sign in)."
msgstr ""
"Vault TOTP���������������������������������������������Google "
"Authenticator���������������������������������������������������Google."
"com���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:376
#, fuzzy
msgid ""
"The Vault extension integrates with the Vault TOTP secret engine by "
"providing an `io.quarkus.vault.VaultTOTPSecretEngine` class."
msgstr ""
"Vault ������������������ `io.quarkus.vault.VaultTOTPSecretEngine` "
"������������������������������������Vault TOTP "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:383
#, no-wrap
msgid ""
"import io.quarkus.vault.VaultTOTPSecretEngine;\n"
"import io.quarkus.vault.secrets.totp.CreateKeyParameters;\n"
"import io.quarkus.vault.secrets.totp.KeyConfiguration;\n"
"import io.quarkus.vault.secrets.totp.KeyDefinition;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:386
#, no-wrap
msgid "@Inject\n"
"VaultTOTPSecretEngine vaultTOTPSecretEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:389
#, no-wrap
msgid ""
"CreateKeyParameters createKeyParameters = new "
"CreateKeyParameters(\"Google\", \"test@gmail.com\");\n"
"createKeyParameters.setPeriod(\"30m\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:391
#, no-wrap
msgid "/** Google Authentication logic */\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:394
#, no-wrap
msgid ""
"final Optional<KeyDefinition> myKey = vaultTOTPSecretEngine\n"
"                                            .createKey(\"my_key_2\", "
"createKeyParameters); // <1> <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:396
#, no-wrap
msgid ""
"final String keyCode = vaultTOTPSecretEngine.generateCode(\"my_key_2\"); // "
"<3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:398
#, no-wrap
msgid "/** Google Login logic */\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:400
#, no-wrap
msgid ""
"boolean valid = vaultTOTPSecretEngine.validateCode(\"my_key_2\", keyCode); //"
" <4>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:402
#, fuzzy
msgid "Create a key to generate codes."
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:403
#, fuzzy
msgid ""
"`KeyDefinition` class contains an embeddable base64 QR code that can be used "
"by third-party code generators."
msgstr ""
"`KeyDefinition` "
"���������������������������������������������������������������������������������������������������������������base64 "
"QR������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:404
#, fuzzy
msgid "Generates a code (not using third-party generator)."
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:405
#, fuzzy
msgid "Validates that the code is valid."
msgstr "������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vault.adoc:406
#, no-wrap, fuzzy
msgid "Vault Health Check"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:410
#, fuzzy
msgid ""
"If you are using the `quarkus-smallrye-health` extension, `quarkus-vault` "
"can add a readiness health check to validate the connection to the Vault "
"server. This is disabled by default."
msgstr ""
"`quarkus-smallrye-health` ������������������������������������������ "
"`quarkus-vault` ������Vault "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:412
#, fuzzy
msgid ""
"If enabled, when you access the `/health/ready` endpoint of your application "
"you will have information about the connection validation status."
msgstr ""
"��������������������������������������������������������������� `/health/"
"ready` "
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:414
#, fuzzy
msgid ""
"This behavior can be enabled by setting the `quarkus.vault.health.enabled` "
"property to `true` in your `application.properties`."
msgstr ""
"��������������������������������������� `application.properties` ��� "
"`quarkus.vault.health.enabled` ������������������ `true` "
"���������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:416
#, fuzzy
msgid ""
"Only if Vault is initialized, unsealed and active, the health endpoint "
"returns that Vault is ready to serve requests."
msgstr ""
"Vault "
"��������������������������������������������������������������������������������������������������� "
"���������������������������Vault "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:418
#, fuzzy
msgid ""
"You can change a bit this behaviour by using `quarkus.vault.health.stand-by-"
"ok` and `quarkus.vault.health.performance-stand-by-ok` to `true` in your "
"`application.properties`."
msgstr ""
"������������ `quarkus.vault.health.stand-by-ok` ��� `quarkus.vault.health."
"performance-stand-by-ok` ��� `true` "
"��������������������������������������������������������������������������� "
"`application.properties`."

#. type: Labeled list
#: upstream/_guides/vault.adoc:419
#, no-wrap, fuzzy
msgid "stand-by-ok"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:420
#, fuzzy
msgid ""
"Specifies if being a standby should still return the active status code "
"instead of the standby status code."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/vault.adoc:421
#, no-wrap, fuzzy
msgid "performance-stand-by-ok"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:422
#, fuzzy
msgid ""
"Specifies if being a performance standby should still return the active "
"status code instead of the performance standby status code."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:424
#, fuzzy
msgid ""
"You can inject `io.quarkus.vault.VaultSystemBackendEngine` to run system "
"operations programmatically."
msgstr ""
"`io.quarkus.vault.VaultSystemBackendEngine` "
"������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:426
#, fuzzy
msgid ""
"When the readiness probe is failing in Kubernetes, then the application is "
"not reachable. This means that if Vault is failing, all services depending "
"on Vault will become unreachable and maybe this is not the desired state, so "
"use this flag according to your requirements."
msgstr ""
"Kubernetes���Readyness "
"probe���������������������������������������������������������������������������������������������������������������Vault������������������������Vault���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vault.adoc:427
#, no-wrap, fuzzy
msgid "TLS"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:430
#, fuzzy
msgid ""
"In production mode, TLS should be activated between the Quarkus application "
"and Vault to prevent _man-in-the-middle_ attacks."
msgstr ""
"������������������������ "
"_������_������������������������������Quarkus���������������������������Vault���������TLS������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:432
#, fuzzy
msgid "There are several ways to configure the Quarkus application:"
msgstr ""
"Quarkus���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:435
#, fuzzy
msgid ""
"through the standard `javax.net.ssl.trustStore` system property, which "
"should refer to a JKS truststore containing the trusted certificates"
msgstr ""
"`javax.net.ssl.trustStore` "
"������������������������������������������������������������ JKS truststore "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:436
#, fuzzy
msgid ""
"using property `quarkus.vault.tls.ca-cert`, which should refer to a pem "
"encoded file."
msgstr "��������������� `quarkus.vault.tls.ca-cert` ���������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:441
#, fuzzy
msgid ""
"If `quarkus.vault.tls.ca-cert` is not set and the Quarkus application is "
"using the Kubernetes authentication, TLS will be active and use the CA "
"certificate bundle located in `/var/run/secrets/kubernetes.io/serviceaccount/"
"ca.crt`.  If you want to disable this behavior (for instance when using a "
"trust store), you need to set it explicitly using: `quarkus.vault.tls.use-"
"kubernetes-ca-cert=false`."
msgstr ""
"`quarkus.vault.tls.ca-cert` "
"������������������������������Quarkus���������������������������Kubernetes������������������������������������TLS������������������������������ "
"`/var/run/secrets/kubernetes.io/serviceaccount/ca.crt` "
"���������CA������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`quarkus.vault.tls.use-kubernetes-ca-cert=false` "
"���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:445
#, fuzzy
msgid ""
"The last relevant property is `quarkus.vault.tls.skip-verify`, which allows "
"to communicate with Vault using TLS, but without checking the certificate "
"authenticity. This may be convenient in development, but is strongly "
"discouraged in production as it is not more secure than talking to Vault in "
"plain HTTP."
msgstr ""
"��������������������������������� `quarkus.vault.tls.skip-verify` "
"��������������� TLS ��������������� Vault "
"��������������������������������������������������������������������������������������������������������������������������� "
"������������������������������������������������������������������������������ "
"HTTP ��� Vault "
"���������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vault.adoc:446
#, no-wrap, fuzzy
msgid "Vault Provisioning"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:450
#, fuzzy
msgid ""
"Beside the typical client use cases, the Quarkus extension can be used to "
"provision Vault as well, for instance as part of a CD pipeline. Specific CDI "
"beans support this scenario:"
msgstr ""
"���������������������������������������������������������������Quarkus���������������������������������������CD������������������������������������Vault���������������������������������������������������������������CDI���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:452
#, fuzzy
msgid ""
"`VaultSystemBackendEngine`: create Vault Policies. See the https://www."
"vaultproject.io/api-docs/system/policy[Vault documentation]."
msgstr ""
"`VaultSystemBackendEngine`: Vault ���������������������������������V link:"
"https://www.vaultproject.io/api-docs/system/policy[ault "
"���������������������]������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:453
#, fuzzy
msgid ""
"`VaultKubernetesAuthService`. See the https://www.vaultproject.io/api-docs/"
"auth/kubernetes[Vault documentation]."
msgstr ""
"`VaultKubernetesAuthService` ��� link:https://www.vaultproject.io/api-docs/"
"auth/kubernetes[Vault ������������������������]���������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:454
#, fuzzy
msgid ""
"Configure the Kubernetes Auth Method (Kubernetes host, certificates, keys, .."
".)"
msgstr ""
"Kubernetes������������������������Kubernetes������������������������������..."
""

#. type: Plain text
#: upstream/_guides/vault.adoc:455
#, fuzzy
msgid ""
"Create Kubernetes Auth Roles (association between Kubernetes service "
"accounts, Kubernetes namespaces and Vault policies)"
msgstr ""
"Kubernetes "
"Auth���������������������Kubernetes������������������������������Kubernetes������������������������Vault������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:457
#, fuzzy
msgid "For instance:"
msgstr "���������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:462
#, no-wrap
msgid "@Inject\n"
"VaultSystemBackendEngine vaultSystemBackendEngine;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:465
#, no-wrap
msgid "@Inject\n"
"VaultKubernetesAuthService vaultKubernetesAuthService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:473
#, no-wrap
msgid ""
"  String rules = \"path \\\"transit/*\\\" {\\n\" +\n"
"          \"  capabilities = [ \\\"create\\\", \\\"read\\\", \\\"update\\\" "
"]\\n\" +\n"
"          \"}\";\n"
"  String policyName = \"sys-test-policy\";\n"
"  vaultSystemBackendEngine.createUpdatePolicy(policyName, rules);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:478
#, no-wrap
msgid ""
"  String roleName = \"test-auth-k8s\";\n"
"  List<String> boundServiceAccountNames = asList(\"vault-auth\");\n"
"  List<String> boundServiceAccountNamespaces = asList(\"default\");\n"
"  List<String> tokenPolicies = asList(policyName);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:483
#, no-wrap
msgid ""
"  vaultKubernetesAuthService.createRole(roleName, new "
"VaultKubernetesAuthRole()\n"
"          .setBoundServiceAccountNames(boundServiceAccountNames)\n"
"          .setBoundServiceAccountNamespaces(boundServiceAccountNamespaces)\n"
"          .setTokenPolicies(tokenPolicies));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:487
#, fuzzy
msgid ""
"Like any client, a provisioning program would have to authenticate using one "
"of the supported Auth methods, and get the appropriate grants through one or "
"more policies. Example:"
msgstr ""
"������������������������������������������������������������������������������������������������������������ "
"Auth "
"���������������������������������������������������������1������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault.adoc:494
#, no-wrap
msgid ""
"# create Policies\n"
"path \"sys/policy/*\" {\n"
"  capabilities = [\"read\", \"create\", \"update\", \"delete\"]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault.adoc:499
#, no-wrap
msgid ""
"# create Kubernetes Auth Roles\n"
"path \"auth/kubernetes/role/*\" {\n"
"  capabilities = [\"read\", \"create\", \"update\", \"delete\"]\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault.adoc:502
#, fuzzy
msgid ""
"You should adjust to the minimal set of access rights depending on your "
"specific use case."
msgstr ""
"������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:507
#, fuzzy
msgid ""
"As a general matter, you should consider reading the extensive https://www."
"vaultproject.io/docs/[Vault documentation] and apply best practices."
msgstr ""
"��������������������������������������� link:https://www.vaultproject.io/"
"docs/"
"[Vault���������������������]���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:511
#, fuzzy
msgid ""
"The features exposed today through the Vault extension covers only a small "
"fraction of what the product is capable of.  Still, it addresses already "
"some of the most common microservices scenarii (e.g. sensitive configuration "
"and database credentials), which goes a long way towards creating secured "
"applications."
msgstr ""
"Vault "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault.adoc:520
#, fuzzy
msgid "https://www.vaultproject.io/[HashiCorp Vault]"
msgstr "link:https://www.vaultproject.io/[���������������������������]"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/deploying-to-google-cloud.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Deploying to Google Cloud Platform (GCP)"
msgstr "Quarkus - Google Cloud Platform���GCP������������������������������"

#. type: Title ==
#: upstream/_guides/deploying-to-google-cloud.adoc:13
#: upstream/_guides/deploying-to-google-cloud.adoc:33
#, no-wrap, fuzzy
msgid "Login to Google Cloud"
msgstr "Google���������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:14
#, fuzzy
msgid "Deploying a function to Google Cloud Functions"
msgstr "Google������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:15
#, fuzzy
msgid "Deploying a JAR to Google App Engine Standard"
msgstr "JAR���Google App Engine���������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:16
#, fuzzy
msgid "Deploying a Docker image to Google App Engine Flexible Custom Runtimes"
msgstr ""
"Docker���������������Google App Engine��������������������� "
"������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:17
#, fuzzy
msgid "Deploying a Docker image to Google Cloud Run"
msgstr "Docker���������������Google Cloud Run���������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:21
#, fuzzy
msgid "For this guide you need:"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:23
#, fuzzy
msgid "Roughly 1 hour for all modalities"
msgstr "���������������������������������1������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:24
#, fuzzy
msgid "JDK 11"
msgstr "JDK 11"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:26
#, fuzzy
msgid ""
"https://cloud.google.com/[A Google Cloud Account].  Free accounts work."
msgstr ""
"link:https://cloud.google.com/"
"[Google������������������������������������]������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:27
#, fuzzy
msgid "https://cloud.google.com/sdk[Cloud SDK CLI Installed]"
msgstr ""
"link:https://cloud.google.com/sdk[������������SDK "
"CLI������������������������������������]"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:29
#, fuzzy
msgid ""
"This guide will take as input an application developed in the link:getting-"
"started[Getting Started guide]."
msgstr ""
"������������������������ link:getting-"
"started[���������������]������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:32
#, fuzzy
msgid ""
"Make sure you have the getting-started application at hand, or clone the Git "
"repository: `git clone {quickstarts-clone-url}`, or download an {quickstarts-"
"archive-url}[archive]. The solution is located in the `getting-started` "
"directory."
msgstr ""
"��������� get-started "
"������������������������������������������������������������Git "
"���������������������������������������: `git clone {quickstarts-clone-url}` "
"��������������� {quickstarts-archive-url}[archive] "
"������������������������������������������������������������������ `getting-"
"started` ������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:36
#, fuzzy
msgid ""
"Login to Google Cloud is necessary for deploying the application and it can "
"be done as follows:"
msgstr ""
"���������������������������������������������Google "
"Cloud������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:40
#, no-wrap
msgid "gcloud auth login\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/deploying-to-google-cloud.adoc:42
#, no-wrap, fuzzy
msgid "Deploying to Google Cloud Functions"
msgstr "Google������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:45
#, fuzzy
msgid ""
"Quarkus supports deploying your application to Google Cloud Functions via "
"the following extensions:"
msgstr ""
"Quarkus���������������������������������������������������������������������Google "
"Cloud Functions������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:47
#, fuzzy
msgid ""
"link:gcp-functions[Google Cloud Functions]: Build functions using the Google "
"Cloud Functions API."
msgstr ""
"link:gcp-functions[Google Cloud Functions]���Google Cloud Functions API "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:49
#, fuzzy
msgid ""
"link:gcp-functions-http[Google Cloud Functions HTTP binding]: Build "
"functions using Quarkus HTTP APIs: RESTEasy (JAX-RS), Undertow (Servlet), "
"Vert.x Web, or link:funqy-http[Funqy HTTP]."
msgstr ""
"link:gcp-functions-http[Google Cloud Functions "
"HTTP���������������������]���Quarkus HTTP "
"API���������������������������������������������RESTEasy���JAX-"
"RS������Undertow���������������������������Vert.x Web������������ link:funqy-"
"http[Funqy HTTP]���"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:50
#, fuzzy
msgid ""
"link:funqy-gcp-functions[Funky Google Cloud Functions]: Build functions "
"using Funqy."
msgstr ""
"link:funqy-gcp-functions[������������������Google "
"Cloud���������]���Funqy���������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:53
#, fuzzy
msgid ""
"Each extension supports a specific kind of application development, follow "
"the specific guides for more information on how to develop, package and "
"deploy your applications using them."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/deploying-to-google-cloud.adoc:54
#, no-wrap, fuzzy
msgid "Deploying to Google App Engine Standard"
msgstr "Google App Engine Standard������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:57
#, fuzzy
msgid ""
"We will only cover the Java 11 runtime as the Java 8 runtime uses its own "
"Servlet engine which is not compatible with Quarkus."
msgstr ""
"Java "
"8������������������Quarkus������������������������������������������������������������������������������������������Java "
"11���������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:59
#, fuzzy
msgid ""
"First of all, make sure to have an App Engine environment initialized for "
"your Google Cloud project, if not, initialize one via `gcloud app create --"
"project=[YOUR_PROJECT_ID]`."
msgstr ""
"`gcloud app create --project=[YOUR_PROJECT_ID]`������������������Google "
"Cloud ������������������������ App Engine "
"������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:61
#, fuzzy
msgid ""
"Then, you will need to create a `src/main/appengine/app.yaml` file, let's "
"keep it minimalistic with only the selected engine:"
msgstr ""
"��������� `src/main/appengine/app.yaml` "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:65
#, no-wrap
msgid "runtime: java11\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:68
#, fuzzy
msgid "This will create a default service for your App Engine application."
msgstr ""
"������������������App "
"Engine������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:70
#, fuzzy
msgid ""
"Then, you can choose to build the application by yourself or letting "
"`gcloud` or the Google Cloud Maven plugin build it for you."
msgstr ""
"������������������������������������������������������������������ `gcloud` "
"��������� Google Cloud Maven "
"���������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/deploying-to-google-cloud.adoc:71
#, no-wrap, fuzzy
msgid "Building the application manually"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:74
#, fuzzy
msgid ""
"Set up your application to be packaged as an uber-jar via your `application."
"properties` file:"
msgstr ""
"`application.properties` "
"������������������������������������������������������uber-"
"jar������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:78
#, no-wrap
msgid "quarkus.package.type=uber-jar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:81
#, fuzzy
msgid ""
"Use Maven to build the application using `mvn clean package`, it will "
"generate a single JAR that contains all the classes of your application "
"including its dependencies."
msgstr ""
"`mvn clean package` "
"��������������������������������������������������������������� Maven "
"��������������������� "
"������������������������������������������������������������������������������������������������������������ "
"JAR ���������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:83
#, fuzzy
msgid ""
"Finally, use `gcloud` to deploy your application as an App Engine service."
msgstr ""
"������������ `gcloud` ��������������������������������������������� App "
"Engine ���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:87
#, no-wrap
msgid "gcloud app deploy target/getting-started-1.0-SNAPSHOT-runner.jar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:90
#, fuzzy
msgid ""
"This command will upload your application jar and launch it on App Engine."
msgstr ""
"������������������������������������������������ jar "
"���������������������������App Engine ���������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:92
#: upstream/_guides/deploying-to-google-cloud.adoc:101
#: upstream/_guides/deploying-to-google-cloud.adoc:163
#, fuzzy
msgid ""
"When done, the output will display the URL of your application (target url), "
"you can use it with curl or directly open it in your browser using `gcloud "
"app browse`."
msgstr ""
"`gcloud app browse`��������������������������������������������������������� "
"URL (��������������� URL) ������������������������"

#. type: Title ===
#: upstream/_guides/deploying-to-google-cloud.adoc:93
#, no-wrap, fuzzy
msgid "Building the application via gcloud"
msgstr "gcloud������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:96
#, fuzzy
msgid ""
"You can choose to let `gcloud` build your application for you, this is the "
"simplest way to deploy to App Engine."
msgstr ""
"`gcloud` "
"������������������������������������������������������������������������������ "
"App Engine ���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:99
#, fuzzy
msgid ""
"Just launch `gcloud app deploy` in the root of your project, it will upload "
"all your project files (the list can be reduced via the `.gcloudignore` "
"file), package your JAR via Maven (or Gradle) and launch it on App Engine."
msgstr ""
"��������������������������������� `gcloud app deploy` "
"������������������������������������������������������������������������������������������������ "
"`.gcloudignore` "
"������������������������������������������������������������������������Maven������������ "
"Gradle��������������� JAR ���������������������������App Engine "
"���������������������"

#. type: Title ===
#: upstream/_guides/deploying-to-google-cloud.adoc:102
#, no-wrap, fuzzy
msgid "Building the application via the Google Cloud Maven plugin"
msgstr ""
"Google Cloud "
"Maven������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:105
#, fuzzy
msgid ""
"You can also let Maven control the deployment of your application using the "
"App Engine Maven plugin."
msgstr ""
"���������App Engine "
"Maven���������������������������������Maven���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:107
#, fuzzy
msgid "First, add the plugin to your `pom.xml`:"
msgstr "��������������������������� `pom.xml` ���������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:120
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>com.google.cloud.tools</groupId>\n"
"    <artifactId>appengine-maven-plugin</artifactId>\n"
"    <version>2.4.0</version>\n"
"    <configuration>\n"
"        <projectId>GCLOUD_CONFIG</projectId> <1>\n"
"        <version>gettingstarted</version>\n"
"        <artifact>${project.build.directory}/getting-started-${project."
"version}-runner.jar</artifact> <2>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:123
#, fuzzy
msgid "Use the default `gcloud` configuration"
msgstr "������������������ `gcloud` ���������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:124
#, fuzzy
msgid ""
"Override the default JAR name to the one generated by the Quarkus Maven "
"plugin"
msgstr ""
"������������������JAR���������Quarkus "
"Maven������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:126
#, fuzzy
msgid ""
"Then you would be able to use Maven to build and deploy your application to "
"App Engine via `mvn clean package appengine:deploy`."
msgstr ""
"������������Maven������������������������������������������������������ `mvn "
"clean package appengine:deploy` ���������������App "
"Engine���������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:128
#, fuzzy
msgid ""
"When it���s done, the output will display the URL of your application "
"(target URL), you can use it with curl or directly open it in your browser "
"using `gcloud app browse`."
msgstr ""
"`gcloud app "
"browse`������������������������������������������������������������������ "
"URL (��������������� URL) ������������������������"

#. type: Title ==
#: upstream/_guides/deploying-to-google-cloud.adoc:129
#, no-wrap, fuzzy
msgid "Deploying to Google App Engine Flexible Custom Runtimes"
msgstr ""
"Google App Engine��������������������������� ��������������������� "
"���������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:132
#, fuzzy
msgid ""
"Before all, make sure to have an App Engine environment initialized for your "
"Google Cloud project, if not, initialize one via `gcloud app create --"
"project=[YOUR_PROJECT_ID]`."
msgstr ""
"`gcloud app create --project=[YOUR_PROJECT_ID]`���������������Google Cloud "
"������������������������ App Engine "
"���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:134
#, fuzzy
msgid ""
"App Engine Flexible Custom Runtimes uses a Docker image to run your "
"application."
msgstr ""
"App Engine Flexible Custom "
"Runtimes���Docker������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:136
#, fuzzy
msgid ""
"First, create an `app.yaml` file at the root of your project with the "
"following content:"
msgstr ""
"������������������������������������������������������������ `app.yaml` "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:141
#, no-wrap
msgid "runtime: custom\n"
"env: flex\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:144
#, fuzzy
msgid ""
"App Engine Flexible Custom Runtimes deploys your application as a Docker "
"container, you can choose to deploy one of the Dockerfile provided inside "
"your application."
msgstr ""
"App Engine Flexible Custom "
"Runtimes���������������������������������Docker���������������������������������������������������������������������������������������������Dockerfile������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:146
#: upstream/_guides/deploying-to-google-cloud.adoc:177
#, fuzzy
msgid "Both JVM and native executable versions will work."
msgstr ""
"JVM������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:148
#: upstream/_guides/deploying-to-google-cloud.adoc:179
#, fuzzy
msgid "To deploy a JVM application:"
msgstr "JVM���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:150
#: upstream/_guides/deploying-to-google-cloud.adoc:181
#, fuzzy
msgid ""
"Copy the JVM Dockerfile to the root directory of your project: `cp src/main/"
"docker/Dockerfile.jvm Dockerfile`."
msgstr ""
"JVM���Dockerfile������������������������������������������������������������������������:"
" `cp src/main/docker/Dockerfile.jvm Dockerfile`."

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:151
#: upstream/_guides/deploying-to-google-cloud.adoc:182
#, fuzzy
msgid "Build your application using `mvn clean package`."
msgstr ""
"`mvn clean package` "
"������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:153
#: upstream/_guides/deploying-to-google-cloud.adoc:184
#, fuzzy
msgid "To deploy a native application:"
msgstr "������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:155
#: upstream/_guides/deploying-to-google-cloud.adoc:186
#, fuzzy
msgid ""
"Copy the native Dockerfile to the root directory of your project: `cp src/"
"main/docker/Dockerfile.native Dockerfile`."
msgstr ""
"������������������Dockerfile������������������������������������������������������������������������:"
" `cp src/main/docker/Dockerfile.native Dockerfile`."

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:156
#: upstream/_guides/deploying-to-google-cloud.adoc:187
#, fuzzy
msgid ""
"Build your application as a native executable using `mvn clean package -"
"Dnative`."
msgstr ""
"`mvn clean package -Dnative` "
"������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:159
#, fuzzy
msgid ""
"Finally, launch `gcloud app deploy` in the root of your project, it will "
"upload all your project files (the list can be reduced via the `."
"gcloudignore` file), build your Dockerfile and launch it on App Engine "
"Flexible custom runtime."
msgstr ""
"��������������������������������������������� `gcloud app deploy` "
"������������������������������������������������������������������������������������������ "
"`.gcloudignore` "
"���������������������������������������������������������������������������Dockerfile "
"������������������App Engine Flexible "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:161
#, fuzzy
msgid ""
"It uses Cloud Build to build your Docker image and deploy it to Google "
"Container Registry (GCR)."
msgstr ""
"Cloud Build���������������Docker���������������������������Google Container "
"Registry���GCR������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:166
#, fuzzy
msgid ""
"App Engine Flexible custom runtimes support link:https://cloud.google.com/"
"appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-"
"yaml#updated_health_checks[health checks], it is strongly advised to provide "
"them thanks to Quarkus link:microprofile-health[Microprofile Health] support."
""
msgstr ""
"App Engine Flexible������������������������������ link:https://cloud.google."
"com/appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-"
"yaml#updated_health_checks[������������������������]���������������������������������Quarkus "
"link:microprofile-health[Microprofile "
"Health]������������������������������������ link:https://cloud.google.com/"
"appengine/docs/flexible/custom-runtimes/configuring-your-app-with-app-"
"yaml#updated_health_checks[���������������]������������������������������������������������"

#. type: Title ==
#: upstream/_guides/deploying-to-google-cloud.adoc:167
#, no-wrap, fuzzy
msgid "Deploying to Google Cloud Run"
msgstr "Google Cloud Run������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:170
#, fuzzy
msgid ""
"Google Cloud Run allows you to run your Docker containers inside Google "
"Cloud Platform in a managed way."
msgstr ""
"Google Cloud Run���������Google Cloud "
"Platform������Docker���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:173
#, fuzzy
msgid ""
"By default, Quarkus listens on port 8080, and it's also the Cloud Run "
"default port.  No need to use the `PORT` environment variable defined in "
"Cloud Run to customize the Quarkus HTTP port."
msgstr ""
"������������������������Quarkus���8080������������������������������������������Cloud "
"Run������������������������������������������������Cloud "
"Run������������������������������ `PORT` "
"������������������Quarkus���HTTP���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:175
#, fuzzy
msgid ""
"Cloud Run will use Cloud Build to build your Docker image and deploy it to "
"Google Container Registry (GCR)."
msgstr ""
"Cloud Run���Cloud "
"Build���������������Docker���������������������������Google Container "
"Registry���GCR������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:190
#, fuzzy
msgid ""
"Then, create a `.gcloudignore` file to tell gcloud which files should be not "
"be uploaded for Cloud Build, without it, it defaults to `.gitignore` that "
"usually exclude the target directory where you packaged application has been "
"created."
msgstr ""
"���������Cloud "
"Build���������������������������������������������������������������gcloud��������������������� "
"`.gcloudignore` "
"��������������������������������������������������������������������������� "
"`.gitignore` "
"������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:192
#, fuzzy
msgid "In this example, I only exclude the `src` directory:"
msgstr ""
"������������������ `src` ���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:196
#, no-wrap
msgid "src/\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:200
#, fuzzy
msgid ""
"Then, use Cloud Build to build your image, it will upload to a Google Cloud "
"Storage bucket all the files of your application (except the ones ignored by "
"the `.gcloudignore`file), build your Docker image and push it to Google "
"Container Registry (GCR)."
msgstr ""
"������������Cloud "
"Build������������������������������������������������������������������������������������������������������`."
"gcloudignore`file���������������������������������������������Google Cloud "
"Storage���������������������������������������Docker������������������������������Google "
"Container Registry (GCR)���������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:204
#, no-wrap
msgid "gcloud builds submit --tag gcr.io/PROJECT-ID/helloworld\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:207
#, fuzzy
msgid ""
"You can also build your image locally and push it to a publicly accessible "
"Docker registry, then use this image in the next step."
msgstr ""
"������������������������������������������������������������������������������Docker������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:209
#, fuzzy
msgid "Finally, use Cloud Run to launch your application."
msgstr ""
"������������Cloud "
"Run���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/deploying-to-google-cloud.adoc:213
#, no-wrap
msgid ""
"gcloud run deploy --image gcr.io/PROJECT-ID/helloworld --platform managed\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:217
#, fuzzy
msgid ""
"Cloud run will ask you questions on the service name, the region and whether "
"or not unauthenticated calls are allowed.  After you answer to these "
"questions, it will deploy your application."
msgstr ""
"Cloud run "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:219
#, fuzzy
msgid ""
"When the deployment is done, the output will display the URL to access your "
"application."
msgstr ""
"���������������������������������������������������������������������������������������������������URL������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:224
#, fuzzy
msgid ""
"You can find a set of extensions to access various Google Cloud Services in "
"the Quarkiverse (a GitHub organization for Quarkus extensions maintained by "
"the community), including PubSub, BigQuery, Storage, Spanner, Firestore "
"(visit the repository for an accurate list of supported services)."
msgstr ""
"PubSub���BigQuery���Storage���Spanner���Firestore���������������������������������������������������������������������������������������������������������������������������������������Google "
"Cloud "
"Services���������������������������������������������������������Quarkiverse������������������������������������������������������������������Quarkus������������������������GitHub������������������������������������������������"

#. type: Plain text
#: upstream/_guides/deploying-to-google-cloud.adoc:225
#, fuzzy
msgid ""
"You can find some documentation about them in the link:https://github.com/"
"quarkiverse/quarkiverse-google-cloud-services[Quarkiverse Google Cloud "
"Services repository]."
msgstr ""
"������������������������������������������������ link:https://github.com/"
"quarkiverse/quarkiverse-google-cloud-services[Quarkiverse���Google Cloud "
"Services���������������]������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/writing-extensions.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Writing Your Own Extension"
msgstr "Quarkus - ������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:16
#, fuzzy
msgid ""
"Quarkus extensions add a new developer focused behavior to the core "
"offering, and consist of two distinct parts, buildtime augmentation and "
"runtime container. The augmentation part is responsible for all metadata "
"processing, such as reading annotations, XML descriptors etc. The output of "
"this augmentation phase is recorded bytecode which is responsible for "
"directly instantiating the relevant runtime services."
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������2������������������������������������������������������������������������������������������������XML������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:19
#, fuzzy
msgid ""
"This means that metadata is only processed once at build time, which both "
"saves on startup time, and also on memory usage as the classes etc that are "
"used for processing are not loaded (or even present) in the runtime JVM."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������JVM���������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/writing-extensions.adoc:20
#, no-wrap, fuzzy
msgid "Extension philosophy"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:23
#, fuzzy
msgid ""
"This section is a work in progress and gathers the philosophy under which "
"extensions should be designed and written."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:24
#, no-wrap, fuzzy
msgid "Why an extension framework"
msgstr "������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:30
#, fuzzy
msgid ""
"Quarkus���s mission is to transform your entire application including the "
"libraries it uses, into an artifact that uses significantly less resources "
"than traditional approaches. These can then be used to build native "
"applications using GraalVM.  To do this you need to analyze and understand "
"the full \"closed world\" of the application.  Without the full and complete "
"context, the best that can be achieved is partial and limited generic "
"support.  By using the Quarkus extension approach, we can bring Java "
"applications in line with memory footprint constrained environments like "
"Kubernetes or cloud platforms."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������GraalVM������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������Kubernetes������������������������������������������������������������������������������������������������������������������������Java���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:33
#, fuzzy
msgid ""
"The Quarkus extension framework results in significantly improved resource "
"utilization even when GraalVM is not used (e.g. in HotSpot).  Let���s list "
"the actions an extension performs:"
msgstr ""
"Quarkus���������������������������������GraalVM���������������������������������������HotSpot������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:35
#, fuzzy
msgid "Gather build time metadata and generate code"
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:36
#, fuzzy
msgid ""
"This part has nothing to do with GraalVM, it is how Quarkus starts "
"frameworks ���at build time���"
msgstr ""
"���������������GraalVM������������������������������������������Quarkus���������������������������\"���������������\"���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:37
#, fuzzy
msgid ""
"The extension framework facilitates reading metadata, scanning classes as "
"well as generating classes as needed"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:38
#, fuzzy
msgid ""
"A small part of the extension work is executed at runtime via the generated "
"classes, while the bulk of the work is done at build time (called deployment "
"time)"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������ "
"(������������������������������������������)"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:39
#, fuzzy
msgid ""
"Enforce opinionated and sensible defaults based on the close world view of "
"the application (e.g. an application with no `@Entity` does not need to "
"start Hibernate ORM)"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������ "
"`@Entity` ���������������������������������������Hibernate ORM "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:40
#, fuzzy
msgid ""
"An extension hosts Substrate VM code substitution so that libraries can run "
"on GraalVM"
msgstr ""
"��������������� Substrate VM "
"������������������������������������������������������ GraalVM "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:41
#, fuzzy
msgid ""
"Most changes are pushed upstream to help the underlying library run on "
"GraalVM"
msgstr ""
"������������������������������������������������������������GraalVM���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:42
#, fuzzy
msgid ""
"Not all changes can be pushed upstream, extensions host Substrate VM "
"substitutions - which is a form of code patching - so that libraries can run"
msgstr ""
"��������������������������������������������������������������������������������������� "
"Substrate VM "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:43
#, fuzzy
msgid ""
"Host Substrate VM code substitution to help dead code elimination based on "
"the application needs"
msgstr ""
"���������������VM���������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:44
#, fuzzy
msgid ""
"This is application dependant and cannot really be shared in the library "
"itself"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:45
#, fuzzy
msgid ""
"For example, Quarkus optimizes the Hibernate code because it knows it only "
"needs a specific connection pool and cache provider"
msgstr ""
"���������������Quarkus������������������������������������������������������������������������������������������������������������������������Hibernate���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:46
#, fuzzy
msgid "Send metadata to GraalVM for example classes in need of reflection"
msgstr "������������������GraalVM���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:47
#, fuzzy
msgid ""
"This information is not static per library (e.g. Hibernate) but the "
"framework has the semantic knowledge and knows which classes need to have "
"reflection (for example @Entity classes)"
msgstr ""
"������������������������������(Hibernate������)������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������(���������@Entity���������������)���"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:48
#, no-wrap, fuzzy
msgid "Favor build time work over runtime work"
msgstr "���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:52
#, fuzzy
msgid ""
"As much as possible favor doing work at build time (deployment part of the "
"extension) as opposed to let the framework do work at startup time (runtime)."
"  The more is done there, the smaller Quarkus applications using that "
"extension will be and the faster they will load."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:53
#, no-wrap, fuzzy
msgid "How to expose configuration"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:57
#, fuzzy
msgid ""
"Quarkus simplifies the most common usages.  This means that its defaults "
"might be different than the library it integrates."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:60
#, fuzzy
msgid ""
"To make the simple experience easiest, unify the configuration in "
"`application.properties` via MicroProfile Config.  Avoid library specific "
"configuration files, or at least make them optional: e.g. `persistence.xml` "
"for Hibernate ORM is optional."
msgstr ""
"���������������������������������������������������������MicroProfile "
"Config��������������� `application.properties` "
"������������������������������������������������������������������������������������������������������������������������������������������������������:"
" ���: `persistence.xml` ��� Hibernate ORM ���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:65
#, fuzzy
msgid ""
"Extensions should see the configuration holistically as a Quarkus "
"application instead of focusing on the library experience.  For example "
"`quarkus.database.url` and friends are shared between extensions as defining "
"a database access is a shared task (instead of a `hibernate.` property for "
"example).  The most useful configuration options should be exposed as "
"`quarkus.[extension].` instead of the natural namespace of the library.  "
"Less common properties can live in the library namespace."
msgstr ""
"������������������������������������������������������������������������������������������������Quarkus��������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`quarkus.database.url` "
"������������������������������������������������������������������ "
"`hibernate.` "
"������������������������������������������������������������������������������������������������������������������������������������ "
"`quarkus.[extension].` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:69
#, fuzzy
msgid ""
"To fully enable the close world assumptions that Quarkus can optimize best, "
"it is better to consider configuration options as build time settled vs "
"overridable at runtime.  Of course properties like host, port, password "
"should be overridable at runtime.  But many properties like enable caching "
"or setting the JDBC driver can safely require a rebuild of the application."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������JDBC���������������������������������������������������������������������������������������������������������������������������������������������������������������"

# 
# 
# 
#. === API
#. TODO: Describe where to put APIs
#. I wonder if that content should be in the technical aspects
#. === Substitution and recorders
#. TODO: Describe where Substitutions and recorders should live
#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:81
#, no-wrap, fuzzy
msgid "Expose your components via CDI"
msgstr "CDI���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:86
#, fuzzy
msgid ""
"Since CDI is the central programming model when it comes to component "
"composition, frameworks and extensions should expose their components as "
"beans that are easily consumable by user applications.  For example, "
"Hibernate ORM exposes `EntityManagerFactory` and `EntityManager` beans, the "
"connection pool exposes `DataSource` beans etc.  Extensions must register "
"these bean definitions at build time."
msgstr ""
"CDI "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Hibernate "
"ORM ��� `EntityManagerFactory` ��� `EntityManager` "
"��������������������������������������������� `DataSource` "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:87
#, no-wrap, fuzzy
msgid "Beans backed by classes"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:90
#, fuzzy
msgid ""
"An extension can produce an <<cdi-reference."
"adoc#additional_beans,`AdditionalBeanBuildItem`>> to instruct the container "
"to read a bean definition from a class as if it was part of the original "
"application:"
msgstr ""
"���������������  link:cdi-reference."
"html#additional_beans[`AdditionalBeanBuildItem`]������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:91
#, no-wrap, fuzzy
msgid "Bean Class Registered by `AdditionalBeanBuildItem`"
msgstr "��������������������������������� `AdditionalBeanBuildItem`"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:96
#, no-wrap
msgid "@Singleton <1>\n"
"public class Echo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:101
#, no-wrap
msgid "   public String echo(String val) {\n"
"      return val;\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:103
#, fuzzy
msgid ""
"If a bean registered by an `AdditionalBeanBuildItem` does not specify a "
"scope then `@Dependent` is assumed."
msgstr ""
"`AdditionalBeanBuildItem` "
"��������������������������������������������������������������������� "
"`@Dependent` ������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:105
#, fuzzy
msgid "All other beans can inject such a bean:"
msgstr ""
"������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:106
#, no-wrap, fuzzy
msgid "Bean Injecting a Bean Produced by an `AdditionalBeanBuildItem`"
msgstr ""
"������������������������������������������������ `AdditionalBeanBuildItem`"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:111
#, no-wrap
msgid "@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:114
#, no-wrap
msgid "    @Inject\n"
"    Echo echo;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:121
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello(String foo) {\n"
"        return echo.echo(foo);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:124
#, fuzzy
msgid ""
"And vice versa - the extension bean can inject application beans and beans "
"provided by other extensions:"
msgstr ""
"��������������������������������� - "
"������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:125
#, no-wrap, fuzzy
msgid "Extension Bean Injection Example"
msgstr "���������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:130
#, no-wrap
msgid "@Singleton\n"
"public class Echo {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:133
#, no-wrap
msgid "    @Inject\n"
"    DataSource dataSource;  <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:136
#, no-wrap
msgid "    @Inject\n"
"    Instance<List<String>> listsOfStrings; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:139
#, no-wrap
msgid "    //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:141
#, fuzzy
msgid "Inject a bean provided by other extension."
msgstr ""
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:142
#, fuzzy
msgid "Inject all beans matching the type `List<String>`."
msgstr ""
"��������� `List&amp;lt;String&amp;gt;` "
"������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:144
#, no-wrap, fuzzy
msgid "Bean initialization"
msgstr "Bean������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:151
#, fuzzy
msgid ""
"Some components may require additional initialization based on information "
"collected during augmentation.  The most straightforward solution is to "
"obtain a bean instance and call a method directly from a build step.  "
"However, it is _illegal_ to obtain a bean instance during the augmentation "
"phase.  The reason is that the CDI container is not started yet.  It's "
"started during the <<bootstrap-three-phases,Static init bootstrap phase>>."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Bean������������������������������������������ "
"_������_���������������������CDI��������������������������������������������������������� "
"link:#bootstrap-three-phases[Static "
"init������������������������������������������]���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:153
#, fuzzy
msgid ""
"`BUILD_AND_RUN_TIME_FIXED` and `RUN_TIME` config roots can be injected in "
"any bean. `RUN_TIME` config roots should only be injected after the "
"bootstrap though."
msgstr ""
"`BUILD_AND_RUN_TIME_FIXED` ��� `RUN_TIME` config roots "
"������������Bean������������������������������������������ `RUN_TIME` config "
"roots ���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:159
#, fuzzy
msgid ""
"It is possible to invoke a bean method from a <<bytecode-recording,recorder "
"method>> though.  If you need to access a bean in a `@Record(STATIC_INIT)` "
"build step then is must either depend on the `BeanContainerBuildItem` or "
"wrap the logic in a `BeanContainerListenerBuildItem`.  The reason is simple -"
" we need to make sure the CDI container is fully initialized and started.  "
"However, it is safe to expect that the CDI container is fully initialized "
"and running in a `@Record(RUNTIME_INIT)` build step.  You can obtain a "
"reference to the container via `CDI.current()` or Quarkus-specific `Arc."
"container()`."
msgstr ""
"������������ link:#bytecode-"
"recording[������������������������]������������������������������������������������������������������ "
"`@Record(STATIC_INIT)` "
"��������������������������������������������������������������������������������� "
"`BeanContainerBuildItem` ��������������������� "
"`BeanContainerListenerBuildItem` "
"���������������������������������������������������������������������������������CDI���������������������������������������������������������������������������������������������������������������������������CDI "
"��������������� `@Record(RUNTIME_INIT)` "
"������������������������������������������������������������������������������������������������������������������������������������������������ "
"`CDI.current()` ���������Quarkus��������� `Arc.container()`."

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:161
#, fuzzy
msgid ""
"Don't forget to make sure the bean state guarantees the visibility, e.g. via "
"the `volatile` keyword."
msgstr ""
"`volatile` "
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:165
#, fuzzy
msgid ""
"There is one significant drawback of this \"late initialization\" approach.  "
"An _uninitialized_ bean may be accessed by other extensions or application "
"components that are instantiated during bootstrap.  We'll cover a more "
"robust solution in the <<synthetic_beans>>."
msgstr ""
"���������������������������������������������������1��������������������������������������� "
"_���������������������������_Bean������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"link:"
"#synthetic_beans[synthetic_beans]]������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:166
#, no-wrap, fuzzy
msgid "Default beans"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:171
#, fuzzy
msgid ""
"A very useful pattern of creating such beans but also giving application "
"code the ability to easily override some of the beans with custom "
"implementations, is to use the `@DefaultBean` that Quarkus provides.  This "
"is best explained with an example."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus��������������������� "
"`@DefaultBean` "
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:173
#, fuzzy
msgid ""
"Let us assume that the Quarkus extension needs to provide a `Tracer` bean "
"which application code is meant to inject into its own beans."
msgstr ""
"���������������Quarkus��������������� `Tracer` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:178
#, no-wrap
msgid "@Dependent\n"
"public class TracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:183
#, no-wrap
msgid ""
"    @Produces\n"
"    public Tracer tracer(Reporter reporter, Configuration configuration) {\n"
"        return new Tracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:189
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Configuration configuration() {\n"
"        // create a Configuration\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:196
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Reporter reporter(){\n"
"        // create a Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:199
#, fuzzy
msgid ""
"If for example application code wants to use `Tracer`, but also needs to use "
"a custom `Reporter` bean, such a requirement could easily be done using "
"something like:"
msgstr ""
"������������������������������������������������ `Tracer` "
"��������������������������������������� `Reporter` Bean "
"���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:205
#, no-wrap
msgid "@Dependent\n"
"public class CustomTracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:211
#, no-wrap
msgid ""
"    @Produces\n"
"    public Reporter reporter(){\n"
"        // create a custom Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:213
#, no-wrap, fuzzy
msgid ""
"How to Override a Bean Defined by a Library/Quarkus Extension that doesn't "
"use @DefaultBean"
msgstr ""
"DefaultBean���������������������������������/"
"Quarkus������������������������Bean������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:218
#, fuzzy
msgid ""
"Although `@DefaultBean` is the recommended approach, it is also possible for "
"application code to override beans provided by an extension by marking beans "
"as a CDI `@Alternative` and including `@Priority` annotation.  Let's show a "
"simple example.  Suppose we work on an imaginary \"quarkus-parser\" "
"extension and we have a default bean implementation:"
msgstr ""
"`@DefaultBean` ������������������������������������������������ CDI "
"`@Alternative` ������������������������ `@Priority` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������\"quarkus-"
"parser\"������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:223
#, no-wrap
msgid "@Dependent\n"
"class Parser {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:228
#, no-wrap
msgid ""
"  String[] parse(String expression) {\n"
"    return expression.split(\"::\");\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:231
#, fuzzy
msgid "And our extension also consumes this parser:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:236
#, no-wrap
msgid "@ApplicationScoped\n"
"class ParserService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:239
#, no-wrap
msgid "  @Inject\n"
"  Parser parser;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:242
#, no-wrap
msgid "  //...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:245
#, fuzzy
msgid ""
"Now, if a user or even some other extension needs to override the default "
"implementation of the `Parser` the simplest solution is to use CDI "
"`@Alternative` + `@Priority`:"
msgstr ""
"��������������������������������������������� `Parser` "
"������������������������������������������������������������������������������������������������ "
"CDI `@Alternative` + `@Priority` ������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:252
#, no-wrap
msgid ""
"@Alternative <1>\n"
"@Priority(1) <2>\n"
"@Singleton\n"
"class MyParser extends Parser {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:257
#, no-wrap
msgid "  String[] parse(String expression) {\n"
"    // my super impl...\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:259
#, fuzzy
msgid "`MyParser` is an alternative bean."
msgstr "`MyParser` ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:260
#, fuzzy
msgid ""
"Enables the alternative. The priority could be any number to override the "
"default bean but if there are multiple alternatives the highest priority "
"wins."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:262
#, fuzzy
msgid ""
"CDI alternatives are only considered during injection and type-safe "
"resolution. For example the default implementation would still receive "
"observer notifications."
msgstr ""
"CDI "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:240
msgid "Synthetic beans"
msgstr "������Bean"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:269
#, fuzzy
msgid ""
"Sometimes it is very useful to be able to register a synthetic bean.  Bean "
"attributes of a synthetic bean are not derived from a java class, method or "
"field.  Instead, the attributes are specified by an extension."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������java������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:272
#, fuzzy
msgid ""
"Since the CDI container does not control the instantiation of a synthetic "
"bean the dependency injection and other services (such as interceptors) are "
"not supported.  In other words, it's up to the extension to provide all "
"required services to a synthetic bean instance."
msgstr ""
"CDI���������������������Bean���������������������������������������������������������������������������������������(���������������������������)������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:275
#, fuzzy
msgid ""
"There are several ways to register a <<cdi-reference."
"adoc#synthetic_beans,synthetic bean>> in Quarkus.  In this chapter, we will "
"cover a use case that can be used to initialize extension beans in a safe "
"manner (compared to <<bean_init>>)."
msgstr ""
"Quarkus��� link:cdi-reference."
"html#synthetic_beans[������������������]������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"link:#bean_init[[bean_init]]���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:277
#, fuzzy
msgid "The `SyntheticBeanBuildItem` can be used to register a synthetic bean:"
msgstr ""
"`SyntheticBeanBuildItem` ���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:279
#, fuzzy
msgid ""
"whose instance can be easily produced through a <<bytecode-"
"recording,recorder>>,"
msgstr ""
"������������������������������ link:#bytecode-"
"recording[���������������]���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:280
#, fuzzy
msgid ""
"to provide a \"context\" bean that holds all the information collected "
"during augmentation so that the real components do not need any \"late "
"initialization\" because they can inject the context bean directly."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������\"���������������\"���������������������������������������������������������������������������������������������\"������������������\"������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:281
#, no-wrap, fuzzy
msgid "Instance Produced Through Recorder"
msgstr "������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:291
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(STATIC_INIT)\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(Foo.class).scope(Singleton.class)\n"
"                .runtimeValue(recorder.createFoo(\"parameters are recorder "
"in the bytecode\")) <1>\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:293
#, fuzzy
msgid ""
"The string value is recorded in the bytecode and used to initialize the "
"instance of `Foo`."
msgstr "������������������������������������������������������ `Foo`."

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:294
#, no-wrap, fuzzy
msgid "\"Context\" Holder"
msgstr "\"���������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:304
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(STATIC_INIT)\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(TestContext.class)."
"scope(Singleton.class)\n"
"                .runtimeValue(recorder.createContext(\"parameters are "
"recorder in the bytecode\")) <1>\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:306
#, fuzzy
msgid "The \"real\" components can inject the `TestContext` directly."
msgstr ""
"��������������������������������������� `TestContext` "
"���������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:307
#, no-wrap, fuzzy
msgid "Some types of extensions"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:310
#, fuzzy
msgid "There exist multiple stereotypes of extension, let's list a few."
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:311
#, no-wrap, fuzzy
msgid "Bare library running"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:316
#, fuzzy
msgid ""
"This is the less sophisticated extension.  It consists of a set of patches "
"to make sure a library runs on GraalVM.  If possible, contribute these "
"patches upstream, not in extensions.  Second best is to write Substrate VM "
"substitutions, which are patches applied during native image compilation."
msgstr ""
"���������������������������������������������������������������������������������������������GraalVM������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"Substrate VM substitutions ������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:317
#, no-wrap, fuzzy
msgid "Get a framework running"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:320
#, fuzzy
msgid ""
"A framework at runtime typically reads configuration, scan the classpath and "
"classes for metadata (annotations, getters etc), build a metamodel on top of "
"which it runs, find options via the service loader pattern, prepare "
"invocation calls (reflection), proxy interfaces, etc. + These operations "
"should be done at build time and the metamodel be passed to the recorder DSL "
"that will generate classes that will be executed at runtime and boot the "
"framework."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������(������������������������������������������)���������������������������������������������������������������������������������������������������������������������������������������������������������(���������������������)������������������������������������������������������������������+ "
"���������������������������������������������������������������������������������������������������������������������������������DSL���������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:321
#, no-wrap, fuzzy
msgid "Get a CDI portable extension running"
msgstr "CDI ������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:326
#, fuzzy
msgid ""
"The CDI portable extension model is very flexible.  Too flexible to benefit "
"from the build time boot promoted by Quarkus.  Most extension we have seen "
"do not make use of these extreme flexibility capabilities.  The way to port "
"a CDI extension to Quarkus is to rewrite it as a Quarkus extension which "
"will define the various beans at build time (deployment time in extension "
"parlance)."
msgstr ""
"CDI���������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������CDI���������Quarkus������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������"

#. type: Title ==
#: upstream/_guides/writing-extensions.adoc:327
#, no-wrap, fuzzy
msgid "Technical aspect"
msgstr "������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:330
#, no-wrap, fuzzy
msgid "Three Phases of Bootstrap and Quarkus Philosophy"
msgstr "Bootstrap���Quarkus���3������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:333
#, fuzzy
msgid "There are three distinct bootstrap phases of a Quarkus app:"
msgstr ""
"Quarkus������������������3���������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:334
#, no-wrap, fuzzy
msgid "Augmentation"
msgstr "������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:339
#, fuzzy
msgid ""
"This is the first phase, and is done by the <<Build Step Processors>>. These "
"processors have access to Jandex annotation information and can parse any "
"descriptors and read annotations, but should not attempt to load any "
"application classes. The output of these build steps is some recorded "
"bytecode, using an extension of the ObjectWeb ASM project called Gizmo(ext/"
"gizmo), that is used to actually bootstrap the application at runtime. "
"Depending on the `io.quarkus.deployment.annotations.ExecutionTime` value of "
"the `@io.quarkus.deployment.annotations.Record` annotation associated with "
"the build step, the step may be run in a different JVM based on the "
"following two modes."
msgstr ""
"������������������������������������������ link:#Build Step "
"Processors[[Build Step "
"Processors]]������������������������������������������������������������Jandex������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Gizmo(ext/"
"gizmo)���������������ObjectWeb "
"ASM������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@io.quarkus.deployment.annotations.Record` ������������������������ `io."
"quarkus.deployment.annotations.ExecutionTime` "
"��������������������������������������������� 2 "
"��������������������������������������� JVM ������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:340
#, no-wrap, fuzzy
msgid "Static Init"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:346
#, fuzzy
msgid ""
"If bytecode is recorded with `@Record(STATIC_INIT)` then it will be executed "
"from a static init method on the main class. For a native executable build, "
"this code is executed in a normal JVM as part of the native build process, "
"and any retained objects that are produced in this stage will be directly "
"serialized into the native executable via an image mapped file.  This means "
"that if a framework can boot in this phase then it will have its booted "
"state directly written to the image, and so the boot code does not need to "
"be executed when the image is started."
msgstr ""
"��������������������� `@Record(STATIC_INIT)` "
"��������������������������������������������������������������� init "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������JVM���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:348
#, fuzzy
msgid ""
"There are some restrictions on what can be done in this stage as the "
"Substrate VM disallows some objects in the native executable. For example "
"you should not attempt to listen on a port or start threads in this phase. "
"In addition, it is disallowed to read run time configuration during static "
"initialization."
msgstr ""
"���������������������������������������������������������������������������������������������������VM���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:353
#, fuzzy
msgid ""
"In non-native pure JVM mode, there is no real difference between Static and "
"Runtime Init, except that Static Init is always executed first. This mode "
"benefits from the same build phase augmentation as native mode as the "
"descriptor parsing and annotation scanning are done at build time and any "
"associated class/framework dependencies can be removed from the build output "
"jar. In servers like WildFly, deployment related classes such as XML parsers "
"hang around for the life of the application, using up valuable memory. "
"Quarkus aims to eliminate this, so that the only classes loaded at runtime "
"are actually used at runtime."
msgstr ""
"������������������������������ JVM ������������������������������������ Init "
"������������������ Init "
"��������������������������������������������������������������������� Init "
"���������������������������������������������������������������������������������������������������������������������������������������������������������/"
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������WildFly���������������������������������XML������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:356
#, fuzzy
msgid ""
"As an example, the only reason that a Quarkus application should load an XML "
"parser is if the user is using XML in their application. Any XML parsing of "
"configuration should be done in the Augmentation phase."
msgstr ""
"���������������Quarkus���������������������������XML���������������������������������������������������������������������������������������������XML���������������������������������������������XML������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:357
#, no-wrap, fuzzy
msgid "Runtime Init"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:361
#, fuzzy
msgid ""
"If bytecode is recorded with `@Record(RUNTIME_INIT)` then it is executed "
"from the application's main method. This code will be run on native "
"executable boot. In general as little code as possible should be executed in "
"this phase, and should be restricted to code that needs to open ports etc."
msgstr ""
"��������������������� `@Record(RUNTIME_INIT)` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:363
#, fuzzy
msgid ""
"Pushing as much as possible into the `@Record(STATIC_INIT)` phase allows for "
"two different optimizations:"
msgstr ""
"��������������� `@Record(STATIC_INIT)` "
"���������������������������������������2���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:365
#, fuzzy
msgid ""
"In both native executable and pure JVM mode this allows the app to start as "
"fast as possible since processing was done during build time. This also "
"minimizes the classes/native code needed in the application to pure runtime "
"related behaviors."
msgstr ""
"���������������������������������������JVM������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������/"
"���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:368
#, fuzzy
msgid ""
"Another benefit with native executable mode is that Substrate can more "
"easily eliminate features that are not used. If features are directly "
"initialized via bytecode, Substrate can detect that a method is never called "
"and eliminate that method. If config is read at runtime, Substrate cannot "
"reason about the contents of the config and so needs to keep all features in "
"case they are required."
msgstr ""
"������������������������������������������������������������Substrate "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"config ������������������������������Substrate ��� config "
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:373
#, fuzzy
msgid ""
"Your extension project should be setup as a multi-module project with two "
"submodules:"
msgstr ""
"������������������������������2���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:375
#, fuzzy
msgid ""
"A deployment time submodule that handles the build time processing and "
"bytecode recording."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:377
#, fuzzy
msgid ""
"A runtime submodule that contains the runtime behavior that will provide the "
"extension behavior in the native executable or runtime JVM."
msgstr ""
"���������������������������������������������������������JVM���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:379
#, fuzzy
msgid ""
"You may want to use the `create-extension` mojo of `io.quarkus:quarkus-maven-"
"plugin` to create these Maven modules - see the next section."
msgstr ""
"������������Maven��������������������������������������� `io.quarkus:quarkus-"
"maven-plugin` ��� `create-extension` mojo "
"������������������������������������ - "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:384
#, fuzzy
msgid ""
"Your runtime artifact should depend on `io.quarkus:quarkus-core`, and "
"possibly the runtime artifacts of other Quarkus modules if you want to use "
"functionality provided by them.  You will also need to include the `io."
"quarkus:quarkus-bootstrap-maven-plugin` to generate the Quarkus extension "
"descriptor included into the runtime artifact, if you are using the Quarkus "
"parent pom it will automatically inherit the correct configuration.  "
"Furthermore, you'll need to configure the `maven-compiler-plugin` to detect "
"the `quarkus-extension-processor` annotation processor."
msgstr ""
"��������������������������������������������� `io.quarkus:quarkus-core` "
"������������������������������������������������������Quarkus������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus��������������������������������������� "
"`io.quarkus:quarkus-bootstrap-maven-plugin` "
"������������������������������������������������ `maven-compiler-plugin` "
"��������������� `quarkus-extension-processor` "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:387
#, fuzzy
msgid ""
"By convention the deployment time artifact has the `-deployment` suffix, and "
"the runtime artifact has no suffix (and is what the end user adds to their "
"project)."
msgstr ""
"��������������������������������������������������������������������� `-"
"deployment` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:397
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"      <groupId>io.quarkus</groupId>\n"
"      <artifactId>quarkus-core</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:429
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-bootstrap-maven-plugin</artifactId>\n"
"            <!-- Executions configuration can be inherited from quarkus-"
"build-parent -->\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>extension-descriptor</goal>\n"
"                    </goals>\n"
"                    <configuration>\n"
"                         <deployment>${project.groupId}:${project."
"artifactId}-deployment:${project.version}</deployment>\n"
"                   </configuration>\n"
"               </execution>\n"
"           </executions>\n"
"        </plugin>\n"
"        <plugin>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-compiler-plugin</artifactId>\n"
"            <configuration>\n"
"                <annotationProcessorPaths>\n"
"                    <path>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-extension-processor</artifactId>\n"
"                    </path>\n"
"                </annotationProcessorPaths>\n"
"            </configuration>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:432
#, fuzzy
msgid "The above `maven-compiler-plugin` configuration requires version 3.5+."
msgstr ""
"��������� `maven-compiler-plugin` ��������������������������������� 3.5+ "
"������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:437
#, fuzzy
msgid ""
"Under no circumstances can the runtime module depend on a deployment "
"artifact. This would result in pulling all the deployment time code into "
"runtime scope, which defeats the purpose of having the split."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:442
#, fuzzy
msgid ""
"Your deployment time module should depend on `io.quarkus:quarkus-core-"
"deployment`, your runtime artifact, and possibly the deployment artifacts of "
"other Quarkus modules if you want to use functionality provided by them.  "
"You will also need to configure the `maven-compiler-plugin` to detect the "
"`quarkus-extension-processor` annotation processor."
msgstr ""
"��������������������������������������������������� `io.quarkus:quarkus-core-"
"deployment` "
"������������������������������������������������������������Quarkus���������������������������������������������������������������������Quarkus��������������������������������������������������������������������������������������������������������������� "
"`quarkus-extension-processor` "
"������������������������������������������������������������ `maven-compiler-"
"plugin` ���������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:451
#, no-wrap
msgid ""
"<dependencies>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-core-deployment</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:468
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.apache.maven.plugins</groupId>\n"
"            <artifactId>maven-compiler-plugin</artifactId>\n"
"            <configuration>\n"
"                <annotationProcessorPaths>\n"
"                    <path>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-extension-processor</artifactId>\n"
"                    </path>\n"
"                </annotationProcessorPaths>\n"
"            </configuration>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:470
#, no-wrap, fuzzy
msgid "Create new extension modules using Maven"
msgstr "Maven���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:473
#, fuzzy
msgid ""
"The `create-extension` mojo of `io.quarkus:quarkus-maven-plugin` can be used "
"to generate stubs of Maven modules needed for implementing a new Quarkus "
"extension."
msgstr ""
"`io.quarkus:quarkus-maven-plugin` ��� `create-extension` mojo "
"��������������� Quarkus ��������������������������������� Maven "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:475
#, fuzzy
msgid ""
"This mojo can be currently used only for adding extensions to an established "
"source tree hosting multiple extensions in one subdirectory, such as https://"
"github.com/quarkusio/quarkus[Quarkus] or https://github.com/apache/camel-"
"quarkus[Camel Quarkus]. Creating extension projects from scratch is not "
"supported yet."
msgstr ""
"������������������������������������������ link:https://github.com/quarkusio/"
"quarkus[Quarkus]��� link:https://github.com/apache/camel-quarkus[Camel "
"Quarkus]���������������1���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:477
#, fuzzy
msgid ""
"As and example, let's add a new extension called `my-ext` to the Quarkus "
"source tree:"
msgstr ""
"���������������Quarkus������������������������ `my-ext` "
"���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:487
#, no-wrap
msgid ""
"git clone https://github.com/quarkusio/quarkus.git\n"
"cd quarkus\n"
"cd extensions\n"
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create-extension -N \\\n"
"    -Dquarkus.artifactIdBase=my-ext \\\n"
"    -Dquarkus.artifactIdPrefix=quarkus- \\\n"
"    -Dquarkus.nameBase=\"My Extension\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:490
#, fuzzy
msgid "The above sequence of commands does the following:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:492
#, fuzzy
msgid "Creates four new Maven modules:"
msgstr "4���������������Maven������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:493
#, fuzzy
msgid "`quarkus-my-ext-parent` in the `extensions/my-ext` directory"
msgstr "`extensions/my-ext` ������������������������ `quarkus-my-ext-parent`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:494
#, fuzzy
msgid "`quarkus-my-ext` in the `extensions/my-ext/runtime` directory"
msgstr "`extensions/my-ext/runtime` ������������������������ `quarkus-my-ext`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:495
#, fuzzy
msgid ""
"`quarkus-my-ext-deployment` in the `extensions/my-ext/deployment` directory; "
"a basic `MyExtProcessor` class is generated in this module."
msgstr ""
"`extensions/my-ext/deployment` ��������������������� `quarkus-my-ext-"
"deployment`; ������������ `MyExtProcessor` "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:496
#, fuzzy
msgid ""
"`quarkus-my-ext-integration-test` in the `integration-tests/my-ext/"
"deployment` directory; an empty JAX-RS Resource class and two test classes "
"(for JVM mode and native mode) are generated in this module."
msgstr ""
"`integration-tests/my-ext/deployment` ��������������������� `quarkus-my-ext-"
"integration-test`; ������ JAX-RS Resource ������������ 2 "
"������������������������ (JVM ���������������������������������������) "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:497
#, fuzzy
msgid "Links these three modules where necessary:"
msgstr ""
"���������������������������������3���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:498
#, fuzzy
msgid ""
"`quarkus-my-ext-parent` is added to the `<modules>` of `quarkus-extensions-"
"parent`"
msgstr ""
"`&amp;lt;modules&amp;gt;` ��� `quarkus-my-ext-parent` "
"������������������������ `quarkus-extensions-parent`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:499
#, fuzzy
msgid ""
"`quarkus-my-ext` is added to the `<dependencyManagement>` of the Quarkus BOM "
"(Bill of Materials) `bom/application/pom.xml`"
msgstr ""
"Quarkus���BOM������������������ `&amp;lt;dependencyManagement&amp;gt;` ��� "
"`quarkus-my-ext` ��������������������������� `bom/application/pom.xml`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:500
#, fuzzy
msgid ""
"`quarkus-my-ext-deployment` is added to the `<dependencyManagement>` of the "
"Quarkus BOM (Bill of Materials) `bom/application/pom.xml`"
msgstr ""
"Quarkus���BOM������������������ `&amp;lt;dependencyManagement&amp;gt;` ��� "
"`quarkus-my-ext-deployment` ��������������������������� `bom/application/pom."
"xml`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:501
#, fuzzy
msgid ""
"`quarkus-my-ext-integration-test` is added to the `<modules>` of `quarkus-"
"integration-tests-parent`"
msgstr ""
"`&amp;lt;modules&amp;gt;` ��� `quarkus-my-ext-integration-test` "
"������������������������ `quarkus-integration-tests-parent`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:503
#, fuzzy
msgid ""
"A Maven build performed immediately after generating the modules should fail "
"due to a `fail()` assertion in one of the test classes."
msgstr ""
"������������������������������������������������������ Maven "
"������������������������������������ 1 ������ `fail()` "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:506
#, fuzzy
msgid ""
"There is one step (specific to the Quarkus source tree) that you should do "
"manually when creating a new extension: create a `quarkus-extension.yaml` "
"file that describe your extension inside the runtime module `src/main/"
"resources/META-INF` folder."
msgstr ""
"������������������������������������������ `src/main/resources/META-INF` "
"��������������������������������������������� `quarkus-extension.yaml` "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:508
#, fuzzy
msgid ""
"This is the `quarkus-extension.yaml` of the `quarkus-agroal` extension, you "
"can use it as an example:"
msgstr "`quarkus-agroal` ��������������� `quarkus-extension.yaml` ���������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:522
#, no-wrap
msgid ""
"name: \"Agroal - Database connection pool\"\n"
"metadata:\n"
"  keywords:\n"
"  - \"agroal\"\n"
"  - \"database-connection-pool\"\n"
"  - \"datasource\"\n"
"  - \"jdbc\"\n"
"  guide: \"https://quarkus.io/guides/datasource\"\n"
"  categories:\n"
"  - \"data\"\n"
"  status: \"stable\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:525
#, fuzzy
msgid ""
"Note that the parameters of the mojo that will be constant for all the "
"extensions added to this source tree are configured in `extensions/pom.xml` "
"so that they do not need to be passed on the command line each time a new "
"extension is added:"
msgstr ""
"��������������������������������������������������������������������������������������������� "
"mojo ��������������������� `extensions/pom.xml` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:542
#, no-wrap
msgid ""
"<plugin>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-maven-plugin</artifactId>\n"
"    <version>${quarkus.version}</version>\n"
"    <inherited>false</inherited>\n"
"    <!-- Settings for stubbing new extensions via\n"
"           ./mvnw quarkus:create-extension -N -Dquarkus.artifactIdBase=my-"
"ext -Dquarkus.nameBase=\"My Extension\"\n"
"    -->\n"
"    <configuration>\n"
"        <namePrefix xml:space=\"preserve\">Quarkus - </namePrefix>\n"
"        <bomPath>../bom/application/pom.xml</bomPath>\n"
"        <itestParentPath>../integration-tests/pom.xml</itestParentPath>\n"
"    </configuration>\n"
"</plugin>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:547
#, fuzzy
msgid ""
"The `nameBase` parameter of the mojo is optional.  If you do not specify it "
"on the command line, the plugin will derive it from `artifactIdBase` by "
"replacing dashes with spaces and uppercasing each token.  So you may "
"consider omitting explicit `nameBase` in some cases."
msgstr ""
"mojo ��� `nameBase` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`artifactIdBase` "
"������������������������������������������������������������������������������������ "
"`nameBase` ������������������������������������������������������������"

#.  The following link should point to the mojo page once https://github.com/quarkusio/quarkusio.github.io/issues/265 is fixed
#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:550
#, fuzzy
msgid ""
"Please refer to https://github.com/quarkusio/quarkus/blob/{quarkus-version}/"
"devtools/maven/src/main/java/io/quarkus/maven/CreateExtensionMojo."
"java[CreateExtensionMojo JavaDoc] for all the available options of the mojo."
msgstr ""
"������������������������������������������������������������������������ "
"link:https://github.com/quarkusio/quarkus/blob/{quarkus-version}/devtools/"
"maven/src/main/java/io/quarkus/maven/CreateExtensionMojo."
"java[CreateExtensionMojo JavaDoc]������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:551
#, no-wrap, fuzzy
msgid "Build Step Processors"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:556
#, fuzzy
msgid ""
"Work is done at augmentation time by _build steps_ which produce and consume "
"_build items_.  The build steps found in the deployment modules that "
"correspond to the extensions in the project build are automatically wired "
"together and executed to produce the final build artifact(s)."
msgstr ""
"������������ _������������������������_������������������������ "
"_���������������������_������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:557
#, no-wrap, fuzzy
msgid "Build steps"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:563
#, fuzzy
msgid ""
"A _build step_ is a method which is annotated with the `@io.quarkus."
"deployment.annotations.BuildStep` annotation.  Each build step may "
"<<consuming-values,consume>> items that are produced by earlier stages, and "
"<<producing-values,produce>> items that can be consumed by later stages. "
"Build steps are normally only run when they produce a build item that is "
"ultimately consumed by another step."
msgstr ""
"_���������������������_��������� `@io.quarkus.deployment.annotations."
"BuildStep` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"link:#consuming-"
"values[���������]������������������������������������������������������������ "
"link:#producing-"
"values[���������]���������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:566
#, fuzzy
msgid ""
"Build steps are normally placed on plain classes within an extension's "
"deployment module.  The classes are automatically instantiated during the "
"augment process and utilize <<injection,injection>>."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"link:#injection[���������������������������]������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:568
#, no-wrap, fuzzy
msgid "Build items"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:574
#, fuzzy
msgid ""
"Build items are concrete, final subclasses of the abstract `io.quarkus."
"builder.item.BuildItem` class.  Each build item represents some unit of "
"information that must be passed from one stage to another.  The base "
"`BuildItem` class may not itself be directly subclassed; rather, there are "
"abstract subclasses for each of the kinds of build item subclasses that "
"_may_ be created: <<simple-build-items,simple>>, <<multi-build-"
"items,multi>>, and <<empty-build-items,empty>>."
msgstr ""
"��������������������������� `io.quarkus.builder.item.BuildItem` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`BuildItem` "
"��������������������������������������������������������������������������������������������� "
"_������������������_������������������������������������������������������ "
"link:#simple-build-items[������]��� link:#multi-build-items[������]��� link:"
"#empty-build-"
"items[���]������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:576
#, fuzzy
msgid ""
"Think of build items as a way for different extensions to communicate with "
"one another.  For example, a build item can:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:578
#, fuzzy
msgid "expose the fact that a database configuration exists"
msgstr "���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:579
#, fuzzy
msgid ""
"consume that database configuration (e.g. a connection pool extension or an "
"ORM extension)"
msgstr ""
"��������������������������������������� "
"(������������������������ORM������������)"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:581
#, fuzzy
msgid ""
"ask an extension to do work for another extension: e.g. an extension wanting "
"to define a new CDI bean and asking the ArC extension to do so"
msgstr ""
"������������������������������������������: ��������������������� CDI Bean "
"��������������������������������� ArC "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:583
#, fuzzy
msgid "This is a very flexible mechanism."
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:586
#, fuzzy
msgid ""
"`BuildItem` instances should be immutable, as the producer/consumer model "
"does not allow for mutation to be correctly ordered. This is not enforced "
"but failure to adhere to this rule can result in race conditions."
msgstr ""
"`BuildItem` "
"���������������������������������������������������������������������������������/"
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:588
#, no-wrap, fuzzy
msgid "Simple build items"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:594
#, fuzzy
msgid ""
"Simple build items are final classes which extend `io.quarkus.builder.item."
"SimpleBuildItem`.  Simple build items may only be produced by one step in a "
"given build; if multiple steps in a build declare that they produce the same "
"simple build item, an error is raised.  Any number of build steps may "
"consume a simple build item.  A build step which consumes a simple build "
"item will always run _after_ the build step which produced that item."
msgstr ""
"������������������������������ `io.quarkus.builder.item.SimpleBuildItem` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"_���_������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:595
#, no-wrap, fuzzy
msgid "Example of a single build item"
msgstr "������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:604
#, no-wrap
msgid ""
"/**\n"
" * The build item which represents the Jandex index of the application,\n"
" * and would normally be used by many build steps to find usages\n"
" * of annotations.\n"
" */\n"
"public final class ApplicationIndexBuildItem extends SimpleBuildItem {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:606
#, no-wrap
msgid "    private final Index index;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:610
#, no-wrap
msgid ""
"    public ApplicationIndexBuildItem(Index index) {\n"
"        this.index = index;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:615
#, no-wrap
msgid "    public Index getIndex() {\n"
"        return index;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:619
#, no-wrap, fuzzy
msgid "Multi build items"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:624
#, fuzzy
msgid ""
"Multiple or \"multi\" build items are final classes which extend `io.quarkus."
"builder.item.MultiBuildItem`.  Any number of multi build items of a given "
"class may be produced by any number of steps, but any steps which consume "
"multi build items will only run _after_ every step which can produce them "
"has run."
msgstr ""
"��������������������������������������������������������������������������������� "
"`io.quarkus.builder.item.MultiBuildItem`."
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"_������_���������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:625
#, no-wrap, fuzzy
msgid "Example of a multiple build item"
msgstr "������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:631
#, no-wrap
msgid ""
"public final class ServiceWriterBuildItem extends MultiBuildItem {\n"
"    private final String serviceName;\n"
"    private final List<String> implementations;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:641
#, no-wrap
msgid ""
"    public ServiceWriterBuildItem(String serviceName, String... "
"implementations) {\n"
"        this.serviceName = serviceName;\n"
"        // Make sure it's immutable\n"
"        this.implementations = Collections.unmodifiableList(\n"
"            Arrays.asList(\n"
"                implementations.clone()\n"
"            )\n"
"        );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:645
#, no-wrap
msgid ""
"    public String getServiceName() {\n"
"        return serviceName;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:650
#, no-wrap
msgid ""
"    public List<String> getImplementations() {\n"
"        return implementations;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:652
#, no-wrap, fuzzy
msgid "Example of multiple build item usage"
msgstr "������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:667
#, no-wrap
msgid ""
"/**\n"
" * This build step produces a single multi build item that declares two\n"
" * providers of one configuration-related service.\n"
" */\n"
"@BuildStep\n"
"public ServiceWriterBuildItem registerOneService() {\n"
"    return new ServiceWriterBuildItem(\n"
"        Converter.class.getName(),\n"
"        MyFirstConfigConverterImpl.class.getName(),\n"
"        MySecondConfigConverterImpl.class.getName()\n"
"    );\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:686
#, no-wrap
msgid ""
"/**\n"
" * This build step produces several multi build items that declare multiple\n"
" * providers of multiple configuration-related services.\n"
" */\n"
"@BuildStep\n"
"public void registerSeveralServices(\n"
"    BuildProducer<ServiceWriterBuildItem> providerProducer\n"
") {\n"
"    providerProducer.produce(new ServiceWriterBuildItem(\n"
"        Converter.class.getName(),\n"
"        MyThirdConfigConverterImpl.class.getName(),\n"
"        MyFourthConfigConverterImpl.class.getName()\n"
"    ));\n"
"    providerProducer.produce(new ServiceWriterBuildItem(\n"
"        ConfigSource.class.getName(),\n"
"        MyConfigSourceImpl.class.getName()\n"
"    ));\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:697
#, no-wrap
msgid ""
"/**\n"
" * This build step aggregates all the produced service providers\n"
" * and outputs them as resources.\n"
" */\n"
"@BuildStep\n"
"public void produceServiceFiles(\n"
"    List<ServiceWriterBuildItem> items,\n"
"    BuildProducer<GeneratedResourceBuildItem> resourceProducer\n"
") throws IOException {\n"
"    // Aggregate all of the providers\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:708
#, no-wrap
msgid ""
"    Map<String, Set<String>> map = new HashMap<>();\n"
"    for (ServiceWriterBuildItem item : items) {\n"
"        String serviceName = item.getName();\n"
"        for (String implName : item.getImplementations()) {\n"
"            map.computeIfAbsent(\n"
"                serviceName,\n"
"                (k, v) -> new LinkedHashSet<>()\n"
"            ).add(implName);\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:729
#, no-wrap
msgid ""
"    // Now produce the resource(s) for the SPI files\n"
"    for (Map.Entry<String, Set<String>> entry : map.entrySet()) {\n"
"        String serviceName = entry.getKey();\n"
"        try (ByteArrayOutputStream os = new ByteArrayOutputStream()) {\n"
"            try (OutputStreamWriter w = new OutputStreamWriter(os, "
"StandardCharsets.UTF_8)) {\n"
"                for (String implName : entry.getValue()) {\n"
"                    w.write(implName);\n"
"                    w.write(System.lineSeparator());\n"
"                }\n"
"            }\n"
"            w.flush();\n"
"            resourceProducer.produce(\n"
"                new GeneratedResourceBuildItem(\n"
"                    \"META-INF/services/\" + serviceName,\n"
"                    os.toByteArray()\n"
"                )\n"
"            );\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:732
#, no-wrap, fuzzy
msgid "Empty build items"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:737
#, fuzzy
msgid ""
"Empty build items are final (usually empty) classes which extend `io.quarkus."
"builder.item.EmptyBuildItem`.  They represent build items that don't "
"actually carry any data, and allow such items to be produced and consumed "
"without having to instantiate empty classes.  They cannot themselves be "
"instantiated."
msgstr ""
"������������������������ `io.quarkus.builder.item.EmptyBuildItem` "
"��������������������������� (���������������) "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:738
#, no-wrap, fuzzy
msgid "Example of an empty build item"
msgstr "���������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:744
#, no-wrap
msgid ""
"public final class NativeImageBuildItem extends EmptyBuildItem {\n"
"    // empty\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:749
#, fuzzy
msgid ""
"Empty build items can represent \"barriers\" which can impose ordering "
"between steps.  They can also be used in the same way that popular build "
"systems use \"pseudo-targets\", which is to say that the build item can "
"represent a conceptual goal that does not have a concrete representation."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:750
#, no-wrap, fuzzy
msgid "Example of usage of an empty build item in a \"pseudo-target\" style"
msgstr ""
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:765
#, no-wrap
msgid ""
"/**\n"
" * Contrived build step that produces the native image on disk.  The main "
"augmentation\n"
" * step (which is run by Maven or Gradle) would be declared to consume this "
"empty item,\n"
" * causing this step to be run.\n"
" */\n"
"@BuildStep\n"
"@Produce(NativeImageBuildItem.class)\n"
"void produceNativeImage() {\n"
"    // ...\n"
"    // (produce the native image)\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:767
#, no-wrap, fuzzy
msgid "Example of usage of an empty build item in a \"barrier\" style"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:779
#, no-wrap
msgid ""
"/**\n"
" * This would always run after {@link #produceNativeImage()} completes, "
"producing\n"
" * an instance of {@code SomeOtherBuildItem}.\n"
" */\n"
"@BuildStep\n"
"@Consume(NativeImageBuildItem.class)\n"
"SomeOtherBuildItem secondBuildStep() {\n"
"    return new SomeOtherBuildItem(\"foobar\");\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:782
#, no-wrap, fuzzy
msgid "Injection"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:785
#, fuzzy
msgid ""
"Classes which contain build steps support the following types of injection:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:787
#, fuzzy
msgid "Constructor parameter injection"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:788
#, fuzzy
msgid "Field injection"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:789
#, fuzzy
msgid "Method parameter injection (for build step methods only)"
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:792
#, fuzzy
msgid ""
"Build step classes are instantiated and injected for each build step "
"invocation, and are discarded afterwards.  State should only be communicated "
"between build steps by way of build items, even if the steps are on the same "
"class."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:795
#, fuzzy
msgid ""
"Final fields are not considered for injection, but can be populated by way "
"of constructor parameter injection if desired.  Static fields are never "
"considered for injection."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:797
#, fuzzy
msgid "The types of values that can be injected include:"
msgstr ""
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:799
#, fuzzy
msgid "<<build-items,Build items>> produced by previous build steps"
msgstr ""
"��������������������������������������������� link:#build-"
"items[������������������������������]"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:800
#, fuzzy
msgid ""
"<<producing-values,Build producers>> to produce items for subsequent build "
"steps"
msgstr ""
"������������������������������������������������������������������������������ "
"link:#producing-values[������������������������������]"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:801
#, fuzzy
msgid "<<configuration-roots,Configuration root>> types"
msgstr "link:#configuration-roots[������������������]������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:802
#, fuzzy
msgid "Template objects for <<bytecode-recording,bytecode recording>>"
msgstr ""
"link:#bytecode-"
"recording[������������������������]���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:805
#, fuzzy
msgid ""
"Objects which are injected into a build step method or its class _must not_ "
"be used outside of that method's execution."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"_������_������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:808
#, fuzzy
msgid ""
"Injection is resolved at compile time via an annotation processor, and the "
"resulting code does not have permission to inject private fields or invoke "
"private methods."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:810
#, no-wrap, fuzzy
msgid "Producing values"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:813
#, fuzzy
msgid ""
"A build step may produce values for subsequent steps in several possible "
"ways:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:815
#, fuzzy
msgid ""
"By returning a <<simple-build-items,simple build item>> or <<multi-build-"
"items,multi build item>> instance"
msgstr ""
"link:#simple-build-items[������������������������������������]��������� link:"
"#multi-build-"
"items[���������������������������������]������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:816
#, fuzzy
msgid "By returning a `List` of a multi build item class"
msgstr "������������������������������������������ `List` ������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:817
#, fuzzy
msgid "By injecting a `BuildProducer` of a simple or multi build item class"
msgstr ""
"��������������������������������������������������������������� "
"`BuildProducer` ������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:819
#, fuzzy
msgid ""
"By annotating the method with `@io.quarkus.deployment.annotations.Produce`, "
"giving the class name of a <<empty-build-items,empty build item>>"
msgstr ""
"��������������� `@io.quarkus.deployment.annotations.Produce` "
"������������������������������������������ link:#empty-build-"
"items[������������������������]������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:822
#, fuzzy
msgid ""
"If a simple build item is declared on a build step, it _must_ be produced "
"during that build step, otherwise an error will result.  Build producers "
"which are injected into steps _must not_ be used outside of that step."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������� "
"_���������������_��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"_���������������_���"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:828
#, fuzzy
msgid ""
"Note that a `@BuildStep` method will only be called if it produces something "
"that another consumer or the final output requires. If there is no consumer "
"for a particular item then it will not be produced. What is required will "
"depend on the final target that is being produced.  For example, when "
"running in developer mode the final output will not ask for GraalVM-specific "
"build items such as `ReflectiveClassBuildItem`, so methods that only produce "
"these items will not be invoked."
msgstr ""
"`@BuildStep` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`ReflectiveClassBuildItem` ������������ GraalVM "
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:830
#, no-wrap, fuzzy
msgid "Consuming values"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:833
#, fuzzy
msgid ""
"A build step may consume values from previous steps in the following ways:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:835
#, fuzzy
msgid "By injecting a <<simple-build-items,simple build item>>"
msgstr ""
"link:#simple-build-"
"items[���������������������������������]���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:836
#, fuzzy
msgid "By injecting an `Optional` of a simple build item class"
msgstr ""
"������������������������������������������ `Optional` "
"������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:837
#, fuzzy
msgid ""
"By injecting a `List` of a <<multi-build-items,multi build item>> class"
msgstr ""
"link:#multi-build-items[���������������������������������������]��� `List` "
"������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:839
#, fuzzy
msgid ""
"By annotating the method with `@io.quarkus.deployment.annotations.Consume`, "
"giving the class name of a <<empty-build-items,empty build item>>"
msgstr ""
"��������������� `@io.quarkus.deployment.annotations.Consume` "
"������������������������������������������ link:#empty-build-"
"items[������������������������]������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:842
#, fuzzy
msgid ""
"Normally it is an error for a step which is included to consume a simple "
"build item that is not produced by any other step.  In this way, it is "
"guaranteed that all of the declared values will be present and non-`null` "
"when a step is run."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`null` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:845
#, fuzzy
msgid ""
"Sometimes a value isn't necessary for the build to complete, but might "
"inform some behavior of the build step if it is present.  In this case, the "
"value can be optionally injected."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:847
#, fuzzy
msgid ""
"Multi build values are always considered _optional_.  If not present, an "
"empty list will be injected."
msgstr ""
"������������������������������ "
"_���������������_������������������������������������������������������������������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:849
#, no-wrap, fuzzy
msgid "Weak value production"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:854
#, fuzzy
msgid ""
"Normally a build step is included whenever it produces any build item which "
"is in turn consumed by any other build step.  In this way, only the steps "
"necessary to produce the final artifact(s) are included, and steps which "
"pertain to extensions which are not installed or which only produce build "
"items which are not relevant for the given artifact type are excluded."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:857
#, fuzzy
msgid ""
"For cases where this is not desired behavior, the `@io.quarkus.deployment."
"annotations.Weak` annotation may be used.  This annotation indicates that "
"the build step should not automatically be included solely on the basis of "
"producing the annotated value."
msgstr ""
"��������������������������������������������������� `@io.quarkus.deployment."
"annotations.Weak` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:858
#, no-wrap, fuzzy
msgid "Example of producing a build item weakly"
msgstr "���������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:874
#, no-wrap
msgid ""
"/**\n"
" * This build step is only run if something consumes the "
"ExecutorClassBuildItem.\n"
" */\n"
"@BuildStep\n"
"void createExecutor(\n"
"        @Weak BuildProducer<GeneratedClassBuildItem> classConsumer,\n"
"        BuildProducer<ExecutorClassBuildItem> executorClassConsumer\n"
") {\n"
"        ClassWriter cw = new ClassWriter(Gizmo.ASM_API_VERSION);\n"
"        String className = generateClassThatCreatesExecutor(cw); // <1>\n"
"        classConsumer.produce(new GeneratedClassBuildItem(true, className, "
"cw.toByteArray()));\n"
"        executorClassConsumer.produce(new "
"ExecutorClassBuildItem(className));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:876
#, fuzzy
msgid ""
"This method (not provided in this example) would generate the class using "
"the ASM API."
msgstr ""
"������������������������������������������������������������������������ASM "
"API���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:883
#, fuzzy
msgid ""
"Certain types of build items are generally always consumed, such as "
"generated classes or resources.  An extension might produce a build item "
"along with a generated class to facilitate the usage of that build item.  "
"Such a build step would use the `@Weak` annotation on the generated class "
"build item, while normally producing the other build item.  If the other "
"build item is ultimately consumed by something, then the step would run and "
"the class would be generated.  If nothing consumes the other build item, the "
"step would not be included in the build process."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@Weak` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:886
#, fuzzy
msgid ""
"In the example above, `GeneratedClassBuildItem` would only be produced if "
"`ExecutorClassBuildItem` is consumed by some other build step."
msgstr ""
"��������������������� `GeneratedClassBuildItem` ������ "
"`ExecutorClassBuildItem` "
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:889
#, fuzzy
msgid ""
"Note that when using <<bytecode-recording,bytecode recording>>, the "
"implicitly generated class can be declared to be weak by using the "
"`optional` attribute of the `@io.quarkus.deployment.annotations.Record` "
"annotation."
msgstr ""
"link:#bytecode-recording[���������������������������]��������������������� "
"`@io.quarkus.deployment.annotations.Record` ������������������������ "
"`optional` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:890
#, no-wrap, fuzzy
msgid ""
"Example of using a bytecode recorder where the generated class is weakly "
"produced"
msgstr ""
"���������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:902
#, no-wrap
msgid ""
"/**\n"
" * This build step is only run if something consumes the ExecutorBuildItem.\n"
" */\n"
"@BuildStep\n"
"@Record(value = ExecutionTime.RUNTIME_INIT, optional = true) // <1>\n"
"ExecutorBuildItem createExecutor( // <2>\n"
"        ExecutorTemplate executorTemplate,\n"
"        ThreadPoolConfig threadPoolConfig\n"
") {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:911
#, no-wrap
msgid ""
"    return new ExecutorBuildItem(\n"
"        setupTemplate.setupRunTime(\n"
"            shutdownContextBuildItem,\n"
"            threadPoolConfig,\n"
"            launchModeBuildItem.getLaunchMode()\n"
"        )\n"
"    );\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:913
#, fuzzy
msgid "Note the `optional` attribute."
msgstr "`optional` ������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:914
#, fuzzy
msgid ""
"This example is using recorder proxies; see the section on <<bytecode-"
"recording,bytecode recording>> for more information."
msgstr ""
"��������������������������������������������������������������������������������������������������� "
"link:#bytecode-"
"recording[���������������������������]���������������������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:915
#: upstream/_guides/writing-extensions.adoc:2148
#, no-wrap, fuzzy
msgid "Capabilities"
msgstr "������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:921
#, fuzzy
msgid ""
"The `@BuildStep` annotation has a `providesCapabilities` property that can "
"be used to provide capability information to other extensions about what is "
"present in the current application. Capabilities are simply strings that are "
"used to describe an extension. Capabilities should generally be named after "
"an extensions root package, for example the transactions extension will "
"provide `io.quarkus.transactions`."
msgstr ""
"`@BuildStep` ��������������������������� `providesCapabilities` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`io.quarkus."
"transactions`���������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:924
#, fuzzy
msgid ""
"To check if a capability is present you can inject the `io.quarkus."
"deployment.Capabilities` object and call `isCapabilityPresent`."
msgstr ""
"������������������������������������������������������������������������ `io."
"quarkus.deployment.Capabilities` ��������������������������������� "
"`isCapabilityPresent` ���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:926
#, fuzzy
msgid ""
"Capabilities should be used when checking for the presence of an extension "
"rather than class path based checks."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:927
#, no-wrap, fuzzy
msgid "Application Archives"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:933
#, fuzzy
msgid ""
"The `@BuildStep` annotation can also register marker files that determine "
"which archives on the class path are considered to be 'Application "
"Archives', and will therefore get indexed. This is done via the "
"`applicationArchiveMarkers`. For example the ArC extension registers `META-"
"INF/beans.xml`, which means that all archives on the class path with a "
"`beans.xml` file will be indexed."
msgstr ""
"`@BuildStep` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`applicationArchiveMarkers` ��������������������������������� ��� ������ ArC "
"��������� `META-INF/beans.xml` "
"������������������������������������������������������ `beans.xml` "
"��������������������������������������������������������������� "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:935
#, fuzzy
msgid ""
"`BuildStep.applicationArchiveMarkers()` is deprecated and will be removed at "
"some point post Quarkus 1.1. Extensions are encouraged to use `io.quarkus."
"deployment.builditem.AdditionalApplicationArchiveMarkerBuildItem` instead."
msgstr ""
"`BuildStep.applicationArchiveMarkers()` ������������������Quarkus 1."
"1������������������������������������������������������������������������������������ "
"`io.quarkus.deployment.builditem."
"AdditionalApplicationArchiveMarkerBuildItem` "
"���������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:936
#, no-wrap, fuzzy
msgid "Using Thread's Context Class Loader"
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:942
#, fuzzy
msgid ""
"The build step will be run with a TCCL that can load user classes from the "
"deployment in a transformer-safe way.  This class loader only lasts for the "
"life of the augmentation, and is discarded afterwards.  The classes will be "
"loaded again in a different class loader at runtime.  This means that "
"loading a class during augmentation does not stop it from being transformed "
"when running in the development/test mode."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������TCCL������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������/"
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:943
#, no-wrap, fuzzy
msgid "Adding external JARs to the indexer with IndexDependencyBuildItem"
msgstr "IndexDependencyBuildItem���������JAR���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:947
#, fuzzy
msgid ""
"The index of scanned classes will not automatically include your external "
"class dependencies.  To add dependencies, create a `@BuildStep` that "
"produces `IndexDependencyBuildItem` objects, for a `groupId` and "
"`artifactId`."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`groupId` ��� `artifactId` ������������ `IndexDependencyBuildItem` "
"��������������������������������� `@BuildStep` ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:949
#, fuzzy
msgid ""
"It is important to specify all the required artifacts to be added to the "
"indexer. No artifacts are implicitly added transitively."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:951
#, fuzzy
msgid ""
"The `Amazon Alexa` extension adds dependent libraries from the Alexa SDK "
"that are used in Jackson JSON transformations, in order for the reflective "
"classes to identified and included at `BUILD_TIME`."
msgstr ""
"`Amazon Alexa` ������������������Jackson JSON ������������������������ Alexa "
"SDK "
"��������������������������������������������������������������������������� "
"`BUILD_TIME`."

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:965
#, no-wrap
msgid ""
"   @BuildStep\n"
"    void addDependencies(BuildProducer<IndexDependencyBuildItem> "
"indexDependency) {\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk\"));\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk-runtime\"));\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk-model\"));\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk-lambda-support\"));\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk-servlet-support\"));\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk-dynamodb-persistence-adapter\"));\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk-apache-client\"));\n"
"        indexDependency.produce(new IndexDependencyBuildItem(\"com.amazon."
"alexa\", \"ask-sdk-model-runtime\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:968
#, fuzzy
msgid ""
"With the artifacts added to the `Jandex` indexer, you can now search the "
"index to identify classes implementing an interface, sub-classes of a "
"specific class, or classes with a target annotation."
msgstr ""
"`Jandex` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:971
#, fuzzy
msgid ""
"For example, the `Jackson` extension uses code like below to search for "
"annotations used in JSON deserialization, and add them to the reflective "
"hierarchy for `BUILD_TIME` analysis."
msgstr ""
"������������ `Jackson` "
"������������������������������������������������������������������JSON "
"��������������������������������������������������������������������������������������� "
"`BUILD_TIME` ������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:976
#, no-wrap
msgid ""
"    DotName JSON_DESERIALIZE = DotName.createSimple(JsonDeserialize.class."
"getName());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:978
#, no-wrap
msgid "    IndexView index = combinedIndexBuildItem.getIndex();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:987
#, no-wrap
msgid ""
"    // handle the various @JsonDeserialize cases\n"
"    for (AnnotationInstance deserializeInstance : index."
"getAnnotations(JSON_DESERIALIZE)) {\n"
"        AnnotationTarget annotationTarget = deserializeInstance.target();\n"
"        if (CLASS.equals(annotationTarget.kind())) {\n"
"            DotName dotName = annotationTarget.asClass().name();\n"
"            Type jandexType = Type.create(dotName, Type.Kind.CLASS);\n"
"            reflectiveHierarchyClass.produce(new "
"ReflectiveHierarchyBuildItem(jandexType));\n"
"        }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:997
#, fuzzy
msgid ""
"Configuration in Quarkus is based on SmallRye Config, an implementation of "
"the MicroProfile Config specification.  All of the standard features of MP-"
"Config are supported; in addition, there are several extensions which are "
"made available by the SmallRye Config project as well as by Quarkus itself."
msgstr ""
"Quarkus������������������MicroProfile Config������������������������SmallRye "
"Config���������������������������MP-"
"Config������������������������������������������������������������������������SmallRye "
"Config���������������������Quarkus������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:999
#, fuzzy
msgid ""
"The value of these properties is configured in a `application.properties` "
"file that follows the MicroProfile config format."
msgstr ""
"���������������������������������������MicroProfile ������������������������ "
"`application.properties` ���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1001
#, fuzzy
msgid ""
"Configuration of Quarkus extensions is injection-based, using annotations."
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1002
#, no-wrap, fuzzy
msgid "Configuration Keys"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1005
#, fuzzy
msgid ""
"Leaf configuration keys are mapped to non-`private` fields via the `@io."
"quarkus.runtime.annotations.ConfigItem` annotation."
msgstr ""
"��������������������������� `@io.quarkus.runtime.annotations.ConfigItem` "
"��������������������������������� `private` "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1008
#, fuzzy
msgid ""
"Though the SmallRye Config project is used for implementation, the standard "
"`@ConfigProperty` annotation does not have the same semantics that are "
"needed to support configuration within extensions."
msgstr ""
"������������ SmallRye Config "
"������������������������������������������������������������ "
"`@ConfigProperty` "
"���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1011
#, fuzzy
msgid ""
"Configuration keys are normally derived from the field names that they are "
"tied to.  This is done by de-camel-casing the name and then joining the "
"segments with hyphens (`-`).  Some examples:"
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"( `-`)���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1013
#, fuzzy
msgid "`bindAddress` becomes `bind-address`"
msgstr "`bindAddress` ������������������ `bind-address`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1014
#, fuzzy
msgid "`keepAliveTime` becomes `keep-alive-time`"
msgstr "`keepAliveTime` ������������������ `keep-alive-time`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1015
#, fuzzy
msgid "`requestDNSTimeout` becomes `request-dns-timeout`"
msgstr "`requestDNSTimeout` ������������������ `request-dns-timeout`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1017
#, fuzzy
msgid ""
"The name can also be explicitly specified by giving a `name` attribute to "
"the `@ConfigItem` annotation."
msgstr ""
"`@ConfigItem` ������������������������ `name` "
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1020
#, fuzzy
msgid ""
"Though it is possible to override the configuration key name using the "
"`name` attribute of `@ConfigItem`, normally this should only be done in "
"cases where (for example) the configuration key name is the same as a Java "
"keyword."
msgstr ""
"`@ConfigItem` ��� `name` "
"��������������������������������������������������������������������������������������� "
"(������������) ������������������ Java "
"������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1021
#, no-wrap, fuzzy
msgid "Configuration Value types"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1025
#, fuzzy
msgid ""
"The type of the field with the `@ConfigItem` annotation determines the "
"conversion that is applied to it.  Quarkus extensions may use the full range "
"of configuration types made available by SmallRye Config, which includes:"
msgstr ""
"`@ConfigItem` "
"������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������SmallRye "
"Config������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1027
#, fuzzy
msgid "All primitive types and primitive wrapper types"
msgstr "���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1028
#, fuzzy
msgid "`String`"
msgstr "`String`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1029
#, fuzzy
msgid ""
"Any type which has a constructor accepting a single argument of type "
"`String` or `CharSequence`"
msgstr ""
"������������������������ `String` "
"������������������������������������������������������ `CharSequence`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1030
#, fuzzy
msgid ""
"Any type which has a static method named `of` which accepts a single "
"argument of type `String`"
msgstr ""
"`of` "
"��������������������������������������������������������������������������������������������� "
"`String`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1031
#, fuzzy
msgid ""
"Any type which has a static method named `valueOf` or `parse` which accepts "
"a single argument of type `CharSequence` or `String`"
msgstr ""
"`valueOf` ��������� `parse` ������������������������������������������������ "
"`CharSequence` ��������� ��������������������������������������������� "
"`String`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1032
#, fuzzy
msgid "`java.time.Duration`"
msgstr "`java.time.Duration`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1033
#, fuzzy
msgid "`java.util.regex.Pattern`"
msgstr "`java.util.regex.Pattern`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1034
#, fuzzy
msgid "`java.nio.file.Path`"
msgstr "`java.nio.file.Path`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1035
#, fuzzy
msgid "`io.quarkus.runtime.configuration.MemorySize` to represent data sizes"
msgstr ""
"`io.quarkus.runtime.configuration.MemorySize` "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1036
#, fuzzy
msgid ""
"`java.net.InetSocketAddress`, `java.net.InetAddress` and `org.wildfly.common."
"net.CidrAddress`"
msgstr ""
"`java.net.InetSocketAddress`, `java.net.InetAddress` `org.wildfly.common.net."
"CidrAddress`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1037
#, fuzzy
msgid "A `List` or `Optional` of any of the above types"
msgstr "������������������������������������ `List` ��������� `Optional`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1038
#, fuzzy
msgid "`OptionalInt`, `OptionalLong`, `OptionalDouble`"
msgstr "`OptionalInt`, `OptionalLong`. `OptionalDouble`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1041
#, fuzzy
msgid ""
"In addition, custom converters may be registered by adding their fully "
"qualified class name in file `META-INF/services/org.eclipse.microprofile."
"config.spi.Converter`."
msgstr ""
"��������������������������������������������������������� `META-INF/services/"
"org.eclipse.microprofile.config.spi.Converter` "
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1043
#, fuzzy
msgid ""
"Though these implicit converters use reflection, Quarkus will automatically "
"ensure that they are loaded at the appropriate time."
msgstr ""
"���������������������������������������������������������������������Quarkus���������������������������������������������������������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:1044
#, no-wrap, fuzzy
msgid "Optional Values"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1050
#, fuzzy
msgid ""
"If the configuration type is one of the optional types, then empty values "
"are allowed for the configuration key; otherwise, specification of an empty "
"value will result in a configuration error which prevents the application "
"from starting.  This is especially relevant to configuration properties of "
"inherently emptiable values such as `List`, `Set`, and `String`.  Such value "
"types will never be empty; in the event of an empty value, an empty "
"`Optional` is always used."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`List` ��� `Set` ��� `String` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`Optional` ���������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1051
#, no-wrap, fuzzy
msgid "Configuration Default Values"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1055
#, fuzzy
msgid ""
"A configuration item can be marked to have a default value.  The default "
"value is used when no matching configuration key is specified in the "
"configuration."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1058
#, fuzzy
msgid ""
"Configuration items with a primitive type (such as `int` or `boolean`) "
"implicitly use a default value of `0` or `false`.  The sole exception to "
"this rule is the `char` type which does not have an implicit default value."
msgstr ""
"������������������������ `int` ��� `boolean` "
"������������������������������������������������������ `0` ��� `false` "
"��������������������������������������������������������������������������������������������������������������������������� "
"`char` ������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1062
#, fuzzy
msgid ""
"A property with a default value is not implicitly optional.  If a non-"
"optional configuration item with a default value is explicitly specified to "
"have an empty value, the application will report a configuration error and "
"will not start.  If it is desired for a property to have a default value and "
"also be optional, it must have an `Optional` type as described above."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`Optional` ������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1063
#, no-wrap, fuzzy
msgid "Configuration Groups"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1067
#, fuzzy
msgid ""
"Configuration values are always collected into grouping classes which are "
"marked with the `@io.quarkus.runtime.annotations.ConfigGroup` annotation.  "
"These classes contain a field for each key within its group.  In addition, "
"configuration groups can be nested."
msgstr ""
"������������������ `@io.quarkus.runtime.annotations.ConfigGroup` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:1068
#, no-wrap, fuzzy
msgid "Optional Configuration Groups"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1074
#, fuzzy
msgid ""
"A nested configuration group may be wrapped with an `Optional` type.  In "
"this case, the group is not populated unless one or more properties within "
"that group are specified in the configuration.  If the group is populated, "
"then any required properties in the group must also be specified otherwise a "
"configuration error will be reported and the application will not start."
msgstr ""
"������������������������������������������������ `Optional` "
"���������������������������������������������������������������������������������������1������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1075
#, no-wrap, fuzzy
msgid "Configuration Maps"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1080
#, fuzzy
msgid ""
"A `Map` can be used for configuration at any position where a configuration "
"group would be allowed.  The key type of such a map *must* be `String`, and "
"its value may be either a configuration group class or a valid leaf type.  "
"The configuration key segment following the map's key segment will be used "
"as the key for map values."
msgstr ""
"`Map` "
"��������������������������������������������������������������������������������������������������������������������������������� "
"������������ `String` ��������� "
"*���������������*��������������������������������� "
"������������������������������������ ��������������������������������� "
"*������*������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1082
#, no-wrap, fuzzy
msgid "Configuration Roots"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1088
#, fuzzy
msgid ""
"Configuration roots are configuration groups that appear in the root of the "
"configuration tree.  A configuration property's full name is determined by "
"joining the string `quarkus.` with the hyphenated name of the fields that "
"form the path from the root to the leaf field.  For example, if I define a "
"configuration root group called `ThreadPool`, with a nested group in a field "
"named `sizing` that in turn contains a field called `minSize`, the final "
"configuration property will be called `quarkus.thread-pool.sizing.min-size`."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������� "
"`quarkus.` ������������������������������ "
"��������������������������������������������������������������������������������������������������������������������������������������� "
"`ThreadPool` "
"��������������������������������������������������������������������������������������������������� "
"`sizing` ������������������������������������ `minSize` "
"������������������������������������������������������������������������������������������������������������������������������������������������ "
"`quarkus.thread-pool.sizing.min-size` "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1092
#, fuzzy
msgid ""
"A configuration root's name can be given with the `name` property, or it can "
"be inferred from the class name.  If the latter, then the configuration key "
"will be the class name, minus any `Config` or `Configuration` suffix, broken "
"up by camel-case, lowercased, and re-joined using hyphens (`-`)."
msgstr ""
"��������������������������� `name` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`Config` ��� `Configuration` "
"������������������������������������������������������������������������������������������������������������ "
"( `-`) ���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1097
#, fuzzy
msgid ""
"A configuration root's class name can contain an extra suffix segment for "
"the case where there are configuration roots for multiple <<Configuration "
"Root Phases>>.  Classes which correspond to the `BUILD_TIME` and "
"`BUILD_AND_RUN_TIME_FIXED` may end with `BuildTimeConfig` or "
"`BuildTimeConfiguration`, and classes which correspond to the `RUN_TIME` "
"phase may end with `RuntimeConfig`, `RunTimeConfig`, `RuntimeConfiguration` "
"or `RunTimeConfiguration`."
msgstr ""
"������������������������������������������������ link:#Configuration Root "
"Phases[[���������������������������]]������������������������������������������������������������������������������������������������������������������������������������������������ "
"`BUILD_TIME` ��� `BUILD_AND_RUN_TIME_FIXED` ��������������������������� "
"`BuildTimeConfig` ��������� `BuildTimeConfiguration` "
"������������������������������ `RUN_TIME` "
"��������������������������������������� `RuntimeConfig`, `RunTimeConfig`, "
"`RuntimeConfiguration` ��������� `RunTimeConfiguration` "
"������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1101
#, fuzzy
msgid ""
"Note: The current implementation is still using injection site to determine "
"the root set, so to avoid migration problems, it is recommended that the "
"injection site (field or parameter) have the same name as the configuration "
"root class until this change is complete."
msgstr ""
"���: "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������(���������������������������������������)������������������������������������������������������������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:1102
#, no-wrap, fuzzy
msgid "Configuration Root Phases"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1106
#, fuzzy
msgid ""
"Configuration roots are strictly bound by configuration phase, and "
"attempting to access a configuration root from outside of its corresponding "
"phase will result in an error.  A configuration root dictates when its "
"contained keys are read from configuration, and when they are available to "
"applications.  The phases defined by `io.quarkus.runtime.annotations."
"ConfigPhase` are as follows:"
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`io.quarkus.runtime.annotations.ConfigPhase` "
"���������������������������������������������������������������"

#. type: Table
#: upstream/_guides/writing-extensions.adoc:1137
#, no-wrap, fuzzy
msgid ""
"| Phase name\n"
"| Read & avail. at build time\n"
"| Avail. at run time\n"
"| Read during static init\n"
"| Re-read during startup (native executable)\n"
"| Notes\n"
"\n"
"| BUILD_TIME\n"
"| ���\n"
"| ���\n"
"| ���\n"
"| ���\n"
"| Appropriate for things which affect build.\n"
"\n"
"| BUILD_AND_RUN_TIME_FIXED\n"
"| ���\n"
"| ���\n"
"| ���\n"
"| ���\n"
"| Appropriate for things which affect build and must be visible for run time "
"code.  Not read from config at run time.\n"
"\n"
"| RUN_TIME\n"
"| ���\n"
"| ���\n"
"| ���\n"
"| ���\n"
"| Not available at build, read at start in all modes.\n"
"\n"
msgstr ""
"| "
"������������������������������������������������������������������������������������������������������������init���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1140
#, fuzzy
msgid ""
"For all cases other than the `BUILD_TIME` case, the configuration root class "
"and all of the configuration groups and types contained therein must be "
"located in, or reachable from, the extension's run time artifact.  "
"Configuration roots of phase `BUILD_TIME` may be located in or reachable "
"from either of the extension's run time or deployment artifacts."
msgstr ""
"`BUILD_TIME` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`BUILD_TIME` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1141
#, no-wrap, fuzzy
msgid "Configuration Example"
msgstr "���������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1148
#, no-wrap
msgid ""
"import io.quarkus.runtime.annotations.ConfigItem;\n"
"import io.quarkus.runtime.annotations.ConfigGroup;\n"
"import io.quarkus.runtime.annotations.DefaultConverter\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1151
#, no-wrap
msgid "import java.io.File;\n"
"import java.util.logging.Level;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1154
#, no-wrap
msgid "@ConfigGroup <1>\n"
"public class FileConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1160
#, no-wrap
msgid ""
"    /**\n"
"     * Enable logging to a file.\n"
"     */\n"
"    @ConfigItem(defaultValue = \"true\")\n"
"    boolean enable;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1166
#, no-wrap
msgid ""
"    /**\n"
"     * The log format.\n"
"     */\n"
"    @ConfigItem(defaultValue = \"%d{yyyy-MM-dd HH:mm:ss,SSS} %h %N[%i] %-5p "
"[%c{1.}] (%t) %s%e%n\")\n"
"    String format;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1172
#, no-wrap
msgid ""
"    /**\n"
"     * The level of logs to be written into the file.\n"
"     */\n"
"    @ConfigItem(defaultValue = \"ALL\")\n"
"    Level level;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1178
#, no-wrap
msgid ""
"    /**\n"
"     * The name of the file in which logs will be written.\n"
"     */\n"
"    @ConfigItem(defaultValue = \"application.log\")\n"
"    File path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1186
#, no-wrap
msgid ""
"/**\n"
" * Logging configuration.\n"
" */\n"
"@ConfigRoot(phase = ConfigPhase.RUN_TIME) <2>\n"
"public class LogConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1188
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1194
#, no-wrap
msgid ""
"    /**\n"
"     * Configuration properties for the logging file handler.\n"
"     */\n"
"    FileConfig file;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1197
#, no-wrap
msgid "public class LoggingProcessor {\n"
"    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1204
#, no-wrap
msgid ""
"    /**\n"
"     * Logging configuration.\n"
"     */\n"
"    <3>\n"
"    LogConfiguration config;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1208
#, fuzzy
msgid ""
"A configuration property name can be split into segments. For example, a "
"property name like `quarkus.log.file.enable` can be split into the following "
"segments:"
msgstr ""
"������������������������������������������������������������������������������������������������ "
"`quarkus.log.file.enable` "
"���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1210
#, fuzzy
msgid ""
"`quarkus` - a namespace claimed by Quarkus which is a prefix for all "
"`@ConfigRoot` classes,"
msgstr ""
"`quarkus` - Quarkus��������������������������������������������������������� "
"`@ConfigRoot` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1211
#, fuzzy
msgid ""
"`log` - a name segment which corresponds to the `LogConfiguration` class "
"annotated with `@ConfigRoot`,"
msgstr ""
"`log` - `@ConfigRoot` ��������������������������������� `LogConfiguration` "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1212
#, fuzzy
msgid ""
"`file` - a name segment which corresponds to the `file` field in this class,"
msgstr ""
"`file` - ������������������ `file` "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1213
#, fuzzy
msgid ""
"`enabled` - a name segment which corresponds to `enable` field in "
"`FileConfig` class annotated with `@ConfigGroup`."
msgstr ""
"`enabled` - `@ConfigGroup` ��������������������������������� `FileConfig` "
"������������ `enable` ������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1217
#, fuzzy
msgid ""
"The `FileConfig` class is annotated with `@ConfigGroup` to indicate that "
"this is an aggregate configuration object containing a collection of "
"configurable properties, rather than being a simple configuration key type."
msgstr ""
"`FileConfig` ��������������� `@ConfigGroup` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1222
#, fuzzy
msgid ""
"The `@ConfigRoot` annotation indicates that this object is a configuration "
"root group, in this case one which corresponds to a `log` segment. A class "
"name is used to link configuration root group with the segment from a "
"property name. The `Configuration` part is stripped off from a "
"`LogConfiguration` class name and the remaining `Log` is lowercased to "
"become a `log`. Since all `@ConfigRoot` annotated classes uses `quarkus` as "
"a prefix, this finally becomes `quarkus.log` and represents the properties "
"which names begin with `quarkus.log.*`."
msgstr ""
"`@ConfigRoot` "
"������������������������������������������������������������������������������������������������������������������������������ "
"`log` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`Configuration` ������������ `LogConfiguration` "
"������������������������������������������������ `Log` "
"������������������������ `log` ������������������ `@ConfigRoot` "
"��������������������������������������������������� `quarkus` "
"������������������������������������������������������������������������ "
"`quarkus.log` ������������ `quarkus.log.*` "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1224
#, fuzzy
msgid ""
"Here the `LoggingProcessor` injects a `LogConfiguration` instance "
"automatically by detecting the `@ConfigRoot` annotation."
msgstr ""
"������������ `LoggingProcessor` ��� `@ConfigRoot` "
"������������������������������������ `LogConfiguration` "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1226
#, fuzzy
msgid ""
"A corresponding `application.properties` for the above example could be:"
msgstr ""
"��������������������������� `application.properties` "
"������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1232
#, no-wrap
msgid ""
"quarkus.log.file.enable=true\n"
"quarkus.log.file.level=DEBUG\n"
"quarkus.log.file.path=/tmp/debug.log\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1235
#, fuzzy
msgid ""
"Since `format` is not defined in these properties, the default value from "
"`@ConfigItem` will be used instead."
msgstr ""
"��������������������������������� `format` "
"������������������������������������������������ `@ConfigItem` "
"���������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1237
#, no-wrap, fuzzy
msgid "Enhanced conversion"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1241
#, fuzzy
msgid ""
"You can use enhanced conversion of a config item by using the `@ConvertWith` "
"annotation which accepts a `Converter` class object.  If the annotation is "
"present on a config item, the implicit or custom built in converter in use "
"will be overridden by the value provided.  To do, see the example below "
"which converts `YES` or `NO` values to `boolean`."
msgstr ""
"`Converter` ������������������������������������������������ `@ConvertWith` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`YES` ��������� `NO` ��������� `boolean` "
"���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1251
#, no-wrap
msgid ""
"@ConfigRoot\n"
"public class SomeConfig {\n"
"    /**\n"
"     * Config item with enhanced converter\n"
"     */\n"
"    @ConvertWith(YesNoConverter.class) // <1>\n"
"    @ConfigItem(defaultValue = \"NO\")\n"
"    Boolean answer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1254
#, no-wrap
msgid ""
"    public static class YesNoConverter implements Converter<Boolean> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1256
#, no-wrap
msgid "        public YesNoConverter() {}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1262
#, no-wrap
msgid ""
"        @Override\n"
"        public Boolean convert(String s) {\n"
"            if (s == null || s.isEmpty()) {\n"
"                return false;\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1269
#, no-wrap
msgid ""
"            switch (s) {\n"
"                case \"YES\":\n"
"                    return true;\n"
"                case \"NO\":\n"
"                    return false;\n"
"            }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1274
#, no-wrap
msgid ""
"            throw new IllegalArgumentException(\"Unsupported value \" + s + "
"\" given\");\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1276
#, fuzzy
msgid ""
"Override the default `Boolean` converter and use the provided converter "
"which accepts a `YES` or `NO` config values."
msgstr ""
"������������������ `Boolean` ��������������������������������� `YES` "
"��������� `NO` "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1279
#, fuzzy
msgid "The corresponding `application.properties` will look like."
msgstr ""
"������������ `application.properties` ������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1282
#, no-wrap
msgid "quarkus.some.answer=YES\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:1287
#, fuzzy
msgid ""
"Enum values (config items) are translated to skewed-case (hyphenated) by "
"default. The table below illustrates an enum name and their canonical "
"equivalence:"
msgstr ""
"���������������(������������)������������������������������������������������������������(������������������)������������������������������������������������������������������������������������������������������"

#. type: Table
#: upstream/_guides/writing-extensions.adoc:1312
#, no-wrap, fuzzy
msgid ""
"|Java enum| Canonical equivalent\n"
"\n"
"|DISCARD\n"
"|discard\n"
"\n"
"|READ_UNCOMMITTED\n"
"|read-uncommitted\n"
"\n"
"|SIGUSR1\n"
"|sigusr1\n"
"\n"
"|JavaEnum\n"
"|java-enum\n"
"\n"
"|MAKING_LifeDifficult\n"
"|making-life-difficult\n"
"\n"
"|YeOldeJBoss\n"
"|ye-olde-jboss\n"
"\n"
"|camelCaseEnum\n"
"|camel-case-enum\n"
"\n"
msgstr "|Java enum| ������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1315
#, fuzzy
msgid ""
"To use the default behaviour which is based on implicit converter or a "
"custom defined one add `@DefaultConverter` annotation to the configuration "
"item"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@DefaultConverter` ������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1326
#, no-wrap
msgid ""
"@ConfigRoot\n"
"public class SomeLogConfig {\n"
"    /**\n"
"     * The level of logs to be written into the file.\n"
"     */\n"
"    @DefaultConverter // <1>\n"
"    @ConfigItem(defaultValue = \"ALL\")\n"
"    Level level;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1328
#, fuzzy
msgid ""
"Use the default converter (built in or a custom converter) to convert `Level."
"class` enum."
msgstr ""
"`Level.class` enum "
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1331
#, no-wrap, fuzzy
msgid "Conditional Step Inclusion"
msgstr "������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:1337
#, fuzzy
msgid ""
"It is possible to only include a given `@BuildStep` under certain conditions."
"  The `@BuildStep` annotation has two optional parameters: `onlyIf` and "
"`onlyIfNot`.  These parameters can be set to one or more classes which "
"implement `BooleanSupplier`.  The build step will only be included when the "
"method returns `true` (for `onlyIf`) or `false` (for `onlyIfNot`)."
msgstr ""
"������������������������������������������ `@BuildStep` "
"������������������������������������������ `@BuildStep` "
"������������������������������ `onlyIf` ��� `onlyIfNot` ��� 2 "
"������������������������������������������������������������������������������������������ "
"`BooleanSupplier` ��������������� 1 "
"������������������������������������������������������������������������������������������ "
"`true` (for `onlyIf`) ��������� `false` (for `onlyIfNot`) "
"���������������������������������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:1340
#, fuzzy
msgid ""
"The condition class can inject <<configuration-roots,configuration roots>> "
"as long as they belong to a build-time phase.  Run time configuration is not "
"available for condition classes."
msgstr ""
"��������������������������������������������������������������������������� "
"link:#configuration-"
"roots[���������������������]���������������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:1343
#, fuzzy
msgid ""
"The condition class may also inject a value of type `io.quarkus.runtime."
"LaunchMode`.  Constructor parameter and field injection is supported."
msgstr ""
"������������������������ `io.quarkus.runtime.LaunchMode` "
"���������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:1344
#, no-wrap, fuzzy
msgid "An example of a conditional build step"
msgstr "���������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1351
#, no-wrap
msgid ""
"@BuildStep(onlyIf = IsDevMode.class)\n"
"LogCategoryBuildItem enableDebugLogging() {\n"
"    return new LogCategoryBuildItem(\"org.your.quarkus.extension\", Level."
"DEBUG);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1354
#, no-wrap
msgid ""
"static class IsDevMode implements BooleanSupplier {\n"
"    LaunchMode launchMode;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1359
#, no-wrap
msgid ""
"    public boolean getAsBoolean() {\n"
"        return launchMode == LaunchMode.DEVELOPMENT;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1362
#, no-wrap, fuzzy
msgid "Bytecode Recording"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1366
#, fuzzy
msgid ""
"One of the main outputs of the build process is recorded bytecode. This "
"bytecode actually sets up the runtime environment. For example, in order to "
"start Undertow, the resulting application will have some bytecode that "
"directly registers all Servlet instances and then starts Undertow."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Undertow���������������������������������������������������������������������������������������������������������������������������������������������������������Undertow������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1372
#, fuzzy
msgid ""
"As writing bytecode directly is complex, this is instead done via bytecode "
"recorders. At deployment time, invocations are made on recorder objects that "
"contain the actual runtime logic, but instead of these invocations "
"proceeding as normal they are intercepted and recorded (hence the name). "
"This recording is then used to generate bytecode that performs the same "
"sequence of invocations at runtime. This is essentially a form of deferred "
"execution where invocations made at deployment time get deferred until "
"runtime."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1374
#, fuzzy
msgid ""
"Let's look at the classic 'Hello World' type example. To do this the Quarkus "
"way we would create a recorder as follows:"
msgstr ""
"���������������Hello "
"World������������������������������������������������������Quarkus������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1379
#, no-wrap
msgid "@Recorder\n"
"class HelloRecorder {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1383
#, no-wrap
msgid ""
"  public void sayHello(String name) {\n"
"    System.out.println(\"Hello\" + name);\n"
"  }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1388
#, fuzzy
msgid "And then create a build step that uses this recorder:"
msgstr ""
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1396
#, no-wrap
msgid ""
"@Record(RUNTIME_INIT)\n"
"@BuildStep\n"
"public void helloBuildStep(HelloRecorder recorder) {\n"
"    recorder.sayHello(\"World\");\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1401
#, fuzzy
msgid ""
"When this build step is run nothing is printed to the console. This is "
"because the `HelloRecorder` that is injected is actually a proxy that "
"records all invocations. Instead if we run the resulting Quarkus program we "
"will see 'Hello World' printed to the console."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������� "
"`HelloRecorder` "
"������������������������������������������������������������������������������������������������������������Quarkus���������������������������������������������������������Hello "
"World���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1406
#, fuzzy
msgid ""
"Methods on a recorder can return a value, which must be proxiable (if you "
"want to return a non-proxiable item wrap it in `io.quarkus.runtime."
"RuntimeValue`). These proxies may not be invoked directly, however they can "
"be passed into other recorder methods. This can be any recorder method, "
"including from other `@BuildStep` methods, so a common pattern is to produce "
"`BuildItem` instances that wrap the results of these recorder invocations."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������� "
"(������������������������������������������������������ `io.quarkus.runtime."
"RuntimeValue` "
"������������������������������)������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@BuildStep` "
"������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`BuildItem` "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1410
#, fuzzy
msgid ""
"For instance, in order to make arbitrary changes to a Servlet deployment "
"Undertow has a `ServletExtensionBuildItem`, which is a `MultiBuildItem` that "
"wraps a `ServletExtension` instance. I can return a `ServletExtension` from "
"a recorder in another module, and Undertow will consume it and pass it into "
"the recorder method that starts Undertow."
msgstr ""
"������������������������������������������������������������������������������������������������Undertow "
"������ `ServletExtensionBuildItem` ������������ `ServletExtension` "
"������������������������������������ `MultiBuildItem` "
"������������������������������������������������������������ "
"`ServletExtension` ���������������Undertow ������������������������ Undertow "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1414
#, fuzzy
msgid ""
"At runtime the bytecode will be invoked in the order it is generated. This "
"means that build step dependencies implicitly control the order that "
"generated bytecode is run. In the example above we know that the bytecode "
"that produces a `ServletExtensionBuildItem` will be run before the bytecode "
"that consumes it."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`ServletExtensionBuildItem` "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1416
#, fuzzy
msgid "The following objects can be passed to recorders:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1418
#, fuzzy
msgid "Primitives"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1419
#, fuzzy
msgid "String"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1420
#, fuzzy
msgid "Class<?> objects"
msgstr "���������&lt;?"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1421
#, fuzzy
msgid "Objects returned from a previous recorder invocation"
msgstr "���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1422
#, fuzzy
msgid ""
"Objects with a no-arg constructor and getter/setters for all properties (or "
"public fields)"
msgstr ""
"��������������������������� (���������������������������������������) "
"������������������������������������������������������������������/"
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1423
#, fuzzy
msgid ""
"Objects with a constructor annotated with `@RecordableConstructor` with "
"parameter names that match field names"
msgstr ""
"������������������������������������������������������������ "
"`@RecordableConstructor` "
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1424
#, fuzzy
msgid ""
"Any arbitrary object via the `io.quarkus.deployment.recording."
"RecorderContext#registerSubstitution(Class, Class, Class)` mechanism"
msgstr ""
"`io.quarkus.deployment.recording.RecorderContext#registerSubstitution(Class, "
"Class, Class)` ������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1425
#, fuzzy
msgid "Arrays, Lists and Maps of the above"
msgstr "���������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1427
#, no-wrap, fuzzy
msgid "RecorderContext"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1433
#, fuzzy
msgid ""
"`io.quarkus.deployment.recording.RecorderContext` provides some convenience "
"methods to enhance bytecode recording, this includes the ability to register "
"creation functions for classes without no-arg constructors, to register an "
"object substitution (basically a transformer from a non-serializable object "
"to a serializable one and vice versa), and to create a class proxy. This "
"interface can be directly injected as a method parameter into any `@Record` "
"method."
msgstr ""
"`io.quarkus.deployment.recording.RecorderContext` "
"������������������������������������������������������������������������������������������������������������������������������no-"
"arg "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@Record` "
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1437
#, fuzzy
msgid ""
"Calling `classProxy` with a given class name will create a `Class` that can "
"be passed into recorder methods, and at runtime will be substituted with the "
"class whose name was passed in to `classProxy`. This is basically a "
"convenience to avoid the need to explicitly load classes in the recorders."
msgstr ""
"��������������������������� `classProxy` "
"��������������������������������������������������������������������������� "
"`Class` ��������������������������������� `classProxy` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1438
#, no-wrap, fuzzy
msgid "Printing step execution time"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1443
#, fuzzy
msgid ""
"At times, it can be useful to know how the exact time each startup task "
"(which is the result of each bytecode recording) takes when the application "
"is run.  The simplest way to determine this information is to set the "
"`quarkus.debug.print-startup-times` property to `true` when running the "
"application.  The output will look something like:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`quarkus.debug.print-startup-times` ������������������ `true` "
"������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1456
#, no-wrap
msgid ""
"Build step LoggingResourceProcessor.setupLoggingRuntimeInit completed in: "
"42ms\n"
"Build step ConfigGenerationBuildStep.checkForBuildTimeConfigChange completed "
"in: 4ms\n"
"Build step SyntheticBeansProcessor.initRuntime completed in: 0ms\n"
"Build step ConfigBuildStep.validateConfigProperties completed in: 1ms\n"
"Build step ResteasyStandaloneBuildStep.boot completed in: 95ms\n"
"Build step VertxHttpProcessor.initializeRouter completed in: 1ms\n"
"Build step VertxHttpProcessor.finalizeRouter completed in: 4ms\n"
"Build step LifecycleEventsBuildStep.startupEvent completed in: 1ms\n"
"Build step VertxHttpProcessor.openSocket completed in: 93ms\n"
"Build step ShutdownListenerBuildStep.setupShutdown completed in: 1ms\n"
msgstr ""

#. TODO: config integration
#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1461
#, no-wrap, fuzzy
msgid "Contexts and Dependency Injection"
msgstr "������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1463
#, no-wrap, fuzzy
msgid "Extension Points"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1468
#, fuzzy
msgid ""
"As a CDI based runtime, Quarkus extensions often make CDI beans available as "
"part of the extension behavior.  However, Quarkus DI solution does not "
"support CDI Portable Extensions.  Instead, Quarkus extensions can make use "
"of various link:cdi-reference[Build Time Extension Points]."
msgstr ""
"CDI���������������������������������������Quarkus���������������������������������������������������������������CDI���������������������������������������������������������������������������������������Quarkus "
"DI������������������������CDI������������������������������������������������������������������������Quarkus������������������������������������ "
"link:cdi-reference[Build Time Extension "
"Points���]������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1469
#, no-wrap, fuzzy
msgid "Extension Health Check"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1472
#, fuzzy
msgid ""
"Health checks are provided via the `quarkus-smallrye-health` extension. It "
"provides both liveness and readiness checks capabilities."
msgstr ""
"��������������������� `quarkus-smallrye-health` "
"���������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1474
#, fuzzy
msgid ""
"When writing an extension, it's beneficial to provide health checks for the "
"extension, that can be automatically included without the developer needing "
"to write their own."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1476
#, fuzzy
msgid "In order to provide a health check, you should do the following:"
msgstr ""
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1479
#, fuzzy
msgid ""
"Import the `quarkus-smallrye-health` extension as an **optional** dependency "
"in your runtime module so it will not impact the size of the application if "
"health check is not included."
msgstr ""
"`quarkus-smallrye-health` ������������������������ "
"*������������������*���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1481
#, fuzzy
msgid ""
"Create your health check following the link:microprofile-health[Quarkus - "
"MicroProfile Health] guide. We advise providing only readiness check for an "
"extension (liveness check is designed to express the fact that an "
"application is up and needs to be lightweight)."
msgstr ""
"link:microprofile-health[Quarkus - MicroProfile "
"Health]���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1482
#, fuzzy
msgid ""
"Import the `quarkus-smallrye-health-spi` library in your deployment module."
msgstr ""
"��������������������� ������������������ `quarkus-smallrye-health-spi` "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1483
#, fuzzy
msgid ""
"Add a build step in your deployment module that produces a `HealthBuildItem`."
""
msgstr ""
"������������������������������������������������������������������������������ "
"`HealthBuildItem`."

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1484
#, fuzzy
msgid ""
"Add a way to disable the extension health check via a config item `quarkus."
"<extension>.health.enabled` that should be enabled by default."
msgstr ""
"��������������������������������������������������������������� `quarkus."
"&amp;lt;extension&amp;gt;.health.enabled` "
"���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1486
#, fuzzy
msgid ""
"Following is an example from the Agroal extension that provides a "
"`DataSourceHealthCheck` to validate the readiness of a datasource."
msgstr ""
"��������������������������������������������������������������������� "
"`DataSourceHealthCheck` ��������������� Agroal "
"������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1494
#, no-wrap
msgid ""
"@BuildStep\n"
"HealthBuildItem addHealthCheck(AgroalBuildTimeConfig agroalBuildTimeConfig) "
"{\n"
"    return new HealthBuildItem(\"io.quarkus.agroal.runtime.health."
"DataSourceHealthCheck\",\n"
"            agroalBuildTimeConfig.healthEnabled);\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1496
#, no-wrap, fuzzy
msgid "Extension Metrics"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1501
#, fuzzy
msgid ""
"The `quarkus-micrometer` extension and the `quarkus-smallrye-metrics` "
"extension provide support for collecting metrics.  As a compatibility note, "
"the `quarkus-micrometer` extension adapts the MP Metrics API to Micrometer "
"library primitives, so the `quarkus-micrometer` extension can be enabled "
"without breaking code that relies on the MP Metrics API.  Note that the "
"metrics emitted by Micrometer are different, see the `quarkus-micrometer` "
"extension documentation for more information."
msgstr ""
"`quarkus-micrometer` ������������������������ `quarkus-smallrye-metrics` "
"������������������������������������������������������������������������������������������������������������������������������������������������ "
"`quarkus-micrometer` ������������������������ MP Metrics API ��� Micrometer "
"���������������������������������������������������������������������MP "
"Metrics API ��������������������������������������������������� `quarkus-"
"micrometer` "
"���������������������������������������������������������������Micrometer "
"��������������������������������������������������������������������������������������� "
"`quarkus-micrometer` "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1503
#, fuzzy
msgid ""
"The compatibility layer for MP Metrics APIs will move to a different "
"extension in the future."
msgstr ""
"MP Metrics API "
"������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1505
#, fuzzy
msgid ""
"There are two broad patterns that extensions can use to interact with an "
"optional metrics extension to add their own metrics:"
msgstr ""
"���������������������������Element "
"Import���������������������������������Element "
"Import������������������������������������������Element "
"Import���������������������������������Element "
"Import���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1507
#, fuzzy
msgid ""
"Consumer pattern: An extension declares a `MetricsFactoryConsumerBuildItem` "
"and uses that to provide a bytecode recorder to the metrics extension. When "
"the metrics extension has initialized, it will iterate over registered "
"consumers to initialize them with a `MetricsFactory`. This factory can be "
"used to declare API-agnostic metrics, which can be a good fit for extensions "
"that provide an instrumentable object for gathering statistics (e.g. "
"Hibernate's `Statistics` class)."
msgstr ""
"������������������������������������������������ "
"`MetricsFactoryConsumerBuildItem` "
"��������������������������������������������������������������������������������������������������������������������� "
"`MetricsFactory`���������������������������������������������Element "
"Import������������������������������������������������������������������������������������API "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Hibernate "
"��� `Statistics` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1509
#, fuzzy
msgid ""
"Binder pattern: An extension can opt to use completely different gathering "
"implementations depending on the metrics system. An "
"`Optional<MetricsCapabilityBuildItem> metricsCapability` build step "
"parameter can be used to declare or otherwise initialize API-specific "
"metrics based on the active metrics extension (e.g. \"smallrye-metrics\" or "
"\"micrometer\"). This pattern can be combined with the consumer pattern by "
"using `MetricsFactory::metricsSystemSupported()` to test the active metrics "
"extension within the recorder."
msgstr ""
"���������������������������������������������������������������Element "
"Import������������������������Element "
"Import���������������������������������Element "
"Import������������������������Element "
"Import������������������������������������ "
"`Optional&amp;lt;MetricsCapabilityBuildItem&amp;gt; metricsCapability` "
"��������������������������������������������������������������������������������������������������������� "
"API "
"������������������������������������������������������������������������������������������������������������������������\"smallrye-"
"metrics\"���\"micrometer\"������������������������������ `MetricsFactory::"
"metricsSystemSupported()` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1511
#, fuzzy
msgid ""
"Remember that support for metrics is optional. Extensions can use an "
"`Optional<MetricsCapabilityBuildItem> metricsCapability` parameter in their "
"build step to test for the presence of an enabled metrics extension. "
"Consider using additional configuration to control behavior of metrics. "
"Datasource metrics can be expensive, for example, so additional "
"configuration flags are used enable metrics collection on individual "
"datasources."
msgstr ""
"���������������������Element Import���������������������Element "
"Import��������������������������������������������������������� "
"`Optional&amp;lt;MetricsCapabilityBuildItem&amp;gt; metricsCapability` "
"���������������������Element Import���������������������Element "
"Import���������������������������������������������������UML 2.0 "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1513
#, fuzzy
msgid ""
"When adding metrics for your extension, you may find yourself in one of the "
"following situations:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1515
#, fuzzy
msgid ""
"An underlying library used by the extension is using a specific Metrics API "
"directly (either MP Metrics, Micrometer, or some other)."
msgstr ""
"������������������������������������������������������������������������������������������ "
"API ������������������������������ (MP Metrics, Micrometer, "
"���������������������)���"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1516
#, fuzzy
msgid ""
"An underlying library uses its own mechanism for collecting metrics and "
"makes them available at runtime using its own API, e.g. Hibernate's "
"`Statistics` class, or Vert.x `MetricsOptions`."
msgstr ""
"`Statistics` "
"`MetricsOptions`��������������������������������������������������������������������������������������������������������������������������� "
"API ���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1517
#, fuzzy
msgid ""
"An underlying library does not provide metrics (or there is no library at "
"all) and you want to add instrumentation."
msgstr ""
"���������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1518
#, no-wrap, fuzzy
msgid "Case 1: The library uses a metrics library directly"
msgstr ""
"���������1������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1521
#, fuzzy
msgid "If the library directly uses a metrics API, there are two options:"
msgstr ""
"��������������������������������������� API ���������������������������2 "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1523
#, fuzzy
msgid ""
"Use an `Optional<MetricsCapabilityBuildItem> metricsCapability` parameter to "
"test which metrics API is supported (e.g. \"smallrye-metrics\" or "
"\"micrometer\") in your build step, and use that to selectively declare or "
"initialize API-specific beans or build items."
msgstr ""
"`Optional&amp;lt;MetricsCapabilityBuildItem&amp;gt; metricsCapability` "
"������������������������������������������������������������������������������ "
"API ��������������������������������� (���: \"smallrye-metrics\" ��� "
"\"micrometer\" ������) ������������������API "
"������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1525
#, fuzzy
msgid ""
"Create a separate build step that consumes a `MetricsFactory`, and use the "
"`MetricsFactory::metricsSystemSupported()` method within the bytecode "
"recorder to initialize required resources if the desired metrics API is "
"supported (e.g. \"smallrye-metrics\" or \"micrometer\")."
msgstr ""
"`MetricsFactory` "
"��������������������������������������������������������������������������������������������������� "
"`MetricsFactory::metricsSystemSupported()` "
"������������������������������������������������������ API "
"������������������������������������������������������������������������������������������\"smallrye-"
"metrics\" ��� \"micrometer\"������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1527
#, fuzzy
msgid ""
"Extensions may need to provide a fallback if there is no active metrics "
"extension or the extension doesn't support the API required by the library."
msgstr ""
"������������������������������������������������������������������������������������������������������������ "
"API "
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1528
#, no-wrap, fuzzy
msgid "Case 2: The library provides its own metric API"
msgstr ""
"��������� 2: ������������������������������������������ API ���������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1531
#, fuzzy
msgid "There are two examples of a library providing its own metrics API:"
msgstr ""
"������������������������ API ��������������������������������������� 2 "
"������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1533
#, fuzzy
msgid ""
"The extension defines an instrumentable object as Agroal does with `io."
"agroal.api.AgroalDataSourceMetrics`, or"
msgstr ""
"������������������������Agroal ��� `io.agroal.api.AgroalDataSourceMetrics` "
"������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1534
#, fuzzy
msgid ""
"The extension provides its own abstraction of metrics, as Jaeger does with "
"`io.jaegertracing.spi.MetricsFactory`."
msgstr ""
"Jaeger ��� `io.jaegertracing.spi.MetricsFactory` "
"������������������������������������������������������������������������������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:1535
#, no-wrap, fuzzy
msgid "Observing instrumentable objects"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1538
#, fuzzy
msgid ""
"Let's take the instrumentable object (`io.agroal.api."
"AgroalDataSourceMetrics`) case first. In this case, you can do the following:"
""
msgstr ""
"������������������������������������������������������������ ( `io.agroal."
"api.AgroalDataSourceMetrics`) "
"������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1540
#, fuzzy
msgid ""
"Define a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that "
"uses a `RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` "
"consumer. For example, the following creates a "
"`MetricsFactoryConsumerBuildItem` if and only if metrics are enabled both "
"for Agroal generally, and for a datasource specifically:"
msgstr ""
"`MetricsFactoryConsumerBuildItem` `RUNTIME_INIT` ��������� Recorder "
"��������������� ��������������������������������� "
"������������������������������������������Agroal "
"��������������������������������������������������������������������������������������������������� "
"��������������������� `STATIC_INIT` `MetricsFactory` `BuildStep` "
"`MetricsFactoryConsumerBuildItem`"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1549
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(ExecutionTime.RUNTIME_INIT)\n"
"void registerMetrics(AgroalMetricsRecorder recorder,\n"
"        DataSourcesBuildTimeConfig dataSourcesBuildTimeConfig,\n"
"        BuildProducer<MetricsFactoryConsumerBuildItem> datasourceMetrics,\n"
"        List<AggregatedDataSourceBuildTimeConfigBuildItem> "
"aggregatedDataSourceBuildTimeConfigs) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1561
#, no-wrap
msgid ""
"    for (AggregatedDataSourceBuildTimeConfigBuildItem "
"aggregatedDataSourceBuildTimeConfig : aggregatedDataSourceBuildTimeConfigs) "
"{\n"
"        // Create a MetricsFactory consumer to register metrics for a data "
"source\n"
"        // IFF metrics are enabled globally and for the data source\n"
"        // (they are enabled for each data source by default if they are "
"also enabled globally)\n"
"        if (dataSourcesBuildTimeConfig.metricsEnabled &&\n"
"                aggregatedDataSourceBuildTimeConfig.getJdbcConfig()."
"enableMetrics.orElse(true)) {\n"
"            datasourceMetrics.produce(new MetricsFactoryConsumerBuildItem(\n"
"                    recorder."
"registerDataSourceMetrics(aggregatedDataSourceBuildTimeConfig.getName())));\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1564
#, fuzzy
msgid ""
"The associated recorder should use the provided `MetricsFactory` to register "
"metrics. For Agroal, this means using the `MetricFactory` API to observe `io."
"agroal.api.AgroalDataSourceMetrics` methods. For example:"
msgstr ""
"��������������������������������������������� `MetricsFactory` "
"���������������������������������������������������������������������Agroal "
"��������������������� `MetricFactory` API ��������������� `io.agroal.api."
"AgroalDataSourceMetrics` "
"���������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1574
#, no-wrap
msgid ""
"/* RUNTIME_INIT */\n"
"public Consumer<MetricsFactory> registerDataSourceMetrics(String "
"dataSourceName) {\n"
"    return new Consumer<MetricsFactory>() {\n"
"        @Override\n"
"        public void accept(MetricsFactory metricsFactory) {\n"
"            String tagValue = DataSourceUtil.isDefault(dataSourceName) ? "
"\"default\" : dataSourceName;\n"
"            AgroalDataSourceMetrics metrics = getDataSource(dataSourceName)."
"getMetrics();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1582
#, no-wrap
msgid ""
"            // When using MP Metrics, the builder uses the VENDOR registry "
"by default.\n"
"            metricsFactory.builder(\"agroal.active.count\")\n"
"                    .description(\n"
"                            \"Number of active connections. These "
"connections are in use and not available to be acquired.\")\n"
"                    .tag(\"datasource\", tagValue)\n"
"                    .buildGauge(metrics::activeCount);\n"
"            ....\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1585
#, fuzzy
msgid ""
"The `MetricsFactory` provides a fluid builder for registration of metrics, "
"with the final step constructing gauges or counters based on a `Supplier` or "
"`ToDoubleFunction`. Timers can either wrap `Callable`, `Runnable`, or "
"`Supplier` implementations, or can use a `TimeRecorder` to accumulate chunks "
"of time. The underlying metrics extension will create appropriate artifacts "
"to observe or measure the defined functions."
msgstr ""
"`MetricsFactory` "
"��������������������������������������������������������������������������������������������������������� "
"`Supplier` ��������� `ToDoubleFunction` "
"��������������������������������������������������������������������������������� "
"`Callable` ��� `Runnable` ������������ `Supplier` "
"��������������������������������� `TimeRecorder` "
"������������������������������������������������������������������������������������������������Element "
"Import������������Element Import������������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:1586
#, no-wrap, fuzzy
msgid "Using a Metrics API-specific implementation"
msgstr "��������������� API ������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1589
#, fuzzy
msgid ""
"Using metrics-API specific implementations may be preferred in some cases. "
"Jaeger, for example, defines its own metrics interface, `io.jaegertracing."
"spi.MetricsFactory`, that it uses to define counters and gauges. A direct "
"mapping from that interface to the metrics system will be the most efficient."
" In this case, it is important to isolate these specialized implementations "
"and to avoid eager classloading to ensure the metrics API remains an "
"optional, compile-time dependency."
msgstr ""
"��������������� API "
"������������������������������������������������������������������������������������������Jaeger "
"��������������������������������������������������������������������������������������������������������������������� "
"`io.jaegertracing.spi.MetricsFactory` "
"���������������������������������������������������������������Element "
"Import������������������������Element "
"Import���������������������������������Element "
"Import���������������������Element "
"Import������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"API "
"������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1591
#, fuzzy
msgid ""
"`Optional<MetricsCapabilityBuildItem> metricsCapability` can be used in the "
"build step to selectively control initialization of beans or the production "
"of other build items. The Jaeger extension, for example, can use the "
"following to control initialization of specialized Metrics API adapters:"
msgstr ""
"`Optional&amp;lt;MetricsCapabilityBuildItem&amp;gt; metricsCapability` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������Jaeger "
"������������������������������������������������������������������������������ "
"Metrics API ���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1599
#, no-wrap
msgid ""
"/* RUNTIME_INIT */\n"
"@BuildStep\n"
"@Record(ExecutionTime.RUNTIME_INIT)\n"
"void setupTracer(JaegerDeploymentRecorder jdr, JaegerBuildTimeConfig "
"buildTimeConfig, JaegerConfig jaeger,\n"
"        ApplicationConfig appConfig, Optional<MetricsCapabilityBuildItem> "
"metricsCapability) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1602
#, no-wrap
msgid ""
"    // Indicates that this extension would like the SSL support to be "
"enabled\n"
"    extensionSslNativeSupport.produce(new "
"ExtensionSslNativeSupportBuildItem(Feature.JAEGER.getName()));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1616
#, no-wrap
msgid ""
"    if (buildTimeConfig.enabled) {\n"
"        // To avoid dependency creep, use two separate recorder methods for "
"the two metrics systems\n"
"        if (buildTimeConfig.metricsEnabled && metricsCapability.isPresent()) "
"{\n"
"            if (metricsCapability.get().metricsSupported(MetricsFactory."
"MICROMETER)) {\n"
"                jdr.registerTracerWithMicrometerMetrics(jaeger, appConfig);\n"
"            } else {\n"
"                jdr.registerTracerWithMpMetrics(jaeger, appConfig);\n"
"            }\n"
"        } else {\n"
"            jdr.registerTracerWithoutMetrics(jaeger, appConfig);\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1619
#, fuzzy
msgid ""
"A recorder consuming a `MetricsFactory` can use `MetricsFactory::"
"metricsSystemSupported()` can be used to control initialization of metrics "
"objects during bytecode recording in a similar way."
msgstr ""
"`MetricsFactory` ��������������������������������� `MetricsFactory::"
"metricsSystemSupported()` "
"������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1620
#, no-wrap, fuzzy
msgid "Case 3: It is necessary to collect metrics within the extension code"
msgstr ""
"���������3���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1623
#, fuzzy
msgid ""
"To define your own metrics from scratch, you have two basic options: Use the "
"generic `MetricFactory` builders, or follow the binder pattern, and create "
"instrumentation specific to the enabled metrics extension."
msgstr ""
"���������������������Element Import "
"Import���������������������������������������Element "
"Import���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1625
#, fuzzy
msgid ""
"To use the extension-agnostic `MetricFactory` API, your processor can define "
"a `BuildStep` that produces a `MetricsFactoryConsumerBuildItem` that uses a "
"`RUNTIME_INIT` or `STATIC_INIT` Recorder to define a `MetricsFactory` "
"consumer."
msgstr ""
"��������������������������� `MetricFactory` API "
"��������������������������������������������� `RUNTIME_INIT` ��������� "
"`STATIC_INIT` Recorder ��������������� `MetricsFactory` "
"��������������������������������� `MetricsFactoryConsumerBuildItem` "
"��������������� `BuildStep` ���������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1633
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(ExecutionTime.RUNTIME_INIT)\n"
"MetricsFactoryConsumerBuildItem registerMetrics(MyExtensionRecorder "
"recorder) {\n"
"    return new MetricsFactoryConsumerBuildItem(recorder.registerMetrics());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1636
#, fuzzy
msgid ""
"The associated recorder should use the provided `MetricsFactory` to register "
"metrics, for example"
msgstr ""
"������������������������������������������������ `MetricsFactory` "
"���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1640
#, no-wrap
msgid "final LongAdder extensionCounter = new LongAdder();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1649
#, no-wrap
msgid ""
"/* RUNTIME_INIT */\n"
"public Consumer<MetricsFactory> registerMetrics() {\n"
"    return new Consumer<MetricsFactory>() {\n"
"        @Override\n"
"        public void accept(MetricsFactory metricsFactory) {\n"
"            metricsFactory.builder(\"my.extension.counter\")\n"
"                    .buildGauge(extensionCounter::longValue);\n"
"            ....\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1652
#, fuzzy
msgid ""
"Remember that metrics extensions are optional. Keep metrics-related "
"initialization isolated from other setup for your extension, and structure "
"your code to avoid eager imports of metrics APIs. Gathering metrics can also "
"be expensive. Consider using additional extension-specific configuration to "
"control behavior of metrics if the presence/absence of metrics support isn't "
"sufficient."
msgstr ""
"UML 2.0 ���������������Element Import���������������������������Element "
"Import������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"API "
"������������������������������������������������������������������������������������������UML "
"2.0 ���������������UML 2.0���������UML 2.0���������������������UML 2."
"0���������UML 2.0���������������������UML 2.0 "
"������������������������������������UML 2.0 "
"���������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1653
#, no-wrap, fuzzy
msgid "Customizing JSON handling from an extension"
msgstr "������������������JSON���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1656
#, fuzzy
msgid ""
"Extensions often need to register serializers and/or deserializers for types "
"the extension provides."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1659
#, fuzzy
msgid ""
"For this, both Jackson and JSON-B extensions provide a way to register "
"serializer/deserializer from within an extension deployment module."
msgstr ""
"���������������Jackson ������������������������ JSON-B "
"������������������������������������������������������������������������������������/"
"���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1661
#, fuzzy
msgid ""
"Keep in mind that not everybody will need JSON, so you need to make it "
"optional."
msgstr ""
"������������������JSON������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1664
#, fuzzy
msgid ""
"If an extension intends to provide JSON related customization, it is "
"strongly advised to provide customization for both Jackson and JSON-B."
msgstr ""
"���������������JSON������������������������������������������������������������������Jackson���JSON-"
"B���������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1665
#, no-wrap, fuzzy
msgid "Customizing Jackson"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1668
#, fuzzy
msgid ""
"First, add an *optional* dependency to `quarkus-jackson` on your extension's "
"runtime module."
msgstr ""
"��������������������������������������������������������� `quarkus-jackson` "
"��� *������������������*���������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1676
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jackson</artifactId>\n"
"  <optional>true</optional>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1679
#, fuzzy
msgid ""
"Then create a serializer or a deserializer (or both) for Jackson, an example "
"of which can be seen in the `mongodb-panache` extension."
msgstr ""
"���������Jackson ������������������������������������������������������ "
"(���������������������) ��������������������� `mongodb-panache` "
"���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1694
#, no-wrap
msgid ""
"public class ObjectIdSerializer extends StdSerializer<ObjectId> {\n"
"    public ObjectIdSerializer() {\n"
"        super(ObjectId.class);\n"
"    }\n"
"    @Override\n"
"    public void serialize(ObjectId objectId, JsonGenerator jsonGenerator, "
"SerializerProvider serializerProvider)\n"
"            throws IOException {\n"
"        if (objectId != null) {\n"
"            jsonGenerator.writeString(objectId.toString());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1697
#, fuzzy
msgid ""
"Add a dependency to `quarkus-jackson-spi` on your extension's deployment "
"module."
msgstr ""
"`quarkus-jackson-spi` "
"���������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1704
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jackson-spi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1708
#, fuzzy
msgid ""
"Add a build step to your processor to register a Jackson module via the "
"`JacksonModuleBuildItem`.  You need to name your module in a unique way "
"across all Jackson modules."
msgstr ""
"`JacksonModuleBuildItem` ������������������Jackson "
"������������������������������������������������������������������������������������������������������������������������������������������������������Jackson������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1719
#, no-wrap
msgid ""
"@BuildStep\n"
"JacksonModuleBuildItem registerJacksonSerDeser() {\n"
"    return new JacksonModuleBuildItem.Builder(\"ObjectIdModule\")\n"
"                    .add(io.quarkus.mongodb.panache.jackson."
"ObjectIdSerializer.class.getName(),\n"
"                            io.quarkus.mongodb.panache.jackson."
"ObjectIdDeserializer.class.getName(),\n"
"                            ObjectId.class.getName())\n"
"                    .build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1722
#, fuzzy
msgid ""
"The Jackson extension will then use the produced build item to register a "
"module within Jackson automatically."
msgstr ""
"������������Jackson "
"���������������������������������������������������������������������������������Jackson "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1726
#, fuzzy
msgid ""
"If you need more customization capabilities than registering a module, you "
"can produce a CDI bean that implements `io.quarkus.jackson."
"ObjectMapperCustomizer` via an `AdditionalBeanBuildItem`.  More info about "
"customizing Jackson can be found on the JSON guide link:rest-"
"json#configuring-json-support[Configuring JSON support]"
msgstr ""
"��������������������������������������������������������������������������������������� "
"`io.quarkus.jackson.ObjectMapperCustomizer` ��������������� CDI Bean ��� "
"`AdditionalBeanBuildItem` "
"������������������������������������������������Jackson "
"������������������������������������������������JSON ������������ JS link:"
"rest-json#configuring-json-support[ON "
"���������������������]������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:1727
#, no-wrap, fuzzy
msgid "Customizing JSON-B"
msgstr "JSON-B���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1729
#, fuzzy
msgid ""
"First, add an *optional* dependency to `quarkus-jsonb` on your extension's "
"runtime module."
msgstr ""
"��������������������������������������������������������� `quarkus-jsonb` "
"��� *������������������*���������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1737
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jsonb</artifactId>\n"
"  <optional>true</optional>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1740
#, fuzzy
msgid ""
"Then create a serializer and/or a deserializer for JSON-B, an example of "
"which can be seen in the `mongodb-panache` extension."
msgstr ""
"���������JSON-B���������������������������������/"
"��������������������������������������������������� `mongodb-panache` "
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1751
#, no-wrap
msgid ""
"public class ObjectIdSerializer implements JsonbSerializer<ObjectId> {\n"
"    @Override\n"
"    public void serialize(ObjectId obj, JsonGenerator generator, "
"SerializationContext ctx) {\n"
"        if (obj != null) {\n"
"            generator.write(obj.toString());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1754
#, fuzzy
msgid ""
"Add a dependency to `quarkus-jsonb-spi` on your extension's deployment "
"module."
msgstr ""
"`quarkus-jsonb-spi` "
"���������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1761
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-jsonb-spi</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1764
#, fuzzy
msgid ""
"Add a build step to your processor to register the serializer via the "
"`JsonbSerializerBuildItem`."
msgstr ""
"��������������������������������������������������������� "
"`JsonbSerializerBuildItem` "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1771
#, no-wrap
msgid ""
"@BuildStep\n"
"JsonbSerializerBuildItem registerJsonbSerializer() {\n"
"    return new JsonbSerializerBuildItem(io.quarkus.mongodb.panache.jsonb."
"ObjectIdSerializer.class.getName()));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1774
#, fuzzy
msgid ""
"The JSON-B extension will then use the produced build item to register your "
"serializer/deserializer automatically."
msgstr ""
"JSON-"
"B������������������������������������������������������������������������������������/"
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1778
#, fuzzy
msgid ""
"If you need more customization capabilities than registering a serializer or "
"a deserializer, you can produce a CDI bean that implements `io.quarkus.jsonb."
"JsonbConfigCustomizer` via an `AdditionalBeanBuildItem`.  More info about "
"customizing JSON-B can be found on the JSON guide link:rest-json#configuring-"
"json-support[Configuring JSON support]"
msgstr ""
"������������������������������������������������������������������������������������������������������������������ "
"`io.quarkus.jsonb.JsonbConfigCustomizer` ��������������� CDI Bean ��� "
"`AdditionalBeanBuildItem`.JSON-B "
"������������������������������������������������JSON ������������ link:rest-"
"json#configuring-json-support[JSON "
"���������������������]������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1779
#, no-wrap, fuzzy
msgid "Testing Extensions"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1786
#, fuzzy
msgid ""
"Testing of Quarkus extensions should be done with the `io.quarkus.test."
"QuarkusUnitTest` JUnit 5 extension.  This extension allows for Arquillian-"
"style tests that test specific functionalities.  It is not intended for "
"testing user applications, as this should be done via `io.quarkus.test.junit."
"QuarkusTest`.  The main difference is that `QuarkusTest` simply boots the "
"application once at the start of the run, while `QuarkusUnitTest` deploys a "
"custom Quarkus application for each test class."
msgstr ""
"Quarkus ������������������������������������ `io.quarkus.test."
"QuarkusUnitTest` JUnit 5 "
"��������������������������������������������������������������������������������������������������������������������������� "
"Arquillian "
"������������������������������������������������������������������������������������������������������������ "
"`io.quarkus.test.junit.QuarkusTest` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`QuarkusTest` "
"������������������������������������������������������������������������������������ "
"`QuarkusUnitTest` ������������������������������������������������ Quarkus "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1789
#, fuzzy
msgid ""
"These tests should be placed in the deployment module, if additional Quarkus "
"modules are required for testing their deployment modules should also be "
"added as test scoped dependencies."
msgstr ""
"���������������������������������������������������������������������������������������������������Quarkus���������������������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1791
#, fuzzy
msgid ""
"Note that `QuarkusUnitTest` is in the `quarkus-junit5-internal` module."
msgstr ""
"`QuarkusUnitTest` ��� `quarkus-junit5-internal` "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1793
#, fuzzy
msgid "An example test class may look like:"
msgstr "���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1797
#, no-wrap
msgid "package io.quarkus.health.test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1799
#, no-wrap
msgid "import static org.junit.jupiter.api.Assertions.assertEquals;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1802
#, no-wrap
msgid "import java.util.ArrayList;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1805
#, no-wrap
msgid "import javax.enterprise.inject.Instance;\n"
"import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1815
#, no-wrap
msgid ""
"import org.eclipse.microprofile.health.Health;\n"
"import org.eclipse.microprofile.health.HealthCheck;\n"
"import org.eclipse.microprofile.health.HealthCheckResponse;\n"
"import io.quarkus.test.QuarkusUnitTest;\n"
"import org.jboss.shrinkwrap.api.ShrinkWrap;\n"
"import org.jboss.shrinkwrap.api.asset.EmptyAsset;\n"
"import org.jboss.shrinkwrap.api.spec.JavaArchive;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.extension.RegisterExtension;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1817
#, no-wrap
msgid "import io.restassured.RestAssured;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1819
#, no-wrap
msgid "public class FailingUnitTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1827
#, no-wrap
msgid ""
"    @RegisterExtension                                                       "
"           // <1>\n"
"    static final QuarkusUnitTest config = new QuarkusUnitTest()\n"
"            .setArchiveProducer(() ->\n"
"                    ShrinkWrap.create(JavaArchive.class)                     "
"           // <2>\n"
"                            .addClasses(FailingHealthCheck.class)\n"
"                            .addAsManifestResource(EmptyAsset.INSTANCE, "
"\"beans.xml\")\n"
"            );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1831
#, no-wrap
msgid ""
"    @Inject                                                                  "
"           // <3>\n"
"    @Health\n"
"    Instance<HealthCheck> checks;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1836
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHealthServlet() {\n"
"        RestAssured.when().get(\"/health\").then().statusCode(503);          "
"             // <4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1847
#, no-wrap
msgid ""
"    @Test\n"
"    public void testHealthBeans() {\n"
"        List<HealthCheck> check = new ArrayList<>();                         "
"           // <5>\n"
"        for (HealthCheck i : checks) {\n"
"            check.add(i);\n"
"        }\n"
"        assertEquals(1, check.size());\n"
"        assertEquals(HealthCheckResponse.State.DOWN, check.get(0).call()."
"getState());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1850
#, fuzzy
msgid ""
"The `QuarkusUnitTest` extension must be used with a static field. If used "
"with a non-static field, the test application is not started."
msgstr ""
"`QuarkusUnitTest` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1851
#, fuzzy
msgid ""
"This producer is used to build the application to be tested. It uses "
"Shrinkwrap to create a JavaArchive to test"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������Shrinkwrap "
"��������������������������������� JavaArchive ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1852
#, fuzzy
msgid ""
"It is possible to inject beans from our test deployment directly into the "
"test case"
msgstr ""
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1853
#, fuzzy
msgid ""
"This method directly invokes the health check Servlet and verifies the "
"response"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1854
#, fuzzy
msgid ""
"This method uses the injected health check bean to verify it is returning "
"the expected result"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1856
#, fuzzy
msgid ""
"If you want to test that an extension properly fails at build time, use the "
"`setExpectedException` method:"
msgstr ""
"������������������������������������������������������������������������������������������������ "
"`setExpectedException` ������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1861
#, no-wrap
msgid "package io.quarkus.hibernate.orm;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1869
#, no-wrap
msgid ""
"import io.quarkus.deployment.configuration.ConfigurationError;\n"
"import io.quarkus.test.QuarkusUnitTest;\n"
"import org.jboss.shrinkwrap.api.ShrinkWrap;\n"
"import org.jboss.shrinkwrap.api.spec.JavaArchive;\n"
"import org.junit.jupiter.api.Assertions;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.extension.RegisterExtension;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1871
#, no-wrap
msgid "public class PersistenceAndQuarkusConfigTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1878
#, no-wrap
msgid ""
"    @RegisterExtension\n"
"    static QuarkusUnitTest runner = new QuarkusUnitTest()\n"
"            .setExpectedException(ConfigurationError.class)                  "
"   <1>\n"
"            .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)\n"
"                    .addAsManifestResource(\"META-INF/some-persistence."
"xml\", \"persistence.xml\")\n"
"                    .addAsResource(\"application.properties\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1886
#, no-wrap
msgid ""
"    @Test\n"
"    public void testPersistenceAndConfigTest() {\n"
"        // should not be called, deployment exception should happen first:\n"
"        // it's illegal to have Hibernate configuration properties in both "
"the\n"
"        // application.properties and in the persistence.xml\n"
"        Assertions.fail();\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1891
#, fuzzy
msgid ""
"This tells JUnit that the Quarkus deployment should fail with a specific "
"exception"
msgstr ""
"������������Quarkus "
"��������������������������������������������������������� JUnit "
"������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1893
#, no-wrap, fuzzy
msgid "Testing hot reload"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1897
#, fuzzy
msgid ""
"It is also possible to write tests that verify an extension works correctly "
"in development mode and can correctly handle updates."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1900
#, fuzzy
msgid ""
"For most extensions this will just work 'out of the box', however it is "
"still a good idea to have a smoke test to verify that this functionality is "
"working as expected. To test this we use `QuarkusDevModeTest`:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`QuarkusDevModeTest`."

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1905
#, no-wrap
msgid "public class ServletChangeTestCase {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1916
#, no-wrap
msgid ""
"    @RegisterExtension\n"
"    final static QuarkusDevModeTest test = new QuarkusDevModeTest()\n"
"            .setArchiveProducer(new Supplier<JavaArchive>() {\n"
"                @Override\n"
"                public JavaArchive get() {\n"
"                    return ShrinkWrap.create(JavaArchive.class)   <1>\n"
"                            .addClass(DevServlet.class)\n"
"                            .addAsManifestResource(new StringAsset(\"Hello "
"Resource\"), \"resources/file.txt\");\n"
"                }\n"
"            });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1922
#, no-wrap
msgid ""
"    @Test\n"
"    public void testServletChange() throws InterruptedException {\n"
"        RestAssured.when().get(\"/dev\").then()\n"
"                .statusCode(200)\n"
"                .body(is(\"Hello World\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1924
#, no-wrap
msgid ""
"        test.modifySourceFile(\"DevServlet.java\", new Function<String, "
"String>() {  <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1930
#, no-wrap
msgid ""
"            @Override\n"
"            public String apply(String s) {\n"
"                return s.replace(\"Hello World\", \"Hello Quarkus\");\n"
"            }\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1935
#, no-wrap
msgid ""
"        RestAssured.when().get(\"/dev\").then()\n"
"                .statusCode(200)\n"
"                .body(is(\"Hello Quarkus\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1940
#, no-wrap
msgid ""
"    @Test\n"
"    public void testAddServlet() throws InterruptedException {\n"
"        RestAssured.when().get(\"/new\").then()\n"
"                .statusCode(404);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1942
#, no-wrap
msgid ""
"        test.addSourceFile(NewServlet.class);                                "
"       <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1947
#, no-wrap
msgid ""
"        RestAssured.when().get(\"/new\").then()\n"
"                .statusCode(200)\n"
"                .body(is(\"A new Servlet\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1953
#, no-wrap
msgid ""
"    @Test\n"
"    public void testResourceChange() throws InterruptedException {\n"
"        RestAssured.when().get(\"/file.txt\").then()\n"
"                .statusCode(200)\n"
"                .body(is(\"Hello Resource\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1955
#, no-wrap
msgid ""
"        test.modifyResourceFile(\"META-INF/resources/file.txt\", new "
"Function<String, String>() { <4>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1961
#, no-wrap
msgid ""
"            @Override\n"
"            public String apply(String s) {\n"
"                return \"A new resource\";\n"
"            }\n"
"        });\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1966
#, no-wrap
msgid ""
"        RestAssured.when().get(\"file.txt\").then()\n"
"                .statusCode(200)\n"
"                .body(is(\"A new resource\"));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1969
#, no-wrap
msgid ""
"    @Test\n"
"    public void testAddResource() throws InterruptedException {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1972
#, no-wrap
msgid ""
"        RestAssured.when().get(\"/new.txt\").then()\n"
"                .statusCode(404);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1974
#, no-wrap
msgid ""
"        test.addResourceFile(\"META-INF/resources/new.txt\", \"New File\");  "
"<5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1978
#, no-wrap
msgid ""
"        RestAssured.when().get(\"/new.txt\").then()\n"
"                .statusCode(200)\n"
"                .body(is(\"New File\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:1981
#, no-wrap
msgid "    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1985
#, fuzzy
msgid ""
"This starts the deployment, your test can modify it as part of the test "
"suite. Quarkus will be restarted between each test method so every method "
"starts with a clean deployment."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1988
#, fuzzy
msgid ""
"This method allows you to modify the source of a class file. The old source "
"is passed into the function, and the updated source is returned."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1991
#, fuzzy
msgid ""
"This method adds a new class file to the deployment. The source that is used "
"will be the original source that is part of the current project."
msgstr ""
"������������������������������������������ "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1993
#, fuzzy
msgid "This method modifies a static resource"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:1995
#, fuzzy
msgid "This method adds a new static resource"
msgstr "������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:1996
#, no-wrap, fuzzy
msgid "Native Executable Support"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2001
#, fuzzy
msgid ""
"There Quarkus provides a lot of build items that control aspects of the "
"native executable build. This allows for extensions to programmatically "
"perform tasks such as registering classes for reflection or adding static "
"resources to the native executable. Some of these build items are listed "
"below:"
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2002
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage.NativeImageResourceBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2004
#, fuzzy
msgid "Includes static resources into the native executable."
msgstr ""
"������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2005
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.nativeimage."
"NativeImageResourceDirectoryBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage."
"NativeImageResourceDirectoryBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2007
#, fuzzy
msgid "Includes directory's static resources into the native executable."
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2008
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.nativeimage."
"RuntimeReinitializedClassBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage."
"RuntimeReinitializedClassBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2010
#, fuzzy
msgid ""
"A class that will be reinitialized at runtime by Substrate. This will result "
"in the static initializer running twice."
msgstr ""
"������������ Substrate "
"���������������������������������������������������������������������������������������������2������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2011
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.nativeimage."
"NativeImageSystemPropertyBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage."
"NativeImageSystemPropertyBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2013
#, fuzzy
msgid "A system property that will be set at native executable build time."
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2014
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.nativeimage."
"NativeImageResourceBundleBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage."
"NativeImageResourceBundleBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2016
#, fuzzy
msgid "Includes a resource bundle in the native executable."
msgstr ""
"������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2017
#, no-wrap, fuzzy
msgid "`io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage.ReflectiveClassBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2019
#, fuzzy
msgid ""
"Registers a class for reflection in Substrate. Constructors are always "
"registered, while methods and fields are optional."
msgstr ""
"Substrate���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2020
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.nativeimage."
"RuntimeInitializedClassBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage."
"RuntimeInitializedClassBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2022
#, fuzzy
msgid ""
"A class that will be initialized at runtime rather than build time. This "
"will cause the build to fail if the class is initialized as part of the "
"native executable build process, so care must be taken."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2023
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.nativeimage.NativeImageConfigBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2025
#, fuzzy
msgid ""
"A convenience feature that allows you to control most of the above features "
"from a single build item."
msgstr ""
"1���������������������������������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2026
#, no-wrap, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem`"
msgstr ""
"`io.quarkus.deployment.builditem.NativeImageEnableAllCharsetsBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2028
#, fuzzy
msgid "Indicates that all charsets should be enabled in native image."
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: Labeled list
#: upstream/_guides/writing-extensions.adoc:2029
#, no-wrap, fuzzy
msgid "`io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem`"
msgstr "`io.quarkus.deployment.builditem.ExtensionSslNativeSupportBuildItem`"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2032
#, fuzzy
msgid ""
"A convenient way to tell Quarkus that the extension requires SSL and it "
"should be enabled during native image build.  When using this feature, "
"remember to add your extension to the list of extensions that offer SSL "
"support automatically on the https://github.com/quarkusio/quarkus/blob/"
"master/docs/src/main/asciidoc/native-and-ssl.adoc[native and ssl guide]."
msgstr ""
"���������������SSL������������������������������������������������������������������������������������������������������Quarkus��������������������������������������������������������������������������� "
"link:https://github.com/quarkusio/quarkus/blob/master/docs/src/main/asciidoc/"
"native-and-ssl."
"adoc[������������������������ssl���������]���������������SSL������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:2033
#, no-wrap, fuzzy
msgid "IDE support tips"
msgstr "IDE ������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2035
#, no-wrap, fuzzy
msgid "Writing Quarkus extensions in Eclipse"
msgstr "Eclipse���Quarkus���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2038
#, fuzzy
msgid ""
"The only particular aspect of writing Quarkus extensions in Eclipse is that "
"APT (Annotation Processing Tool) is required as part of extension builds, "
"which means you need to:"
msgstr ""
"Eclipse���Quarkus������������������������������������������������������������������������������������������������APT���Annotation "
"Processing Tool������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2040
#, fuzzy
msgid "Install `m2e-apt` from https://marketplace.eclipse.org/content/m2e-apt"
msgstr ""
"https://marketplace.eclipse.org/content/m2e-apt ������ `m2e-apt` "
"���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2041
#, fuzzy
msgid ""
"Define this property in your `pom.xml`: `<m2e.apt.activation>jdt_apt</m2e."
"apt.activation>`, although if you rely on `io.quarkus:quarkus-build-parent` "
"you will get it for free."
msgstr ""
"������������ `pom.xml`: `&amp;lt;m2e.apt.activation&amp;gt;jdt_apt&amp;lt;/"
"m2e.apt.activation&amp;gt;` ��������������� `io.quarkus:quarkus-build-"
"parent` "
"���������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2042
#, fuzzy
msgid ""
"If you have the `io.quarkus:quarkus-extension-processor` project open at the "
"same time in your IDE (for example, if you have the Quarkus sources checked "
"out and open in your IDE) you will need to close that project. Otherwise, "
"Eclipse will not invoke the APT plugin that it contains."
msgstr ""
"IDE��� `io.quarkus:quarkus-extension-processor` "
"������������������������������������������������������������������Quarkus���������������������������������������IDE���������������������������������������������������������������������������������������������������������������������Eclipse������������������������������������������APT���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2043
#, fuzzy
msgid ""
"If you just closed the extension processor project, be sure to do `Maven > "
"Update Project` on the other projects in order for Eclipse to pick up the "
"extension processor from the Maven repository."
msgstr ""
"���������������������������������������������������������������������������Eclipse���Maven������������������������������������������������������������������������������������������������������������ "
"`Maven &amp;gt; Update Project` "
"���������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:2044
#, no-wrap, fuzzy
msgid "Troubleshooting / Debugging Tips"
msgstr "��������������������������������� / ������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2046
#, no-wrap, fuzzy
msgid "Dump the Generated Classes to the File System"
msgstr "���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2051
#, fuzzy
msgid ""
"During the augmentation phase Quarkus extensions generate new and modify "
"existing classes for various purposes.  Sometimes you need to inspect the "
"generated bytecode to debug or understand an issue.  There are three system "
"properties that allow you to dump the classes to the filesystem:"
msgstr ""
"���������������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������3���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2053
#, fuzzy
msgid ""
"`quarkus.debug.generated-classes-dir` - to dump the generated classes, such "
"as bean metadata"
msgstr ""
"`quarkus.debug.generated-classes-dir` - "
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2054
#, fuzzy
msgid ""
"`quarkus.debug.transformed-classes-dir` - to dump the transformed classes, e."
"g. Panache entities"
msgstr ""
"`quarkus.debug.transformed-classes-dir` - "
"������������������������������������ Panache "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2055
#, fuzzy
msgid ""
"`quarkus.debug.generated-sources-dir` - to dump the ZIG files; ZIG file is a "
"textual representation of the generated code that is referenced in the stack "
"traces"
msgstr ""
"`quarkus.debug.generated-sources-dir` - ZIG "
"������������������������������������ZIG "
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2057
#, fuzzy
msgid ""
"These properties are especially useful in the development mode or when "
"running the tests where the generated/transformed classes are only held in "
"memory in a class loader."
msgstr ""
"������������������������������������������������������������/"
"���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2059
#, fuzzy
msgid ""
"For example, you can specify the `quarkus.debug.generated-classes-dir` "
"system property to have these classes written out to disk for inspection in "
"the development mode:"
msgstr ""
"������������ `quarkus.debug.generated-classes-dir` system "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2063
#, no-wrap
msgid "./mvnw quarkus:dev -Dquarkus.debug.generated-classes-dir=dump-classes\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2066
#, fuzzy
msgid ""
"The property value could be either an absolute path, such as `/home/foo/"
"dump` on a Linux machine, or a path relative to the user working directory, "
"i.e. `dump` corresponds to the `{user.dir}/target/dump` in the dev mode and "
"`{user.dir}/dump` when running the tests."
msgstr ""
"`dump` `{user.dir}/target/dump` `{user.dir}/dump` "
"������������������������Linux ������������ `/home/foo/dump` "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2068
#, fuzzy
msgid ""
"You should see a line in the log for each class written to the directory:"
msgstr ""
"������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2072
#, no-wrap
msgid ""
"INFO  [io.qua.run.boo.StartupActionImpl] (main) Wrote /path/to/my/app/target/"
"dump-classes/io/quarkus/arc/impl/ActivateRequestContextInterceptor_Bean."
"class\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2075
#, fuzzy
msgid "The property is also honored when running tests:"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2079
#, no-wrap
msgid ""
"./mvnw clean test -Dquarkus.debug.generated-classes-dir=target/dump-"
"generated-classes\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2082
#, fuzzy
msgid ""
"Analogously, you can use the `quarkus.debug.transformed-classes-dir` and "
"`quarkus.debug.transformed-classes-dir` properties to dump the relevant "
"output."
msgstr ""
"������������ `quarkus.debug.transformed-classes-dir` ��� `quarkus.debug."
"transformed-classes-dir` "
"���������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2084
#, no-wrap, fuzzy
msgid "Multi-module Maven Projects and the Development Mode"
msgstr "������������������������Maven������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2089
#, fuzzy
msgid ""
"It's not uncommon to develop an extension in a multi-module Maven project "
"that also contains an \"example\" module.  However, if you want to run the "
"example in the development mode then the `-DnoDeps` system property must be "
"used in order to exclude the local project dependencies.  Otherwise, Quarkus "
"attempts to monitor the extension classes and this may result in weird class "
"loading issues."
msgstr ""
"���������������������������Maven���������������������������������������������������������\"example\"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`-DnoDeps` "
"���������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2093
#, no-wrap
msgid "./mvnw compile quarkus:dev -DnoDeps\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2095
#, no-wrap, fuzzy
msgid "Indexer does not include your external dependency"
msgstr ""
"������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2098
#, fuzzy
msgid ""
"Remember to add `IndexDependencyBuildItem` artifacts to your `@BuildStep`."
msgstr ""
"`IndexDependencyBuildItem` ��������������� `@BuildStep` "
"������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:2099
#, no-wrap, fuzzy
msgid "Sample Test Extension"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2102
#, fuzzy
msgid ""
"We have an extension that is used to test for regressions in the extension "
"processing. It is located in {quarkus-tree-url}/core/test-extension "
"directory. In this section we touch on some of the tasks an extension author "
"will typically need to perform using the test-extension code to illustrate "
"how the task could be done."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������� "
"{quarkus-tree-url}/core/test-extension "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2103
#, no-wrap, fuzzy
msgid "Features and Capabilities"
msgstr "���������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:2105
#, no-wrap, fuzzy
msgid "Features"
msgstr "������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2109
#, fuzzy
msgid ""
"A _feature_ represents a functionality provided by an extension.  The name "
"of the feature gets displayed in the log during application bootstrap."
msgstr ""
"_���������_������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2110
#, no-wrap, fuzzy
msgid "Example Startup Lines"
msgstr "������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2115
#, no-wrap
msgid ""
"2019-03-22 14:02:37,884 INFO  [io.quarkus] (main) Quarkus 999-SNAPSHOT "
"started in 0.061s.\n"
"2019-03-22 14:02:37,884 INFO  [io.quarkus] (main) Installed features: [cdi, "
"test-extension] <1>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2117
#, fuzzy
msgid "A list of features installed in the runtime image"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2119
#, fuzzy
msgid ""
"A feature can be registered in a <<Build Step Processors>> method that "
"produces a `FeatureBuildItem`:"
msgstr ""
"��������������������������������� link:#Build Step Processors[] "
"`FeatureBuildItem`."

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2120
#, no-wrap, fuzzy
msgid "TestProcessor#feature()"
msgstr "TestProcessor#feature()"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2127
#, no-wrap
msgid ""
"    @BuildStep\n"
"    FeatureBuildItem feature() {\n"
"        return new FeatureBuildItem(\"test-extension\");\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2132
#, fuzzy
msgid ""
"The name of the feature should only contain lowercase characters, words are "
"separated by dash; e.g. `security-jpa`.  An extension should provide at most "
"one feature and the name must be unique.  If multiple extensions register a "
"feature of the same name the build fails."
msgstr ""
"`security-"
"jpa`������������������������������������������������������������������������������������������1���������������������������������������������������������������1������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2136
#, fuzzy
msgid ""
"The feature name should also map to a label in the extension's `devtools/"
"common/src/main/filtered/extensions.json` entry so that the feature name "
"displayed by the startup line matches a label that one can used to select "
"the extension when creating a project using the Quarkus maven plugin as "
"shown in this example taken from the link:rest-json[Writing JSON REST "
"Services] guide where the `resteasy-jackson` feature is referenced:"
msgstr ""
"��������������� `resteasy-jackson` ������������������������������ link:rest-"
"json[Writing JSON REST "
"Services]������������������������������������������������������������������������������������������Quarkus "
"maven��������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`devtools/common/src/main/filtered/extensions.json` "
"������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2146
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-json \\\n"
"    -DclassName=\"org.acme.rest.json.FruitResource\" \\\n"
"    -Dpath=\"/fruits\" \\\n"
"    -Dextensions=\"resteasy-jackson\"\n"
"cd rest-json\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2153
#, fuzzy
msgid ""
"A _capability_ represents a technical capability that can be queried by "
"other extensions.  An extension may provide multiple capabilities and "
"multiple extensions can provide the same capability.  By default, "
"capabilities are not displayed to users."
msgstr ""
"_���������������������_���������������������������������������������������������������������������������������������������������������������1���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2155
#, fuzzy
msgid ""
"Capabilities can be registered in a <<Build Step Processors>> method that "
"produces a `CapabilityBuildItem`:"
msgstr ""
"������������ `CapabilityBuildItem` ��������������� link:#Build Step "
"Processors[[Build Step "
"Processors]]���������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2156
#, no-wrap, fuzzy
msgid "TestProcessor#capability()"
msgstr "TestProcessor#capability()"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2164
#, no-wrap
msgid ""
"    @BuildStep\n"
"    void capabilities(BuildProducer<CapabilityBuildItem> capabilityProducer) "
"{\n"
"        capabilityProducer.produce(new CapabilityBuildItem(\"org.acme.test-"
"transactions\"));\n"
"        capabilityProducer.produce(new CapabilityBuildItem(\"org.acme.test-"
"metrics\"));\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2167
#, fuzzy
msgid ""
"Extensions can consume registered capabilities using the `Capabilities` "
"build item:"
msgstr ""
"������������������ `Capabilities` "
"������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2168
#, no-wrap, fuzzy
msgid "TestProcessor#doSomeCoolStuff()"
msgstr "TestProcessor#doSomeCoolStuff()"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2177
#, no-wrap
msgid ""
"    @BuildStep\n"
"    void doSomeCoolStuff(Capabilities capabilities) {\n"
"        if (capabilities.isPresent(Capability.TRANSACTIONS)) {\n"
"          // do something only if JTA transactions are in...\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2181
#, fuzzy
msgid ""
"Capabilities should follow the naming conventions of Java packages; e.g. `io."
"quarkus.security.jpa`.  Capabilities provided by core extensions should be "
"listed in the `io.quarkus.deployment.Capability` enum and their name should "
"always start with the `io.quarkus` prefix."
msgstr ""
"`io.quarkus.security."
"jpa`���������Java������������������������������������������������������������������������������������������������������������ "
"`io.quarkus.deployment.Capability` enum "
"������������������������������������������ `io.quarkus` "
"���������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2182
#, no-wrap, fuzzy
msgid "Bean Defining Annotations"
msgstr "Bean���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2184
#, fuzzy
msgid ""
"The CDI layer processes CDI beans that are either explicitly registered or "
"that it discovers based on bean defining annotations as defined in http://"
"docs.jboss.org/cdi/spec/2.0/cdi-spec.html#bean_defining_annotations[2.5.1. "
"Bean defining annotations]. You can expand this set of annotations to "
"include annotations your extension processes using a "
"`BeanDefiningAnnotationBuildItem` as shown in this "
"`TestProcessor#registerBeanDefinningAnnotations` example:"
msgstr ""
"CDI ������������������������������������������ CDI ��������������������� "
"link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#bean_defining_annotations[2.5.1] "
"������������������������������������������������������������������������������������������ "
"CDI ��������������������������� link:http://docs.jboss.org/cdi/spec/2.0/cdi-"
"spec."
"html#bean_defining_annotations[���������]��������������������������������������������������������������������������������������������� "
"`TestProcessor#registerBeanDefinningAnnotations` ��������������������������� "
"`BeanDefiningAnnotationBuildItem` "
"���������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2185
#, no-wrap, fuzzy
msgid "Register a Bean Defining Annotation"
msgstr "Bean������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2191
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import org.jboss.jandex.DotName;\n"
"import io.quarkus.extest.runtime.TestAnnotation;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2195
#, no-wrap
msgid ""
"public final class TestProcessor {\n"
"    static DotName TEST_ANNOTATION = DotName.createSimple(TestAnnotation."
"class.getName());\n"
"    static DotName TEST_ANNOTATION_SCOPE = DotName."
"createSimple(ApplicationScoped.class.getName());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2205
#, no-wrap
msgid ""
"    @BuildStep\n"
"    BeanDefiningAnnotationBuildItem registerX() {\n"
"        <1>\n"
"        return new BeanDefiningAnnotationBuildItem(TEST_ANNOTATION, "
"TEST_ANNOTATION_SCOPE);\n"
"    }\n"
"...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2215
#, no-wrap
msgid ""
"/**\n"
" * Marker annotation for test configuration target beans\n"
" */\n"
"@Target({ TYPE })\n"
"@Retention(RUNTIME)\n"
"@Documented\n"
"@Inherited\n"
"public @interface TestAnnotation {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2221
#, no-wrap
msgid ""
"/**\n"
" * A sample bean\n"
" */\n"
"@TestAnnotation <2>\n"
"public class ConfiguredBean implements IConfigConsumer {\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2225
#, fuzzy
msgid ""
"Register the annotation class and CDI default scope using the Jandex "
"`DotName` class."
msgstr ""
"Jandex `DotName` "
"������������������������������������������������������������ CDI "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2226
#, fuzzy
msgid ""
"`ConfiguredBean` will be processed by the CDI layer the same as a bean "
"annotated with the CDI standard @ApplicationScoped."
msgstr ""
"`ConfiguredBean` ��� CDI ��������� @ApplicationScoped "
"������������������������������������������������������������ CDI "
"���������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2227
#, no-wrap, fuzzy
msgid "Parsing Config to Objects"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2229
#, fuzzy
msgid ""
"One of the main things an extension is likely to do is completely separate "
"the configuration phase of behavior from the runtime phase. Frameworks often "
"do parsing/load of configuration on startup that can be done during build "
"time to both reduce the runtime dependencies on frameworks like xml parsers "
"as well as reducing the startup time the parsing incurs."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������/"
"������������������������������������������������������������������������������xml "
"������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2231
#, fuzzy
msgid ""
"An example of parsing a XML config file using JAXB is shown in the "
"`TestProcessor#parseServiceXmlConfig` method:"
msgstr ""
"JAXB���������������XML������������������������������������������ "
"`TestProcessor#parseServiceXmlConfig` "
"���������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2231
#, no-wrap, fuzzy
msgid "Parsing an XML Configuration into Runtime XmlConfig Instance"
msgstr ""
"XML ������������������������ XmlConfig ���������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2248
#, no-wrap
msgid ""
"    @BuildStep\n"
"    @Record(STATIC_INIT)\n"
"    RuntimeServiceBuildItem parseServiceXmlConfig(TestRecorder recorder) "
"throws JAXBException {\n"
"        RuntimeServiceBuildItem serviceBuildItem = null;\n"
"        JAXBContext context = JAXBContext.newInstance(XmlConfig.class);\n"
"        Unmarshaller unmarshaller = context.createUnmarshaller();\n"
"        InputStream is = getClass().getResourceAsStream(\"/config.xml\"); "
"<1>\n"
"        if (is != null) {\n"
"            log.info(\"Have XmlConfig, loading\");\n"
"            XmlConfig config = (XmlConfig) unmarshaller.unmarshal(is); <2>\n"
"...\n"
"        }\n"
"        return serviceBuildItem;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2251
#, fuzzy
msgid "Look for a config.xml classpath resource"
msgstr "config.xml ���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2252
#, fuzzy
msgid "If found, parse using JAXB context for `XmlConfig.class`"
msgstr ""
"���������������������������JAXB "
"������������������������������������������������������ `XmlConfig.class`"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:2256
#, fuzzy
msgid ""
"If there was no /config.xml resource available in the build environment, "
"then a null `RuntimeServiceBuildItem` would be returned and no subsequent "
"logic based on a `RuntimeServiceBuildItem` being produced would execute."
msgstr ""
"��������������������������������� /config.xml "
"���������������������������������null `RuntimeServiceBuildItem` "
"������������������������������ `RuntimeServiceBuildItem` "
"������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2259
#, fuzzy
msgid ""
"Typically one is loading a configuration to create some runtime component/"
"service as `parseServiceXmlConfig` is doing. We will come back to the rest "
"of the behavior in `parseServiceXmlConfig` in the following <<Manage Non-CDI "
"Service>> section."
msgstr ""
"��������� `parseServiceXmlConfig` "
"������������������������������������������������������������������/"
"������������������������������������������������������������������������ "
"`parseServiceXmlConfig` ��������������������������������������������������� "
"link:#Manage Non-CDI Service[[��� CDI "
"���������������������]]������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2261
#, fuzzy
msgid ""
"If for some reason you need to parse the config and use it in other build "
"steps in an extension processor, you would need to create an "
"`XmlConfigBuildItem` to pass the parsed XmlConfig instance around."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������ "
"`XmlConfigBuildItem` ��������������������������� XmlConfig "
"���������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:2265
#, fuzzy
msgid ""
"If you look at the XmlConfig code you will see that it does carry around the "
"JAXB annotations. If you don't want these in the runtime image, you could "
"clone the XmlConfig instance into some POJO object graph and then replace "
"XmlConfig with the POJO class. We will do this in <<Replacing Classes in the "
"Native Image>>."
msgstr ""
"XmlConfig ���������������������������JAXB "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������XmlConfig "
"������������������������ POJO "
"���������������������������������������������������XmlConfig ��� POJO "
"������������������������������������������������������������������������ "
"link:#Replacing Classes in the Native "
"Image[[���������������������������������������������������������]] "
"���������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2267
#, no-wrap, fuzzy
msgid "Scanning Deployments Using Jandex"
msgstr "Jandex���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2269
#, fuzzy
msgid ""
"If your extension defines annotations or interfaces that mark beans needing "
"to be processed, you can locate these beans using the Jandex API, a Java "
"annotation indexer and offline reflection library. The following "
"`TestProcessor#scanForBeans` method shows how to find the beans annotated "
"with our `@TestAnnotation` that also implement the `IConfigConsumer` "
"interface:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������Java "
"��������������������������������������������������������������������������������������������������� "
"Jandex API "
"��������������������������������������������������������������������������������������� "
"`TestProcessor#scanForBeans` ������������������ `IConfigConsumer` "
"��������������������������������������������� `@TestAnnotation` "
"���������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2270
#, no-wrap, fuzzy
msgid "Example Jandex Usage"
msgstr "���������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2275
#, no-wrap
msgid ""
"    static DotName TEST_ANNOTATION = DotName.createSimple(TestAnnotation."
"class.getName());\n"
"...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2298
#, no-wrap
msgid ""
"    @BuildStep\n"
"    @Record(STATIC_INIT)\n"
"    void scanForBeans(TestRecorder recorder, BeanArchiveIndexBuildItem "
"beanArchiveIndex, <1>\n"
"            BuildProducer<TestBeanBuildItem> testBeanProducer) {\n"
"        IndexView indexView = beanArchiveIndex.getIndex(); <2>\n"
"        Collection<AnnotationInstance> testBeans = indexView."
"getAnnotations(TEST_ANNOTATION); <3>\n"
"        for (AnnotationInstance ann : testBeans) {\n"
"            ClassInfo beanClassInfo = ann.target().asClass();\n"
"            try {\n"
"                boolean isConfigConsumer = beanClassInfo.interfaceNames()\n"
"                        .stream()\n"
"                        .anyMatch(dotName -> dotName.equals(DotName."
"createSimple(IConfigConsumer.class.getName()))); <4>\n"
"                if (isConfigConsumer) {\n"
"                    Class<IConfigConsumer> beanClass = "
"(Class<IConfigConsumer>) Class.forName(beanClassInfo.name().toString(), "
"false, Thread.currentThread().getContextClassLoader());\n"
"                    testBeanProducer.produce(new "
"TestBeanBuildItem(beanClass)); <5>\n"
"                    log.infof(\"Configured bean: %s\", beanClass);\n"
"                }\n"
"            } catch (ClassNotFoundException e) {\n"
"                log.warn(\"Failed to load bean class\", e);\n"
"            }\n"
"        }\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2300
#, fuzzy
msgid ""
"Depend on a `BeanArchiveIndexBuildItem` to have the build step be run after "
"the deployment has been indexed."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������� "
"`BeanArchiveIndexBuildItem` ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2301
#, fuzzy
msgid "Retrieve the index."
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2302
#, fuzzy
msgid "Find all beans annotated with `@TestAnnotation`."
msgstr "`@TestAnnotation` ������������������������������������������������ ."

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2303
#, fuzzy
msgid ""
"Determine which of these beans also has the `IConfigConsumer` interface."
msgstr ""
"��������������������������������������������������������� `IConfigConsumer` "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2304
#, fuzzy
msgid ""
"Save the bean class in a `TestBeanBuildItem` for use in a latter "
"RUNTIME_INIT build step that will interact with the bean instances."
msgstr ""
"��������������������� `TestBeanBuildItem` ������������������������ "
"RUNTIME_INIT "
"���������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2305
#, no-wrap, fuzzy
msgid "Interacting With Extension Beans"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2307
#, fuzzy
msgid ""
"You can use the `io.quarkus.arc.runtime.BeanContainer` interface to interact "
"with your extension beans. The following `configureBeans` methods illustrate "
"interacting with the beans scanned for in the previous section:"
msgstr ""
"`io.quarkus.arc.runtime.BeanContainer` "
"��������������������������������������������������������������������������������������������������������� "
"`configureBeans` "
"������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2308
#, no-wrap, fuzzy
msgid "Using CDI BeanContainer Interface"
msgstr "CDI BeanContainer������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2317
#, no-wrap
msgid ""
"// TestProcessor#configureBeans\n"
"    @BuildStep\n"
"    @Record(RUNTIME_INIT)\n"
"    void configureBeans(TestRecorder recorder, List<TestBeanBuildItem> "
"testBeans, <1>\n"
"            BeanContainerBuildItem beanContainer, <2>\n"
"            TestRunTimeConfig runTimeConfig) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2323
#, no-wrap
msgid ""
"        for (TestBeanBuildItem testBeanBuildItem : testBeans) {\n"
"            Class<IConfigConsumer> beanClass = testBeanBuildItem."
"getConfigConsumer();\n"
"            recorder.configureBeans(beanContainer.getValue(), beanClass, "
"buildAndRunTimeConfig, runTimeConfig); <3>\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2333
#, no-wrap
msgid ""
"// TestRecorder#configureBeans\n"
"    public void configureBeans(BeanContainer beanContainer, "
"Class<IConfigConsumer> beanClass,\n"
"            TestBuildAndRunTimeConfig buildTimeConfig,\n"
"            TestRunTimeConfig runTimeConfig) {\n"
"        log.info(\"Begin BeanContainerListener callback\\n\");\n"
"        IConfigConsumer instance = beanContainer.instance(beanClass); <4>\n"
"        instance.loadConfig(buildTimeConfig, runTimeConfig); <5>\n"
"        log.infof(\"configureBeans, instance=%s\\n\", instance);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2335
#, fuzzy
msgid ""
"Consume the `TestBeanBuildItem`s produced from the scanning build step."
msgstr ""
"��������������������������������������������������� `TestBeanBuildItem` "
"������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2336
#, fuzzy
msgid ""
"Consume the `BeanContainerBuildItem` to order this build step to run after "
"the CDI bean container has been created."
msgstr ""
"CDI "
"Bean������������������������������������������������������������������������������������������ "
"`BeanContainerBuildItem` ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2337
#, fuzzy
msgid "Call the runtime recorder to record the bean interactions."
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2338
#, fuzzy
msgid "Runtime recorder retrieves the bean using its type."
msgstr ""
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2339
#, fuzzy
msgid ""
"Runtime recorder invokes the `IConfigConsumer#loadConfig(...)` method "
"passing in the configuration objects with runtime information."
msgstr ""
"��������������������������������� `IConfigConsumer#loadConfig(������)` "
"������������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2340
#, no-wrap, fuzzy
msgid "Manage Non-CDI Service"
msgstr "���CDI���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2342
#, fuzzy
msgid ""
"A common purpose for an extension is to integrate a non-CDI aware service "
"into the CDI based Quarkus runtime. Step 1 of this task is to load any "
"configuration needed in a STATIC_INIT build step as we did in <<Parsing "
"Config to Objects>>. Now we need to create an instance of the service using "
"the configuration. Let's return to the `TestProcessor#parseServiceXmlConfig` "
"method to see how this can be done."
msgstr ""
"���������������������������������������CDI���������������������������������CDI������������Quarkus���������������������������������������������������������������������������1��������� "
"link:#Parsing Config to Objects[[Parsing Config to "
"Objects]]������������������������STATIC_INIT��������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`TestProcessor#parseServiceXmlConfig` "
"���������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2343
#, no-wrap, fuzzy
msgid "Creating a Non-CDI Service"
msgstr "���CDI���������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2363
#, no-wrap
msgid ""
"// TestProcessor#parseServiceXmlConfig\n"
"    @BuildStep\n"
"    @Record(STATIC_INIT)\n"
"    RuntimeServiceBuildItem parseServiceXmlConfig(TestRecorder recorder) "
"throws JAXBException {\n"
"        RuntimeServiceBuildItem serviceBuildItem = null;\n"
"        JAXBContext context = JAXBContext.newInstance(XmlConfig.class);\n"
"        Unmarshaller unmarshaller = context.createUnmarshaller();\n"
"        InputStream is = getClass().getResourceAsStream(\"/config.xml\");\n"
"        if (is != null) {\n"
"            log.info(\"Have XmlConfig, loading\");\n"
"            XmlConfig config = (XmlConfig) unmarshaller.unmarshal(is);\n"
"            log.info(\"Loaded XmlConfig, creating service\");\n"
"            RuntimeValue<RuntimeXmlConfigService> service = recorder."
"initRuntimeService(config); //<1>\n"
"            serviceBuildItem = new RuntimeServiceBuildItem(service); //<3>\n"
"        }\n"
"        return serviceBuildItem;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2369
#, no-wrap
msgid ""
"// TestRecorder#initRuntimeService\n"
"    public RuntimeValue<RuntimeXmlConfigService> "
"initRuntimeService(XmlConfig config) {\n"
"        RuntimeXmlConfigService service = new "
"RuntimeXmlConfigService(config); //<2>\n"
"        return new RuntimeValue<>(service);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2373
#, no-wrap
msgid ""
"// RuntimeServiceBuildItem\n"
"    final public class RuntimeServiceBuildItem extends SimpleBuildItem {\n"
"    private RuntimeValue<RuntimeXmlConfigService> service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2377
#, no-wrap
msgid ""
"    public RuntimeServiceBuildItem(RuntimeValue<RuntimeXmlConfigService> "
"service) {\n"
"        this.service = service;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2382
#, no-wrap
msgid ""
"    public RuntimeValue<RuntimeXmlConfigService> getService() {\n"
"        return service;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2384
#, fuzzy
msgid "Call into the runtime recorder to record the creation of the service."
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2385
#, fuzzy
msgid ""
"Using the parsed `XmlConfig` instance, create an instance of "
"`RuntimeXmlConfigService` and wrap it in a `RuntimeValue`. Use a "
"`RuntimeValue` wrapper for non-interface objects that are non-proxiable."
msgstr ""
"��������������� `XmlConfig` ������������������������������������ "
"`RuntimeXmlConfigService` ��������������������������������������������� "
"`RuntimeValue` ������������������������ `RuntimeValue` "
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2386
#, fuzzy
msgid ""
"Wrap the return service value in a `RuntimeServiceBuildItem` for use in a "
"RUNTIME_INIT build step that will start the service."
msgstr ""
"��������������������������� RUNTIME_INIT "
"��������������������������������������������������������������������������� "
"`RuntimeServiceBuildItem` ������������������������"

#. type: Title =====
#: upstream/_guides/writing-extensions.adoc:2387
#, no-wrap, fuzzy
msgid "Starting a Service"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2389
#, fuzzy
msgid ""
"Now that you have recorded the creation of a service during the build phase, "
"you need to record how to start the service at runtime during booting. You "
"do this with a RUNTIME_INIT build step as shown in the "
"`TestProcessor#startRuntimeService` method."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`TestProcessor#startRuntimeService` "
"���������������������������������������������RUNTIME_INIT "
"������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2390
#, no-wrap, fuzzy
msgid "Starting/Stopping a Non-CDI Service"
msgstr "���CDI���������������������/������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2406
#, no-wrap
msgid ""
"// TestProcessor#startRuntimeService\n"
"    @BuildStep\n"
"    @Record(RUNTIME_INIT)\n"
"    ServiceStartBuildItem startRuntimeService(TestRecorder recorder, "
"ShutdownContextBuildItem shutdownContextBuildItem , // <1>\n"
"            RuntimeServiceBuildItem serviceBuildItem) throws IOException { //"
" <2>\n"
"        if (serviceBuildItem != null) {\n"
"            log.info(\"Registering service start\");\n"
"            recorder.startRuntimeService(shutdownContextBuildItem, "
"serviceBuildItem.getService()); // <3>\n"
"        } else {\n"
"            log.info(\"No RuntimeServiceBuildItem seen, check config.xml\");\n"
"        }\n"
"        return new ServiceStartBuildItem(\"RuntimeXmlConfigService\"); //<4>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2414
#, no-wrap
msgid ""
"// TestRecorder#startRuntimeService\n"
"    public void startRuntimeService(ShutdownContext shutdownContext, "
"RuntimeValue<RuntimeXmlConfigService> runtimeValue)\n"
"            throws IOException {\n"
"        RuntimeXmlConfigService service = runtimeValue.getValue();\n"
"        service.startService(); //<5>\n"
"        shutdownContext.addShutdownTask(service::stopService); //<6>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2416
#, fuzzy
msgid ""
"We consume a ShutdownContextBuildItem to register the service shutdown."
msgstr ""
"ShutdownContextBuildItem������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2417
#, fuzzy
msgid ""
"We consume the previously initialized service captured in "
"`RuntimeServiceBuildItem`."
msgstr ""
"`RuntimeServiceBuildItem` "
"������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2418
#, fuzzy
msgid "Call the runtime recorder to record the service start invocation."
msgstr ""
"������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2419
#, fuzzy
msgid ""
"Produce a `ServiceStartBuildItem` to indicate the startup of a service. See "
"<<Startup and Shutdown Events>> for details."
msgstr ""
"������������������������������ `ServiceStartBuildItem` "
"������������������������������ link:#Startup and Shutdown "
"Events[[������������������������������������������]]������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2420
#, fuzzy
msgid ""
"Runtime recorder retrieves the service instance reference and calls its "
"`startService` method."
msgstr ""
"��������������� ��������������������������� "
"��������������������������������������������� `startService` "
"������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2421
#, fuzzy
msgid ""
"Runtime recorder registers an invocation of the service instance "
"`stopService` method with the Quarkus `ShutdownContext`."
msgstr ""
"������������������������������������������������������������������ "
"`stopService` ������������������������������Quarkus `ShutdownContext`."

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2424
#, fuzzy
msgid ""
"The code for the `RuntimeXmlConfigService` can be viewed here: {quarkus-blob-"
"url}/core/test-extension/runtime/src/main/java/io/quarkus/extest/runtime/"
"RuntimeXmlConfigService.java[RuntimeXmlConfigService.java]"
msgstr ""
"`RuntimeXmlConfigService` "
"������������������������������������������������{quarkus-blob-url}/core/test-"
"extension/runtime/src/main/java/io/quarkus/extest/runtime/"
"RuntimeXmlConfigService.java[RuntimeXmlConfigService.java]"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2426
#, fuzzy
msgid ""
"The testcase for validating that the `RuntimeXmlConfigService` has started "
"can be found in the `testRuntimeXmlConfigService` test of "
"`ConfiguredBeanTest` and `NativeImageIT`."
msgstr ""
"`RuntimeXmlConfigService` "
"��������������������������������������������������������������������� "
"`ConfiguredBeanTest` ��� `NativeImageIT` ��� `testRuntimeXmlConfigService` "
"���������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2427
#, no-wrap, fuzzy
msgid "Startup and Shutdown Events"
msgstr "������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2430
#, fuzzy
msgid ""
"The Quarkus container supports startup and shutdown lifecycle events to "
"notify components of the container startup and shutdown. There are CDI "
"events fired that components can observe are illustrated in this example:"
msgstr ""
"Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������CDI���������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2431
#, no-wrap, fuzzy
msgid "Observing Container Startup"
msgstr "���������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2436
#, no-wrap
msgid ""
"import io.quarkus.runtime.ShutdownEvent;\n"
"import io.quarkus.runtime.StartupEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2445
#, no-wrap
msgid ""
"public class SomeBean {\n"
"    /**\n"
"     * Called when the runtime has started\n"
"     * @param event\n"
"     */\n"
"    void onStart(@Observes StartupEvent event) { // <1>\n"
"        System.out.printf(\"onStart, event=%s%n\", event);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2454
#, no-wrap
msgid ""
"    /**\n"
"     * Called when the runtime is shutting down\n"
"     * @param event\n"
"    */\n"
"    void onStop(@Observes ShutdownEvent event) { // <2>\n"
"        System.out.printf(\"onStop, event=%s%n\", event);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2456
#, fuzzy
msgid "Observe a `StartupEvent` to be notified the runtime has started."
msgstr ""
"��������������������������������������������������������������� "
"`StartupEvent` ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2457
#, fuzzy
msgid ""
"Observe a `ShutdownEvent` to be notified when the runtime is going to "
"shutdown."
msgstr ""
"������������������������������������������������������������������������������������������������ "
"`ShutdownEvent` ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2461
#, fuzzy
msgid ""
"What is the relevance of startup and shutdown events for extension authors? "
"We have already seen the use of a `ShutdownContext` to register a callback "
"to perform shutdown tasks in the <<Starting a Service>> section. These "
"shutdown tasks would be called after a `ShutdownEvent` had been sent."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������� "
"link:#Starting a "
"Service[���������������������]]��������������������������������������������������������������������������������������������������������������������� "
"`ShutdownContext` "
"��������������������������������������������������������������������������������������������������� "
"`ShutdownEvent` ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2467
#, fuzzy
msgid ""
"A `StartupEvent` is fired after all `io.quarkus.deployment.builditem."
"ServiceStartBuildItem` producers have been consumed.  The implication of "
"this is that if an extension has services that application components would "
"expect to have been started when they observe a `StartupEvent`, the build "
"steps that invoke the runtime code to start those services needs to produce "
"a `ServiceStartBuildItem` to ensure that the runtime code is run before the "
"`StartupEvent` is sent. Recall that we saw the production of a "
"`ServiceStartBuildItem` in the previous section, and it is repeated here for "
"clarity:"
msgstr ""
"`StartupEvent` ������������������ `io.quarkus.deployment.builditem."
"ServiceStartBuildItem` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`StartupEvent` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`ServiceStartBuildItem` ������������������ `StartupEvent` "
"������������������������������������������������������������������������������������������������������������������������ "
"`ServiceStartBuildItem` "
"���������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2468
#, no-wrap, fuzzy
msgid "Example of Producing a ServiceStartBuildItem"
msgstr "ServiceStartBuildItem������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2479
#, no-wrap
msgid ""
"// TestProcessor#startRuntimeService\n"
"    @BuildStep\n"
"    @Record(RUNTIME_INIT)\n"
"    ServiceStartBuildItem startRuntimeService(TestRecorder recorder, "
"ShutdownContextBuildItem shutdownContextBuildItem,\n"
"            RuntimeServiceBuildItem serviceBuildItem) throws IOException {\n"
"...\n"
"        return new ServiceStartBuildItem(\"RuntimeXmlConfigService\"); //<1>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2481
#, fuzzy
msgid ""
"Produce a `ServiceStartBuildItem` to indicate that this is a service "
"starting step that needs to run before the `StartupEvent` is sent."
msgstr ""
"`StartupEvent` "
"��������������������������������������������������������������������������������������������������������������� "
"`ServiceStartBuildItem` ���������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2482
#, no-wrap, fuzzy
msgid "Register Resources for Use in Native Image"
msgstr ""
"������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2484
#, fuzzy
msgid ""
"Not all configuration or resources can be consumed at build time. If you "
"have classpath resources that the runtime needs to access, you need to "
"inform the build phase that these resources need to be copied into the "
"native image. This is done by producing one or more "
"`NativeImageResourceBuildItem` or `NativeImageResourceBundleBuildItem` in "
"the case of resource bundles. Examples of this are shown in this sample "
"`registerNativeImageResources` build step:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������1��������������������� "
"`NativeImageResourceBuildItem` ��������� "
"`NativeImageResourceBundleBuildItem` "
"��������������������������������������������������������������� "
"`registerNativeImageResources` "
"������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2485
#, no-wrap, fuzzy
msgid "Registering Resources and ResourceBundles"
msgstr "������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2493
#, no-wrap
msgid ""
"public final class MyExtProcessor {\n"
"    @Inject\n"
"    BuildProducer<NativeImageResourceBuildItem> resource;\n"
"    @Inject\n"
"    BuildProducer<NativeImageResourceBundleBuildItem> resourceBundle;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2497
#, no-wrap
msgid ""
"    @BuildStep\n"
"    void registerNativeImageResources() {\n"
"        resource.produce(new NativeImageResourceBuildItem(\"/security/"
"runtime.keys\")); //<1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2500
#, no-wrap
msgid ""
"        resource.produce(new NativeImageResourceBuildItem(\n"
"                \"META-INF/my-descriptor.xml\")); //<2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2504
#, no-wrap
msgid ""
"        resourceBundle.produce(new NativeImageResourceBuildItem(\"javax.xml."
"bind.Messages\")); //<3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2506
#, fuzzy
msgid ""
"Indicate that the /security/runtime.keys classpath resource should be copied "
"into native image."
msgstr ""
"���������������������������/security/runtime."
"keys������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2507
#, fuzzy
msgid ""
"Indicate that the `META-INF/my-descriptor.xml` resource should be copied "
"into native image"
msgstr ""
"`META-INF/my-descriptor.xml` "
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2508
#, fuzzy
msgid ""
"Indicate that the \"javax.xml.bind.Messages\" resource bundle should be "
"copied into native image."
msgstr ""
"javax.xml.bind."
"Messages\"������������������������������������������������������������������������������������������������"

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2509
#, no-wrap, fuzzy
msgid "Service files"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2513
#, fuzzy
msgid ""
"If you are using `META-INF/services` files you need to register the files as "
"resources so that your native image can find them, but you also need to "
"register each listed class for reflection so they can be instantiated or "
"inspected at run-time:"
msgstr ""
"`META-INF/services` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2517
#: upstream/_guides/writing-extensions.adoc:2547
#: upstream/_guides/writing-extensions.adoc:2576
#, no-wrap
msgid "public final class MyExtProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2521
#, no-wrap
msgid ""
"    @BuildStep\n"
"    void "
"registerNativeImageResources(BuildProducer<ServiceProviderBuildItem> "
"services) {\n"
"        String service = \"META-INF/services/\" + io.quarkus.SomeService."
"class.getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2526
#, no-wrap
msgid ""
"        // find out all the implementation classes listed in the service "
"files\n"
"        Set<String> implementations =\n"
"            ServiceUtil.classNamesNamedIn(Thread.currentThread()."
"getContextClassLoader(),\n"
"                                          service);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2534
#, no-wrap
msgid ""
"        // register every listed implementation class so they can be "
"instantiated\n"
"        // in native-image at run-time\n"
"        services.produce(\n"
"            new ServiceProviderBuildItem(io.quarkus.SomeService.class."
"getName(),\n"
"                                         implementations.toArray(new "
"String[0])));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2540
#, fuzzy
msgid ""
"`ServiceProviderBuildItem` takes a list of service implementation classes as "
"parameters: if you are not reading them from the service file, make sure "
"that they correspond to the service file contents because the service file "
"will still be read and used at run-time. This is not a substitute for "
"writing a service file."
msgstr ""
"`ServiceProviderBuildItem` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2543
#, fuzzy
msgid ""
"This only registers the implementation classes for instantiation via "
"reflection (you will not be able to inspect its fields and methods). If you "
"need to do that, you can do it this way:"
msgstr ""
"������������������������������������������������������������������������������������������������������(���������������������������������������������������������������������������)���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2552
#, no-wrap
msgid ""
"    @BuildStep\n"
"    void "
"registerNativeImageResources(BuildProducer<NativeImageResourceBuildItem> "
"resource,\n"
"                                     BuildProducer<ReflectiveClassBuildItem> "
"reflectionClasses) {\n"
"        String service = \"META-INF/services/\" + io.quarkus.SomeService."
"class.getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2555
#, no-wrap
msgid ""
"        // register the service file so it is visible in native-image\n"
"        resource.produce(new NativeImageResourceBuildItem(service));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2565
#, no-wrap
msgid ""
"        // register every listed implementation class so they can be "
"inspected/instantiated\n"
"        // in native-image at run-time\n"
"        Set<String> implementations =\n"
"            ServiceUtil.classNamesNamedIn(Thread.currentThread()."
"getContextClassLoader(),\n"
"                                          service);\n"
"        reflectionClasses.produce(\n"
"            new ReflectiveClassBuildItem(true, true, implementations."
"toArray(new String[0])));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2569
#, fuzzy
msgid ""
"While this is the easiest way to get your services running natively, it's "
"less efficient than scanning the implementation classes at build time and "
"generating code that registers them at static-init time instead of relying "
"on reflection."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������ "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2572
#, fuzzy
msgid ""
"You can achieve that by adapting the previous build step to use a static-"
"init recorder instead of registering classes for reflection:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2582
#, no-wrap
msgid ""
"    @BuildStep\n"
"    @Record(ExecutionTime.STATIC_INIT)\n"
"    void registerNativeImageResources(RecorderContext recorderContext,\n"
"                                     SomeServiceRecorder recorder) {\n"
"        String service = \"META-INF/services/\" + io.quarkus.SomeService."
"class.getName();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2591
#, no-wrap
msgid ""
"        // read the implementation classes\n"
"        Collection<Class<? extends io.quarkus.SomeService>> "
"implementationClasses = new LinkedHashSet<>();\n"
"        Set<String> implementations = ServiceUtil.classNamesNamedIn(Thread."
"currentThread().getContextClassLoader(),\n"
"                                                                    "
"service);\n"
"        for(String implementation : implementations) {\n"
"            implementationClasses.add((Class<? extends io.quarkus."
"SomeService>)\n"
"                recorderContext.classProxy(implementation));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2596
#, no-wrap
msgid ""
"        // produce a static-initializer with those classes\n"
"        recorder.configure(implementationClasses);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2599
#, no-wrap
msgid "@Recorder\n"
"public class SomeServiceRecorder {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2604
#, no-wrap
msgid ""
"    public void configure(List<Class<? extends io.quarkus.SomeService>> "
"implementations) {\n"
"        // configure our service statically\n"
"        SomeServiceProvider serviceProvider = SomeServiceProvider."
"instance();\n"
"        SomeServiceBuilder builder = serviceProvider."
"getSomeServiceBuilder();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2614
#, no-wrap
msgid ""
"        List<io.quarkus.SomeService> services = new "
"ArrayList<>(implementations.size());\n"
"        // instantiate the service implementations\n"
"        for (Class<? extends io.quarkus.SomeService> implementationClass : "
"implementations) {\n"
"            try {\n"
"                services.add(implementationClass.getConstructor()."
"newInstance());\n"
"            } catch (Exception e) {\n"
"                throw new IllegalArgumentException(\"Unable to instantiate "
"service \" + implementationClass, e);\n"
"            }\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2618
#, no-wrap
msgid ""
"        // build our service\n"
"        builder.withSomeServices(implementations.toArray(new io.quarkus."
"SomeService[0]));\n"
"        ServiceManager serviceManager = builder.build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2623
#, no-wrap
msgid ""
"        // register it\n"
"        serviceProvider.registerServiceManager(serviceManager, Thread."
"currentThread().getContextClassLoader());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2626
#, no-wrap, fuzzy
msgid "Object Substitution"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2628
#, fuzzy
msgid ""
"Objects created during the build phase that are passed into the runtime need "
"to have a default constructor in order for them to be created and configured "
"at startup of the runtime from the build time state. If an object does not "
"have a default constructor you will see an error similar to the following "
"during generation of the augmented artifacts:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2629
#, no-wrap, fuzzy
msgid "DSAPublicKey Serialization Error"
msgstr "DSAPublicKey ������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2638
#, no-wrap
msgid ""
"\t[error]: Build step io.quarkus.deployment.steps.MainClassBuildStep#build "
"threw an exception: java.lang.RuntimeException: Unable to serialize objects "
"of type class sun.security.provider.DSAPublicKeyImpl to bytecode as it has "
"no default constructor\n"
"\tat io.quarkus.builder.Execution.run(Execution.java:123)\n"
"\tat io.quarkus.builder.BuildExecutionBuilder.execute(BuildExecutionBuilder."
"java:136)\n"
"\tat io.quarkus.deployment.QuarkusAugmentor.run(QuarkusAugmentor.java:110)\n"
"\tat io.quarkus.runner.RuntimeRunner.run(RuntimeRunner.java:99)\n"
"\t... 36 more\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2641
#, fuzzy
msgid ""
"There is a `io.quarkus.runtime.ObjectSubstitution` interface that can be "
"implemented to tell Quarkus how to handle such classes. An example "
"implementation for the `DSAPublicKey` is shown here:"
msgstr ""
"������������������������������������������������������Quarkus������������������������������������ "
"`io.quarkus.runtime.ObjectSubstitution` "
"������������������������������������������ `DSAPublicKey` "
"���������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2642
#, no-wrap, fuzzy
msgid "DSAPublicKeyObjectSubstitution Example"
msgstr "DSAPublicKeyObjectSubstitution ������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2646
#, no-wrap
msgid "package io.quarkus.extest.runtime.subst;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2653
#, no-wrap
msgid ""
"import java.security.KeyFactory;\n"
"import java.security.NoSuchAlgorithmException;\n"
"import java.security.interfaces.DSAPublicKey;\n"
"import java.security.spec.InvalidKeySpecException;\n"
"import java.security.spec.X509EncodedKeySpec;\n"
"import java.util.logging.Logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2655
#, no-wrap
msgid "import io.quarkus.runtime.ObjectSubstitution;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2666
#, no-wrap
msgid ""
"public class DSAPublicKeyObjectSubstitution implements "
"ObjectSubstitution<DSAPublicKey, KeyProxy> {\n"
"    private static final Logger log = Logger."
"getLogger(\"DSAPublicKeyObjectSubstitution\");\n"
"    @Override\n"
"    public KeyProxy serialize(DSAPublicKey obj) { //<1>\n"
"        log.info(\"DSAPublicKeyObjectSubstitution.serialize\");\n"
"        byte[] encoded = obj.getEncoded();\n"
"        KeyProxy proxy = new KeyProxy();\n"
"        proxy.setContent(encoded);\n"
"        return proxy;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2676
#, no-wrap
msgid ""
"    @Override\n"
"    public DSAPublicKey deserialize(KeyProxy obj) { //<2>\n"
"        log.info(\"DSAPublicKeyObjectSubstitution.deserialize\");\n"
"        byte[] encoded = obj.getContent();\n"
"        X509EncodedKeySpec publicKeySpec = new X509EncodedKeySpec(encoded);\n"
"        DSAPublicKey dsaPublicKey = null;\n"
"        try {\n"
"            KeyFactory kf = KeyFactory.getInstance(\"DSA\");\n"
"            dsaPublicKey = (DSAPublicKey) kf."
"generatePublic(publicKeySpec);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2683
#, no-wrap
msgid ""
"        } catch (NoSuchAlgorithmException | InvalidKeySpecException e) {\n"
"            e.printStackTrace();\n"
"        }\n"
"        return dsaPublicKey;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2685
#, fuzzy
msgid ""
"The serialize method takes the object without a default constructor and "
"creates a `KeyProxy` that contains the information necessary to recreate the "
"`DSAPublicKey`."
msgstr ""
"`DSAPublicKey`serialize "
"������������������������������������������������������������������������������������������������������������ "
"`KeyProxy` ���������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2686
#, fuzzy
msgid ""
"The deserialize method uses the `KeyProxy` to recreate the `DSAPublicKey` "
"from its encoded form using the key factory."
msgstr ""
"deserialize ������������������ `KeyProxy` "
"��������������������������������������������������������������������������������������������� "
"`DSAPublicKey` ������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2688
#, fuzzy
msgid ""
"An extension registers this substitution by producing an "
"`ObjectSubstitutionBuildItem` as shown in this "
"`TestProcessor#loadDSAPublicKey` fragment:"
msgstr ""
"������������������������ `TestProcessor#loadDSAPublicKey` "
"������������������������������������ `ObjectSubstitutionBuildItem` "
"������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2689
#, no-wrap, fuzzy
msgid "Registering an Object Substitution"
msgstr "���������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2702
#, no-wrap
msgid ""
"    @BuildStep\n"
"    @Record(STATIC_INIT)\n"
"    PublicKeyBuildItem loadDSAPublicKey(TestRecorder recorder,\n"
"            BuildProducer<ObjectSubstitutionBuildItem> substitutions) throws "
"IOException, GeneralSecurityException {\n"
"...\n"
"        // Register how to serialize DSAPublicKey\n"
"        ObjectSubstitutionBuildItem.Holder<DSAPublicKey, KeyProxy> holder = "
"new ObjectSubstitutionBuildItem.Holder(\n"
"                DSAPublicKey.class, KeyProxy.class, "
"DSAPublicKeyObjectSubstitution.class);\n"
"        ObjectSubstitutionBuildItem keysub = new "
"ObjectSubstitutionBuildItem(holder);\n"
"        substitutions.produce(keysub);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2706
#, no-wrap
msgid ""
"        log.info(\"loadDSAPublicKey run\");\n"
"        return new PublicKeyBuildItem(publicKey);\n"
"    }\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/writing-extensions.adoc:2708
#, no-wrap, fuzzy
msgid "Replacing Classes in the Native Image"
msgstr "���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2710
#, fuzzy
msgid ""
"The Graal SDK supports substitutions of classes in the native image. An "
"example of how one could replace the `XmlConfig/XmlData` classes with "
"versions that have no JAXB annotation dependencies is shown in these example "
"classes:"
msgstr ""
"Graal SDK "
"������������������������������������������������������������������������������������������ "
"`XmlConfig/XmlData` ������������������JAXB "
"���������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/writing-extensions.adoc:2711
#, no-wrap, fuzzy
msgid "Substitution of XmlConfig/XmlData Classes Example"
msgstr "XmlConfig/XmlData���������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2719
#, no-wrap
msgid ""
"package io.quarkus.extest.runtime.graal;\n"
"import java.util.Date;\n"
"import com.oracle.svm.core.annotate.Substitute;\n"
"import com.oracle.svm.core.annotate.TargetClass;\n"
"import io.quarkus.extest.runtime.config.XmlData;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2723
#, no-wrap
msgid ""
"@TargetClass(XmlConfig.class)\n"
"@Substitute\n"
"public final class Target_XmlConfig {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2730
#, no-wrap
msgid ""
"    @Substitute\n"
"    private String address;\n"
"    @Substitute\n"
"    private int port;\n"
"    @Substitute\n"
"    private ArrayList<XData> dataList;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2735
#, no-wrap
msgid ""
"    @Substitute\n"
"    public String getAddress() {\n"
"        return address;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2740
#, no-wrap
msgid "    @Substitute\n"
"    public int getPort() {\n"
"        return port;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2745
#, no-wrap
msgid ""
"    @Substitute\n"
"    public ArrayList<XData> getDataList() {\n"
"        return dataList;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2756
#, no-wrap
msgid ""
"    @Substitute\n"
"    @Override\n"
"    public String toString() {\n"
"        return \"Target_XmlConfig{\" +\n"
"                \"address='\" + address + '\\'' +\n"
"                \", port=\" + port +\n"
"                \", dataList=\" + dataList +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2760
#, no-wrap
msgid ""
"@TargetClass(XmlData.class)\n"
"@Substitute\n"
"public final class Target_XmlData {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2767
#, no-wrap
msgid ""
"    @Substitute\n"
"    private String name;\n"
"    @Substitute\n"
"    private String model;\n"
"    @Substitute\n"
"    private Date date;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2772
#, no-wrap
msgid ""
"    @Substitute\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2777
#, no-wrap
msgid ""
"    @Substitute\n"
"    public String getModel() {\n"
"        return model;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2782
#, no-wrap
msgid ""
"    @Substitute\n"
"    public Date getDate() {\n"
"        return date;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2793
#, no-wrap
msgid ""
"    @Substitute\n"
"    @Override\n"
"    public String toString() {\n"
"        return \"Target_XmlData{\" +\n"
"                \"name='\" + name + '\\'' +\n"
"                \", model='\" + model + '\\'' +\n"
"                \", date='\" + date + '\\'' +\n"
"                '}';\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/writing-extensions.adoc:2795
#, no-wrap, fuzzy
msgid "Configuration reference documentation"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2799
#, fuzzy
msgid ""
"The configuration is an important part of each extension and therefore needs "
"to be properly documented.  Each configuration property should have a proper "
"Javadoc comment."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"Javadoc ������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2802
#, fuzzy
msgid ""
"While it is handy to have the documentation available when coding, this "
"configuration documentation must also be available in the extension guides.  "
"The Quarkus build automatically generates the configuration documentation "
"for you based on the Javadoc comments but you need to explicitly include it "
"in your guide."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������Javadoc������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2804
#, fuzzy
msgid ""
"In this section, we will explain everything you need to know about the "
"configuration reference documentation."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:2805
#, no-wrap, fuzzy
msgid "Writing the documentation"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2808
#, fuzzy
msgid ""
"For each configuration property, you need to write some Javadoc explaining "
"its purpose."
msgstr ""
"������������������������������������������������������������������������������Javadoc���������������������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:2812
#, fuzzy
msgid ""
"Always make the first sentence meaningful and self-contained as it is "
"included in the summary table."
msgstr ""
"������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2815
#, fuzzy
msgid ""
"You can either use standard Javadoc comments or Asciidoc directly as a "
"Javadoc comment."
msgstr ""
"���������Javadoc���������������Asciidoc���������Javadoc���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2819
#, fuzzy
msgid ""
"We assume you are familiar with writing Javadoc comments so let's focus on "
"our Asciidoc support.  While standard Javadoc comments are perfectly fine "
"for simple documentation (recommended even), if you want to include tips, "
"source code extracts, lists... Asciidoc comes in handy."
msgstr ""
"���������������Javadoc���������������������������������������������������������������������������������������Asciidoc������������������������������������������������������������������Javadoc���������������������������������������������������������������������������������������������������������������������������Tips���������������������������������������������������������������������������Asciidoc������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2821
#, fuzzy
msgid "Here is a typical configuration property commented with Asciidoc:"
msgstr ""
"������������Asciidoc������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2838
#, no-wrap
msgid ""
"/**\n"
" * Class name of the Hibernate ORM dialect. The complete list of bundled "
"dialects is available in the\n"
" * https://docs.jboss.org/hibernate/stable/orm/javadocs/org/hibernate/"
"dialect/package-summary.html[Hibernate ORM JavaDoc].\n"
" *\n"
" * [NOTE]\n"
" * ====\n"
" * Not all the dialects are supported in GraalVM native executables: we "
"currently provide driver extensions for PostgreSQL,\n"
" * MariaDB, Microsoft SQL Server and H2.\n"
" * ====\n"
" *\n"
" * @asciidoclet\n"
" */\n"
"@ConfigItem\n"
"public Optional<String> dialect;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2842
#, fuzzy
msgid ""
"This is the simple case: you just have to write Asciidoc and mark the "
"comment with the `@asciidoclet` tag.  This tag has two purposes: it is used "
"as a marker for our generation tool but it is also used by the `javadoc` "
"process for proper Javadoc generation."
msgstr ""
"���������������������������������: Asciidoc ������������������������������ "
"`@asciidoclet` "
"������������������������������������������������������������2���������������������������:"
" ��������������������������������������������������������������� `javadoc` "
"��������������������������� Javadoc "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2844
#, fuzzy
msgid "Now let's consider a more complicated example:"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2882
#, no-wrap
msgid ""
"// @formatter:off\n"
"/**\n"
" * Name of the file containing the SQL statements to execute when Hibernate "
"ORM starts.\n"
" * Its default value differs depending on the Quarkus launch mode:\n"
" *\n"
" * * In dev and test modes, it defaults to `import.sql`.\n"
" *   Simply add an `import.sql` file in the root of your resources directory\n"
" *   and it will be picked up without having to set this property.\n"
" *   Pass `no-file` to force Hibernate ORM to ignore the SQL import file.\n"
" * * In production mode, it defaults to `no-file`.\n"
" *   It means Hibernate ORM won't try to execute any SQL import file by "
"default.\n"
" *   Pass an explicit value to force Hibernate ORM to execute the SQL import "
"file.\n"
" *\n"
" * If you need different SQL statements between dev mode, test "
"(`@QuarkusTest`) and in production, use Quarkus\n"
" * https://quarkus.io/guides/config#configuration-profiles[configuration "
"profiles facility].\n"
" *\n"
" * [source,property]\n"
" * .application.properties\n"
" * ----\n"
" * %dev.quarkus.hibernate-orm.sql-load-script = import-dev.sql\n"
" * %test.quarkus.hibernate-orm.sql-load-script = import-test.sql\n"
" * %prod.quarkus.hibernate-orm.sql-load-script = no-file\n"
" * ----\n"
" *\n"
" * [NOTE]\n"
" * ====\n"
" * Quarkus supports `.sql` file with SQL statements or comments spread over "
"multiple lines.\n"
" * Each SQL statement must be terminated by a semicolon.\n"
" * ====\n"
" *\n"
" * @asciidoclet\n"
" */\n"
"// @formatter:on\n"
"@ConfigItem\n"
"public Optional<String> sqlLoadScript;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2885
#, fuzzy
msgid "A few comments on this one:"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2891
#, fuzzy
msgid ""
"Every time you will need the indentation to be respected in the Javadoc "
"comment (think list items spread on multiple lines or indented source code), "
"you will need to disable temporarily the automatic Eclipse formatter (this, "
"even if you don't use Eclipse as the formatter is included in our build).  "
"To do so, use the `// @formatter:off`/`// @formatter:on` markers.  Note the "
"fact that they are separate comments and there is a space after the `//` "
"marker. This is required."
msgstr ""
"Javadoc������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Eclipse������������������������������������������������������������������������������������������������������������������������������������������������������������������������Eclipse������������������������������������������������������������������������������ "
"`// @formatter:off`/ `// @formatter:on` "
"��������������������������������������������������������������������������������������� "
"`//` "
"������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2892
#, fuzzy
msgid ""
"As you can see, you can use the full power of Asciidoctor (except for the "
"limitation below)"
msgstr ""
"������������������������������������������������������������������������������������������(������������������������)"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:2897
#, fuzzy
msgid ""
"You cannot use open blocks (`--`) in your Asciidoctor documentation.  All "
"the other types of blocks (source, admonitions...) are supported."
msgstr ""
"Asciidoctor ������������������������������������������������������ ( `--`) "
"������������������������������������������������������������������������������������ "
"(���������������������������������...) ������������������������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:2904
#, fuzzy
msgid ""
"By default, the doc generator will use the hyphenated field name as the key "
"of a `java.util.Map` configuration item.  To override this default and have "
"a user friendly key (independent of implementation details), you may use the "
"`io.quarkus.runtime.annotations.ConfigDocMapKey` annotation.  See the "
"following example,"
msgstr ""
"������������������������doc ��������������������� `java.util.Map` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`io.quarkus.runtime.annotations.ConfigDocMapKey` "
"������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2915
#, no-wrap
msgid ""
"@ConfigRoot\n"
"public class SomeConfig {\n"
"    /**\n"
"     * Namespace configuration.\n"
"     */\n"
"    @ConfigItem(name = ConfigItem.PARENT)\n"
"    @ConfigDocMapKey(\"cache-name\") <1>\n"
"    Map<String, CaffeineNamespaceConfig> namespace;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2918
#, fuzzy
msgid ""
"This will generate a configuration map key named `quarkus.some.\"cache-"
"name\"` instead of `quarkus.some.\"namespace\"`."
msgstr ""
"������������������ `quarkus.some.\"namespace\"` ��������������� `quarkus."
"some.\"cache-name\"` "
"���������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:2920
#, no-wrap, fuzzy
msgid "Writing section documentation"
msgstr "���������������������������������������������"

#. type: delimited block =
#: upstream/_guides/writing-extensions.adoc:2924
#, fuzzy
msgid ""
"If you wish to generate configuration section of a given `@ConfigGroup`, "
"Quarkus has got you covered with the `@ConfigDocSection` annotation.  See "
"the code example below:"
msgstr ""
"��������������� `@ConfigGroup` "
"������������������������������������������������������ `@ConfigDocSection` "
"������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2933
#, no-wrap
msgid ""
"/**\n"
"* Config group related configuration.\n"
"* Amazing introduction here\n"
"*/\n"
"@ConfigItem\n"
"@ConfigDocSection <1>\n"
"public ConfigGroupConfig configGroup;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2938
#, fuzzy
msgid ""
"This will add a section documentation for the `configGroup` config item in "
"the generated documentation.  Section's title and introduction will be "
"derived from the javadoc of the configuration item. The first sentence from "
"the javadoc is considered as the section title and the remaining sentences "
"used as section introduction.  You can also use the `@asciidoclet` tag as "
"shown above."
msgstr ""
"������������������������������������������������������ `configGroup` "
"������������������������������������������������������������������������������������������������������������������������������������������ "
"javadoc ������������������������javadoc "
"������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@asciidoclet` ���������������������������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:2939
#, no-wrap, fuzzy
msgid "Generating the documentation"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2942
#, fuzzy
msgid "Generating the documentation is easy:"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2944
#, fuzzy
msgid "Running `./mvnw clean install -DskipTests -DskipITs` will do."
msgstr ""
"`./mvnw clean install -DskipTests -DskipITs` ������������������OK���������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2945
#, fuzzy
msgid ""
"You can either do it globally or in a specific extension directory (e.g. "
"`extensions/mailer`)."
msgstr ""
"��������������������������������������������������������������������������� "
"( `extensions/mailer` ������) ���������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2947
#, fuzzy
msgid ""
"The documentation is generated in the global `target/asciidoc/generated/"
"config/` located at the root of the project."
msgstr ""
"��������������������������������������������������������������������������� "
"`target/asciidoc/generated/config/` ������������������������"

#. type: Title ===
#: upstream/_guides/writing-extensions.adoc:2948
#, no-wrap, fuzzy
msgid "Including the documentation in the extension guide"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2951
#, fuzzy
msgid ""
"Now that you have generated the configuration reference documentation for "
"your extension, you need to include it in your guide (and review it)."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������� "
"(������������������������������������������������������������)���"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2953
#, fuzzy
msgid "This is simple, include the generated documentation in your guide:"
msgstr ""
"������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2957
#, no-wrap
msgid ""
"\\include::{generated-dir}/config/quarkus-your-extension.adoc[opts=optional, "
"leveloffset=+1]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2960
#, fuzzy
msgid ""
"If you are interested in including the generated documentation for the "
"config group, you can use the include statement below"
msgstr ""
"���������������������������������������������������������������������������������������������������include������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2963
#, no-wrap
msgid ""
"\\include::{generated-dir}/config/hyphenated-config-group-class-name-with-"
"runtime-or-deployment-namespace-replaced-by-config-group-namespace.adoc[opts="
"optional, leveloffset=+1]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2966
#, fuzzy
msgid ""
"For example, the `io.quarkus.vertx.http.runtime.FormAuthConfig` "
"configuration group will be generated in a file named `quarkus-vertx-http-"
"config-group-form-auth-config.adoc`."
msgstr ""
"������������ `io.quarkus.vertx.http.runtime.FormAuthConfig` "
"��������������������� `quarkus-vertx-http-config-group-form-auth-config."
"adoc` ������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2969
#, fuzzy
msgid "A few recommendations:"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2971
#, fuzzy
msgid ""
"`opts=optional` is mandatory as we don't want the build to fail if only part "
"of the configuration documentation has been generated"
msgstr ""
"`opts=optional` "
"���������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2974
#, fuzzy
msgid ""
"The documentation is generated with a title level of 2 (i.e. `==`).  You "
"usually need to adjust it.  It can be done with `leveloffset=+N`."
msgstr ""
"���������������������������������������������2(���: `=="
"`)��������������������������������������������������������������������������������������� "
"`leveloffset=+N`."

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2977
#, fuzzy
msgid ""
"It is not recommended to include the whole configuration documentation in "
"the middle of your guide as it's heavy.  If you have an `application."
"properties` extract with your configuration, just do as follows."
msgstr ""
"������������������������������������������������������������������������������������������������������������ "
"`application.properties` "
"������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2979
#, fuzzy
msgid "First, include a tip just below your `application.properties` extract:"
msgstr ""
"��������� `application.properties` "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2984
#, no-wrap
msgid ""
"[TIP]\n"
"For more information about the extension configuration please refer to the "
"<<configuration-reference, Configuration Reference>>.\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2987
#, fuzzy
msgid ""
"Then, at the end of your documentation, include the extensive documentation:"
msgstr ""
"������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2991
#, no-wrap
msgid "[[configuration-reference]]\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/writing-extensions.adoc:2994
msgid ""
"\\include::{generated-dir}/config/quarkus-your-extension.adoc[opts=optional, "
"leveloffset=+1]"
msgstr ""

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:2997
#, fuzzy
msgid "Finally, generate the documentation and check it out."
msgstr "������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/writing-extensions.adoc:2998
#, no-wrap, fuzzy
msgid "Continuous testing of your extension"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/writing-extensions.adoc:3003
#, fuzzy
msgid ""
"In order to make it easy for extension authors to test their extensions "
"daily against the latest snapshot of Quarkus, Quarkus has introduced the "
"notion of Ecosystem CI. The Ecosystem CI link:https://github.com/quarkusio/"
"quarkus-ecosystem-ci/blob/master/README.adoc[README] has all the details on "
"how to set up a GitHub Actions job to take advantage of this capability, "
"while this link:https://www.youtube.com/watch?v=VpbRA1n0hHQ[video] provides "
"an overview of what the process looks like."
msgstr ""
"���������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������Quarkus���������������������CI���������������������������������������Ecosystem "
"CI link:https://github.com/quarkusio/quarkus-ecosystem-ci/blob/master/README."
"adoc[README]���������������������������������������������GitHub "
"Actions������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy-http.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Funqy HTTP Binding (Standalone)"
msgstr "Quarkus - Funqy HTTP���������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:13
#, fuzzy
msgid ""
"The guide walks through quickstart code to show you how you can deploy Funqy "
"as a standalone service and invoke on Funqy functions using HTTP."
msgstr ""
"������������������������Funqy���������������������������������������������������������������HTTP������������Funqy������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:20
#, fuzzy
msgid ""
"The Funqy HTTP binding is not a replacement for REST over HTTP.  Because "
"Funqy needs to be portable across a lot of different protocols and function "
"providers its HTTP binding is very minimalistic and you will lose REST "
"features like linking and the ability to leverage HTTP features like cache-"
"control and conditional GETs.  You may want to consider using Quarkus's JAX-"
"RS, Spring MVC, or Vert.x Web Reactive Routes support instead, although "
"Funqy will have less overhead than these alternatives (except Vert.x which "
"is still super fast)."
msgstr ""
"Funqy���HTTP������������������������HTTP������REST������������������������������������Funqy������������������������������������������������������������������������������������������������������������������HTTP������������������������������������������������������������������������REST���������������������������������������������������������GET������������HTTP������������������������������������������������������������������������Quarkus���JAX-"
"RS���Spring MVC������������Vert.x Web Reactive "
"Routes���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:27
#, fuzzy
msgid "Read about link:funqy[Funqy Basics].  This is a short read!"
msgstr ""
"link:funqy[���������������������������]���������������������������������!"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:31
#, no-wrap, fuzzy
msgid "The Quickstart"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:36
#, fuzzy
msgid ""
"The solution is located in the `funqy-http-quickstart` {quickstarts-tree-"
"url}/funqy-quickstarts/funqy-http-quickstart[directory]."
msgstr ""
"������������������������ `funqy-http-quickstart` {quickstarts-tree-url}/"
"funqy-quickstarts/funqy-http-quickstart[directory] ������������������"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:37
#, no-wrap, fuzzy
msgid "The Code"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:41
#, fuzzy
msgid ""
"If you look at the Java code, you'll see that there is no HTTP specific API. "
" Its just simple Java methods annotated with `@Funq`.  Simple, easy, "
"straightforward."
msgstr ""
"Java������������������������HTTP���������API��������������������������������������������� "
"Java ��������������� `@Funq` "
"���������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:42
#, no-wrap, fuzzy
msgid "Maven Dependencies"
msgstr "Maven���������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:45
#, fuzzy
msgid ""
"To write Funqy HTTP functions, simply include the `quarkus-funqy-http` "
"dependency into your Quarkus `pom.xml` file:"
msgstr ""
"Funqy HTTP������������������������ `quarkus-funqy-http` "
"���������������Quarkus `pom.xml` "
"������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:52
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-funqy-http</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:54
#, no-wrap, fuzzy
msgid "Build Project"
msgstr "���������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:59
#, no-wrap
msgid "mvn clean quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:62
#, fuzzy
msgid "This starts your functions in Quarkus dev mode."
msgstr ""
"������������������Quarkus dev���������������������������������������������"

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:63
#, no-wrap, fuzzy
msgid "Execute Funqy HTTP functions"
msgstr "Funqy HTTP���������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:67
#, fuzzy
msgid ""
"The URL path to execute a function is the function name.  For example if "
"your function name is `foo` then the URL path to execute the function would "
"be `/foo`."
msgstr ""
"������������������������������ URL "
"������������������������������������������������������ `foo` "
"��������������������������������� URL ��������� `/foo`."

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:71
#, fuzzy
msgid ""
"The HTTP POST or GET methods can be used to invoke on a function.  The "
"return value of the function is marshalled to JSON using the Jackson JSON "
"library.  Jackson annotations can be used.  If your function has an input "
"parameter, a POST invocation must use JSON as the input type.  Jackson is "
"also used here for unmarshalling."
msgstr ""
"HTTP POST ��������� GET "
"������������������������������������������������������������������������������������������������Jackson "
"JSON ������������������������������ JSON "
"���������������������������������Jackson "
"������������������������������������������������������������������������������������������������������������POST���������������������������������������JSON������������������������������������������������������Jackson������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:74
#, fuzzy
msgid ""
"You can invoke the `hello` function defined in {quickstarts-tree-url}/funqy-"
"quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/"
"PrimitiveFunctions.java[PrimitiveFunctions.java] by pointing your browser to "
"http://localhost:8080/hello"
msgstr ""
"��������������� http://localhost:8080/hello ������������������{quickstarts-"
"tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/"
"funqy/PrimitiveFunctions.java[PrimitiveFunctions."
"java]������������������������ `hello` "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:78
#, fuzzy
msgid ""
"Invoking the other functions in the quickstart requires an HTTP POST.  To "
"execute the `greet` function defined in {quickstarts-tree-url}/funqy-"
"quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/"
"GreetingFunction.java[GreetingFunction.java] invoke this curl script."
msgstr ""
"���������������������������������������������������������������HTTP "
"POST������������������������������������������ `greet` "
"������������������������������������ curl "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:85
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '{\"name\":\"Bill\"}'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:90
#, fuzzy
msgid ""
"Primitive types can also be passed as input using the standard JSON mapping "
"for them.  To execute the `toLowerCase` function defined in {quickstarts-"
"tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/"
"funqy/PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl "
"script:"
msgstr ""
"������������������������������������JSON��������������������������������������������������������������������������������������������������� "
"`toLowerCase` ������������������������������������ curl "
"���������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:97
#, no-wrap
msgid ""
"curl \"http://localhost:8080/toLowerCase\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '\"HELLO WORLD\"'\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:101
#, fuzzy
msgid ""
"To execute the `double` function defined in {quickstarts-tree-url}/funqy-"
"quickstarts/funqy-http-quickstart/src/main/java/org/acme/funqy/"
"PrimitiveFunctions.java[PrimitiveFunctions.java] invoke this curl script:"
msgstr ""
"������������������������ `double` ������������������������������{quickstarts-"
"tree-url}/funqy-quickstarts/funqy-http-quickstart/src/main/java/org/acme/"
"funqy/PrimitiveFunctions.java[PrimitiveFunctions."
"java]���������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:108
#, no-wrap
msgid ""
"curl \"http://localhost:8080/double\" \\\n"
"-X POST \\\n"
"-H \"Content-Type: application/json\" \\\n"
"-d '2'\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy-http.adoc:110
#, no-wrap, fuzzy
msgid "GET Query Parameter Mapping"
msgstr "GET ������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:116
#, fuzzy
msgid ""
"For GET requests, the Funqy HTTP Binding also has a query parameter mapping "
"for function input parameters.  Only bean style classes and `java.util.Map` "
"can be used for your input parameter.  For bean style classes, query "
"parameter names are mapped to properties on the bean class.  Here's an "
"example of a simple `Map`:"
msgstr ""
"GET������������������������������Funqy "
"HTTP��������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`java.util.Map` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`Map`."

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:123
#, no-wrap
msgid "@Funq\n"
"public String hello(Map<String, Integer> map) {\n"
"...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:127
#, fuzzy
msgid ""
"Key values must be a primitive type (except char) or `String`.  Values can "
"be primitives (except char), `String`, `OffsetDateTime` or a complex bean "
"style class.  For the above example, here's the corresponding curl request:"
msgstr ""
"���������������������������������������char ��������������� `String` "
"��������������������������������������������������������������� (char "
"���������)��� `String` ��� `OffsetDateTime` ������������������������������ "
"��������������������������������������������������������������������������������� "
"curl ������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:131
#, no-wrap
msgid "curl \"http://localhost:8080/a=1&b=2\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:134
#, fuzzy
msgid ""
"The `map` input parameter of the `hello` function would have the key value "
"pairs: `a`->1, `b`->2."
msgstr ""
"`hello` ��������� `map` ��������������������������� `a`���1, `b`���2 "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:136
#, fuzzy
msgid ""
"Bean style classes can also be use as the input parameter type.  Here's an "
"example:"
msgstr ""
"Bean���������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:142
#, no-wrap
msgid "public class Person {\n"
"    String first;\n"
"    String last;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:148
#, no-wrap
msgid ""
"    public String getFirst() { return first; }\n"
"    public void setFirst(String first) { this.first = first; }\n"
"    public String getLast() { return last; }\n"
"    public void setLast(String last) { this.last = last; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:155
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Person p) {\n"
"       return \"Hello \" + p.getFirst() + \" \" + p.getLast();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:159
#, fuzzy
msgid ""
"Property values can be any primitive type except `char`. It can also be "
"`String`, and `OffsetDateTime`.  `OffsetDateTime` query param values must be "
"in ISO-8601 format."
msgstr ""
"��������������������������� `char` "
"��������������������������������������������������������������������������������� "
"`String` ��� `OffsetDateTime` ������������������ `OffsetDateTime` "
"��������������������������������� ISO-8601 "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:161
#, fuzzy
msgid "You can invoke on this using an HTTP GET and query parameters:"
msgstr ""
"HTTP GET "
"������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:165
#, no-wrap
msgid "curl \"http://localhost:8080/greet?first=Bill&last=Burke\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:168
#, fuzzy
msgid ""
"In the above request, the query parameter names are mapped to corresponding "
"properties in the input class."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:170
#, fuzzy
msgid ""
"The input class can also have nested bean classes.  Expanding on the "
"previous example:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:176
#, no-wrap
msgid "public class Family {\n"
"    private Person dad;\n"
"    private Person mom;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:182
#, no-wrap
msgid ""
"    public Person getDad() { return dad; }\n"
"    public void setDad(Person dad) { this.dad = dad; }\n"
"    public Person getMom() { return mom; }\n"
"    public void setMom(Person mom) { this.mom = mom; }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:189 upstream/_guides/funqy-http.adoc:215
#: upstream/_guides/funqy-http.adoc:242 upstream/_guides/funqy-http.adoc:274
#: upstream/_guides/funqy-http.adoc:299
#, no-wrap
msgid ""
"public class MyFunctions {\n"
"    @Funq\n"
"    public String greet(Family family) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:193
#, fuzzy
msgid ""
"In this case, query parameters for nested values use the `.` notation.  For "
"example:"
msgstr ""
"��������������������������������������������������������������������� `.` "
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:197
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet?dad.first=John&dad.last=Smith&mom.first="
"Martha&mom.last=Smith\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:200
#, fuzzy
msgid ""
"`java.util.List` and `Set` are also supported as property values.  For "
"example:"
msgstr ""
"`java.util.List` ��� `Set` "
"������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:205 upstream/_guides/funqy-http.adoc:232
#: upstream/_guides/funqy-http.adoc:264 upstream/_guides/funqy-http.adoc:289
#, no-wrap
msgid "public class Family {\n"
"    ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:208
#, no-wrap
msgid "    List<String> pets;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:219
#, fuzzy
msgid ""
"To invoke a GET request, just list the `pets` query parameter multiple times."
""
msgstr ""
"GET��������������������������������������� `pets` "
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:223
#, no-wrap
msgid "curl \"http://localhost:8080/greet?pets=itchy&pets=scratchy\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:227
#, fuzzy
msgid ""
"For more complex types, `List` and `Set` members must have an identifier in "
"the query parameter.  For example:"
msgstr ""
"������������������������������ `List` ��������� `Set` "
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:235
#, no-wrap
msgid "    List<Person> kids;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:248
#, fuzzy
msgid ""
"Each `kids` query parameter must identify the kid they are referencing so "
"that the runtime can figure out which property values go to which members in "
"the list.  Here's the curl request:"
msgstr ""
"`kids` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"curl ������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:252
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet?kids.1.first=Buffy&kids.2.first="
"Charlie\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:256
#, fuzzy
msgid ""
"The above URL uses the value `1` and `2` to identity the target member of "
"the list, but any unique string can be used."
msgstr ""
"���������URL��������������������������������������������������������������� "
"`1` ��� `2` "
"������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:259
#, fuzzy
msgid ""
"A property can also be a `java.util.Map`.  The key of the map can be any "
"primitive type and `String`.  For example:"
msgstr ""
"������������������ `java.util.Map`."
"��������������������������������������������������������� `String`."
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:267
#, no-wrap
msgid "    Map<String, String> address;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:277
#, fuzzy
msgid "The corresponding call would look like this:"
msgstr "���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:281
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet?address.state=MA&address.city=Boston\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy-http.adoc:284
#, fuzzy
msgid ""
"If your `Map` value is a complex type, then just continue the notation by "
"adding the property to set at the end."
msgstr ""
"`Map` ��������������������������������������������� set "
"���������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:292
#, no-wrap
msgid "    Map<String, Address> addresses;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy-http.adoc:304
#, no-wrap
msgid ""
"curl \"http://localhost:8080/greet?addresses.home.state=MA&addresses.home."
"city=Boston\"\n"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/scheduler-reference.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Scheduler Reference Guide"
msgstr "Quarkus - ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:20
#, fuzzy
msgid ""
"Modern applications often need to run specific tasks periodically.  There "
"are two scheduler extensions in Quarkus.  The `quarkus-scheduler` extension "
"brings the API and a lightweight in-memory scheduler implementation.  The "
"`quarkus-quartz` extension implements the API from the `quarkus-scheduler` "
"extension and contains a scheduler implementation based on the Quartz "
"library.  You will only need `quarkus-quartz` for more advanced scheduling "
"use cases, such as persistent tasks, clustering and programmatic scheduling "
"of jobs."
msgstr ""
"���������������������������������������������������������������������������������������������������������������Quarkus������2������������������������������������������������������ "
"`quarkus-scheduler` "
"���������������������API��������������������������������������������������������������������������������� "
"`quarkus-quartz` ������������������ `quarkus-scheduler` "
"���������������API���������������Quartz������������������������������������������������������������������������������������������ "
"`quarkus-quartz` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:22
#, fuzzy
msgid ""
"If you add the `quarkus-quartz` dependency to your project the lightweight "
"scheduler implementation from the `quarkus-scheduler` extension is "
"automatically disabled."
msgstr ""
"��������������������� `quarkus-quartz` ��������������������������������� "
"`quarkus-scheduler` "
"������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:23
#, no-wrap, fuzzy
msgid "Scheduled Methods"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:28
#, fuzzy
msgid ""
"If you annotate a method with `@io.quarkus.scheduler.Scheduled` it is "
"automatically scheduled for invocation.  In fact, such a method must be a "
"non-private non-static method of a CDI bean.  As a consequence of being a "
"method of a CDI bean a scheduled method can be annotated with interceptor "
"bindings, such as `@javax.transaction.Transactional` and `@org.eclipse."
"microprofile.metrics.annotation.Counted`."
msgstr ""
"��������������� `@io.quarkus.scheduler.Scheduled` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������CDI���������������������������������������������������������������������������������������CDI��������������������������������������������������������������������������������������������������������� "
"`@javax.transaction.Transactional` ��� `@org.eclipse.microprofile.metrics."
"annotation.Counted` "
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:30
#, fuzzy
msgid ""
"If there is no CDI scope defined on the declaring class then `@Singleton` is "
"used."
msgstr ""
"������������������CDI��������������������������������������������������� "
"`@Singleton` ���������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:32
#, fuzzy
msgid ""
"Furthermore, the annotated method must return `void` and either declare no "
"parameters or one parameter of type `io.quarkus.scheduler."
"ScheduledExecution`."
msgstr ""
"��������������������������������������������������������� `void` "
"��������������������������������������������������� `io.quarkus.scheduler."
"ScheduledExecution` ������������������������ 1 "
"���������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:34
#, fuzzy
msgid ""
"The annotation is repeatable so a single method could be scheduled multiple "
"times."
msgstr ""
"������������������������������������������������������1������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:35
#, no-wrap, fuzzy
msgid "Triggers"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:40
#, fuzzy
msgid ""
"A trigger is defined either by the `@Scheduled#cron()` or by the "
"`@Scheduled#every()` attributes.  If both are specified, the cron expression "
"takes precedence.  If none is specified, the build fails with an "
"`IllegalStateException`."
msgstr ""
"������������������ `@Scheduled#cron()` ��������������� `@Scheduled#every()` "
"������������������������������������������������������������������������������cron "
"������������������������������������������������������������������������������ "
"`IllegalStateException`."

#. type: Title ====
#: upstream/_guides/scheduler-reference.adoc:41
#, no-wrap, fuzzy
msgid "CRON"
msgstr "���������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:45
#, fuzzy
msgid ""
"A CRON trigger is defined by a cron-like expression.  For example `\"0 15 10 "
"* * ?\"` fires at 10:15am every day."
msgstr ""
"CRON���������������cron������������������������������������������������������ "
"`\"0 15 10 * * ?\"` ���������������10���15������������������������"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:46
#, no-wrap, fuzzy
msgid "CRON Trigger Example"
msgstr "CRON������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:51
#, no-wrap
msgid "@Scheduled(cron = \"0 15 10 * * ?\")\n"
"void fireAt10AmEveryDay() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:56
#, fuzzy
msgid ""
"The syntax used in CRON expressions is controlled by the `quarkus.scheduler."
"cron-type` property.  The values can be `cron4j`, `quartz`, `unix` and "
"`spring`.  `quartz` is used by default."
msgstr ""
"CRON ������������������������������ `quarkus.scheduler.cron-type` "
"������������������������������������������������ `quartz` ������ `cron4j`, "
"`quartz`, `unix` ��������� `spring` ���������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:58
#, fuzzy
msgid ""
"If a CRON expression starts with `{` and ends with `}` then the scheduler "
"attempts to find a corresponding config property and use the configured "
"value instead."
msgstr ""
"CRON������ `{` ������������ `}` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:59
#, no-wrap, fuzzy
msgid "CRON Config Property Example"
msgstr "CRON���������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:64
#, no-wrap
msgid "@Scheduled(cron = \"{myMethod.cron.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ====
#: upstream/_guides/scheduler-reference.adoc:66
#, no-wrap, fuzzy
msgid "Intervals"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:72
#, fuzzy
msgid ""
"An interval trigger defines a period between invocations.  The period "
"expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` and the "
"value of `@Scheduled#every()` is parsed with `java.time."
"Duration#parse(CharSequence)`.  However, if an expression starts with a "
"digit then the `PT` prefix is added automatically.  So for example, `15m` "
"can be used instead of `PT15M` and is parsed as \"15 minutes\"."
msgstr ""
"������������������ "
"��������������������������������������������������������������������������������� "
"ISO-8601 ��������������������������� `PnDTnHnMn.nS` ������������������������ "
"`@Scheduled#every()` ��������� `java.time.Duration#parse(CharSequence)` "
"������������������������������������������������������������������������ "
"`PT` ������������������������������������������������������������ `PT15M` "
"��������������� `15m` ������������������������������������15 "
"������������������������������"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:73
#, no-wrap, fuzzy
msgid "Interval Trigger Example"
msgstr "������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:78
#, no-wrap
msgid "@Scheduled(every = \"15m\")\n"
"void every15Mins() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:81
#, fuzzy
msgid ""
"If a value starts with `{` and ends with `}` then the scheduler attempts to "
"find a corresponding config property and use the configured value instead."
msgstr ""
"������ `{` ������������ `}` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:82
#, no-wrap, fuzzy
msgid "Interval Config Property Example"
msgstr "���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:87
#, no-wrap
msgid "@Scheduled(every = \"{myMethod.every.expr}\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:89
#, no-wrap, fuzzy
msgid "Identity"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:94
#, fuzzy
msgid ""
"By default, a unique id is generated for each scheduled method.  This id is "
"used in log messages and during debugging.  Sometimes a possibility to "
"specify an explicit id may come in handy."
msgstr ""
"��������������������������������������������������������������������������������������� "
"ID "
"������������������������������ID������������������������������������������������������������������������������������������ "
"id ���������������������������������������������������������"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:95
#, no-wrap, fuzzy
msgid "Identity Example"
msgstr "������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:100
#, no-wrap
msgid "@Scheduled(identity = \"myScheduledMethod\")\n"
"void myMethod() { }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:102
#, no-wrap, fuzzy
msgid "Delayed Execution"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:105
#, fuzzy
msgid ""
"`@Scheduled` provides two ways to delay the time a trigger should start "
"firing at."
msgstr ""
"`@Scheduled` "
"������������������������������������������������������������������������������2���������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:107
#, fuzzy
msgid ""
"`@Scheduled#delay()` and `@Scheduled#delayUnit()` form the initial delay "
"together."
msgstr ""
"`@Scheduled#delay()` ��� `@Scheduled#delayUnit()` "
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:112
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delay = 2, delayUnit = TimeUnit.HOUR) <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:114
#, fuzzy
msgid ""
"The trigger fires for the first time two hours after the application start."
msgstr ""
"������������������2���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:116
#, fuzzy
msgid "The final value is always rounded to full second."
msgstr "������������������������1���������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:121
#, fuzzy
msgid ""
"`@Scheduled#delayed()` is a text alternative to the properties above.  The "
"period expression is based on the ISO-8601 duration format `PnDTnHnMn.nS` "
"and the value is parsed with `java.time.Duration#parse(CharSequence)`.  "
"However, if an expression starts with a digit, the `PT` prefix is added "
"automatically.  So for example, `15s` can be used instead of `PT15S` and is "
"parsed as \"15 seconds\"."
msgstr ""
"`@Scheduled#delayed()` "
"������������������������������������������������������������������������������ "
"ISO-8601 duration format `PnDTnHnMn.nS` ������������������������������ `java."
"time.Duration#parse(CharSequence)` "
"������������������������������������������������������������������������ "
"`PT` "
"������������������������������������������������������������������������ "
"`PT15S` ��������������� `15s` ������������������������������������15 "
"������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:126
#, no-wrap
msgid "@Scheduled(every = \"2s\", delayed = \"2h\")\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:129
#, fuzzy
msgid ""
"If `@Scheduled#delay()` is set to a value greater then zero the value of "
"`@Scheduled#delayed()` is ignored."
msgstr ""
"`@Scheduled#delay()` "
"��������������������������������������������������������������� "
"`@Scheduled#delayed()` ������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:132
#, fuzzy
msgid ""
"The main advantage over `@Scheduled#delay()` is that the value is "
"configurable.  If the value starts with `{` and ends with `}` then the "
"scheduler attempts to find a corresponding config property and use the "
"configured value instead:"
msgstr ""
"`@Scheduled#delay()` "
"������������������������������������������������������������������������������������������ "
"`{` ������������ `}` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:137
#, no-wrap
msgid ""
"@Scheduled(every = \"2s\", delayed = \"{myMethod.delay.expr}\") <1>\n"
"void everyTwoSeconds() { }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:139
#, fuzzy
msgid "The config property `myMethod.delay.expr` is used to set the delay."
msgstr ""
"������������������������config��������������� `myMethod.delay.expr` "
"���������������������"

#. type: Title ===
#: upstream/_guides/scheduler-reference.adoc:141
#, no-wrap, fuzzy
msgid "Concurrent Execution"
msgstr "������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:145
#, fuzzy
msgid ""
"By default, a scheduled method can be executed concurrently.  Nevertheless, "
"it is possible to specify the strategy to handle concurrent executions via "
"`@Scheduled#concurrentExecution()`."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������� "
"`@Scheduled#concurrentExecution()` "
"���������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:149
#, no-wrap
msgid ""
"import static io.quarkus.scheduler.Scheduled.ConcurrentExecution.SKIP;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:154
#, no-wrap
msgid ""
"@Scheduled(every = \"1s\", concurrentExecution = SKIP) <1>\n"
"void nonConcurrent() {\n"
"  // we can be sure that this method is never executed concurrently\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:156
#, fuzzy
msgid "Concurrent executions are skipped."
msgstr "������������������������������������������"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:157
#, no-wrap, fuzzy
msgid "Scheduler"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:160
#, fuzzy
msgid ""
"Quarkus provides a built-in bean of type `io.quarkus.scheduler.Scheduler` "
"that can be injected and used to pause/resume the scheduler."
msgstr ""
"Quarkus������ `io.quarkus.scheduler.Scheduler` "
"���������������������Bean������������������������������������������������������������������������������/"
"���������������������������������������������������������"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:161
#, no-wrap, fuzzy
msgid "Scheduler Injection Example"
msgstr "������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:165
#, no-wrap
msgid "import io.quarkus.scheduler.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:167
#, no-wrap
msgid "class MyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:170
#, no-wrap
msgid "   @Inject\n"
"   Scheduler scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:179
#, no-wrap
msgid ""
"   void ping() {\n"
"      scheduler.pause(); <1>\n"
"      if (scheduler.isRunning()) {\n"
"         throw new IllegalStateException(\"This should never happen!\");\n"
"      }\n"
"      scheduler.resume(); <2>\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:181
#, fuzzy
msgid "Pause all triggers."
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:182
#, fuzzy
msgid "Resume the scheduler."
msgstr "���������������������������������������"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:183
#, no-wrap, fuzzy
msgid "Programmatic Scheduling"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:186
#, fuzzy
msgid ""
"If you need to schedule a job programmatically you'll need to add the link:"
"quartz[Quartz extension] and use the Quartz API directly."
msgstr ""
"��������������������������������������������������������������������������������� "
"link:quartz[Quartz���������������]������������Quartz "
"API���������������������������������������������"

#. type: Block title
#: upstream/_guides/scheduler-reference.adoc:187
#, no-wrap, fuzzy
msgid "Programmatic Scheduling with Quartz API"
msgstr ""
"Quartz API������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:191
#, no-wrap
msgid "import org.quartz.Scheduler;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:193
#, no-wrap
msgid "class MyJobs {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/scheduler-reference.adoc:208
#, no-wrap
msgid ""
"    void onStart(@Observes StartupEvent event, Scheduler quartz) throws "
"SchedulerException {\n"
"        JobDetail job = JobBuilder.newJob(SomeJob.class)\n"
"                .withIdentity(\"myJob\", \"myGroup\")\n"
"                .build();\n"
"        Trigger trigger = TriggerBuilder.newTrigger()\n"
"                .withIdentity(\"myTrigger\", \"myGroup\")\n"
"                .startNow()\n"
"                .withSchedule(SimpleScheduleBuilder.simpleSchedule()\n"
"                        .withIntervalInSeconds(1)\n"
"                        .repeatForever())\n"
"                .build();\n"
"        quartz.scheduleJob(job, trigger);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:211
#, fuzzy
msgid ""
"By default, the scheduler is not started unless a `@Scheduled` business "
"method is found. You may need to force the start of the scheduler for "
"\"pure\" programmatic scheduling. See also <<quartz.adoc#quartz-"
"configuration-reference,Quartz Configuration Reference>>."
msgstr ""
"������������������������ `@Scheduled` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"link:quartz.html#quartz-configuration-"
"reference[Quartz������������������������]������������������������������"

#. type: Title ==
#: upstream/_guides/scheduler-reference.adoc:212
#, no-wrap, fuzzy
msgid "Scheduled Methods and Testing"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/scheduler-reference.adoc:218
#, fuzzy
msgid ""
"It is often desirable to disable the scheduler when running the tests.  The "
"scheduler can be disabled through the runtime config property `quarkus."
"scheduler.enabled`.  If set to `false` the scheduler is not started even "
"though the application contains scheduled methods.  You can even disable the "
"scheduler for particular <<getting-started-"
"testing#testing_different_profiles,Test Profiles>>."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`quarkus.scheduler.enabled` "
"��������������������������������������������������� `false` "
"������������������������������������������������������������������������������������������������������������������ "
"��������������������������������������������������� link:getting-started-"
"testing."
"html#testing_different_profiles[���������������������������]������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/building-substrate-howto.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Building a Custom SubstrateVM"
msgstr "Quarkus - ������������SubstrateVM���������"

#. type: Title ===
#: upstream/_guides/building-substrate-howto.adoc:12
#, no-wrap, fuzzy
msgid "Install JVMCI"
msgstr "JVMCI ���������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:15
#, fuzzy
msgid "Before anything can be done you must first install a JVMCI build."
msgstr ""
"������������������������������JVMCI���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:18
#, fuzzy
msgid ""
"These can be downloaded from OTN http://www.oracle.com/technetwork/oracle-"
"labs/program-languages/downloads/index.html[here]"
msgstr ""
"������������ link:http://www.oracle.com/technetwork/oracle-labs/program-"
"languages/downloads/index."
"html[���������]OTN���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:22
#, fuzzy
msgid ""
"Note, if you are installing on an alternative system, you can use the "
"developer tools on chrome or firefox to capture a direct URL with an auth "
"param."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������auth "
"��������������������������������������� URL "
"������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:24
#, fuzzy
msgid "After obtaining the download install it and set `JAVA_HOME`"
msgstr "������������������������������������������������������ `JAVA_HOME`"

#. type: delimited block -
#: upstream/_guides/building-substrate-howto.adoc:32
#, no-wrap
msgid ""
"wget -O jvmci.tgz http://download.oracle.com/otn/utilities_drivers/oracle-"
"labs/labsjdk-8u202-jvmci-0.56-darwin-amd64.tar.gz?AuthParam=[GENERATED AUTH "
"TOKEN HERE]\n"
"tar -xzvf jvmci.tgz -C /opt\n"
"# On Mac do labsjdk1.8.0_202-jvmci-0.56/Contents/Home\n"
"export JAVA_HOME=/opt/labsjdk1.8.0_202-jvmci-0.46/\n"
"export PATH=$JAVA_HOME/bin:$PATH\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:37
#, fuzzy
msgid ""
"Get the latest version available as graal tends to keep updating the minimum "
"requirements."
msgstr ""
"graal������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/building-substrate-howto.adoc:38
#, no-wrap, fuzzy
msgid "Install MX"
msgstr "MX���������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:41
#, fuzzy
msgid "Now you need to install Graal���s special build tool, `mx`."
msgstr ""
"������������������Graal��������������������������������������������������������������������������������� "
"`mx`."

#. type: delimited block -
#: upstream/_guides/building-substrate-howto.adoc:46
#, no-wrap
msgid ""
"git clone https://github.com/graalvm/mx.git\n"
"export PATH=`pwd`/mx:$PATH\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/building-substrate-howto.adoc:48
#, no-wrap, fuzzy
msgid "Checkout and build SubstrateVM"
msgstr "SubstrateVM������������������������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:51
#, fuzzy
msgid "You can now check-out and build Substrate:"
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-substrate-howto.adoc:57
#, no-wrap
msgid ""
"git clone https://github.com/oracle/graal.git\n"
"cd graal/substratevm\n"
"mx build\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:60
#, fuzzy
msgid "Once built, you can quickly run the tools in place"
msgstr ""
"���������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-substrate-howto.adoc:67
#, no-wrap
msgid ""
"echo \"public class HelloWorld { public static void main(String[] args) { "
"System.out.println(\\\"Hello World\\\"); } }\" > HelloWorld.java\n"
"javac HelloWorld.java\n"
"mx native-image HelloWorld\n"
"./helloworld\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/building-substrate-howto.adoc:69
#, no-wrap, fuzzy
msgid "Building a custom GraalVM distribution"
msgstr "������������GraalVM������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:74
#, fuzzy
msgid ""
"In order to create a custom GraalVM distribution (necessary for usage in "
"quarkus) you must switch to the vm subdirectory, and use special build "
"options to pick the modules in your distribution."
msgstr ""
"������������GraalVM������������������������������������quarkus���������������������������������������������������������������vm������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:77
#, fuzzy
msgid ""
"For a simple subset VM with just substrate and its native tools execute the "
"following:"
msgstr ""
"������������������������������������������������������������������������������ "
"VM ������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-substrate-howto.adoc:83
#, no-wrap
msgid ""
" cd ../vm\n"
" mx --dy /substratevm,/tools build\n"
" tar -czvf my-custom-graal.tgz -C latest_graalvm .\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-substrate-howto.adoc:86
#, fuzzy
msgid "For a stock CE build the following will do:"
msgstr "������CE������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/building-substrate-howto.adoc:91
#, no-wrap
msgid ""
"mx --dy /substratevm,/tools,/sulong,/graal-nodejs build\n"
"tar -czvf my-custom-graal.tgz -C latest_graalvm .\n"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/vertx.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using Eclipse Vert.x"
msgstr "Quarkus - Eclipse Vert.x���������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:13
#, fuzzy
msgid ""
"Eclipse https://vertx.io[Vert.x] is a toolkit for building reactive "
"applications.  It is designed to be lightweight and embeddable.  Vert.x "
"defines a reactive execution model and provides a large ecosystem."
msgstr ""
"Eclipse link:https://vertx.io[Vert."
"x]������������������������������������������������������������������������������������������������������������������������������������������������������������������������Vert."
"x������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:18
#, fuzzy
msgid ""
"Quarkus is based on Vert.x, and almost all network-related features rely on "
"Vert.x.  While lots of reactive features from Quarkus don't _show_ Vert.x, "
"it's used underneath.  Quarkus also integrates smoothly with the Vert.x "
"event bus (to enable asynchronous messaging passing between application "
"components) and some reactive clients.  You can also use various Vert.x APIs "
"in your Quarkus application, such as deploying _verticles_, instantiating "
"clients..."
msgstr ""
"Quarkus���Vert."
"x���������������������������������������������������������������������������������������Vert."
"x���������������������������Quarkus���������������������������������������Vert."
"x��� "
"_������������_������������������������������������������������������������������Quarkus������Vert."
"x������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������Vert."
"x API��������������������������������������������������� "
"_������������������_������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:24
#, fuzzy
msgid ""
"To access Vert.x, well, you need to enable the `vertx` extension to use this "
"feature.  If you are creating a new project, set the `extensions` parameter "
"are follows:"
msgstr ""
"Vert."
"x��������������������������������������������������������������������������� "
"`vertx` "
"��������������������������������������������������������������������������������������������������������� "
"`extensions` ������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:32
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -Dextensions=\"vertx\"\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:40
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx\"\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vertx.adoc:52
#, no-wrap, fuzzy
msgid "Native Transport"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:58
#, fuzzy
msgid ""
"Vert.x is capable of using https://netty.io/wiki/native-transports."
"html[Netty's native transports] which offers performance improvements on "
"certain platforms. To enable them you must include the appropriate "
"dependency for your platform. It's usually a good idea to include both to "
"keep your application platform agnostic. Netty is smart enough to use the "
"correct one, that includes none at all on unsupported platforms:"
msgstr ""
"Vert.x ��� link:https://netty.io/wiki/native-transports.html[Netty "
"������������������������������������������]���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Netty "
"���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:66
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-epoll</artifactId>\n"
"  <classifier>linux-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:72
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.netty</groupId>\n"
"  <artifactId>netty-transport-native-kqueue</artifactId>\n"
"  <classifier>osx-x86_64</classifier>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:75
#, fuzzy
msgid ""
"You will also have to explicitly configure Vert.x to use the native "
"transport. In `application.properties` add:"
msgstr ""
"��������������������������������������������������������������������� Vert.x "
"��������������������������������������������������� `application.properties` "
"���������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:79
#, no-wrap
msgid "quarkus.vertx.prefer-native-transport=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:82
#, fuzzy
msgid "Or in `application.yml`:"
msgstr "��������� `application.yml`."

#. type: delimited block -
#: upstream/_guides/vertx.adoc:88
#, no-wrap
msgid "quarkus:\n"
"  vertx:\n"
"    prefer-native-transport: true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:91
#, fuzzy
msgid "If all is well quarkus will log:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:94
#, no-wrap
msgid ""
"[io.qua.ver.cor.run.VertxCoreRecorder] (main) Vertx has Native Transport "
"Enabled: true\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx.adoc:96
#, no-wrap, fuzzy
msgid "Native Linux Transport"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:99
#, fuzzy
msgid "On Linux you can enable the following socket options:"
msgstr ""
"Linux���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:101 upstream/_guides/vertx.adoc:122
#, fuzzy
msgid "SO_REUSEPORT"
msgstr "���������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:103 upstream/_guides/vertx.adoc:124
#, no-wrap
msgid "quarkus.http.so-reuse-port=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:105
#, fuzzy
msgid "TCP_QUICKACK"
msgstr "TCP_QUICKACK"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:107
#, no-wrap
msgid "quarkus.http.tcp-quick-ack=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:109
#, fuzzy
msgid "TCP_CORK"
msgstr "TCP_CORK"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:111
#, no-wrap
msgid "quarkus.http.tcp-cork=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:113
#, fuzzy
msgid "TCP_FASTOPEN"
msgstr "TCP_FASTOPEN"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:115
#, no-wrap
msgid "quarkus.http.tcp-fast-open=true\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx.adoc:117
#, no-wrap, fuzzy
msgid "Native MacOS Transport"
msgstr "���������������MacOS���������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:120
#, fuzzy
msgid "On MacOS Sierra and above you can enable the following socket options:"
msgstr ""
"MacOS "
"Sierra���������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:126
#, no-wrap, fuzzy
msgid "Accessing Vert.x"
msgstr "Vert.x������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:129
#, fuzzy
msgid ""
"Once the extension has been added, you can access the _managed_ Vert.x "
"instance using `@Inject`:"
msgstr ""
"��������������������������������� `@Inject` ��������������� "
"_���������������������_Vert.x "
"������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:133 upstream/_guides/vertx.adoc:599
#, no-wrap
msgid "@Inject Vertx vertx;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:137
#, fuzzy
msgid ""
"If you are familiar with Vert.x, you know that Vert.x provides different API "
"models.  For instance _bare_ Vert.x uses callbacks, the Mutiny variants uses "
"`Uni` and `Multi`, the RX Java 2 version uses `Single`, `Maybe`, "
"`Completable`, `Observable` and `Flowable`..."
msgstr ""
"Vert.x ���������������������Vert.x ������������ API "
"������������������������������������������������������������������������������ "
"_���_Vert.x ������������������������������������Mutiny ������������������ "
"`Uni` ��� `Multi` ���������������RX Java 2 ������������������ `Single`, "
"`Maybe`, `Completable`, `Observable` ��� `Flowable`..."

#. type: Plain text
#: upstream/_guides/vertx.adoc:139
#, fuzzy
msgid "Quarkus provides 4 Vert.x APIs:"
msgstr "Quarkus���4������Vert.x API���������������������������"

#. type: Table
#: upstream/_guides/vertx.adoc:153
#, no-wrap, fuzzy
msgid ""
"\n"
"| Name | Code | Description\n"
"\n"
"| _bare_ | `@Inject io.vertx.core.Vertx vertx` | _bare_ Vert.x instance, the "
"API uses callbacks.\n"
"\n"
"| https://smallrye.io/smallrye-mutiny/[Mutiny] | `@Inject io.vertx.mutiny."
"core.Vertx vertx` | The Mutiny API for Vert.x.\n"
"\n"
"| RX Java 2 | `@Inject io.vertx.reactivex.core.Vertx vertx` | RX Java 2 Vert."
"x, the API uses RX Java 2 types (deprecated).\n"
"\n"
"| _Axle_ | `@Inject io.vertx.axle.core.Vertx vertx` | Axle Vert.x, the API "
"uses `CompletionStage` and `Reactive Streams` (deprecated).\n"
"\n"
msgstr "| ���������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:157
#, fuzzy
msgid ""
"You may inject any of the 4 flavors of `Vertx` as well as the `EventBus` in "
"your Quarkus application beans: `bare`, `Mutiny`, `Axle`, `RxJava2`.  They "
"are just shims and rely on a single _managed_ Vert.x instance."
msgstr ""
"`Vertx` ��� `EventBus` "
"���4���������������������������������������Quarkus������������������������������������������������������������������������ "
"`bare`, `Mutiny`, `Axle`, `RxJava2`."
"������������������������������������������������ _���������������_Vert."
"x���������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:159
#, fuzzy
msgid "You will pick one or the other depending on your use cases."
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:161
#, fuzzy
msgid ""
"`bare`: for advanced usage or if you have existing Vert.x code you want to "
"reuse in your Quarkus application"
msgstr ""
"`bare`: "
"���������������������������Quarkus������������������������������������������������������Vert."
"x���������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:162
#, fuzzy
msgid ""
"`mutiny`: Mutiny is an event-driven reactive programming API. It uses 2 "
"types: `Uni` and `Multi`. This is the recommended API."
msgstr ""
"`mutiny`: "
"Mutiny������������������������������������������������������������������API��������� "
"`Uni` ��� `Multi` "
"���2������������������������������������������������API���������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:163
#, fuzzy
msgid ""
"`Axle`: works well with Quarkus and MicroProfile APIs (`CompletionStage` for "
"single results and `Publisher` for streams) - deprecated, it is recommended "
"to switch to Mutiny"
msgstr ""
"`Axle`: Quarkus���MicroProfile API��������������������������� "
"(������������������������������ `CompletionStage` "
"��������������������������������� `Publisher` ) - "
"������������Mutiny���������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:164
#, fuzzy
msgid ""
"`Rx Java 2`: when you need support for a wide range of data transformation "
"operators on your streams - deprecated, it is recommended to switch to "
"Mutiny"
msgstr ""
"`Rx Java 2`: "
"��������������������������������������������������������������������������������������� "
"- ������������Mutiny������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:166
#, fuzzy
msgid "The following snippets illustrate the difference between these 4 APIs:"
msgstr ""
"���������������������������������������4������API������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:177
#, no-wrap
msgid ""
"// Bare Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\", ar -> {\n"
"    if (ar.succeeded()) {\n"
"        System.out.println(\"Content:\" + ar.result().toString(\"UTF-8\"));\n"
"    } else {\n"
"        System.out.println(\"Cannot read the file: \" + ar.cause()."
"getMessage());\n"
"    }\n"
"});\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:186
#, no-wrap
msgid ""
"// Mutiny Vert.x:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .onItem().transform(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe()\n"
"    .with(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err."
"getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:194
#, no-wrap
msgid ""
"// Rx Java 2 Vert.x\n"
"vertx.fileSystem().rxReadFile(\"lorem-ipsum.txt\")\n"
"    .map(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .subscribe(\n"
"            content -> System.out.println(\"Content: \" + content),\n"
"            err -> System.out.println(\"Cannot read the file: \" + err."
"getMessage())\n"
"    );\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:205
#, no-wrap
msgid ""
"// Axle API:\n"
"vertx.fileSystem().readFile(\"lorem-ipsum.txt\")\n"
"    .thenApply(buffer -> buffer.toString(\"UTF-8\"))\n"
"    .whenComplete((content, err) -> {\n"
"        if (err != null) {\n"
"            System.out.println(\"Cannot read the file: \" + err."
"getMessage());\n"
"        } else {\n"
"            System.out.println(\"Content: \" + content);\n"
"        }\n"
"    });\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/vertx.adoc:211
#, fuzzy
msgid ""
"If you're not familiar with Mutiny, we recommend to read the link:getting-"
"started-reactive#mutiny[Getting Started with Reactive guide] first."
msgstr ""
"Mutiny���������������������������������������Get link:getting-started-"
"reactive#mutiny[ting Started with "
"Reactive���������]���������������������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:213
#, no-wrap, fuzzy
msgid "Using Vert.x in Reactive JAX-RS resources"
msgstr "Reactive JAX-RS���������������Vert.x���������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:216
#, fuzzy
msgid ""
"Quarkus web resources support asynchronous processing and streaming results "
"over https://developer.mozilla.org/en-US/docs/Web/API/Server-"
"sent_events[server-sent events]."
msgstr ""
"Quarkus������������������������������ link:https://developer.mozilla.org/en-"
"US/docs/Web/API/Server-"
"sent_events[���������������������������������������������]���������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/vertx.adoc:217
#, no-wrap, fuzzy
msgid "Asynchronous processing"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:220
#, fuzzy
msgid ""
"To asynchronously handle the HTTP request, the endpoint method must return a "
"`java.util.concurrent.CompletionStage` or an `io.smallrye.mutiny.Uni` "
"(requires the `quarkus-resteasy-mutiny` extension):"
msgstr ""
"HTTP "
"��������������������������������������������������������������������������������������� "
"`java.util.concurrent.CompletionStage` ��������� `io.smallrye.mutiny.Uni` "
"������������������������������������ (��������� `quarkus-resteasy-mutiny` "
"���������������)���"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:225 upstream/_guides/vertx.adoc:263
#, no-wrap
msgid "@Path(\"/lorem\")\n"
"public class GreetingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:235
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        // Mimic an asynchronous computation.\n"
"        return Uni.createFrom()\n"
"                .item(() -> \"Hello!\")\n"
"                .onItem().delayIt().by(Duration.ofMillis(10));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:244
#, fuzzy
msgid ""
"Then, open your browser to http://localhost:8080/lorem and you should get "
"the message."
msgstr ""
"��������������������������� http://localhost:8080/lorem "
"���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:247
#, fuzzy
msgid ""
"So far so good.  Now let's use the Vert.x API instead of this artificial "
"delay:"
msgstr ""
"������������������������������������������������������������������������������ "
"Vert.x API ������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:254
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:266 upstream/_guides/vertx.adoc:333
#: upstream/_guides/vertx.adoc:522
#, no-wrap
msgid "    @Inject\n"
"    Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:274
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public Uni<String> doSomethingAsync() {\n"
"        return vertx.fileSystem().readFile(\"/META-INF/resources/lorem."
"txt\")\n"
"                .onItem().transform(b -> b.toString(\"UTF-8\"));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:277
#, fuzzy
msgid ""
"In this code, we inject the `vertx` instance (`io.vertx.mutiny.core.Vertx`) "
"and read a file from the file system."
msgstr ""
"������������������������ `vertx` ������������������ ( `io.vertx.mutiny.core."
"Vertx`) "
"���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:279
#, fuzzy
msgid ""
"Create the `src/main/resources/META_INF/resources/lorem.txt` file with the "
"following content:"
msgstr ""
"������������������ `src/main/resources/META_INF/resources/lorem.txt` "
"���������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:283
#, no-wrap
msgid ""
"Lorem ipsum dolor sit amet, consectetur adipiscing elit, sed do eiusmod "
"tempor incididunt ut labore et dolore magna aliqua.\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:286
#, fuzzy
msgid "Then, refresh the page, you should see the _lorem ipsum_ text."
msgstr ""
"������������������������������������������ _lorem "
"ipsum���_���������������������������������������������"

#. type: Title ===
#: upstream/_guides/vertx.adoc:287
#, no-wrap, fuzzy
msgid "Streaming using Server-Sent Events"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:290
#, fuzzy
msgid ""
"Quarkus web resources that need to send content as https://developer.mozilla."
"org/en-US/docs/Web/API/Server-sent_events[server-sent events] must have a "
"method:"
msgstr ""
"link:https://developer.mozilla.org/en-US/docs/Web/API/Server-"
"sent_events[������������������������������]������������������������������������������������������Quarkus���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:292
#, fuzzy
msgid "declaring the `text/event-stream` response content type"
msgstr "`text/event-stream` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:293
#, fuzzy
msgid ""
"returning a https://www.reactive-streams.org/[Reactive Streams] `Publisher` "
"or Mutiny `Multi` (requires the `quarkus-resteasy-mutiny` extension)"
msgstr ""
"link:https://www.reactive-streams.org/[Reactive Streams] `Publisher` "
"��������� Mutiny `Multi` ��������������� ( `quarkus-resteasy-mutiny` "
"���������������������������)���"

#. type: Plain text
#: upstream/_guides/vertx.adoc:295
#, fuzzy
msgid "In practice, a streaming greeting service would look like:"
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:300
#, no-wrap
msgid "@Path(\"/hello\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:309
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        // TODO: create a Reactive Streams publisher or a Mutiny Multi\n"
"        return publisher;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:312
#, fuzzy
msgid "Now we just need to return our `Publisher` or `Multi`:"
msgstr "������������ `Publisher` ��� `Multi`."

#. type: delimited block -
#: upstream/_guides/vertx.adoc:320
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Multi;\n"
"import io.vertx.mutiny.core.Vertx;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:327
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.Date;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:330
#, no-wrap
msgid "@Path(\"/stream\")\n"
"public class StreamingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:342
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @Path(\"/{name}\")\n"
"    public Multi<String> greeting(@PathParam String name) {\n"
"        return vertx.periodicStream(2000).toMulti()\n"
"                .map(l -> String.format(\"Hello %s! (%s)%n\", name, new "
"Date()));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:346
#, fuzzy
msgid ""
"The server side is ready.  In order to see the result in the browser, we "
"need a web page."
msgstr ""
"���������������������������������������������������������������������������������������Web���������������������������"

#. type: Block title
#: upstream/_guides/vertx.adoc:348
#, no-wrap, fuzzy
msgid "META-INF/resources/streaming.html"
msgstr "META-INF/resources/streaming.html"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:361
#, no-wrap
msgid ""
"<!doctype html>\n"
"<html>\n"
"<head>\n"
"    <meta charset=\"utf-8\"/>\n"
"    <title>SSE with Vert.x - Quarkus</title>\n"
"    <script type=\"application/javascript\" src=\"streaming.js\"></script>\n"
"</head>\n"
"<body>\n"
"<div id=\"container\"></div>\n"
"</body>\n"
"</html>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:365
#, fuzzy
msgid ""
"Our web page just has an empty `<div>` container.  The magic, as always, "
"lies in the Javascript code:"
msgstr ""
"��������������������������������������������� `&amp;lt;div&amp;gt;` "
"���������������������������������������������������������������������Javascript������������������������������"

#. type: Block title
#: upstream/_guides/vertx.adoc:367
#, no-wrap, fuzzy
msgid "META-INF/resources/streaming.js"
msgstr "META-INF/resources/streaming.js"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:380
#, no-wrap
msgid ""
"if (!!window.EventSource) {\n"
"    var eventSource = new EventSource(\"/stream/Quarkus\");\n"
"    eventSource.onmessage = function (event) {\n"
"        var container = document.getElementById(\"container\");\n"
"        var paragraph = document.createElement(\"p\");\n"
"        paragraph.innerHTML = event.data;\n"
"        container.appendChild(paragraph);\n"
"    };\n"
"} else {\n"
"    window.alert(\"EventSource not available on this browser.\")\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:384
#, fuzzy
msgid ""
"Most browsers support SSE but some don't.  More about this in Mozilla's "
"https://developer.mozilla.org/en-US/docs/Web/API/"
"EventSource#Browser_compatibility[SSE browser-compatibility list]."
msgstr ""
"������������������������������ SSE "
"������������������������������������������������������������������������������������������������������������������������������Mozilla "
"��� link:https://developer.mozilla.org/en-US/docs/Web/API/"
"EventSource#Browser_compatibility[SSE "
"������������������������������]������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:387
#, fuzzy
msgid ""
"Navigate to http://localhost:8080/streaming.html.  A new greeting should "
"show-up every 2 seconds."
msgstr ""
"http://localhost:8080/streaming.html  "
"���������������������2���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:391
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:55 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:393
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:57 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:395
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:13:59 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:397
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:01 CET 2020)\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:399
#, no-wrap
msgid "Hello Quarkus! (Wed Feb 12 17:14:03 CET 2020)\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vertx.adoc:403
#, no-wrap, fuzzy
msgid "Using Vert.x JSON"
msgstr "Vert.x JSON���������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:407
#, fuzzy
msgid ""
"Vert.x API heavily relies on JSON, namely the `io.vertx.core.json."
"JsonObject` and `io.vertx.core.json.JsonArray` types.  They are both "
"supported as Quarkus web resource request and response bodies."
msgstr ""
"Vert.x API���JSON��������������� `io.vertx.core.json.JsonObject` ������ `io."
"vertx.core.json.JsonArray` "
"���������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:409
#, fuzzy
msgid "Consider these endpoints:"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:415
#, no-wrap
msgid ""
"@Path(\"/hello\")\n"
"@Produces(MediaType.APPLICATION_JSON)\n"
"public class VertxJsonResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:421
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/object\")\n"
"    public JsonObject jsonObject(@PathParam String name) {\n"
"        return new JsonObject().put(\"Hello\", name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:428
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"{name}/array\")\n"
"    public JsonArray jsonArray(@PathParam String name) {\n"
"        return new JsonArray().add(\"Hello\").add(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:431
#, fuzzy
msgid ""
"In your browser, navigate to http://localhost:8080/hello/Quarkus/object. You "
"should see:"
msgstr ""
"��������������� http://localhost:8080/hello/Quarkus/object  "
"���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:435
#, no-wrap
msgid "{\"Hello\":\"Quarkus\"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:438
#, fuzzy
msgid "Then, navigate to http://localhost:8080/hello/Quarkus/array:"
msgstr ""
"������������ http://localhost:8080/hello/Quarkus/array  "
"���������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:442
#, no-wrap
msgid "[\"Hello\",\"Quarkus\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:445
#, fuzzy
msgid ""
"Needless to say, this works equally well when the JSON content is a request "
"body or is wrapped in a `Uni`, `Multi`, `CompletionStage` or `Publisher`."
msgstr ""
"���������������������������������JSON������������������������������������������������������������ "
"`Uni`, `Multi`, `CompletionStage`, , `Publisher` "
"������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:446
#, no-wrap, fuzzy
msgid "Using Vert.x Clients"
msgstr "Vert.x ���������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:450
#, fuzzy
msgid ""
"As you can inject a Vert.x instance, you can use Vert.x clients in a Quarkus "
"application.  This section gives an example with the `WebClient`."
msgstr ""
"Vert."
"x������������������������������������������������������������Quarkus���������������������������Vert."
"x��������������������������������������������������������������������������������������� "
"`WebClient`."

#. type: Title ===
#: upstream/_guides/vertx.adoc:451
#, no-wrap, fuzzy
msgid "Picking the right dependency"
msgstr "������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:454
#, fuzzy
msgid ""
"Depending on the API model you want to use you need to add the right "
"dependency to your `pom.xml` file:"
msgstr ""
"���������������API������������������������ `pom.xml` "
"���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:462
#, no-wrap
msgid ""
"<!-- bare API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:468
#, no-wrap
msgid ""
"<!-- Mutiny API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:474
#, no-wrap
msgid ""
"<!-- Axle API -->\n"
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-axle-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:480
#, no-wrap
msgid ""
"<!-- RX Java 2 API -->\n"
"<dependency>\n"
"  <groupId>io.vertx</groupId>\n"
"  <artifactId>vertx-rx-java2</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:483
#, fuzzy
msgid ""
"The `vertx-rx-java2` provides the RX Java 2 API for the whole Vert.x stack, "
"not only the web client."
msgstr ""
"`vertx-rx-java2` ��� Web ������������������������������������Vert.x "
"��������������������� RX Java 2 API ���������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:485
#, fuzzy
msgid "In this guide, we are going to use the Mutiny API, so:"
msgstr ""
"������������������������Mutiny "
"API���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:492
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.smallrye.reactive</groupId>\n"
"  <artifactId>smallrye-mutiny-vertx-web-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:495
#, fuzzy
msgid "Now, create a new resource in your project with the following content:"
msgstr ""
"������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/vertx.adoc:497
#, no-wrap, fuzzy
msgid "src/main/java/org/acme/vertx/ResourceUsingWebClient.java"
msgstr "src/main/java/org/acme/vertx/ResourceUsingWebClient.java"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:508
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:511
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:516
#, no-wrap
msgid ""
"import io.vertx.mutiny.core.Vertx;\n"
"import io.vertx.mutiny.ext.web.client.WebClient;\n"
"import io.vertx.core.json.JsonObject;\n"
"import io.vertx.ext.web.client.WebClientOptions;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:519
#, no-wrap
msgid "@Path(\"/fruit-data\")\n"
"public class ResourceUsingWebClient {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:524
#, no-wrap
msgid "    private WebClient client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:531
#, no-wrap
msgid ""
"    @PostConstruct\n"
"    void initialize() {\n"
"        this.client = WebClient.create(vertx,\n"
"                new WebClientOptions().setDefaultHost(\"fruityvice.com\")\n"
"                    .setDefaultPort(443).setSsl(true).setTrustAll(true));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:548
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.APPLICATION_JSON)\n"
"    @Path(\"/{name}\")\n"
"    public Uni<JsonObject> getFruitData(@PathParam(\"name\") String name) {\n"
"        return client.get(\"/api/fruit/\" + name)\n"
"                .send()\n"
"                .onItem().transform(resp -> {\n"
"                    if (resp.statusCode() == 200) {\n"
"                        return resp.bodyAsJsonObject();\n"
"                    } else {\n"
"                        return new JsonObject()\n"
"                                .put(\"code\", resp.statusCode())\n"
"                                .put(\"message\", resp.bodyAsString());\n"
"                    }\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:556
#, fuzzy
msgid ""
"This resource creates a `WebClient` and upon request use this client to "
"invoke the _fruityvice_ API.  Depending on the result the response is "
"forwarded as it's received, or a new JSON object is created with the status "
"and body.  The `WebClient` is obviously asynchronous (and non-blocking), to "
"the endpoint returns a `Uni`."
msgstr ""
"��������������������� `WebClient` "
"��������������������������������������������������������������������������� "
"_fruityvice_API "
"������������������������������������������������������������������������������������������������������������������������������������������������������JSON������������������������������������������ "
"`WebClient` "
"��������������������������������������������������������������������������������������� "
"`Uni` ������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:558
#, fuzzy
msgid "Run the application with:"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:565
#, fuzzy
msgid ""
"And then, open a browser to: `http://localhost:8080/fruit-data/pear`. You "
"should get some details about pears."
msgstr ""
"������������������������������������ `&lt;a href=\"http://localhost:8080/"
"fruit-data/pear\" class=\"bare\"&gt;http://localhost:8080/fruit-data/"
"pear&lt;/a&gt;`."
"���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:569
#, fuzzy
msgid ""
"The application can also run as a native executable.  But, first, we need to "
"instruct Quarkus to enable _ssl_.  Open the `src/main/resources/application."
"properties` and add:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������Quarkus��� "
"_ssl���_������������������������������������������������������������ `src/"
"main/resources/application.properties` ���������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:573
#, no-wrap
msgid "quarkus.ssl.native=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:576
#, fuzzy
msgid "Then, create the native executable with:"
msgstr "���������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:582
#, no-wrap, fuzzy
msgid "Deploying verticles"
msgstr "���������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:587
#, fuzzy
msgid ""
"link:https://vertx.io/docs/vertx-core/java/#\\_verticles[Verticles] is \"a "
"simple, scalable, actor-like deployment and concurrency model\" provided by "
"_Vert.x_.  This model does not claim to be a strict actor-model "
"implementation, but it does share similarities especially with respect to "
"concurrency, scaling and deployment.  To use this model, you write and "
"_deploy_ verticles, communicating with each other by sending messages on the "
"event bus."
msgstr ""
"link:https://vertx.io/docs/vertx-core/java/#_verticles[Verticles]��� _Vert."
"x_ "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"������������������ _���������_���������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:590
#, fuzzy
msgid "You can deploy _verticles_ in Quarkus.  It supports:"
msgstr ""
"Quarkus��������������������� "
"_���_������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:592
#, fuzzy
msgid ""
"_bare_ verticle - Java classes extending `io.vertx.core.AbstractVerticle`"
msgstr ""
"_������_������ - ������������ Java ��������� `io.vertx.core."
"AbstractVerticle`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:593
#, fuzzy
msgid ""
"_Mutiny_ verticle - Java classes extending `io.smallrye.mutiny.vertx.core."
"AbstractVerticle`"
msgstr ""
"_Mutiny_verticle - ������������Java��������� `io.smallrye.mutiny.vertx.core."
"AbstractVerticle`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:595
#, fuzzy
msgid "To deploy verticles, use the regular Vert.x API:"
msgstr ""
"��������������������������������������� Vert.x API ���������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:603
#, no-wrap
msgid ""
"// ...\n"
"vertx.deployVerticle(MyVerticle.class.getName(), ar -> { });\n"
"vertx.deployVerticle(new MyVerticle(), ar -> { });\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:606
#, fuzzy
msgid ""
"You can also pass deployment options to configure the verticle as well as "
"set the number of instances."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:609
#, fuzzy
msgid ""
"Verticles are not _beans_ by default.  However, you can implement them as "
"_ApplicationScoped_ beans and get injection support:"
msgstr ""
"��������������������������������������� "
"_������������_��������������������������������� "
"_ApplicationScoped_���������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:613 upstream/_guides/vertx.adoc:641
#, no-wrap
msgid "package io.quarkus.vertx.verticles;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:617
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.smallrye.mutiny.vertx.core.AbstractVerticle;\n"
"import org.eclipse.microprofile.config.inject.ConfigProperty;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:622
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class MyBeanVerticle extends AbstractVerticle {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:624
#, no-wrap
msgid "    @ConfigProperty(name = \"address\") String address;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:632
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<Void> asyncStart() {\n"
"        return vertx.eventBus().consumer(address)\n"
"                .handler(m -> m.replyAndForget(\"hello\"))\n"
"                .completionHandler();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:635
#, fuzzy
msgid ""
"You don't have to inject the `vertx` instance but instead leverage the "
"instance stored in the protected field of `AbstractVerticle`."
msgstr ""
"`vertx` ��������������������������������������������������������������� "
"`AbstractVerticle` "
"������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:637
#, fuzzy
msgid "Then, deploy the verticle instance with:"
msgstr ""
"������������verticle������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:644
#, no-wrap
msgid ""
"import io.quarkus.runtime.StartupEvent;\n"
"import io.vertx.mutiny.core.Vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:647
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:650
#, no-wrap
msgid "@ApplicationScoped\n"
"public class VerticleDeployer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vertx.adoc:655
#, no-wrap
msgid ""
"    public void init(@Observes StartupEvent e, Vertx vertx, MyBeanVerticle "
"verticle) {\n"
"         vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:658
#, fuzzy
msgid "If you want to deploy every exposed `AbstractVerticle`, you can use:"
msgstr ""
"��������������������������������� `AbstractVerticle` "
"������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:666
#, no-wrap
msgid ""
"public void init(@Observes StartupEvent e, Vertx vertx, "
"Instance<AbstractVerticle> verticles) {\n"
"    for (AbstractVerticle verticle : verticles) {\n"
"        vertx.deployVerticle(verticle).await().indefinitely();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vertx.adoc:668
#, no-wrap, fuzzy
msgid "Listening to a Unix Domain Socket"
msgstr "Unix ������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:674
#, fuzzy
msgid ""
"Listening on a unix domain socket allows us to dispense with the overhead of "
"TCP if the connection to the quarkus service is established from the same "
"host. This can happen if access to the service goes through a proxy which is "
"often the case if you're setting up a service mesh with a proxy like Envoy."
msgstr ""
"unix "
"��������������������������������������������������������������������������� "
"quarkus ���������������������������������������������������������TCP "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������Envoy���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:676
#, fuzzy
msgid "This will only work on platforms that support <<native-transport>>."
msgstr ""
"������������ link:#native-transport[[native-"
"transport]]������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:679
#, fuzzy
msgid ""
"To setup please enable the appropriate <<native-transport>> and set the "
"following environment property:"
msgstr ""
"������������������������������ link:#native-transport[[native-"
"transport]���]���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:683
#, no-wrap
msgid ""
"quarkus.http.domain-socket=/var/run/io.quarkus.app.socket\n"
"quarkus.http.domain-socket-enabled=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:687
#, fuzzy
msgid ""
"By itself this will not disable the tcp socket which by default will open on "
"`0.0.0.0:8080`. It can be explicitly disabled:"
msgstr ""
"��������������������������������������� `0.0.0.0:8080` ��������������� TCP "
"������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:690
#, no-wrap
msgid "quarkus.http.host-enabled=false\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:694
#, fuzzy
msgid ""
"These properties can be set through Java's `-D` command line parameter or on "
"`application.properties`."
msgstr ""
"���������������������������������Java ��� `-D` "
"������������������������������������������������ `application.properties`."

#. type: Title ==
#: upstream/_guides/vertx.adoc:695
#, no-wrap, fuzzy
msgid "Read only deployment environments"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:698
#, fuzzy
msgid ""
"In environments with read only file systems you may receive errors of the "
"form:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:702
#, no-wrap
msgid "java.lang.IllegalStateException: Failed to create cache dir\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:705
#, fuzzy
msgid ""
"Assuming `/tmp/` is writable this can be fixed by setting the `vertx."
"cacheDirBase` property to point to a directory in `/tmp/` for instance in "
"OpenShift by creating an environment variable `JAVA_OPTS` with the value `-"
"Dvertx.cacheDirBase=/tmp/vertx`."
msgstr ""
"`/tmp/` ������������������������������������������������ `vertx."
"cacheDirBase` ������������������������������ `/tmp/` "
"������������������������������������������������������������ OpenShift "
"������������ `JAVA_OPTS` ��� `-Dvertx.cacheDirBase=/tmp/vertx` "
"������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vertx.adoc:707
#, no-wrap, fuzzy
msgid "Running behind a reverse proxy"
msgstr "���������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:713
#, fuzzy
msgid ""
"Quarkus could be accessed through proxies that additionally generate headers "
"(e.g. `X-Forwarded-Host`) to keep information from the client-facing side of "
"the proxy servers that is altered or lost when they are involved.  In those "
"scenarios, Quarkus can be configured to automatically update information "
"like protocol, host, port and URI reflecting the values in these headers."
msgstr ""
"Quarkus��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`X-Forwarded-Host` "
"������������������������������������������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������URI���������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:716
#, fuzzy
msgid ""
"Activating this feature makes the server exposed to several security issues "
"(i.e. information spoofing).  Consider activate it only when running behind "
"a reverse proxy."
msgstr ""
"���������������������������������������������������������������������������������������������(���������������������)������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:718
#, fuzzy
msgid ""
"To setup this feature, please include the following lines in `src/main/"
"resources/application.properties`:"
msgstr ""
"������������������������������������ `src/main/resources/application."
"properties`."

#. type: delimited block -
#: upstream/_guides/vertx.adoc:721
#, no-wrap
msgid "quarkus.http.proxy-address-forwarding=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:724
#, fuzzy
msgid ""
"To consider only de-facto standard header (`Forwarded` header), please "
"include the following lines in `src/main/resources/application.properties`:"
msgstr ""
"���������������������������������( `Forwarded` "
"���������)��������������������������������� `src/main/resources/application."
"properties`."

#. type: delimited block -
#: upstream/_guides/vertx.adoc:727
#, no-wrap
msgid "quarkus.http.proxy.allow-forwarded=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:730
#, fuzzy
msgid ""
"To consider only non-standard headers, please include the following lines "
"instead in `src/main/resources/application.properties`:"
msgstr ""
"������������������������������������������������������������������������������������ "
"`src/main/resources/application.properties` ���������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:736
#, no-wrap
msgid ""
"quarkus.http.proxy.proxy-address-forwarding=true\n"
"quarkus.http.proxy.enable-forwarded-host=true\n"
"quarkus.http.proxy.enable-forwarded-prefix=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:739
#, fuzzy
msgid ""
"Both configurations related to standard and non-standard headers can be "
"combined, although the standard headers configuration will have precedence."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:741
#, fuzzy
msgid "Supported forwarding address headers are:"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:743
#, fuzzy
msgid "`Forwarded`"
msgstr "`Forwarded`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:744
#, fuzzy
msgid "`X-Forwarded-Proto`"
msgstr "`X-Forwarded-Proto`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:745
#, fuzzy
msgid "`X-Forwarded-Host`"
msgstr "`X-Forwarded-Host`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:746
#, fuzzy
msgid "`X-Forwarded-Port`"
msgstr "`X-Forwarded-Port`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:747
#, fuzzy
msgid "`X-Forwarded-Ssl`"
msgstr "`X-Forwarded-Ssl`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:748
#, fuzzy
msgid "`X-Forwarded-Prefix`"
msgstr "`X-Forwarded-Prefix`"

#. type: Plain text
#: upstream/_guides/vertx.adoc:753
#, fuzzy
msgid ""
"One can easily add a https://developer.mozilla.org/en-US/docs/Web/HTTP/"
"Headers/Set-Cookie/SameSite[SameSite] cookie property to any of the cookies "
"set by a Quarkus endpoint by listing a cookie name and a `SameSite` "
"attribute, for example:"
msgstr ""
"������������������������������ `SameSite` "
"���������������������������������������������Quarkus������������������������������������������������������ "
"link:https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Set-Cookie/"
"SameSite[SameSite]���������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vertx.adoc:758
#, no-wrap
msgid ""
"quarkus.http.same-site-cookie.jwt.value=Lax\n"
"quarkus.http.same-site-cookie.session.value=Strict\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vertx.adoc:761
#, fuzzy
msgid ""
"Given this configuration, the `jwt` cookie will have a `SameSite=Lax` "
"attribute and the `session` cookie will have a `SameSite=Strict` attribute."
msgstr ""
"������������������������������ `jwt` ��������������� `SameSite=Lax` "
"������������������ `session` ��������������� `SameSite=Strict` "
"���������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:765
#, fuzzy
msgid "There are many other facets of Quarkus using Vert.x underneath:"
msgstr ""
"������Vert.x������������Quarkus������������������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:769
#, fuzzy
msgid ""
"The event bus is the connecting tissue of Vert.x applications.  Quarkus "
"integrates it so different beans can interact with asynchronous messages.  "
"This part is covered in the link:reactive-event-bus[event bus documentation]."
""
msgstr ""
"������������������������Vert."
"x������������������������������������������������Quarkus��������������������������������������������������������������������������������������������������������������������������������������� "
"link:reactive-event-"
"bus[���������������������������������������]���������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:773
#, fuzzy
msgid ""
"Data streaming and Apache Kafka are an important part of modern systems.  "
"Quarkus integrates data streaming using Reactive Messaging.  More details on "
"link:kafka[Interacting with Kafka]."
msgstr ""
"���������������������������������Apache "
"Kafka������������������������������������������������������Quarkus������Reactive "
"Messaging������������������������������������������������������������������������������������ "
"link:"
"kafka[Kafka������������������������������]������������������������������"

#. type: Plain text
#: upstream/_guides/vertx.adoc:774
#, fuzzy
msgid ""
"Learn how to implement highly performant, low-overhead database applications "
"on Quarkus with the link:reactive-sql-clients[Reactive SQL Clients]."
msgstr ""
"link:reactive-sql-clients[Reactive "
"SQL���������������������]���������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/quarkus-blaze-persistence.adoc:3
#, fuzzy
msgid ""
"icon:lock[title=Fixed at build time] Configuration property fixed at build "
"time - All other configuration properties are overridable at runtime"
msgstr ""
"<span class=\"icon\">lock]</"
"span>��������������������������������������������� - "
"������������������������������������������������������������������������������������"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:13
#, no-wrap, fuzzy
msgid ""
"\n"
"h|[[quarkus-blaze-persistence_configuration]]link:#quarkus-blaze-"
"persistence_configuration[Configuration property]\n"
"\n"
"h|Type\n"
"h|Default\n"
"\n"
"a|icon:lock[title=Fixed at build time] [[quarkus-blaze-persistence_quarkus."
"blaze-persistence.template-eager-loading]]`link:#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.template-eager-loading[quarkus.blaze-"
"persistence.template-eager-loading]`\n"
"\n"
msgstr ""
"h| link:[, id=quarkus-blaze-persistence_configuration] link:#quarkus-blaze-"
"persistence_configuration[���������������������]"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:22
#, fuzzy
msgid ""
"A boolean flag to make it possible to prepare all view template caches on "
"startup. By default the eager loading of the view templates is disabled to "
"have a better startup performance. Valid values for this property are `true` "
"or `false`.  --|boolean | a|icon:lock[title=Fixed at build time] [[quarkus-"
"blaze-persistence_quarkus.blaze-persistence.default-batch-size]]`link:"
"#quarkus-blaze-persistence_quarkus.blaze-persistence.default-batch-"
"size[quarkus.blaze-persistence.default-batch-size]`"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`true` ��������� `false` ���������--|boolean | a<span class="
"\"icon\">|[lock]</span>  link:[, id=quarkus-blaze-persistence_quarkus.blaze-"
"persistence.default-batch-size] `&lt;a href=\"#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.default-batch-size\"&gt;quarkus.blaze-"
"persistence.default-batch-size&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:31
#, fuzzy
msgid ""
"An integer value that defines the default batch size for entity view "
"attributes. By default the value is 1 and can be overridden either via `com."
"blazebit.persistence.view.BatchFetch#size()` or by setting this property via "
"`com.blazebit.persistence.view.EntityViewSetting#setProperty`.  --|int | "
"a|icon:lock[title=Fixed at build time] [[quarkus-blaze-persistence_quarkus."
"blaze-persistence.expect-batch-mode]]`link:#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.expect-batch-mode[quarkus.blaze-"
"persistence.expect-batch-mode]`"
msgstr ""
"������������������ ��������������������������������������������� "
"���������������������������������������������������������������1������ `com."
"blazebit.persistence.view.BatchFetch#size()` ������������������������ `com."
"blazebit.persistence.view.EntityViewSetting#setProperty` "
"������������������������������������������������������������������������������������������������-"
"-|int | a<span class=\"icon\">|[lock]</span>  link:[, id=quarkus-blaze-"
"persistence_quarkus.blaze-persistence.expect-batch-mode] `&lt;a href="
"\"#quarkus-blaze-persistence_quarkus.blaze-persistence.expect-batch-"
"mode\"&gt;quarkus.blaze-persistence.expect-batch-mode&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:34
#, fuzzy
msgid ""
"A mode specifying if correlation value, view root or embedded view batching "
"is expected. By default the value is `values` and can be overridden by "
"setting this property via `com.blazebit.persistence.view."
"EntityViewSetting#setProperty`. Valid values are"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`values` ������������ `com.blazebit.persistence.view."
"EntityViewSetting#setProperty` "
"������������������������������������������������������������������������������������������������������"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:35
#, fuzzy
msgid "`values`"
msgstr "`values`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:36
#, fuzzy
msgid "`view_roots`"
msgstr "`view_roots`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:43
#, fuzzy
msgid ""
"`embedding_views` --|string | a|icon:lock[title=Fixed at build time] "
"[[quarkus-blaze-persistence_quarkus.blaze-persistence.updater.eager-"
"loading]]`link:#quarkus-blaze-persistence_quarkus.blaze-persistence.updater."
"eager-loading[quarkus.blaze-persistence.updater.eager-loading]`"
msgstr ""
"`embedding_views` --|string | a<span class=\"icon\">|[lock]</span>  link:[, "
"id=quarkus-blaze-persistence_quarkus.blaze-persistence.updater.eager-"
"loading] `&lt;a href=\"#quarkus-blaze-persistence_quarkus.blaze-persistence."
"updater.eager-loading\"&gt;quarkus.blaze-persistence.updater.eager-"
"loading&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:52
#, fuzzy
msgid ""
"A boolean flag to make it possible to prepare the entity view updater cache "
"on startup. By default the eager loading of entity view updates is disabled "
"to have a better startup performance. Valid values for this property are "
"`true` or `false`.  --|boolean | a|icon:lock[title=Fixed at build time] "
"[[quarkus-blaze-persistence_quarkus.blaze-persistence.updater.disallow-owned-"
"updatable-subview]]`link:#quarkus-blaze-persistence_quarkus.blaze-"
"persistence.updater.disallow-owned-updatable-subview[quarkus.blaze-"
"persistence.updater.disallow-owned-updatable-subview]`"
msgstr ""
"������������������������������ "
"��������������������������������������������������������������������������������������� "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`true` ��������� `false`.--|boolean | a<span class=\"icon\">|[lock]</span>  "
"link:[, id=quarkus-blaze-persistence_quarkus.blaze-persistence.updater."
"disallow-owned-updatable-subview] `&lt;a href=\"#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.updater.disallow-owned-updatable-"
"subview\"&gt;quarkus.blaze-persistence.updater.disallow-owned-updatable-"
"subview&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:61
#, fuzzy
msgid ""
"A boolean flag to make it possible to disable the strict validation that "
"disallows the use of an updatable entity view type for owned relationships. "
"By default the use is disallowed i.e. the default value is `true`, but since "
"there might be strange models out there, it possible to allow this. Valid "
"values for this property are `true` or `false`.  --|boolean | a|icon:"
"lock[title=Fixed at build time] [[quarkus-blaze-persistence_quarkus.blaze-"
"persistence.updater.strict-cascading-check]]`link:#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.updater.strict-cascading-check[quarkus."
"blaze-persistence.updater.strict-cascading-check]`"
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`true` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`true` ��������� `false` ���������--|boolean | a<span class="
"\"icon\">|[lock]</span>  link:[, id=quarkus-blaze-persistence_quarkus.blaze-"
"persistence.updater.strict-cascading-check] `&lt;a href=\"#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.updater.strict-cascading-"
"check\"&gt;quarkus.blaze-persistence.updater.strict-cascading-check&lt;/"
"a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:70
#, fuzzy
msgid ""
"A boolean flag to make it possible to disable the strict cascading check "
"that disallows setting updatable or creatable entity views on non-cascading "
"attributes before being associated with a cascading attribute. When "
"disabled, it is possible, like in JPA, that the changes done to an updatable "
"entity view are not flushed when it is not associated with an attribute that "
"cascades updates. By default the use is enabled i.e. the default value is "
"`true`. Valid values for this property are `true` or `false`.  --|boolean | "
"a|icon:lock[title=Fixed at build time] [[quarkus-blaze-persistence_quarkus."
"blaze-persistence.updater.error-on-invalid-plural-setter]]`link:#quarkus-"
"blaze-persistence_quarkus.blaze-persistence.updater.error-on-invalid-plural-"
"setter[quarkus.blaze-persistence.updater.error-on-invalid-plural-setter]`"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������JPA������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`true`������������������������������������������������������������������������������������������������������������ "
"`true` ��������� `false` ���������--|boolean | a<span class="
"\"icon\">|[lock]</span>  link:[, id=quarkus-blaze-persistence_quarkus.blaze-"
"persistence.updater.error-on-invalid-plural-setter] `&lt;a href=\"#quarkus-"
"blaze-persistence_quarkus.blaze-persistence.updater.error-on-invalid-plural-"
"setter\"&gt;quarkus.blaze-persistence.updater.error-on-invalid-plural-"
"setter&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:79
#, fuzzy
msgid ""
"A boolean flag that allows to switch from warnings to boot time validation "
"errors when invalid plural attribute setters are encountered while the "
"strict cascading check is enabled. When `true`, a boot time validation error "
"is thrown when encountering an invalid setter, otherwise just a warning. "
"This configuration has no effect when the strict cascading check is disabled."
" By default the use is disabled i.e. the default value is `false`. Valid "
"values for this property are `true` or `false`.  --|boolean | a|icon:"
"lock[title=Fixed at build time] [[quarkus-blaze-persistence_quarkus.blaze-"
"persistence.create-empty-flat-views]]`link:#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.create-empty-flat-views[quarkus.blaze-"
"persistence.create-empty-flat-views]`"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`true` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`false` ������������������������������������������������ `true` ��������� "
"`false` ���������--|boolean | a<span class=\"icon\">|[lock]</span>  link:[, "
"id=quarkus-blaze-persistence_quarkus.blaze-persistence.create-empty-flat-"
"views] `&lt;a href=\"#quarkus-blaze-persistence_quarkus.blaze-persistence."
"create-empty-flat-views\"&gt;quarkus.blaze-persistence.create-empty-flat-"
"views&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:88
#, fuzzy
msgid ""
"A boolean flag that allows to specify if empty flat views should be created "
"by default if not specified via `EmptyFlatViewCreation`. By default the "
"creation of empty flat views is enabled i.e. the default value is `true`. "
"Valid values for this property are `true` or `false`.  --|boolean | a|icon:"
"lock[title=Fixed at build time] [[quarkus-blaze-persistence_quarkus.blaze-"
"persistence.expression-cache-class]]`link:#quarkus-blaze-persistence_quarkus."
"blaze-persistence.expression-cache-class[quarkus.blaze-persistence."
"expression-cache-class]`"
msgstr ""
"`EmptyFlatViewCreation` "
"��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`true`������������������������������������������������������������������������������������������������������������������������������������ "
"`true` ��������� `false` ���������--|boolean | a<span class="
"\"icon\">|[lock]</span>  link:[, id=quarkus-blaze-persistence_quarkus.blaze-"
"persistence.expression-cache-class] `&lt;a href=\"#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.expression-cache-class\"&gt;quarkus."
"blaze-persistence.expression-cache-class&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:97
#, fuzzy
msgid ""
"The full qualified expression cache implementation class name.  --|string | "
"a|icon:lock[title=Fixed at build time] [[quarkus-blaze-persistence_quarkus."
"blaze-persistence.inline-ctes]]`link:#quarkus-blaze-persistence_quarkus."
"blaze-persistence.inline-ctes[quarkus.blaze-persistence.inline-ctes]`"
msgstr ""
"������������������������������������������������������--|string | a<span "
"class=\"icon\">|[lock]</span>  link:[, id=quarkus-blaze-persistence_quarkus."
"blaze-persistence.inline-ctes] `&lt;a href=\"#quarkus-blaze-"
"persistence_quarkus.blaze-persistence.inline-ctes\"&gt;quarkus.blaze-"
"persistence.inline-ctes&lt;/a&gt;`"

#. type: Table
#: upstream/_guides/quarkus-blaze-persistence.adoc:103
#, fuzzy
msgid ""
"If set to true, the CTE queries are inlined by default. Valid values for "
"this property are `true`, `false` or `auto`. Default is `true` which will "
"always inline non-recursive CTEs. The `auto` configuration will only make "
"use of inlining if the JPA provider and DBMS dialect support/require it. The "
"property can be changed for a criteria builder before constructing a query.  "
"--|boolean |"
msgstr ""
"true ���������������������CTE "
"������������������������������������������������������������������������������������������������������ "
"`true` ��� `false` ��������� `auto` ��������������������������� `true` "
"��������������������� CTE ��������������������������������������� `auto` "
"������������������JPA ������������������ DBMS ������������������������/"
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������-"
"-|boolean"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/context-propagation.adoc:6
#, no-wrap, fuzzy
msgid "Context Propagation in Quarkus"
msgstr "Quarkus������������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:15
#, no-wrap, fuzzy
msgid ""
"Traditional blocking code uses link:https://docs.oracle.com/en/java/javase/"
"11/docs/api/java.base/java/lang/ThreadLocal.html[`ThreadLocal`]\n"
" variables to store contextual objects in order to avoid\n"
"passing them as parameters everywhere. Many Quarkus extensions require those "
"contextual objects to operate\n"
"properly: link:rest-json[RESTEasy], link:cdi-reference[ArC] and link:"
"transaction[Transaction]\n"
"for example.\n"
msgstr ""
"������������������������������������������  link:https://docs.oracle.com/en/"
"java/javase/11/docs/api/java.base/java/lang/ThreadLocal."
"html[`ThreadLocal`]���������������������������������������������������������������������������������������Quarkus������������������������������������������������������������������������������������������������������������������������������������ "
"link:rest-json[RESTEasy]��� link:cdi-reference[ArC]��� link:"
"transaction[Transaction]���������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:20
#, fuzzy
msgid ""
"If you write reactive/async code, you have to cut your work into a pipeline "
"of code blocks that get executed \"later\", and in practice after the method "
"you defined them in have returned. As such, `try/finally` blocks as well as "
"`ThreadLocal` variables stop working, because your reactive code gets "
"executed in another thread, after the caller ran its `finally` block."
msgstr ""
"������������������/"
"��������������������������������������������������������������������������������������������������������������������������� "
"������������������������������������������������������������������������������������������������������������������������������ "
"`try/finally` ��������������� `ThreadLocal` "
"��������������������������������������������������������������������������� "
"`finally` "
"���������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:24
#, fuzzy
msgid ""
"link:https://github.com/eclipse/microprofile-context-"
"propagation[MicroProfile Context Propagation] was made to make those Quarkus "
"extensions work properly in reactive/async settings. It works by capturing "
"those contextual values that used to be in thread-locals, and restoring them "
"when your code is called."
msgstr ""
"link:https://github.com/eclipse/microprofile-context-"
"propagation[MicroProfile Context Propagation]������������������������/"
"������������������Quarkus���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:29
#, fuzzy
msgid ""
"If you are using link:http://smallrye.io/smallrye-mutiny[Mutiny] (the "
"`quarkus-mutiny` extension), you just need to add the the `quarkus-smallrye-"
"context-propagation` extension to enable context propagation."
msgstr ""
"link:http://smallrye.io/smallrye-mutiny[Mutiny]( `quarkus-mutiny` "
"������������) "
"��������������������������������������������������������������������������������������� "
"`quarkus-smallrye-context-propagation` "
"������������������������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:31
#, fuzzy
msgid "In other words, add the following dependencies to your `pom.xml`:"
msgstr "������������������������������������ `pom.xml` ���������������������"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:50
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Mutiny and RestEasy support extensions if not already included -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-mutiny</artifactId>\n"
"    </dependency>\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-resteasy-mutiny</artifactId>\n"
"    </dependency>\n"
"    <!-- Context Propagation extension -->\n"
"    <dependency>\n"
"        <groupId>io.quarkus</groupId>\n"
"        <artifactId>quarkus-smallrye-context-propagation</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:53
#, fuzzy
msgid ""
"With this, you will get context propagation for ArC, RESTEasy and "
"transactions, if you are using them."
msgstr ""
"������������������ArC���RESTEasy������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:54
#, no-wrap, fuzzy
msgid "Usage example with Mutiny"
msgstr "���������������������"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:60
#, fuzzy
msgid ""
"This section uses Mutiny reactive types, if you're not familiar with them, "
"read the link:getting-started-reactive#mutiny[Getting Started with Reactive "
"guide] first."
msgstr ""
"������������������������������Mutiny��� link:getting-started-"
"reactive#mutiny[���������������������������]���������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:65
#, fuzzy
msgid ""
"Let's write a REST endpoint that reads the next 3 items from a link:"
"kafka[Kafka topic], stores them in a database using link:hibernate-orm-"
"panache[Hibernate ORM with Panache] (all in the same transaction) before "
"returning them to the client, you can do it like this:"
msgstr ""
"link:"
"kafka[Kafka������������]������������3��������������������������������������� "
"link:hibernate-orm-panache[Hibernate ORM with "
"Panache���������]���������������������������������������������������������������������REST���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:71
#, no-wrap
msgid ""
"    // Get the prices stream\n"
"    @Inject\n"
"    @Channel(\"prices\") Publisher<Double> prices;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:92
#, no-wrap
msgid ""
"    @Transactional\n"
"    @GET\n"
"    @Path(\"/prices\")\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    @SseElementType(MediaType.TEXT_PLAIN)\n"
"    public Publisher<Double> prices() {\n"
"        // get the next three prices from the price stream\n"
"        return Multi.createFrom().publisher(prices)\n"
"                .transform().byTakingFirstItems(3)\n"
"                .map(price -> {\n"
"                    // store each price before we send them\n"
"                    Price priceEntity = new Price();\n"
"                    priceEntity.value = price;\n"
"                    // here we are all in the same transaction\n"
"                    // thanks to context propagation\n"
"                    priceEntity.persist();\n"
"                    return price;\n"
"                    // the transaction is committed once the stream "
"completes\n"
"                });\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:96
#, fuzzy
msgid ""
"Notice that thanks to Mutiny support for context propagation, this works out "
"of the box.  The 3 items are persisted using the same transaction and this "
"transaction is committed when the stream completes."
msgstr ""
"��������������������������������������� Mutiny "
"������������������������������������������������������������������������������������������������������������������3������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:97
#, no-wrap, fuzzy
msgid "Usage example for `CompletionStage`"
msgstr "��������� `CompletionStage`"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:105
#, fuzzy
msgid ""
"If you are using link:https://docs.oracle.com/en/java/javase/11/docs/api/"
"java.base/java/util/concurrent/CompletionStage.html[`CompletionStage`] you "
"need manual context propagation. You can do that by injecting a "
"`ThreadContext` or `ManagedExecutor` that will propagate every context. For "
"example, here we use the link:vertx[Vert.x Web Client] to get the list of "
"Star Wars people, then store them in the database using link:hibernate-orm-"
"panache[Hibernate ORM with Panache] (all in the same transaction) before "
"returning them to the client as JSON using link:rest-json[Jackson or JSON-B]:"
""
msgstr ""
"������������������������������  link:https://docs.oracle.com/en/java/javase/"
"11/docs/api/java.base/java/util/concurrent/CompletionStage."
"html[`CompletionStage`]��������������������������������������������������������������������������������������������� "
"`ThreadContext` ��� `ManagedExecutor` "
"��������������������������������������������������������������������������������������������������������������������������� "
"link:vertx[Vert.x Web "
"Client]������������������������������������������������������������������������ "
"link:hibernate-orm-panache[Hibernate ORM with Panache "
"���]������������������������������������������������ "
"(������������������������������������������) ������������ link:rest-"
"json[Jackson ��������� JSON-B] ��������������� JSON "
"���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:111
#, no-wrap
msgid ""
"    @Inject ThreadContext threadContext;\n"
"    @Inject ManagedExecutor managedExecutor;\n"
"    @Inject Vertx vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:138
#, no-wrap
msgid ""
"    @Transactional\n"
"    @GET\n"
"    @Path(\"/people\")\n"
"    public CompletionStage<List<Person>> people() throws SystemException {\n"
"        // Create a REST client to the Star Wars API\n"
"        WebClient client = WebClient.create(vertx,\n"
"                         new WebClientOptions()\n"
"                          .setDefaultHost(\"swapi.dev\")\n"
"                          .setDefaultPort(443)\n"
"                          .setSsl(true));\n"
"        // get the list of Star Wars people, with context capture\n"
"        return threadContext.withContextCapture(client.get(\"/api/people/\")."
"send())\n"
"                .thenApplyAsync(response -> {\n"
"                    JsonObject json = response.bodyAsJsonObject();\n"
"                    List<Person> persons = new ArrayList<>(json."
"getInteger(\"count\"));\n"
"                    // Store them in the DB\n"
"                    // Note that we're still in the same transaction as the "
"outer method\n"
"                    for (Object element : json.getJsonArray(\"results\")) {\n"
"                        Person person = new Person();\n"
"                        person.name = ((JsonObject) element)."
"getString(\"name\");\n"
"                        person.persist();\n"
"                        persons.add(person);\n"
"                    }\n"
"                    return persons;\n"
"                }, managedExecutor);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:142
#, fuzzy
msgid ""
"Using `ThreadContext` or `ManagedExecutor` you can wrap most useful "
"functional types and `CompletionStage` in order to get context propagated."
msgstr ""
"`ThreadContext` ��������� `ManagedExecutor` "
"��������������������������������������������������������� `CompletionStage` "
"������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:146
#, fuzzy
msgid "The injected `ManagedExecutor` uses the Quarkus thread pool."
msgstr ""
"��������������� `ManagedExecutor` ������Quarkus "
"���������������������������������������������������"

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:148
#, no-wrap, fuzzy
msgid "Adding support for RxJava2"
msgstr "RxJava2������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:151
#, fuzzy
msgid "You need to include the following modules to get RxJava2 support:"
msgstr ""
"RxJava2������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/context-propagation.adoc:174
#, no-wrap
msgid ""
"<dependencies>\n"
"    <!-- Automatic context propagation for RxJava2 -->\n"
"    <dependency>\n"
"        <groupId>io.smallrye</groupId>\n"
"        <artifactId>smallrye-context-propagation-propagators-rxjava2</"
"artifactId>\n"
"    </dependency>\n"
"    <!-- \n"
"    Required if you want transactions extended to the end of methods "
"returning\n"
"    an RxJava2 type.\n"
"     -->\n"
"    <dependency>\n"
"        <groupId>io.smallrye.reactive</groupId>\n"
"        <artifactId>smallrye-reactive-converter-rxjava2</artifactId>\n"
"    </dependency>\n"
"    <!-- Required if you return RxJava2 types from your REST endpoints -->\n"
"    <dependency>\n"
"        <groupId>org.jboss.resteasy</groupId>\n"
"        <artifactId>resteasy-rxjava2</artifactId>\n"
"    </dependency>\n"
"</dependencies>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/context-propagation.adoc:176
#, no-wrap, fuzzy
msgid "Context Propagation for CDI"
msgstr "CDI������������������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:180
#, fuzzy
msgid ""
"In terms of CDI, `@RequestScoped`, `@ApplicationScoped` and `@Singleton` "
"beans get propagated and are available in other threads.  `@Dependent` beans "
"as well as any custom scoped beans cannot be automatically propagated via "
"CDI Context Propagation."
msgstr ""
"CDI ��������������������� `@RequestScoped`, `@ApplicationScoped`, "
"`@Singleton`, "
"��������������������������������������������������������������������� "
"`@Dependent` ������������������������������������������������������������CDI "
"������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/context-propagation.adoc:187
#, fuzzy
msgid ""
"`@ApplicationScoped` and `@Singleton` beans are always active scopes and as "
"such are easy to deal with - context propagation tasks can work with those "
"beans so long as the CDI container is running.  However, `@RequestScoped` "
"beans are a different story. They are only active for a short period of time "
"which can be bound either to HTTP request or some other request/task when "
"manually activated/deactivated.  In this case user must be aware that once "
"the original thread gets to an end of a request, it will terminate the "
"context, calling `@PreDestroy` on those beans and then clearing them from "
"the context.  Subsequent attempts to access those beans from other threads "
"can result in unexpected behaviour.  It is therefore recommended to make "
"sure all tasks using request scoped beans via context propagation are "
"performed in such a manner that they don't outlive the original request "
"duration."
msgstr ""
"`@ApplicationScoped` ��� `@Singleton` "
"��������������������������������������������������������������������������������������������������� "
"- ���������������������������������������CDI "
"��������������������������������������������������������������������������������������������������� "
"`@RequestScoped` ������������������������������������������������������/"
"���������������������HTTP ���������������������������������������/"
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@PreDestroy` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/context-propagation.adoc:192
#, fuzzy
msgid ""
"Due to the above described behavior, it is recommended to avoid using "
"`@PreDestroy` on `@RequestScoped` beans when working with Context "
"Propagation in CDI."
msgstr ""
"���������������������������������������CDI ��� Context Propagation "
"������������������������ `@PreDestroy` ��� `@RequestScoped` "
"������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-authorization.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Authorization of Web Endpoints"
msgstr "Quarkus - ���������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:12
#, fuzzy
msgid ""
"Quarkus has an integrated pluggable web security layer. If security is "
"enabled all HTTP requests will have a permission check performed to make "
"sure they are allowed to continue."
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������������������������������������������������������������������������HTTP������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:15
#, fuzzy
msgid ""
"Configuration authorization checks are executed before any annotation-based "
"authorization check is done, so both checks have to pass for a request to be "
"allowed."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/security-authorization.adoc:16
#, no-wrap, fuzzy
msgid "Authorization using Configuration"
msgstr "���������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:20
#, fuzzy
msgid ""
"The default implementation allows you to define permissions using config in "
"`application.properties`. An example config is shown below:"
msgstr ""
"��������������������������������� `application.properties` ��� config "
"������������������������������������������������������������������������������������ "
"config ������������������������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:24
#, no-wrap
msgid ""
"quarkus.http.auth.policy.role-policy1.roles-allowed=user,admin               "
"       <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:27
#, no-wrap
msgid ""
"quarkus.http.auth.permission.roles1.paths=/roles-secured/*,/other/*,/api/*   "
"       <2>\n"
"quarkus.http.auth.permission.roles1.policy=role-policy1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:31
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.paths=/public/*                         "
"       <3>\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:34
#, no-wrap
msgid ""
"quarkus.http.auth.permission.deny1.paths=/forbidden                          "
"       <4>\n"
"quarkus.http.auth.permission.deny1.policy=deny\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:36
#, fuzzy
msgid ""
"This defines a role based policy that allows users with the `user` and "
"`admin` roles. This is referenced by later rules."
msgstr ""
"������������ `user` ��� `admin` "
"������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:37
#, fuzzy
msgid ""
"This is a permission set that references the previously defined policy. "
"`roles1` is an arbitrary name, you can call the permission sets whatever you "
"want."
msgstr ""
"`roles1` "
"������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:38
#, fuzzy
msgid ""
"This permission references the default `permit` built-in policy to allow "
"`GET` methods to `/public`. This is actually a no-op in this example, as "
"this request would have been allowed anyway."
msgstr ""
"������������������������������������������������ `permit` "
"��������������������������������������������� `/public` ������ `GET` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:39
#, fuzzy
msgid ""
"This permission references the built-in `deny` policy for `/forbidden`. This "
"is an exact path match as it does not end with `*`."
msgstr ""
"��������������������������������� `/forbidden` ������������������ `deny` "
"������������������������������������������ `*` "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:43
#, fuzzy
msgid ""
"Permissions are defined in config using permission sets. These are "
"arbitrarily named permission grouping. Each permission set must specify a "
"policy that is used to control access. There are three built-in policies: "
"`deny`, `permit` and `authenticated`, which respectively permits all, denies "
"all and only allows authenticated users."
msgstr ""
"���������������������������������������������������������������������config��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`deny` ��� `permit` ��� `authenticated` ��� 3 "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:46
#, fuzzy
msgid ""
"It is also possible to define role based policies, as shown in the example. "
"These policies will only allow users with the specified roles to access the "
"resources."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/security-authorization.adoc:47
#, no-wrap, fuzzy
msgid "Matching on paths, methods"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:51
#, fuzzy
msgid ""
"Permission sets can also specify paths and methods as a comma separated list."
" If a path ends with `*` then it is considered to be a wildcard match and "
"will match all sub paths, otherwise it is an exact match and will only match "
"that specific path:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`*` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:57
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.paths=/public/*,/css/*,/js/*,/robots."
"txt\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET,HEAD\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-authorization.adoc:59
#, no-wrap, fuzzy
msgid "Matching path but not method"
msgstr "������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:63
#, fuzzy
msgid ""
"If a request would match one or more permission sets based on the path, but "
"does not match any due to method requirements then the request is rejected."
msgstr ""
"���������������������������������������1������������������������������������������������������������������ "
"���������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:66
#, fuzzy
msgid ""
"Given the above permission set, `GET /public/foo` would match both the path "
"and method and thus be allowed, whereas `POST /public/foo` would match the "
"path but not the method and would thus be rejected."
msgstr ""
"��������������������������������������������������������� `GET /public/foo` "
"��������������������������������������������������������������������������������� "
"`POST /public/foo` "
"������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/security-authorization.adoc:67
#, no-wrap, fuzzy
msgid "Matching multiple paths: longest path wins"
msgstr "���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:71
#, fuzzy
msgid ""
"Matching is always done on a longest path wins basis, less specific "
"permission sets are not considered if a more specific one has been matched:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:77
#: upstream/_guides/security-authorization.adoc:114
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.paths=/public/*\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET,HEAD\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:80
#, no-wrap
msgid ""
"quarkus.http.auth.permission.deny1.paths=/public/forbidden-folder/*\n"
"quarkus.http.auth.permission.deny1.policy=deny\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:85
#, fuzzy
msgid ""
"Given the above permission set, `GET /public/forbidden-folder/foo` would "
"match both permission sets' paths, but because it matches the `deny1` "
"permission set's path on a longer match, `deny1` will be chosen and the "
"request will be rejected."
msgstr ""
"��������������������������������������������������������� `GET /public/"
"forbidden-folder/foo` "
"������������������������������������������������������������������������������������������������������ "
"`deny1` "
"��������������������������������������������������������������������� "
"`deny1` ���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:87
#, fuzzy
msgid "[NOTE]"
msgstr ""

#. type: delimited block =
#: upstream/_guides/security-authorization.adoc:90
#, fuzzy
msgid ""
"Subpath permissions always win against the root path permissions as "
"explained above in the `deny1` versus `permit1` permission example.  Here is "
"another example showing a subpath permission allowing a public resource "
"access with the root path permission requiring the authorization:"
msgstr ""
"��������� `deny1` ��� `permit1` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:96
#, no-wrap
msgid ""
"quarkus.http.auth.policy.user-policy.roles-allowed=user\n"
"quarkus.http.auth.permission.roles.paths=/api/*\n"
"quarkus.http.auth.permission.roles.policy=user-policy\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:99
#, no-wrap
msgid ""
"quarkus.http.auth.permission.public.paths=/api/noauth/*\n"
"quarkus.http.auth.permission.public.policy=permit\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-authorization.adoc:102
#, no-wrap, fuzzy
msgid "Matching multiple paths: most specific method wins"
msgstr "������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/security-authorization.adoc:108
#, fuzzy
msgid ""
"If a path is registered with multiple permission sets then any permission "
"sets that specify a HTTP method will take precedence and permissions sets "
"without a method will not be considered (assuming of course the method "
"matches). In this instance, the permission sets without methods will only "
"come into effect if the request method does not match any of the sets with "
"method permissions."
msgstr ""
"���������������������������������������������������������������������������������HTTP "
"��������������������������������������������������������������������������� "
"��������������������������������������������������������������������������������� "
"(������������������������������������������������������������)������������������������������������������������������������������������������������ "
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:117
#, no-wrap
msgid ""
"quarkus.http.auth.permission.deny1.paths=/public/*\n"
"quarkus.http.auth.permission.deny1.policy=deny\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:123
#, fuzzy
msgid ""
"Given the above permission set, `GET /public/foo` would match both "
"permission sets' paths, but because it matches the `permit1` permission "
"set's explicit method, `permit1` will be chosen and the request will be "
"accepted. `PUT /public/foo` on the other hand, will not match the method "
"permissions of `permit1` and so `deny1` will be activated and reject the "
"request."
msgstr ""
"��������������������������������������������������������� `GET /public/foo` "
"������������������������������������������������������������������������������ "
"`permit1` "
"��������������������������������������������������������������������������������������� "
"`permit1` "
"������������������������������������������������������������������������ "
"`PUT /public/foo` ��� `permit1` "
"������������������������������������������������������������������ `deny1` "
"������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/security-authorization.adoc:124
#, no-wrap, fuzzy
msgid "Matching multiple paths and methods: both win"
msgstr "������������������������������������������������������������ win"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:129
#, fuzzy
msgid ""
"If multiple permission sets specify the same path and method (or multiple "
"have no method) then both permissions have to allow access for the request "
"to proceed. Note that for this to happen both have to either have specified "
"the method, or have no method, method specific matches take precedence as "
"stated above:"
msgstr ""
"������������������������������������������������������������������������������������������������ "
"(���������������������������������������������������������������������������������������)���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:134
#, no-wrap
msgid ""
"quarkus.http.auth.policy.user-policy1.roles-allowed=user\n"
"quarkus.http.auth.policy.admin-policy1.roles-allowed=admin\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:137
#, no-wrap
msgid ""
"quarkus.http.auth.permission.roles1.paths=/api/*,/restricted/*\n"
"quarkus.http.auth.permission.roles1.policy=user-policy1\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:140
#, no-wrap
msgid ""
"quarkus.http.auth.permission.roles2.paths=/api/*,/admin/*\n"
"quarkus.http.auth.permission.roles2.policy=admin-policy1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:144
#, fuzzy
msgid ""
"Given the above permission set, `GET /api/foo` would match both permission "
"sets' paths, so would require both the `user` and `admin` roles."
msgstr ""
"��������������������������������������������������������� `GET /api/foo` "
"������������������������������������������������������������������������������ "
"`user` ��� `admin` ������������������������������������������������"

#. type: Title ===
#: upstream/_guides/security-authorization.adoc:145
#, no-wrap, fuzzy
msgid "Configuration Properties to Deny access"
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:148
#, fuzzy
msgid ""
"There are two configuration settings that alter the RBAC Deny behavior:"
msgstr "RBAC Deny������������������������2������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:151
#, fuzzy
msgid ""
"`quarkus.security.jaxrs.deny-unannotated-endpoints=true|false` - if set to "
"true, the access will be denied for all JAX-RS endpoints by default.  That "
"is if the security annotations do not define the access control. Defaults to "
"`false`."
msgstr ""
"`quarkus.security.jaxrs.deny-unannotated-endpoints=true|false` - true "
"������������������������������������������������������ JAX-RS "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"`false` ���������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:154
#, fuzzy
msgid ""
"`quarkus.security.deny-unannotated-members=true|false` - if set to true, the "
"access will be denied to all CDI methods and JAX-RS endpoints that do not "
"have security annotations but are defined in classes that contain methods "
"with security annotations. Defaults to `false`."
msgstr ""
"`quarkus.security.deny-unannotated-members=true|false` - true "
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"CDI ��������������������� JAX-RS "
"��������������������������������������������������������������������������������� "
"`false` ���������"

#. type: Title ===
#: upstream/_guides/security-authorization.adoc:155
#, no-wrap, fuzzy
msgid "Disabling permissions "
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:158
#, fuzzy
msgid ""
"Permissions can be disabled at build time with an `enabled` property for "
"each declared permission, for example:"
msgstr ""
"������������������������������������������ `enabled` "
"������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:165
#, no-wrap
msgid ""
"quarkus.http.auth.permission.permit1.enabled=false\n"
"quarkus.http.auth.permission.permit1.paths=/public/*,/css/*,/js/*,/robots."
"txt\n"
"quarkus.http.auth.permission.permit1.policy=permit\n"
"quarkus.http.auth.permission.permit1.methods=GET,HEAD\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:168
#, fuzzy
msgid ""
"and enabled at runtime with a system property or environment variable, for "
"example: `-Dquarkus.http.auth.permission.permit1.enabled=true`."
msgstr ""
"`-Dquarkus.http.auth.permission.permit1.enabled="
"true`���������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/security-authorization.adoc:170
#, no-wrap, fuzzy
msgid "Authorization using Annotations"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:177
#, fuzzy
msgid ""
"Quarkus comes with built-in security to allow for Role-Based Access Control "
"(link:https://en.wikipedia.org/wiki/Role-based_access_control[RBAC])  based "
"on the common security annotations `@RolesAllowed`, `@DenyAll`, `@PermitAll` "
"on REST endpoints and CDI beans.  An example of an endpoint that makes use "
"of both JAX-RS and Common Security annotations to describe and secure its "
"endpoints is given in <<subject-example>>. Quarkus also provides the `io."
"quarkus.security.Authenticated` annotation that will permit any "
"authenticated user to access the resource (equivalent to "
"`@RolesAllowed(\"**\")`)."
msgstr ""
"Quarkus��������������������������������������������������������� "
"`@RolesAllowed`, `@DenyAll`, `@PermitAll` "
"REST������������������������CDI��������������������������������������������������������������� "
"link:https://en.wikipedia.org/wiki/Role-"
"based_access_control[���RBAC]���������������������������������������������������������������������������������������������JAX-"
"RS���Common "
"Security��������������������������������������������������������������������������������������������������������������������������������������������������� "
"link:#subject-example[[subject-"
"example]]������������������������������Quarkus������������������������������������������������������������������������������������������������ "
"`io.quarkus.security.Authenticated` "
"������������������������������������������������ `@RolesAllowed(\"**\")` "
"���������������"

#. type: Block title
#: upstream/_guides/security-authorization.adoc:179
#, no-wrap, fuzzy
msgid "SubjectExposingResource Example"
msgstr "SubjectExposingResource������"

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:183
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:191
#, no-wrap
msgid ""
"import javax.annotation.security.DenyAll;\n"
"import javax.annotation.security.PermitAll;\n"
"import javax.annotation.security.RolesAllowed;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Context;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:194
#, no-wrap
msgid "@Path(\"subject\")\n"
"public class SubjectExposingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:203
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"secured\")\n"
"    @RolesAllowed(\"Tester\") <1>\n"
"    public String getSubjectSecured(@Context SecurityContext sec) {\n"
"        Principal user = sec.getUserPrincipal(); <2>\n"
"        String name = user != null ? user.getName() : \"anonymous\";\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:212
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"unsecured\")\n"
"    @PermitAll <3>\n"
"    public String getSubjectUnsecured(@Context SecurityContext sec) {\n"
"        Principal user = sec.getUserPrincipal(); <4>\n"
"        String name = user != null ? user.getName() : \"anonymous\";\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-authorization.adoc:222
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"denied\")\n"
"    @DenyAll <5>\n"
"    public String getSubjectDenied(@Context SecurityContext sec) {\n"
"        Principal user = sec.getUserPrincipal();\n"
"        String name = user != null ? user.getName() : \"anonymous\";\n"
"        return name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:224
#, fuzzy
msgid ""
"This `/subject/secured` endpoint requires an authenticated user that has "
"been granted the role \"Tester\" through the use of the "
"`@RolesAllowed(\"Tester\")` annotation."
msgstr ""
"������ `/subject/secured` ������������������������������ "
"`@RolesAllowed(\"Tester\")` "
"���������������������������������������Tester���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:225
#, fuzzy
msgid ""
"The endpoint obtains the user principal from the JAX-RS `SecurityContext`. "
"This will be non-null for a secured endpoint."
msgstr ""
"���������������������������JAX-RS `SecurityContext` "
"��������������������������������������������������������������������������������������������������������������������������� "
"null ������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:226
#, fuzzy
msgid ""
"The `/subject/unsecured` endpoint allows for unauthenticated access by "
"specifying the `@PermitAll` annotation."
msgstr ""
"`/subject/unsecured` ������������������������������ `@PermitAll` "
"���������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:227
#, fuzzy
msgid ""
"This call to obtain the user principal will return null if the caller is "
"unauthenticated, non-null if the caller is authenticated."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������null���������������������������������������������������������������null������������������"

#. type: Plain text
#: upstream/_guides/security-authorization.adoc:228
#, fuzzy
msgid ""
"The `/subject/denied` endpoint disallows any access regardless of whether "
"the call is authenticated by specifying the `@DenyAll` annotation."
msgstr ""
"`/subject/denied` ��������������������������� `@DenyAll` "
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cdi.adoc:6
#, no-wrap
msgid "Quarkus - Introduction to Contexts and Dependency Injection"
msgstr "Quarkus - ���������������������������������������CDI������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:15
msgid ""
"In this guide we're going to describe the basic principles of the Quarkus "
"programming model that is based on the http://docs.jboss.org/cdi/spec/2.0/"
"cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window="
"\"_blank\"] specification."
msgstr ""
"������������������������ http://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html[Contexts and Dependency Injection for Java 2.0, window="
"_blank]���������������������Quarkus���������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:16
#, no-wrap
msgid "_Q: OK. Let's start simple. What is a bean?_"
msgstr ""
"_Q���OK���������������������������������������������Bean���������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:19
msgid ""
"A: Well, a bean is a _container-managed_ object that supports a set of basic "
"services, such as injection of dependencies, lifecycle callbacks and "
"interceptors."
msgstr ""
"A: ������������������Bean��� _���������������������������_ "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:20
#, no-wrap
msgid "_Q: Wait a minute. What does \"container-managed\" mean?_"
msgstr ""
"_Q: "
"������������������������������������������������������������������������������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:26
msgid ""
"A: Simply put, you don't control the lifecycle of the object instance "
"directly.  Instead, you can affect the lifecycle through declarative means, "
"such as annotations, configuration, etc.  The container is the _environment_ "
"where your application runs.  It creates and destroys the instances of "
"beans, associates the instances with a designated context, and injects them "
"into other beans."
msgstr ""
"A: "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"_������_ "
"���������������������������Bean���������������������������������������������������������������������������������������������������������������������������������������������Bean���������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:27
#, no-wrap
msgid "_Q: What is it good for?_"
msgstr "_���������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:30
msgid ""
"A: An application developer can focus on the business logic rather than "
"finding out \"where and how\" to obtain a fully initialized component with "
"all of its dependencies."
msgstr ""
"A: "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:32
msgid ""
"You've probably heard of the _inversion of control_ (IoC) programming "
"principle. Dependency injection is one of the implementation techniques of "
"IoC."
msgstr ""
"_���������������_ ���Inversion of Control, IoC "
"���������������������������������������������������������������������������������������������������������IoC���������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:33
#, no-wrap
msgid "_Q: What does a bean look like?_"
msgstr "_Q: Bean���������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:37
msgid ""
"A: There are several kinds of beans.  The most common ones are class-based "
"beans:"
msgstr ""
"A: "
"Bean���������������������������������������������������������������������������������������������Bean���������"

#. type: Block title
#: upstream/_guides/cdi.adoc:38
#, no-wrap
msgid "Simple Bean Example"
msgstr "���������������Bean������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:44
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
"import org.eclipse.microprofile.metrics.annotation.Counted;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:47
#, no-wrap
msgid "@ApplicationScoped <1>\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:50
#, no-wrap
msgid "    @Inject\n"
"    Dictionary dictionary; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:56
#, no-wrap
msgid ""
"    @Counted  <3>\n"
"    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:58
msgid ""
"This is a scope annotation. It tells the container which context to "
"associate the bean instance with. In this particular case, a *single bean "
"instance* is created for the application and used by all other beans that "
"inject `Translator`."
msgstr ""
"������������������������������������������������������������������������������Bean������������������������������������������������������������������������������������������������������������������������ "
"*���������Bean������������������* "
"������������������������������������������������ "
"`Translator`���������������������������������Bean���������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:59
msgid ""
"This is a field injection point. It tells the container that `Translator` "
"depends on the `Dictionary` bean. If there is no matching bean the build "
"fails."
msgstr ""
"��������������������������������������������������� `Translator`  ��� "
"`Dictionary`  "
"Bean���������������������������������������������������������������������������Bean������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:60
msgid ""
"This is an interceptor binding annotation. In this case, the annotation "
"comes from the MicroProfile Metrics. The relevant interceptor intercepts the "
"invocation and updates the relevant metrics. We will talk about "
"<<interceptors,interceptors>> later."
msgstr ""
"������������������������������������������������������������������������������������������������������������ "
"MicroProfile Metrics "
"��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"<<interceptors,������������������������>>���������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:61
#, no-wrap
msgid ""
"_Q: Nice. How does the dependency resolution work? I see no names or "
"identifiers._"
msgstr ""
"_Q: "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:70
msgid ""
"A: That's a good question.  In CDI the process of matching a bean to an "
"injection point is *type-safe*.  Each bean declares a set of bean types.  In "
"our example above, the `Translator` bean has two bean types: `Translator` "
"and `java.lang.Object`.  Subsequently, a bean is assignable to an injection "
"point if the bean has a bean type that matches the _required type_ and has "
"all the _required qualifiers_.  We'll talk about qualifiers later.  For now, "
"it's enough to know that the bean above is assignable to an injection point "
"of type `Translator` and `java.lang.Object`."
msgstr ""
"A: "
"������������������������CDI���������Bean������������������������������������������������������������������������������ "
"*������������������* "
"������������Bean������Bean������������������������������������������������������������ "
"`Translator`  Bean��������� `Translator`  ��� `java.lang.Object`  ��� 2 "
"������Bean���������������������������������������Bean��� _������������_ "
"������������������Bean��������������� _���������_ ������������ "
"_������������_ "
"������������������������Bean���������������������������������������������������������������������������������������������������������������������������������������������Bean��� "
"`Translator`  ��� `java.lang.Object`  "
"���������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:71
#, no-wrap
msgid ""
"_Q: Hm, wait a minute. What happens if multiple beans declare the same "
"type?_"
msgstr ""
"_Q: "
"���������������������������������������������������������������������������������������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:77
msgid ""
"A: There is a simple rule: *exactly one bean must be assignable to an "
"injection point, otherwise the build fails*.  If none is assignable the "
"build fails with `UnsatisfiedResolutionException`.  If multiple are "
"assignable the build fails with `AmbiguousResolutionException`.  This is "
"very useful because your application fails fast whenever the container is "
"not able to find an unambiguous dependency for any injection point."
msgstr ""
"A: ���������������������������������������: "
"*1������������������������������������������������������1������Bean���������������������������������������������������������������������������������������������������* "
"������������������������Bean���1��������������������� "
"`UnsatisfiedResolutionException`  "
"������������������������������������������Bean��������������������������������������������� "
"`AmbiguousResolutionException`  "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/cdi.adoc:81
msgid ""
"Your can use programmatic lookup via `javax.enterprise.inject.Instance` to "
"resolve ambiguities at runtime and even iterate over all beans implementing "
"a given type:"
msgstr ""
"`javax.enterprise.inject.Instance`  "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������Bean������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:85
#, no-wrap
msgid "public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:88
#, no-wrap
msgid "    @Inject\n"
"    Instance<Dictionary> dictionaries; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:95
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      for (Dictionary dict : dictionaries) { <2>\n"
"         // ...\n"
"      }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:97
msgid ""
"This injection point will not result in an ambiguous dependency even if "
"there are multiple beans that implement the `Dictionary` type."
msgstr ""
"������������������������������������������������ `Dictionary`  "
"���������������������������Bean���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:98
msgid "`javax.enterprise.inject.Instance` extends `Iterable`."
msgstr ""
"`javax.enterprise.inject.Instance` ��� `Iterable` ���������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:100
#, no-wrap
msgid "_Q: Can I use setter and constructor injection?_"
msgstr ""
"_Q: "
"������������������������������������������������������������������������������������_"

#. type: delimited block =
#: upstream/_guides/cdi.adoc:105
msgid ""
"A: Yes, you can.  In fact, in CDI the \"setter injection\" is superseded by "
"more powerful https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#initializer_methods[initializer methods, window=\"_blank\"].  "
"Initializers may accept multiple parameters and don't have to follow the "
"JavaBean naming conventions."
msgstr ""
"A: "
"���������������������������������CDI��������������������������������������������������� "
"link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#initializer_methods[���������������������������������, window="
"_blank]���������������������������������������������������������������������������������������������������������������������������JavaBean���������������������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:106
#, no-wrap
msgid "Initialized and Constructor Injection Example"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:111 upstream/_guides/cdi.adoc:306
#, no-wrap
msgid "@ApplicationScoped\n"
"public class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:113
#, no-wrap
msgid "    private final TranslatorHelper helper;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:117
#, no-wrap
msgid ""
"    Translator(TranslatorHelper helper) { <1>\n"
"       this.helper = helper;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:123
#, no-wrap
msgid ""
"    @Inject <2>\n"
"    void setDeps(Dictionary dic, LocalizationService locService) { <3>\n"
"      / ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:128
msgid ""
"This is a constructor injection.  In fact, this code would not work in "
"regular CDI implementations where a bean with a normal scope must always "
"declare a no-args constructor and the bean constructor must be annotated "
"with `@Inject`.  However, in Quarkus we detect the absence of no-args "
"constructor and \"add\" it directly in the bytecode.  It's also not "
"necessary to add `@Inject` if there is only one constructor present."
msgstr ""
"������������������������������������������������������������������������������������������������������������CDI���������������������������������������������������������������Bean���������no-"
"args���������������������������������������������������������Bean��������������������������� "
"`@Inject`  "
"������������������������������������������������������������������������Quarkus���������no-"
"args������������������������������������������������������������������������������������������������������������������������������������������������1��������������������������� "
"`@Inject`  ������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:129
msgid "An initializer method must be annotated with `@Inject`."
msgstr ""
"��������������������������������������� `@Inject`  "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:130
msgid ""
"An initializer may accept multiple parameters - each one is an injection "
"point."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:131
#, no-wrap
msgid "_Q: You talked about some qualifiers?_"
msgstr "_Q������������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:136
msgid ""
"A: https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[Qualifiers, "
"window=\"_blank\"] are annotations that help the container to distinguish "
"beans that implement the same type.  As we already said a bean is assignable "
"to an injection point if it has all the required qualifiers.  If you declare "
"no qualifier at an injection point the `@Default` qualifier is assumed."
msgstr ""
"A link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec.html#qualifiers[: "
"���������, window="
"_blank]���������������������������������������������Bean������������������������������������������������������������������������������������������Bean������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"`@Default`  ������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:138
msgid ""
"A qualifier type is a Java annotation defined as `@Retention(RUNTIME)` and "
"annotated with the `@javax.inject.Qualifier` meta-annotation:"
msgstr ""
"Qualifier��������� `@Retention(RUNTIME)`  ������������������������ Java "
"��������������������������� `@javax.inject.Qualifier`  "
"������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:139
#, no-wrap
msgid "Qualifier Example"
msgstr "���������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:146
#, no-wrap
msgid ""
"@Qualifier\n"
"@Retention(RUNTIME)\n"
"@Target({METHOD, FIELD, PARAMETER, TYPE})\n"
"public @interface Superior {}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:149
msgid ""
"The qualifiers of a bean are declared by annotating the bean class or "
"producer method or field with the qualifier types:"
msgstr ""
"Bean������������������Bean������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:150
#, no-wrap
msgid "Bean With Custom Qualifier Example"
msgstr "������������������������������ Bean ������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:156
#, no-wrap
msgid ""
"@Superior <1>\n"
"@ApplicationScoped\n"
"public class SuperiorTranslator extends Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:161 upstream/_guides/cdi.adoc:210
#, no-wrap
msgid "    String translate(String sentence) { \n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:163
msgid ""
"`@Superior` is a https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#defining_qualifier_types[qualifier annotation, window=\"_blank\"]."
msgstr ""
"`@Superior`  ��� link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#defining_qualifier_types[������������������������������, window="
"_blank]���������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:167
msgid ""
"This bean would be assignable to `@Inject @Superior Translator` and `@Inject "
"@Superior SuperiorTranslator` but not to `@Inject Translator`.  The reason "
"is that `@Inject Translator` is automatically transformed to `@Inject "
"@Default Translator` during typesafe resolution.  And since our "
"`SuperiorTranslator` does not declare `@Default` only the original "
"`Translator` bean is assignable."
msgstr ""
"������Bean��� `@Inject @Superior Translator`  ��� `@Inject @Superior "
"SuperiorTranslator`  ������������������������������������ `@Inject "
"Translator`  ������������������������������������������������������ `@Inject "
"Translator`  ������������������������������������������������ `@Inject "
"@Default Translator`  ������������������������������������������������������ "
"`SuperiorTranslator`  ��� `@Default`  "
"��������������������������������������� `Translator`  "
"Bean������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:168
#, no-wrap
msgid "_Q: Looks good. What is the bean scope?_"
msgstr "_������������������������������Bean���������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:171
msgid ""
"The scope of a bean determines the lifecycle of its instances, i.e. when and "
"where an instance should be created and destroyed."
msgstr ""
"Bean���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:173
msgid "Every bean has exactly one scope."
msgstr ""
"������������������������������1������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:174
#, no-wrap
msgid "_Q: What scopes can I actually use in my Quarkus application?_"
msgstr ""
"_Q: "
"Quarkus���������������������������������������������������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:177
msgid ""
"A: You can use all the built-in scopes mentioned by the specification except "
"for `javax.enterprise.context.ConversationScoped`."
msgstr ""
"A: `javax.enterprise.context.ConversationScoped`  "
"������������������������������������������������������������������������������������������������������������"

#. ----------------------
#. type: Table
#: upstream/_guides/cdi.adoc:187
#, no-wrap
msgid ""
"|Annotation   |Description   \n"
"|`@javax.enterprise.context.ApplicationScoped`   | A single bean instance is "
"used for the application and shared among all injection points. The instance "
"is created lazily, i.e. once a method is invoked upon the <<client_proxies, "
"client proxy>>. \n"
"|`@javax.inject.Singleton`   | Just like `@ApplicationScoped` except that no "
"client proxy is used. The instance is created when an injection point that "
"resolves to a @Singleton bean is being injected.\n"
"|`@javax.enterprise.context.RequestScoped`   | The bean instance is "
"associated with the current _request_ (usually an HTTP request). \n"
"|`@javax.enterprise.context.Dependent`   | This is a pseudo-scope. The "
"instances are not shared and every injection point spawns a new instance of "
"the dependent bean. The lifecycle of dependent bean is bound to the bean "
"injecting it - it will be created and destroyed along with the bean "
"injecting it.\n"
"|`@javax.enterprise.context.SessionScoped`   | This scope is backed by a "
"`javax.servlet.http.HttpSession` object. It's only available if the `quarkus-"
"undertow` extension is used.\n"
msgstr ""
"|Annotation   |Description   \n"
"|`@javax.enterprise.context.ApplicationScoped`   | "
"���������Bean������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������<<client_proxies, "
"client proxy>>������������������������������������������������������������\n"
"|`@javax.inject.Singleton`   | `@ApplicationScoped` "
"������������������������������������������������������������������������������������������������������������������@SingletonBean������������������������������������������������������������������������������������������\n"
"|`@javax.enterprise.context.RequestScoped`   | "
"Bean������������������������������ _���������������_ "
"������������������������������������HTTP��������������������� \n"
"|`@javax.enterprise.context.Dependent`   | "
"������������������������������������������������������������������������������������������������������������������������������������Bean���������������������������������������������������������Bean���������������������������������������������������Bean���������������������������������������������������������������������Bean������������������������������������������������\n"
"|`@javax.enterprise.context.SessionScoped`   | ��������������������� `javax."
"servlet.http.HttpSession` ������������������������������������������������ "
"`quarkus-undertow` "
"���������������������������������������������������������������������������\n"

#. type: Plain text
#: upstream/_guides/cdi.adoc:190
msgid ""
"There can be other custom scopes provided by Quarkus extensions. For "
"example, `quarkus-narayana-jta` provides `javax.transaction."
"TransactionScoped`."
msgstr ""
"Quarkus������������������������������������������������������������������������������������������������������ "
"`quarkus-narayana-jta` ��� `javax.transaction.TransactionScoped` "
"���������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:192
#, no-wrap
msgid "_Q: I don't understand the concept of client proxies._"
msgstr "_Q: ���������������������������������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:197
msgid ""
"Indeed, the https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#client_proxies[client proxies, window=\"_blank\"] could be hard to "
"grasp but they provide some useful functionality.  A client proxy is "
"basically an object that delegates all method invocations to a target bean "
"instance.  It's a container construct that implements `io.quarkus.arc."
"ClientProxy` and extends the bean class."
msgstr ""
"��������� link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#client_proxies[������������������������������, window="
"_blank]���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������Bean��������������������������������������������������������������������� "
"`io.quarkus.arc.ClientProxy`  ���������������Bean "
"������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:199
msgid ""
"Client proxies only delegate method invocations. So never read or write a "
"field of a normal scoped bean, otherwise you will work with non-contextual "
"or stale data."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������Bean������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:200
#, no-wrap
msgid "Generated Client Proxy Example"
msgstr "���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:205
#, no-wrap
msgid "@ApplicationScoped\n"
"class Translator {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:213
#, no-wrap
msgid ""
"// The client proxy class is generated and looks like...\n"
"class Translator_ClientProxy extends Translator { <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:221
#, no-wrap
msgid ""
"    String translate(String sentence) { \n"
"      // Find the correct translator instance...\n"
"      Translator translator = "
"getTranslatorInstanceFromTheApplicationContext();\n"
"      // And delegate the method invocation...\n"
"      return translator.translate(sentence);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:223
msgid ""
"The `Translator_ClientProxy` instance is always injected instead of a direct "
"reference to a https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#contextual_instance[contextual instance, window=\"_blank\"] of the "
"`Translator` bean."
msgstr ""
"`Translator_ClientProxy`  ������������������������ `Translator`  Bean��� "
"link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#contextual_instance[������������������������������������, window="
"_blank]���������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:225
msgid "Client proxies allow for:"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:227
msgid ""
"Lazy instantiation - the instance is created once a method is invoked upon "
"the proxy."
msgstr ""
"��������������������������� - "
"���������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:228
msgid ""
"Ability to inject a bean with \"narrower\" scope to a bean with \"wider\" "
"scope; i.e. you can inject a `@RequestScoped` bean into an "
"`@ApplicationScoped` bean."
msgstr ""
"���������������������������Bean������������������������������Bean��������������������������������������� "
"`@RequestScoped`  Bean��� `@ApplicationScoped`  "
"Bean���������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:229
msgid ""
"Circular dependencies in the dependency graph. Having circular dependencies "
"is often an indication that a redesign should be considered, but sometimes "
"it's inevitable."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:230
msgid ""
"In rare cases it's practical to destroy the beans manually. A direct "
"injected reference would lead to a stale bean instance."
msgstr ""
"������������������������������������Bean���������������������������������������������������������������������������������������Bean���������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:232
#, no-wrap
msgid "_Q: OK. You said that there are several kinds of beans?_"
msgstr ""
"_Q: ���������������Bean������������������������������������������������_"

#. type: Plain text
#: upstream/_guides/cdi.adoc:235
msgid "A: Yes. In general, we distinguish:"
msgstr "A: ������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:237
msgid "Class beans"
msgstr "���������Bean"

#. type: Plain text
#: upstream/_guides/cdi.adoc:238
msgid "Producer methods"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:239
msgid "Producer fields"
msgstr "������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:242
msgid ""
"Synthetic beans are usually provided by extensions. Therefore, we are not "
"going to cover them in this guide."
msgstr ""
"������Bean���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:245
msgid ""
"Producer methods and fields are useful if you need additional control over "
"instantiation of a bean.  They are also useful when integrating third-party "
"libraries where you don't control the class source and may not add "
"additional annotations etc."
msgstr ""
"���������������������������������������������������������Bean������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:246
#, no-wrap
msgid "Producers Example"
msgstr "���������������������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:251
#, no-wrap
msgid "@ApplicationScoped\n"
"public class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:254
#, no-wrap
msgid "    @Produces <1>\n"
"    double pi = Math.PI; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:264
#, no-wrap
msgid ""
"    @Produces <3>\n"
"    List<String> names() {\n"
"       List<String> names = new ArrayList<>();\n"
"       names.add(\"Andy\");\n"
"       names.add(\"Adalbert\");\n"
"       names.add(\"Joachim\");\n"
"       return names; <4>\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:267
#, no-wrap
msgid "@ApplicationScoped\n"
"public class Consumer {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:270
#, no-wrap
msgid "   @Inject\n"
"   double pi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:273
#, no-wrap
msgid "   @Inject\n"
"   List<String> names;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:276
#, no-wrap
msgid "   // ...   \n"
"} \n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:281
msgid ""
"The container analyses the field annotations to build a bean metadata.  The "
"_type_ is used to build the set of bean types.  In this case, it will be "
"`double` and `java.lang.Object`.  No scope annotation is declared and so "
"it's defaulted to `@Dependent`."
msgstr ""
"������������������������������������������������������������������������Bean��������������������������������������� "
"_���_ "
"������Bean��������������������������������������������������������������������������� "
"`double`  ��� `java.lang.Object` ."
"��������������������������������������������������������������������������������������� "
"`@Dependent` ������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:282
msgid "The container will read this field when creating the bean instance."
msgstr ""
"������������������Bean������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:286
msgid ""
"The container analyses the method annotations to build a bean metadata.  The "
"_return type_ is used to build the set of bean types.  In this case, it will "
"be `List<String>`, `Collection<String>`, `Iterable<String>` and `java.lang."
"Object`.  No scope annotation is declared and so it's defaulted to "
"`@Dependent`."
msgstr ""
"������������������������������������������������������������������������Bean��������������������������������������������������� "
"_���_ "
"������Bean��������������������������������������������������������������������������� "
"`List<String>` ��� `Collection<String>`��� `Iterable<String>`��� `java.lang."
"Object` "
"��������������������������������������������������������������������������������������������������������� "
"`@Dependent`  ������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:287
msgid "The container will call this method when creating the bean instance."
msgstr ""
"������������������Bean������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:291
msgid ""
"There's more about producers.  You can declare qualifiers, inject "
"dependencies into the producer methods parameters, etc.  You can read more "
"about producers for example in the https://docs.jboss.org/weld/reference/"
"latest/en-US/html/producermethods.html[Weld docs, window=\"_blank\"]."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"link:https://docs.jboss.org/weld/reference/latest/en-US/html/producermethods."
"html[Weld, window=_blank] "
"���������������������������������������������������"

#. type: Title ==
#: upstream/_guides/cdi.adoc:292
#, no-wrap
msgid "_Q: OK, injection looks cool. What other services are provided?_"
msgstr ""
"_Q: "
"OK������������������������������������������������������������������������������������������������������������_"

#. type: Title ===
#: upstream/_guides/cdi.adoc:294
#, no-wrap
msgid "Lifecycle Callbacks"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:297
msgid ""
"A bean class may declare lifecycle `@PostConstruct` and `@PreDestroy` "
"callbacks:"
msgstr ""
"Bean������������������������������������ `@PostConstruct`  ��� `@PreDestroy` "
" ���������������������������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:298
#, no-wrap
msgid "Lifecycle Callbacks Example"
msgstr "���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:303
#, no-wrap
msgid ""
"import javax.annotation.PostConstruct;\n"
"import javax.annotation.PreDestroy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:311
#, no-wrap
msgid "    @PostConstruct <1>\n"
"    void init() {\n"
"       // ...\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:317
#, no-wrap
msgid "    @PreDestroy <2>\n"
"    void destroy() {\n"
"      // ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:319
msgid ""
"This callback is invoked before the bean instance is put into service. It is "
"safe to perform some initialization here."
msgstr ""
"������������������������������Bean������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:320
msgid ""
"This callback is invoked before the bean instance is destroyed. It is safe "
"to perform some cleanup tasks here."
msgstr ""
"������������������������������Bean���������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:322
msgid ""
"It's a good practice to keep the logic in the callbacks \"without side "
"effects\", i.e. you should avoid calling other beans inside the callbacks."
msgstr ""
"������������������������������������������������������������������������������������������������������������������������Bean������������������������������������������������"

#. type: Title ===
#: upstream/_guides/cdi.adoc:324
#, no-wrap
msgid "Interceptors"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:328
msgid ""
"Interceptors are used to separate cross-cutting concerns from business logic."
"  There is a separate specification - Java Interceptors - that defines the "
"basic programming model and semantics."
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"Java Interceptors ���������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:329
#, no-wrap
msgid "Simple Interceptor Example"
msgstr "���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:334
#, no-wrap
msgid ""
"import javax.interceptor.Interceptor;\n"
"import javax.annotation.Priority;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:339
#, no-wrap
msgid ""
"@Logged <1>\n"
"@Priority(2020) <2>\n"
"@Interceptor <3>\n"
"public class LoggingInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:342
#, no-wrap
msgid "   @Inject <4>\n"
"   Logger logger;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:350
#, no-wrap
msgid ""
"   @AroundInvoke <5>\n"
"   Object logInvocation(InvocationContext context) {\n"
"      // ...log before\n"
"      Object ret = context.proceed(); <6>\n"
"      // ...log after\n"
"      return ret;\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:354
msgid ""
"This is an interceptor binding annotation that is used to bind our "
"interceptor to a bean. Simply annotate a bean class with `@Logged`."
msgstr ""
"���������������������������������������Bean������������������������������������������������������������������������������������������������������������������������Bean������������ "
"`@Logged`  ������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:355
msgid ""
"`Priority` enables the interceptor and affects the interceptor ordering. "
"Interceptors with smaller priority values are called first."
msgstr ""
"`Priority`  "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:356
msgid "Marks an interceptor component."
msgstr "���������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:357
msgid "An interceptor instance may be the target of dependency injection."
msgstr ""
"���������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:358
msgid "`AroundInvoke` denotes a method that interposes on business methods."
msgstr ""
"`AroundInvoke`  "
"������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:359
msgid ""
"Proceed to the next interceptor in the interceptor chain or invoke the "
"intercepted business method."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:361
msgid ""
"Instances of interceptors are dependent objects of the bean instance they "
"intercept, i.e. a new interceptor instance is created for each intercepted "
"bean."
msgstr ""
"���������������������������������������������������������������������������Bean���������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/cdi.adoc:362
#, no-wrap
msgid "Events and Observers"
msgstr "���������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:367
msgid ""
"Beans may also produce and consume events to interact in a completely "
"decoupled fashion.  Any Java object can serve as an event payload.  The "
"optional qualifiers act as topic selectors."
msgstr ""
"Bean��������������������������������������������������������������������������������������������������������������������������������������������������������� "
"Java "
"���������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Block title
#: upstream/_guides/cdi.adoc:368
#, no-wrap
msgid "Simple Event Example"
msgstr "���������������������������������"

#. type: delimited block -
#: upstream/_guides/cdi.adoc:375
#, no-wrap
msgid "class TaskCompleted {\n"
"  // ...\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:378
#, no-wrap
msgid "@ApplicationScoped\n"
"class ComplicatedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:381
#, no-wrap
msgid "   @Inject\n"
"   Event<TaskCompleted> event; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:386
#, no-wrap
msgid ""
"   void doSomething() {\n"
"      // ...\n"
"      event.fire(new TaskCompleted()); <2>\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:391
#, no-wrap
msgid "@ApplicationScoped\n"
"class Logger {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi.adoc:395
#, no-wrap
msgid ""
"   void onTaskCompleted(@Observes TaskCompleted task) { <3>\n"
"      // ...log the task\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi.adoc:399
msgid "`javax.enterprise.event.Event` is used to fire events."
msgstr ""
"`javax.enterprise.event.Event`  "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:400
msgid "Fire the event synchronously."
msgstr "������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:401
msgid "This method is notified when a `TaskCompleted` event is fired."
msgstr ""
"������������������������ `TaskCompleted`  "
"���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:403
msgid ""
"For more info about events/observers visit https://docs.jboss.org/weld/"
"reference/latest/en-US/html/events.html[Weld docs, window=\"_blank\"]."
msgstr ""
"������������/��������������������������������������������� link:https://docs."
"jboss.org/weld/reference/latest/en-US/html/events.html[Weld docs���, window="
"_blank]������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:411
msgid ""
"In this guide, we've covered some of the basic topics of the Quarkus "
"programming model that is based on the http://docs.jboss.org/cdi/spec/2.0/"
"cdi-spec.html[Contexts and Dependency Injection for Java 2.0, window="
"\"_blank\"] specification.  However, a full CDI implementation is not used "
"under the hood.  Quarkus only implements a subset of the CDI features - see "
"also <<cdi-reference.adoc#supported_features,the list of supported "
"features>> and <<cdi-reference.adoc#limitations,the list of limitations>>.  "
"On the other hand, there are quite a few <<cdi-"
"reference#nonstandard_features,non-standard features>> and <<cdi-reference."
"adoc#build_time_apis,Quarkus-specific APIs>>.  We believe that our efforts "
"will drive the innovation of the CDI specification towards the build-time "
"oriented developer stacks in the future."
msgstr ""
"������������������������ link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html[Contexts and Dependency Injection for Java 2.0, window="
"_blank]���������������������Quarkus������������������������������������������������������������������������������������������������������������CDI���������������������������������������������������������������������Quarkus���CDI "
"link:cdi-reference."
"html#supported_features[������]��������������������������������������������������������������� "
"link:cdi-reference.html#nonstandard_features[������������������]��� link:cdi-"
"reference."
"html#build_time_apis[Quarkus���������API]������������������������������������������������������������������������������������������������������������������������������������CDI������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/cdi.adoc:413
msgid ""
"If you wish to learn more about Quarkus-specific features and limitations "
"there is a Quarkus link:cdi-reference[CDI Reference Guide].  We also "
"recommend you to read the http://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html[CDI specification] and the https://docs.jboss.org/weld/reference/latest/"
"en-US/html/[Weld documentation] (Weld is a CDI Reference Implementation) to "
"get acquainted with more complex topics."
msgstr ""
"Quarkus���������������������������������������������������������������������Quarkus "
"link:cdi-"
"reference[CDI���������������������������]��������������������������� link:"
"http://docs.jboss.org/cdi/spec/2.0/cdi-spec.html[CDI���������]��� link:https:"
"//docs.jboss.org/weld/reference/latest/en-US/html/"
"[Weld���������������������]���Weld���CDI���������������������������������������������������������������������������������������������������������������������������������������������������"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/vault-auth.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Working with HashiCorp Vault���s Authentication"
msgstr "Quarkus - HashiCorp Vault���������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:21
#, fuzzy
msgid "Working with Vault is typically a 2 step process:"
msgstr ""
"Vault���������������������������2������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:23
#, fuzzy
msgid "Logging in, which returns a client token"
msgstr "���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:24
#, fuzzy
msgid ""
"Start using Vault using the client token, within the limits of what is "
"allowed by the policies associated with the token"
msgstr ""
"������������������ "
"��������������������������������������������������������������������������������������������������������� "
"��������������������������� Vault ������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:26
#, fuzzy
msgid ""
"There are several Vault authentication methods supported in Quarkus today, "
"namely:"
msgstr ""
"������Quarkus������������������������������Vault������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:28
#, fuzzy
msgid ""
"https://www.vaultproject.io/docs/auth/token[Token]: whenever you already "
"have a token"
msgstr ""
"������ link:https://www.vaultproject.io/docs/auth/"
"token[������]������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:29
#, fuzzy
msgid ""
"https://www.vaultproject.io/docs/auth/userpass[Userpass]: authenticate with "
"a username and a password"
msgstr ""
"link:https://www.vaultproject.io/docs/auth/userpass[Userpass]: "
"���������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:31
#, fuzzy
msgid ""
"https://www.vaultproject.io/docs/auth/approle[AppRole]: authenticate with a "
"role id and a secret id (which can be seen as a _Userpass_ for automated "
"workflows - machines and services)"
msgstr ""
"link:https://www.vaultproject.io/docs/auth/approle[AppRole]: ��������� ID "
"������������ ID ������������������ (������������������������������������ - "
"��������������������������� _Userpass_������������������������������������)"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:32
#, fuzzy
msgid ""
"https://www.vaultproject.io/docs/auth/kubernetes[Kubernetes], which is "
"applicable to workloads deployed into Kubernetes"
msgstr ""
"Kubernetes������������������������������������������������������������ link:"
"https://www.vaultproject.io/docs/auth/kubernetes[Kubernetes]"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:34
#, fuzzy
msgid ""
"This guide aims at providing examples for each of those authentication "
"methods."
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:42
#, fuzzy
msgid "to complete the {base-guide}"
msgstr "������������������}���������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:43
#, fuzzy
msgid "roughly 30 minutes"
msgstr "���������30���"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:48
#, fuzzy
msgid ""
"For the Kubernetes authentication: A Kubernetes distribution to deploy the "
"Quarkus application (Minishift, K3s, Docker Desktop, ������)"
msgstr ""
"Kubernetes���������������������Quarkus������������������������������������������������������Kubernetes������������������������������������Minishift���K3s���Docker "
"Desktop���..."

#. type: Title ==
#: upstream/_guides/vault-auth.adoc:49
#, no-wrap, fuzzy
msgid "Token Authentication"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:52
#, fuzzy
msgid ""
"We assume there is a Vault container and a PostgreSQL container running from "
"the {base-guide}, and the root token is known."
msgstr ""
"���������������{base-"
"guide}������Vault���������������PostgreSQL������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:54
#, fuzzy
msgid ""
"First, create a new shell, `docker exec` into the container and set the root "
"token:"
msgstr ""
"��������������������������������������������� `docker exec` "
"���������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:58
#, no-wrap
msgid "docker exec -it dev-vault sh\n"
"/ # export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:61
#, fuzzy
msgid "Create a token for the `vault-quickstart-policy` policy:"
msgstr ""
"`vault-quickstart-policy` ������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:73
#, no-wrap
msgid ""
"/ # vault token create -policy=vault-quickstart-policy\n"
"Key                  Value\n"
"---                  -----\n"
"token                {client-token}\n"
"token_accessor       q1ynY9T7FDgbMKd3uST7RzLy\n"
"token_duration       768h\n"
"token_renewable      true\n"
"token_policies       [\"default\" \"vault-quickstart-policy\"]\n"
"identity_policies    []\n"
"policies             [\"default\" \"vault-quickstart-policy\"]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:76
#, fuzzy
msgid "Now use the generated client token in the application configuration:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:79
#, no-wrap
msgid "quarkus.vault.authentication.client-token={client-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:82
#, fuzzy
msgid "Compile and start the application:"
msgstr "������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:89
#, fuzzy
msgid "Finally test the application endpoint:"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:95 upstream/_guides/vault-auth.adoc:166
#, fuzzy
msgid "You should see: `{private-key}`."
msgstr "��������������������������� `{private-key}`."

#. type: Title ===
#: upstream/_guides/vault-auth.adoc:96
#, no-wrap, fuzzy
msgid "Client Token using Response Wrapping"
msgstr ""
"���������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:102
#, fuzzy
msgid ""
"One drawback of this approach is that you expose a secret piece of "
"information (i.e. the token) that can give access to sensitive data in Vault."
" This requires ensuring that the application���s configuration stays secure "
"at all time.  If an intruder was to access the client token, it would be "
"able to start calling Vault on all endpoints permitted by the policy."
msgstr ""
"��������������������������������� 1 ���������Vault "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������ "
"������������������������������������������������������������������������������������������������������������������ "
"Vault ������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:112
#, fuzzy
msgid ""
"This risk can be mitigated using an approach called https://www.vaultproject."
"io/docs/concepts/response-wrapping[Response Wrapping] (which used to be "
"known as _Cubbyhole Authentication_ in older versions of Vault). This "
"principle is simple: instead of configuring the client token itself, we hide "
"it inside a _Wrapping Token_, which we provide to the application. Upon "
"startup, the application will unwrap the _Wrapping Token_, and fetch the "
"real token from within. The additional level of security comes from the fact "
"that the _Wrapping Token_ is short lived (from a few seconds to a few "
"minutes; basically just enough to start and unwrap the token), and can be "
"unwrapped *only once*.  If the _Wrapping Token_ gets stolen and unwrapped, "
"we will notice immediately because the legitimate application will get an "
"error saying that the token is invalid."
msgstr ""
"��������������������� link:https://www.vaultproject.io/docs/concepts/"
"response-wrapping[Response Wrapping]���������������������������Vault������ "
"_Cubbyhole "
"Authentication_��������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������� "
"_������������������������������_��������������������������������������������������������������������������������������������������������� "
"_������������������������������_��������������������������������������������������������������������������������������������������������������� "
"_������������������������������_��������������������������������������������������������������������������������������������������������������������������������� "
"*���*��������������������������������������������������������������������������� "
"_���������������������������������_������������������������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:114
#, fuzzy
msgid ""
"With that in mind, let���s create a new token and wrap it inside a _Wrapping "
"Token_ with a TTL of 1 minute:"
msgstr ""
"���������������������������������������������������������������������TTL���1������ "
"_Wrapping Token_������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:125
#, no-wrap
msgid ""
"/ # vault token create -wrap-ttl=60s -policy=vault-quickstart-policy\n"
"Key                              Value\n"
"---                              -----\n"
"wrapping_token:                  {client-token-wrapping-token}\n"
"wrapping_accessor:               ojvbOtmLzB5D47SzXGo9b3sR\n"
"wrapping_token_ttl:              1m\n"
"wrapping_token_creation_time:    2020-04-14 16:05:20.990240428 +0000 UTC\n"
"wrapping_token_creation_path:    auth/token/create\n"
"wrapped_accessor:                a4ITYQNnQtwCOUmV5DJMpCiG\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:128
#, fuzzy
msgid "Now let���s use this wrapping token in the configuration:"
msgstr ""
"���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:131
#, no-wrap
msgid ""
"quarkus.vault.authentication.client-token-wrapping-token={client-token-"
"wrapping-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:134
#, fuzzy
msgid ""
"Compile and run the application *without the tests*, you should be able now "
"to curl the private key `{private-key}` as before."
msgstr ""
"��������������������� "
"*������������������*������������������������������������������������������������������������ "
"`{private-key}` ��� curl ���������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:136
#, fuzzy
msgid ""
"Stop the application, and execute tests with `./mvnw test`. They should fail "
"with the following error:"
msgstr ""
"��������������������������������������� `./mvnw test` "
"���������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:140
#, no-wrap
msgid ""
"ERROR: Failed to start application\n"
"io.quarkus.vault.VaultException: wrapping token is not valid or does not "
"exist; this means that the token has already expired (if so you can increase "
"the TTL on the wrapping token) or has been consumed by somebody else "
"(potentially indicating that the wrapping token has been stolen)\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/vault-auth.adoc:142
#, no-wrap, fuzzy
msgid "Userpass Authentication"
msgstr "������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:146
#, fuzzy
msgid ""
"Normally the `userpass` auth method should already be enabled from the {base-"
"guide}. If not, execute the following commands now:"
msgstr ""
"��������� `userpass` auth ��������������� {base-guide} "
"������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:153
#, fuzzy
msgid ""
"And simply specify the username and password for this user in the "
"application configuration:"
msgstr ""
"������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:157
#, no-wrap
msgid ""
"quarkus.vault.authentication.userpass.username=bob\n"
"quarkus.vault.authentication.userpass.password=sinclair\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:160
#, fuzzy
msgid ""
"Test the application endpoint after compiling and starting the application "
"again:"
msgstr ""
"���������������������������������������������������������������������������������������������������������������������������������������������"

#. type: delimited block =
#: upstream/_guides/vault-auth.adoc:172
#, fuzzy
msgid ""
"Userpass supports response wrapping as well for the `password` property, "
"although it is more unusual to use this approach as response wrapping "
"typically involves a technical workflow, which is better suited for "
"`approle`."
msgstr ""
"`approle`Userpass ��� `password` "
"������������������������������������������������������������������������������������������������������������������������������������������������������������������"

#. type: Title ==
#: upstream/_guides/vault-auth.adoc:174
#, no-wrap, fuzzy
msgid "Approle Authentication"
msgstr "���������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:177
#, fuzzy
msgid ""
"_Approle_ is an authentication method suited for technical workflows. It "
"relies on 2 pieces of information:"
msgstr ""
"_Approle���_������������������������������������������������������������������2���������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:179
#, fuzzy
msgid "role id can be compared to the user name in _Userpass_"
msgstr ""
"���������ID��� "
"_Userpass_���������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:180
#, fuzzy
msgid "secret id plays the role of the `password`"
msgstr "���������������������������������������������ID��������� `password`"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:183
#, fuzzy
msgid ""
"To set up _Approle_ you need to enable the `approle` auth method, create an "
"app role, and generate a role id and secret id:"
msgstr ""
"_Approle_������������������������ `approle` "
"auth������������������������������������������������������������������������ID���������������������ID���������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:187
#, no-wrap
msgid ""
"/ # vault auth enable approle\n"
"/ # vault write auth/approle/role/myapprole policies=vault-quickstart-"
"policy\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:192
#, no-wrap
msgid ""
"/ # vault read auth/approle/role/myapprole/role-id\n"
"Key        Value\n"
"---        -----\n"
"role_id    {role-id}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:198
#, no-wrap
msgid ""
"/ # vault write -f auth/approle/role/myapprole/secret-id\n"
"Key                   Value\n"
"---                   -----\n"
"secret_id             {secret-id}\n"
"secret_id_accessor    2acff656-d049-c4b3-a752-6125e69210ba\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:201
#, fuzzy
msgid "Add the appropriate properties:"
msgstr "���������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:205
#, no-wrap
msgid ""
"quarkus.vault.authentication.app-role.role-id={role-id}\n"
"quarkus.vault.authentication.app-role.secret-id={secret-id}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:209
#, fuzzy
msgid ""
"After compiling and running the application you should be able to curl it on "
"the `private-key` endpoint to see the secret information `{private-key}` as "
"usual."
msgstr ""
"������������������������������������������������������������������������������ "
"`private-key` ��������������������������������������� `{private-key}` "
"���������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/vault-auth.adoc:210
#, no-wrap, fuzzy
msgid "Approle using Response Wrapping"
msgstr "������������������������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:213
#, fuzzy
msgid ""
"Similarly to direct client token authentication, it is possible to wrap the "
"`secret-id`:"
msgstr ""
"��������������������������������������������������������� `secret-id`."

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:223
#, no-wrap
msgid ""
"/ # vault write -wrap-ttl=60s -f auth/approle/role/myapprole/secret-id\n"
"Key                              Value\n"
"---                              -----\n"
"wrapping_token:                  {secret-id-wrapping-token}\n"
"wrapping_accessor:               u5EPZOnqyIJN8mT44od67WMS\n"
"wrapping_token_ttl:              1m\n"
"wrapping_token_creation_time:    2020-04-14 16:59:25.482352967 +0000 UTC\n"
"wrapping_token_creation_path:    auth/approle/role/myapprole/secret-id\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:226
#, fuzzy
msgid ""
"Replace the `secret-id` property with `secret-id-wrapping-token` in the "
"configuration:"
msgstr ""
"��������� `secret-id` ������������������ `secret-id-wrapping-token` "
"������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:229
#, no-wrap
msgid ""
"quarkus.vault.authentication.app-role.secret-id-wrapping-token={secret-id-"
"wrapping-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:233
#, fuzzy
msgid ""
"Finally, recompile the application without tests (otherwise you are going to "
"consume the wrapping token), launch it and curl the `private-key` endpoint. "
"As usual, you should see `{private-key}`."
msgstr ""
"������������������������������������������������������������������������������(���������������������������������������������������������������������������������)������������������������������������������ "
"`private-key` "
"������������������������������������������������������������������������ "
"`{private-key}`."

#. type: Title ==
#: upstream/_guides/vault-auth.adoc:234
#, no-wrap, fuzzy
msgid "Kubernetes Authentication"
msgstr "Kubernetes������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:238
#, fuzzy
msgid ""
"Vault provides an integration with Kubernetes to allow containers to "
"authenticate with Vault using their Kubernetes JWT token located in `/var/"
"run/secrets/kubernetes.io/serviceaccount`."
msgstr ""
"Vault ��� Kubernetes ������������������������������������������ `/var/run/"
"secrets/kubernetes.io/serviceaccount` ��������� Kubernetes JWT "
"��������������������������� Vault ���������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:241
#, fuzzy
msgid ""
"The setup is more involved than with the other auth methods because we need "
"to allow Vault to talk to the master API to be able to validate the JWT "
"token that the application will authenticate with."
msgstr ""
"��������������������������������������� JWT "
"��������������������������������������� Vault ��������������� API "
"���������������������������������������������������������������������������������������������������������������������"

#. type: Title ===
#: upstream/_guides/vault-auth.adoc:242
#, no-wrap, fuzzy
msgid "auth-delegator"
msgstr "������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:246
#, fuzzy
msgid ""
"The first step involves creating a `vault-auth-sa` service account with "
"`auth-delegator` role that Vault will use to communicate with the master API."
""
msgstr ""
"������������������������������Vault ��������������� API "
"��������������������������� `auth-delegator` ������������������ `vault-auth-"
"sa` ������������ ������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:248
#, fuzzy
msgid "First create file `vault-auth-k8s.yml`:"
msgstr "��������������������� `vault-auth-k8s.yml` ���������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:255
#, no-wrap
msgid "apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"name: vault-auth-sa\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:268
msgid ""
"kind: ClusterRoleBinding apiVersion: rbac.authorization.k8s.io/v1 metadata: "
"name: vault-auth-delegator subjects: - kind: User name: vault-auth-sa "
"namespace: default roleRef: kind: ClusterRole name: system:auth-delegator "
"apiGroup: rbac.authorization.k8s.io"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:271
#, fuzzy
msgid "And apply it: `kubectl apply -f vault-auth-k8s.yml`."
msgstr ""
"��������������������������������������� `kubectl apply -f vault-auth-k8s."
"yml`."

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:274
#, fuzzy
msgid ""
"Once the objects are created, we need to capture the JWT token of this "
"service account, and grab the public certificate of the cluster:"
msgstr ""
"���������������������������������������������������������������������������JWT������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:280
#, no-wrap
msgid ""
"secret_name=$(kubectl get sa vault-auth-sa -o json | jq -r '.secrets[0]."
"name')\n"
"token=$(kubectl get secret $secret_name -o json | jq -r '.data.token' | "
"base64 --decode)\n"
"echo token=$token\n"
"kubectl get secret $secret_name -o json | jq -r '.data.\"ca.crt\"' | base64 -"
"D > /tmp/ca.crt\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:286
#, fuzzy
msgid ""
"The next step requires to exec interactively with the root token into the "
"Vault container to configure the Kubernetes auth method:"
msgstr ""
"���������������������������Kubernetes������������������������������������������������������������������Vault������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:290
#, no-wrap
msgid "docker exec -it dev-vault sh\n"
"export VAULT_TOKEN={root-token}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:295
#, fuzzy
msgid ""
"Once inside the pod, set the token variable to the value that was just "
"printed in the console before, and recreate `ca.crt` with the same content "
"as `/tmp/ca.crt` outside the container. Finally use `kubectl config view` to "
"assess the url of your Kubernetes cluster:"
msgstr ""
"��������������������������������������������������������������������������������������������������������������������������������� "
"`/tmp/ca.crt` ������������������ `ca.crt` ��������������������������������� "
"`kubectl config view` ������������ Kubernetes ��������������� url "
"���������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:300
#, no-wrap
msgid ""
"token=...       => set the value printed in the console just before\n"
"vi ca.crt       => copy/paste /tmp/ca.crt from outside the container\n"
"kubernetes_host => url from the kubectl config view (e.g. https://kubernetes."
"docker.internal:6443)\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:303
#, fuzzy
msgid "Now we have all the information we need to configure Vault:"
msgstr "������������Vault���������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:306
#, no-wrap
msgid "vault auth enable kubernetes\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:312
#, no-wrap
msgid ""
"# configure master API access from Vault\n"
"vault write auth/kubernetes/config \\\n"
"    token_reviewer_jwt=$token \\\n"
"    kubernetes_host=$kubernetes_host \\\n"
"    kubernetes_ca_cert=@ca.crt\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:319
#, no-wrap
msgid ""
"# create vault-quickstart-role role\n"
"vault write auth/kubernetes/role/vault-quickstart-role \\\n"
"    bound_service_account_names=vault-quickstart-sa \\\n"
"    bound_service_account_namespaces=default \\\n"
"    policies=vault-quickstart-policy \\\n"
"    ttl=1h\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/vault-auth.adoc:321
#, no-wrap, fuzzy
msgid "Deploy the application"
msgstr "���������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:326
#, fuzzy
msgid ""
"Add the following properties to the application (and remove any other "
"authentication Vault property, plus replace `<host>` by the ip or name of "
"the local host that is running the Vault and PostgreSQL containers, such "
"that they will be accessible from the pod):"
msgstr ""
"������������������������������������������������������������������������������������ "
"Vault ������������������������������ `&amp;lt;host&amp;gt;` ��� Vault "
"��������������� PostgreSQL "
"��������������������������������������������������������� ip "
"������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:334
#, no-wrap
msgid ""
"quarkus.vault.url=http://<host>:8200\n"
"quarkus.datasource.db-kind=postgresql\n"
"quarkus.datasource.username=<your username>\n"
"quarkus.datasource.password=<your password>\n"
"quarkus.datasource.jdbc.url = jdbc:postgresql://<host>:5432/mydatabase\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:336
#, no-wrap
msgid "quarkus.vault.authentication.kubernetes.role=vault-quickstart-role\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:338
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.vault\".level=DEBUG\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:341
#, fuzzy
msgid "Now build the application:"
msgstr "���������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:345
#, no-wrap
msgid ""
"./mvnw package -DskipTests\n"
"docker build -f src/main/docker/Dockerfile.jvm -t quarkus/vault-quickstart-"
"jvm .\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:348
#, fuzzy
msgid "Create a `vault-quickstart-k8s.yml` file with:"
msgstr "��� `vault-quickstart-k8s.yml` ���������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:355
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: ServiceAccount\n"
"metadata:\n"
"  name: vault-quickstart-sa\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:381
#, no-wrap
msgid ""
"apiVersion: apps/v1\n"
"kind: Deployment\n"
"metadata:\n"
"  labels:\n"
"    app: vaultapp\n"
"  name: vaultapp\n"
"spec:\n"
"  replicas: 1\n"
"  selector:\n"
"    matchLabels:\n"
"      app: vaultapp\n"
"  template:\n"
"    metadata:\n"
"      labels:\n"
"        app: vaultapp\n"
"    spec:\n"
"      serviceAccountName: vault-quickstart-sa\n"
"      containers:\n"
"      - image: quarkus/vault-quickstart-jvm\n"
"        imagePullPolicy: Never\n"
"        name: vaultapp\n"
"        ports:\n"
"        - containerPort: 8080\n"
"          name: vaultport\n"
"          protocol: TCP\n"
"---\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:396
#, no-wrap
msgid ""
"apiVersion: v1\n"
"kind: Service\n"
"metadata:\n"
"  name: vaultapp\n"
"  labels:\n"
"    app: vaultapp\n"
"spec:\n"
"  type: NodePort\n"
"  ports:\n"
"    - name: vault\n"
"      port: 8080\n"
"      nodePort: 30400\n"
"  selector:\n"
"    app: vaultapp\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:399
#, fuzzy
msgid "And apply it: `kubectl apply -f vault-quickstart-k8s.yml`."
msgstr ""
"��������������������������������������� `kubectl apply -f vault-quickstart-"
"k8s.yml`."

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:401
#, fuzzy
msgid ""
"This will deploy the application, and make it available on port `30400` of "
"the Kubernetes host."
msgstr ""
"���������������������������������������������������������Kubernetes "
"��������������������� `30400` ������������������������������������������"

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:403
#, fuzzy
msgid "You can check that the application has started from the logs:"
msgstr ""
"������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:408
#, no-wrap
msgid ""
"kubectl get pods\n"
"pod=$(kubectl get pod -l app=vaultapp -o json | jq -r '.items[0].metadata."
"name')\n"
"kubectl logs $pod\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:428
#, no-wrap
msgid ""
"exec java -Dquarkus.http.host=0.0.0.0 -Djava.util.logging.manager=org.jboss."
"logmanager.LogManager -XX:+UseParallelGC -XX:GCTimeRatio=4 -XX:"
"AdaptiveSizePolicyWeight=90 -XX:MinHeapFreeRatio=20 -XX:MaxHeapFreeRatio=40 -"
"XX:+ExitOnOutOfMemoryError -cp . -jar /deployments/app.jar\n"
"__  ____  __  _____   ___  __ ____  ______\n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/\n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\\n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/\n"
"2020-04-15 18:30:00,983 DEBUG [io.qua.vau.run.con.VaultConfigSource] (main) "
"loaded vault runtime config VaultRuntimeConfig{url=Optional[http://<host>:"
"8200], kubernetesAuthenticationRole=vault-quickstart-role, "
"kubernetesJwtTokenPath='/var/run/secrets/kubernetes.io/serviceaccount/"
"token', userpassUsername='', userpassPassword='***', appRoleRoleId='', "
"appRoleSecretId='***', appRoleSecretIdWrappingToken='***', clientToken=***, "
"clientTokenWrappingToken=***, renewGracePeriod=PT1H, cachePeriod=PT10M, "
"logConfidentialityLevel=MEDIUM, kvSecretEngineVersion=2, "
"kvSecretEngineMountPath='secret', tlsSkipVerify=false, tlsCaCert=Optional."
"empty, connectTimeout=PT5S, readTimeout=PT1S}\n"
"2020-04-15 18:30:00,985 DEBUG [io.qua.vau.run.con.VaultConfigSource] (main) "
"loaded vault buildtime config io.quarkus.vault.runtime.config."
"VaultBuildTimeConfig@4163f1cd\n"
"2020-04-15 18:30:01,310 DEBUG [io.qua.vau.run.cli.OkHttpClientFactory] "
"(main) create SSLSocketFactory with tls /var/run/secrets/kubernetes.io/"
"serviceaccount/ca.crt\n"
"2020-04-15 18:30:01,559 DEBUG [io.qua.vau.run.VaultAuthManager] (main) "
"authenticate with jwt at: /var/run/secrets/kubernetes.io/serviceaccount/"
"token => ***\n"
"2020-04-15 18:30:01,779 DEBUG [io.qua.vau.run.VaultAuthManager] (main) "
"created new login token: {clientToken: ***, renewable: true, leaseDuration: "
"3600s, valid_until: Wed Apr 15 19:30:01 GMT 2020}\n"
"2020-04-15 18:30:01,802 DEBUG [io.qua.vau.run.con.VaultConfigSource] (main) "
"loaded 1 properties from vault\n"
"2020-04-15 18:30:02,722 DEBUG [io.qua.vau.run.VaultAuthManager] "
"(Agroal_7305849841) extended login token: {clientToken: ***, renewable: "
"true, leaseDuration: 3600s, valid_until: Wed Apr 15 19:30:02 GMT 2020}\n"
"2020-04-15 18:30:03,274 INFO  [io.quarkus] (main) vault-quickstart 1.0-"
"SNAPSHOT (powered by Quarkus 999-SNAPSHOT) started in 4.255s. Listening on: "
"http://0.0.0.0:8080\n"
"2020-04-15 18:30:03,276 INFO  [io.quarkus] (main) Profile prod activated.\n"
"2020-04-15 18:30:03,276 INFO  [io.quarkus] (main) Installed features: "
"[agroal, cdi, hibernate-orm, jdbc-postgresql, narayana-jta, resteasy, "
"vault]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:431
#, fuzzy
msgid "Notice in particular the following log line:"
msgstr "������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:434
#, no-wrap
msgid ""
"authenticate with jwt at: /var/run/secrets/kubernetes.io/serviceaccount/"
"token => ***\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:437
#, fuzzy
msgid ""
"Finally curl the `private-key` endpoint to make sure you can retrieve your "
"secret:"
msgstr ""
"��������� `private-key` "
"������������������������������������������������������������������������������������������������"

#. type: delimited block -
#: upstream/_guides/vault-auth.adoc:440
#, no-wrap
msgid "curl http://localhost:30400/hello/private-key\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/vault-auth.adoc:442
#, fuzzy
msgid "You should see `{private-key}`."
msgstr "`{private-key}` ������������������������"
