# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-02-05 12:07+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/funqy.adoc:6
#, fuzzy, no-wrap
msgid "Quarkus - Funqy"
msgstr "Quarkus - Funqy"

#. type: Plain text
#: upstream/_guides/funqy.adoc:14
#, fuzzy
msgid "Quarkus Funqy is part of Quarkus's serverless strategy and aims to provide a portable Java API to write functions deployable to various FaaS environments like AWS Lambda, Azure Functions, Knative, and Knative Events (Cloud Events).  It is also usable as a standalone service."
msgstr "Quarkus Funqyは、Quarkusのサーバーレス戦略の一環で、AWS Lambda、Azure Functions、Knative、Knative Events（クラウドイベント）など、様々なFaaS環境にデプロイ可能な関数を書くためのポータブルなJava APIを提供することを目的としています。スタンドアロンサービスとしても利用可能です。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:20
#, fuzzy
msgid "Because Funqy is an abstraction that spans multiple different cloud/function providers and protocols it has to be a very simple API and thus, might not have all the features you are used to in other remoting abstractions.  A nice side effect though is that Funqy is as optimized and as small as possible.  This means that because Funqy sacrifices a little bit on flexibility, you'll get a framework that has little to no overhead."
msgstr "Funqy は複数の異なるクラウド/機能プロバイダやプロトコルにまたがる抽象化なので、非常にシンプルな API でなければならず、他のリモーティング抽象化に慣れている機能をすべて備えているわけではないかもしれません。しかし、良い副作用として、Funqyは可能な限り最適化されていて小さいということがあります。つまり、Funqy は柔軟性を少し犠牲にしているので、オーバーヘッドがほとんどないフレームワークを手に入れることができます。"

#. type: Title ==
#: upstream/_guides/funqy.adoc:21
#, fuzzy, no-wrap
msgid "Funqy Basics"
msgstr "ファンキーの基本"

#. type: Plain text
#: upstream/_guides/funqy.adoc:25
#, fuzzy
msgid "The Funqy API is simple.  Annotate a method with `@Funq`.  This method may only have one optional input parameter and may or may not return a response."
msgstr "Funqy API はシンプルです。メソッドに `@Funq` をアノテーションします。このメソッドはオプションの入力パラメータを1つだけ持つことができ、レスポンスを返すこともあれば返さないこともあります。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:29 upstream/_guides/funqy.adoc:99
#: upstream/_guides/funqy.adoc:119
#, no-wrap
msgid "import io.quarkus.funqy.Funq;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:36
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    @Funq\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/funqy.adoc:42
#, fuzzy
msgid "Java classes can also be used as input and output and must follow the Java bean convention and have a default constructor.  The Java type that is declared as the parameter or return type is the type that will be expected by the Funqy runtime.  Funqy does type introspection at build time to speed up boot time, so any derived types will not be noticed by the Funqy marshalling layer at runtime."
msgstr "Javaクラスは入力と出力としても使用でき、Javaビーンの規約に従う必要があり、デフォルトのコンストラクタを持たなければなりません。パラメータや戻り値の型として宣言されたJavaの型は、Funqyのランタイムが期待する型です。Funqyは起動時間を短縮するためにビルド時に型のイントロスペクションを行いますので、派生型は実行時にFunqyのマーシャリング層に気づかれません。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:44
#, fuzzy
msgid "Here's an example of using a POJO as input and output types."
msgstr "POJOを入出力タイプとして使用した例をご紹介します。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:50
#, no-wrap
msgid ""
"public class GreetingFunction {\n"
"    public static class Friend {\n"
"        String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:54
#, no-wrap
msgid ""
"        public String getName() { return name; }\n"
"        public void setName(String name) { this.name = name; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:57
#, no-wrap
msgid ""
"    public static class Greeting {\n"
"        String msg;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:60
#, no-wrap
msgid ""
"        public Greeting() {}\n"
"        public Greeting(String msg) { this.msg = msg }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:64
#, no-wrap
msgid ""
"        public String getMessage() { return msg; }\n"
"        public void setMessage(String msg) { this.msg = msg; }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:70
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"       return new Greeting(\"Hello \" + friend.getName());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:72
#, fuzzy, no-wrap
msgid "Async Reactive Types"
msgstr "非同期反応型"

#. type: Plain text
#: upstream/_guides/funqy.adoc:76
#, fuzzy
msgid "Funqy supports the https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` reactive type as a return type.  The only requirement is that the `Uni` must fill out the generic type."
msgstr "Funqyはリターン型として link:https://smallrye.io/smallrye-mutiny[Smallrye Mutiny] `Uni` リアクティブ型をサポートしています。唯一の要件は、 `Uni` がジェネリック型を記入しなければならないことです。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:81
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:83 upstream/_guides/funqy.adoc:101
#: upstream/_guides/funqy.adoc:157
#, no-wrap
msgid "public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:89
#, no-wrap
msgid ""
"    @Funq\n"
"    public Uni<Greeting> reactiveGreeting(String name) {\n"
"       ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:91
#, fuzzy, no-wrap
msgid "Function Names"
msgstr "関数名"

#. type: Plain text
#: upstream/_guides/funqy.adoc:95
#, fuzzy
msgid "The function name defaults to the method name and is case sensitive.  If you want your function referenced by a different name, parameterize the `@Funq` annotation as follows:"
msgstr "関数名の既定値はメソッド名で、大文字と小文字を区別します。関数を別の名前で参照したい場合は、 `@Funq` アノテーションを次のようにパラメータ化します。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:107
#, no-wrap
msgid ""
"    @Funq(\"HelloWorld\")\n"
"    public String greet(String name) {\n"
"       return \"Hello \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:109
#, fuzzy, no-wrap
msgid "Funqy DI"
msgstr "ファンキーDI"

#. type: Plain text
#: upstream/_guides/funqy.adoc:113
#, fuzzy
msgid "Each Funqy Java class is a Quarkus Arc component and supports dependency injection through CDI or Spring DI.  Spring DI requires including the `quarkus-spring-di` dependency in your build."
msgstr "各Funqy JavaクラスはQuarkus Arcコンポーネントであり、CDIまたはSpring DIによる依存性注入をサポートしています。Spring DIでは、ビルドに `quarkus-spring-di` 依存関係を含める必要があります。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:115
#, fuzzy
msgid "The default object lifecycle for a Funqy class is `@Dependent`."
msgstr "Funqy クラスのデフォルトのオブジェクトライフサイクルは `@Dependent` ."

#. type: delimited block -
#: upstream/_guides/funqy.adoc:122
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:125
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"public class GreetingFunction {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:128
#, no-wrap
msgid ""
"    @Inject\n"
"    GreetingService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:136
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend) {\n"
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(service.greet(friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:138
#, fuzzy, no-wrap
msgid "Context injection"
msgstr "コンテキスト注入"

#. type: Plain text
#: upstream/_guides/funqy.adoc:144
#, fuzzy
msgid "The Funqy API will usually not allow you to inject or use abstractions that are specific to a protocol (i.e. HTTP) or function API (i.e. AWS Lambda).  There are exceptions to the rule though and you may be able to inject contextual information that is specific to the environment you are deploying in."
msgstr "Funqy APIは通常、プロトコル(例：HTTP)や関数API(例：AWS Lambda)に固有の抽象化を注入したり使用したりすることはできません。しかし、ルールには例外があり、デプロイしている環境に固有のコンテキスト情報を注入できるかもしれません。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:146
#, fuzzy
msgid "We do not recommend injecting contextual information specific to a runtime.  Keep your functions portable."
msgstr "ランタイムに固有のコンテキスト情報を注入することはお勧めしません。関数を移植性の高いものにしてください。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:150
#, fuzzy
msgid "Contextual information is injected via the `@Context` annotation which can be used on a function parameter or a class field.  A good example is the `CloudEvent` interface that comes with our Funqy Knative Cloud Events integration:"
msgstr "コンテクスト情報は `@Context` アノテーションを介して注入され、関数パラメータやクラスフィールドで使用することができます。良い例としては、Funqy Knative Cloud Events 統合に付属する `CloudEvent` インターフェイスがあります。"

#. type: delimited block -
#: upstream/_guides/funqy.adoc:155
#, no-wrap
msgid ""
"import io.quarkus.funqy.Funq;\n"
"import io.quarkus.funqy.Context;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:161
#, no-wrap
msgid ""
"    @Funq\n"
"    public Greeting greet(Friend friend, @Context CloudEvent eventInfo) {\n"
"        System.out.println(\"Received greeting request from: \" eventInfo.getSource());\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/funqy.adoc:167
#, no-wrap
msgid ""
"        Greeting greeting = new Greeting();\n"
"        greeting.setMessage(\"Hello \" + friend.getName()));\n"
"        return greeting;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/funqy.adoc:169
#, fuzzy, no-wrap
msgid "Should I Use Funqy?"
msgstr "Funqyを使うべきか？"

#. type: Plain text
#: upstream/_guides/funqy.adoc:182
#, fuzzy, no-wrap
msgid ""
"REST over HTTP has become a very common way to write services over the past decade.  While Funqy\n"
"has an HTTP binding it is not a replacement for REST.  Because Funqy has to work across a variety\n"
"of protocols and function cloud platforms, it is very minimalistic and constrained.  For example, if you\n"
"use Funqy you lose the ability to link (think URIs) to the data your functions spit out.  You also\n"
"lose the ability to leverage cool HTTP features like `cache-control` and conditional GETs.  Many\n"
"developers will be ok with that as many won't be using these REST/HTTP features or styles. You'll\n"
"have to make the decision on what camp you are in.  Quarkus does support REST integration (through JAX-RS,\n"
" Spring MVC, Vert.x Web, and Servlet) with\n"
"various cloud/function providers, but there are some disadvantages of using that approach as well.  For example,\n"
"if you want to do link:amazon-lambda-http[HTTP with AWS Lambda], this requires you to use the AWS API Gateway which may\n"
"slow down deployment and cold start time or even cost you more.\n"
msgstr "HTTP 上の REST は過去 10 年間でサービスを書くための非常に一般的な方法になりました。FunqyはHTTPバインディングを持っていますが、RESTの代替ではありません。Funqyは様々なプロトコルと機能を持つクラウドプラットフォームで動作しなければならないため、非常にミニマムで制約があります。例えば、Funqyを使うと、関数が吐き出すデータにリンクする機能（URIを考える）を失うことになります。また、 `cache-control` や条件付き GET のようなクールな HTTP 機能を利用する機能も失います。多くの開発者はこれらの REST/HTTP 機能やスタイルを使用しないので、多くの開発者はこれで大丈夫でしょう。自分がどちらの立場にいるのかを判断する必要があります。Quarkusは、さまざまなクラウドプロバイダーや機能プロバイダーとのREST統合（JAX-RS、Spring MVC、Vert.x Web、Servletを介して）をサポートしていますが、このアプローチを使用することにもいくつかのデメリットがあります。例えば、 link:amazon-lambda-http[AWS LambdaでHTTPを] 行いたい場合、AWS API Gatewayを使用する必要があり、デプロイやコールドスタート時間が遅くなったり、コストが高くなったりする可能性があります。"

#. type: Plain text
#: upstream/_guides/funqy.adoc:188
#, fuzzy
msgid "The purpose of Funqy is to allow you to write cross-provider functions so that you can move off of your current function provider if, for instance, they start charging you a lot more for their service.  Another reason you might not want to use Funqy is if you need access specific APIs of the target function environment.  For example, developers often want access to the AWS Context on Lambda.  In this case, we tell them they may be better off using the link:amazon-lambda[Quarkus Amazon Lambda] integration instead."
msgstr "Funqyの目的は、クロスプロバイダの関数を書けるようにすることで、例えば、現在の関数プロバイダがサービスの料金を高くし始めた場合に、現在の関数プロバイダから離れることができるようにすることです。Funqyを使わないもう一つの理由は、ターゲット関数環境の特定のAPIにアクセスする必要がある場合です。例えば、開発者はLambda上のAWSコンテキストにアクセスしたいことがよくあります。この場合、代わりに link:amazon-lambda[Quarkus Amazon Lambda] インテグレーションを使った方が良いかもしれないと伝えています。"
