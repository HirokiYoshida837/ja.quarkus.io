# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2021-01-20 11:07+0000\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/resteasy-reactive.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Writing REST Services with RESTEasy Reactive"
msgstr "Quarkus - RESTEasy Reactiveを使用したRESTサービスの記述"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:18
#, fuzzy
msgid ""
"This guide explains how to write REST Services with RESTEasy Reactive in "
"Quarkus."
msgstr "このガイドでは、QuarkusでRESTEasy Reactiveを使ってRESTサービスを書く方法を説明します。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:19
#, no-wrap, fuzzy
msgid "What is RESTEasy Reactive?"
msgstr "RESTEasy Reactiveとは？"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:25
#, fuzzy
msgid ""
"RESTEasy Reactive is a new link:{jaxrsspec}[JAX-RS] implementation written "
"from the ground up to work on our common https://vertx.io/[Vert.x] layer and "
"is thus fully reactive, while also being very tightly integrated with "
"Quarkus and consequently moving a lot of work to build time."
msgstr ""
"RESTEasy Reactiveは、共通の link:https://vertx.io/[Vert.x]レイヤーで動作するように一から書かれた新しい "
"link:{jaxrsspec}[JAX-"
"RSの]実装で、完全にリアクティブであると同時に、Quarkusと緊密に統合されており、結果的に多くの作業をビルド時間に移すことができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:29
#, fuzzy
msgid ""
"You should be able to use it in place of any JAX-RS implementation, but on "
"top of that it has great performance for both blocking and non-blocking "
"endpoints, and a lot of new features on top of what JAX-RS provides."
msgstr ""
"JAX-"
"RSの実装の代わりに使用できるようにすべきですが、その上で、ブロッキングとノンブロッキングのエンドポイントの両方で優れたパフォーマンスを発揮し、JAX-"
"RSが提供するものの上に多くの新機能を搭載しています。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:30
#, no-wrap, fuzzy
msgid "Writing endpoints"
msgstr "エンドポイントの記述"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:32
#, no-wrap, fuzzy
msgid "Getting started"
msgstr "始めるには"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:35
#, fuzzy
msgid "Add the following import to your `pom.xml` file:"
msgstr "`pom.xml` ファイルに以下のインポートを追加します。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:42
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-reactive</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:45
#, fuzzy
msgid ""
"You can now write your first endpoint in the `org.acme.rest.Endpoint` class:"
msgstr "これで、 `org.acme.rest.Endpoint` クラスの最初のエンドポイントが書けるようになりました。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:49 upstream/_guides/resteasy-reactive.adoc:89 upstream/_guides/resteasy-reactive.adoc:144 upstream/_guides/resteasy-reactive.adoc:252 upstream/_guides/resteasy-reactive.adoc:303 upstream/_guides/resteasy-reactive.adoc:399 upstream/_guides/resteasy-reactive.adoc:443 upstream/_guides/resteasy-reactive.adoc:479 upstream/_guides/resteasy-reactive.adoc:514 upstream/_guides/resteasy-reactive.adoc:601 upstream/_guides/resteasy-reactive.adoc:626 upstream/_guides/resteasy-reactive.adoc:654 upstream/_guides/resteasy-reactive.adoc:734 upstream/_guides/resteasy-reactive.adoc:760 upstream/_guides/resteasy-reactive.adoc:789 upstream/_guides/resteasy-reactive.adoc:821 upstream/_guides/resteasy-reactive.adoc:885 upstream/_guides/resteasy-reactive.adoc:1045 upstream/_guides/resteasy-reactive.adoc:1079 upstream/_guides/resteasy-reactive.adoc:1142 upstream/_guides/resteasy-reactive.adoc:1196 upstream/_guides/resteasy-reactive.adoc:1221 upstream/_guides/resteasy-reactive.adoc:1273 upstream/_guides/resteasy-reactive.adoc:1371 upstream/_guides/resteasy-reactive.adoc:1491
#, no-wrap
msgid "package org.acme.rest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:52 upstream/_guides/resteasy-reactive.adoc:92 upstream/_guides/resteasy-reactive.adoc:306 upstream/_guides/resteasy-reactive.adoc:446 upstream/_guides/resteasy-reactive.adoc:737 upstream/_guides/resteasy-reactive.adoc:765
#, no-wrap
msgid "import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:55 upstream/_guides/resteasy-reactive.adoc:158 upstream/_guides/resteasy-reactive.adoc:412
#, no-wrap
msgid "@Path(\"\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:61
#, no-wrap
msgid ""
"    @GET\n"
"    public String hello(){\n"
"        return \"Hello, World!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:63
#, no-wrap, fuzzy
msgid "Terminology"
msgstr "専門用語"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:65
#, no-wrap, fuzzy
msgid "REST"
msgstr "ＲＥＳＴ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:66
#, fuzzy
msgid ""
"https://en.wikipedia.org/wiki/"
"Representational_state_transfer[REpresentational State Transfer]"
msgstr ""
"link:https://en.wikipedia.org/wiki/"
"Representational_state_transfer[REpresentational State Transfer]"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:66
#, no-wrap, fuzzy
msgid "Endpoint"
msgstr "終点"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:67
#, fuzzy
msgid "Java method which is called to serve a REST call"
msgstr "RESTコールを提供するために呼び出されるJavaメソッド"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:67
#, no-wrap, fuzzy
msgid "URL / URI (Uniform Resource Locator / Identifier)"
msgstr "URL / URI (Uniform Resource Locator / Identifier)"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:68
#, fuzzy
msgid ""
"Used to identify the location of REST resources (https://tools.ietf.org/html/"
"rfc7230#section-2.7[specification])"
msgstr ""
"RESTリソースの位置を特定するために使用される link:https://tools.ietf.org/html/rfc7230#section-2."
"7[（仕様]"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:68
#, no-wrap, fuzzy
msgid "Resource"
msgstr "リソース"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:69
#, fuzzy
msgid ""
"Represents your domain object. This is what your API serves and modifies. "
"Also called an `entity` in JAX-RS."
msgstr "ドメインオブジェクトを表します。これは、APIがサービスを提供し、変更するものです。JAX-RSでは `entity` とも呼ばれます。"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:69
#, no-wrap, fuzzy
msgid "Representation"
msgstr "表現"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:70
#, fuzzy
msgid ""
"How your resource is represented on the wire, can vary depending on content "
"types"
msgstr "リソースの表示方法は、コンテンツの種類によって異なります。"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:70
#, no-wrap, fuzzy
msgid "Content type"
msgstr "コンテンツの種類"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:71
#, fuzzy
msgid ""
"Designates a particular representation (also called a media type), for "
"example `text/plain` or `application/json`"
msgstr "`text/plain` 特定の表現（メディアタイプとも呼ばれる）を指定します。 `application/json`"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:71
#, no-wrap, fuzzy
msgid "HTTP"
msgstr "ＨＴＴＰ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:72
#, fuzzy
msgid ""
"Underlying wire protocol for routing REST calls (see https://tools.ietf.org/"
"html/rfc7230[HTTP specifications])"
msgstr ""
"REST コールをルーティングするための基盤となるワイヤプロトコル ( link:https://tools.ietf.org/html/"
"rfc7230[HTTP 仕様を]参照)"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:72
#, no-wrap, fuzzy
msgid "HTTP request"
msgstr "ＨＴＴＰ要求"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:73
#, fuzzy
msgid ""
"the request part of the HTTP call, consisting of an HTTP method, a target "
"URI, headers and an optional message body"
msgstr "HTTP メソッド、ターゲット URI、ヘッダ、オプションのメッセージボディからなる HTTP 呼び出しのリクエスト部分。"

#. type: Labeled list
#: upstream/_guides/resteasy-reactive.adoc:73
#, no-wrap, fuzzy
msgid "HTTP response"
msgstr "ＨＴＴＰ応答"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:74
#, fuzzy
msgid ""
"the response part of the HTTP call, consisting of an HTTP response status, "
"headers and an optional message body"
msgstr "HTTP レスポンスステータス、ヘッダ、オプションのメッセージボディで構成されます。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:75
#, no-wrap, fuzzy
msgid "Declaring endpoints: URI mapping"
msgstr "エンドポイントの宣言URI のマッピング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:79
#, fuzzy
msgid ""
"Any class annotated with a link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] "
"annotation can have its methods exposed as REST endpoints, provided they "
"have an HTTP method annotation (see below)."
msgstr ""
"でアノテーションされたクラスは  link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`]アノテーションは、HTTP "
"メソッドアノテーションを持っていれば、そのメソッドを REST エンドポイントとして公開することができます (下記参照)。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:82
#, fuzzy
msgid ""
"That link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`] annotation defines the "
"URI prefix under which those methods will be exposed. It can be empty, or "
"contain a prefix such as `rest` or `rest/V1`."
msgstr ""
"それは  link:{jaxrsapi}/javax/ws/rs/Path.html[`@Path`]アノテーションは、それらのメソッドが公開される "
"URI プレフィックスを定義します。空でもよいし、 `rest` や `rest/V1`."

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:85
#, fuzzy
msgid ""
"Each exposed endpoint method can in turn have another link:{jaxrsapi}/javax/"
"ws/rs/Path.html[`@Path`] annotation which adds to its containing class "
"annotation. For example, this defines a `rest/hello` endpoint:"
msgstr ""
"公開された各エンドポイントメソッドは、それぞれ別の  link:{jaxrsapi}/javax/ws/rs/Path."
"html[`@Path`]アノテーションを使用して、それを含むクラスアノテーションに追加することができます。例えば、これは `rest/hello` "
"エンドポイントを定義しています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:95
#, no-wrap
msgid "@Path(\"rest\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:102
#, no-wrap
msgid ""
"    @Path(\"hello\")\n"
"    @GET\n"
"    public String hello(){\n"
"        return \"Hello, World!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:105
#, fuzzy
msgid ""
"See <<uri-parameters,URI parameters>> for more information about URI mapping."
""
msgstr "URIマッピングの詳細については、URI link:#uri-parameters[パラメータを]参照してください。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:106
#, no-wrap, fuzzy
msgid "Declaring endpoints: HTTP methods"
msgstr "エンドポイントの宣言HTTP メソッド"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:110
#, fuzzy
msgid ""
"Each endpoint method must be annotated with one of the following "
"annotations, which defines which HTTP method will be mapped to the method:"
msgstr ""
"各エンドポイントメソッドには、以下のいずれかのアノテーションを付ける必要があり、どの HTTP メソッドがメソッドにマッピングされるかを定義します。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:111
#, no-wrap, fuzzy
msgid "Table HTTP method annotations"
msgstr "表 HTTP メソッドのアノテーション"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:136
#, no-wrap, fuzzy
msgid ""
"|Annotation|Usage \n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/GET.html[`@GET`]\n"
"|Obtain a resource representation, should not modify state, link:"
"{httpspec}#section-4.2.2[idempotent] (link:{httpspec}#section-4.3.1[HTTP "
"docs])\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/HEAD.html[`@HEAD`]\n"
"|Obtain metadata about a resource, similar to `GET` with no body (link:"
"{httpspec}#section-4.3.2[HTTP docs])\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/POST.html[`@POST`]\n"
"|Create a resource and obtain a link to it (link:{httpspec}#section-4.3."
"3[HTTP docs])\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/PUT.html[`@PUT`]\n"
"|Replace a resource or create one, should be link:{httpspec}#section-4.2."
"2[idempotent] (link:{httpspec}#section-4.3.4[HTTP docs])\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/DELETE.html[`@DELETE`]\n"
"|Delete an existing resource, link:{httpspec}#section-4.2.2[idempotent]  "
"(link:{httpspec}#section-4.3.5[HTTP docs])\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/OPTIONS.html[`@OPTIONS`]\n"
"|Obtain information about a resource, link:{httpspec}#section-4.2."
"2[idempotent] (link:{httpspec}#section-4.3.7[HTTP docs])\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/PATCH.html[`@PATCH`]\n"
"|Update a resource, or create one, not link:{httpspec}#section-4.2."
"2[idempotent] (https://tools.ietf.org/html/rfc5789#section-2[HTTP docs])\n"
"\n"
msgstr "|アノテーション|用途"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:140
#, fuzzy
msgid ""
"You can also declare other HTTP methods by declaring them as an annotation "
"with the link:{jaxrsapi}/javax/ws/rs/HttpMethod.html[`@HttpMethod`] "
"annotation:"
msgstr ""
"他の HTTP メソッドを宣言するには、それらを  link:{jaxrsapi}/javax/ws/rs/HttpMethod."
"html[`@HttpMethod`]アノテーションを使用しています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:147
#, no-wrap
msgid ""
"import java.lang.annotation.Retention;\n"
"import java.lang.annotation.RetentionPolicy;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:150
#, no-wrap
msgid "import javax.ws.rs.HttpMethod;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:155
#, no-wrap
msgid ""
"@Retention(RetentionPolicy.RUNTIME)\n"
"@HttpMethod(\"FROMAGE\")\n"
"@interface FROMAGE {\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:164
#, no-wrap
msgid ""
"    @FROMAGE\n"
"    public String hello(){\n"
"        return \"Hello, Cheese World!\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:166
#, no-wrap, fuzzy
msgid "Declaring endpoints: representation / content types"
msgstr "エンドポイントの宣言：表現/コンテンツタイプ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:171
#, fuzzy
msgid ""
"Each endpoint method may consume or produce specific resource "
"representations, which are indicated by the HTTP link:{httpspec}#section-3.1."
"1.5[`Content-Type`] header, which in turn contains link:{httpspec}#section-3."
"1.1.1[MIME (Media Type)] values, such as the following:"
msgstr ""
"各エンドポイントメソッドは特定のリソース表現を消費したり生成したりすることができます。  link:{httpspec}#section-3.1.1."
"5[`Content-Type`]ヘッダには、次のような link:{httpspec}#section-3.1.1.1[MIME (Media "
"Type)]値が含まれています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:173
#, fuzzy
msgid ""
"`text/plain` which is the default for any endpoint returning a `String`."
msgstr "`text/plain` は、 `String` を返すエンドポイントのデフォルトです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:174
#, fuzzy
msgid "`text/html` for HTML (such as with link:qute[Qute templating])"
msgstr "`text/html` ( link:qute[Qute] のテンプレートを使用した場合など) HTML の場合"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:175
#, fuzzy
msgid "`application/json` for a <<json,JSON REST endpoint>>"
msgstr "`application/json`  link:#json[JSON REST エンドポイント]については"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:176
#, fuzzy
msgid "`text/*` which is a sub-type wildcard for any text media type"
msgstr "`text/*` これは、あらゆるテキストメディアタイプのサブタイプワイルドカードです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:177
#, fuzzy
msgid "`\\*/*` which is a wildcard for any media type"
msgstr "`*/*` は、あらゆるメディアタイプのためのワイルドカードです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:182
#, fuzzy
msgid ""
"You may annotate your endpoint class with the link:{jaxrsapi}/javax/ws/rs/"
"Produces.html[`@Produces`] or link:{jaxrsapi}/javax/ws/rs/Consumes."
"html[`@Consumes`] annotations, which allow you to specify one or more media "
"types that your endpoint may accept as HTTP request body or produce as HTTP "
"response body. Those class annotations apply to each method."
msgstr ""
"エンドポイントクラスには  link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces`]或いは  "
"link:{jaxrsapi}/javax/ws/rs/Consumes."
"html[`@Consumes`]このアノテーションを使用すると、エンドポイントが HTTP リクエスト・ボディとして受け入れたり、HTTP "
"レスポンス・ボディとして生成したりする 1 つ以上のメディア・タイプを指定できます。これらのクラスアノテーションは各メソッドに適用されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:186
#, fuzzy
msgid ""
"Any method may also be annotated with the link:{jaxrsapi}/javax/ws/rs/"
"Produces.html[`@Produces`] or link:{jaxrsapi}/javax/ws/rs/Consumes."
"html[`@Consumes`] annotations, in which case they override any eventual "
"class annotation."
msgstr ""
"任意のメソッドには  link:{jaxrsapi}/javax/ws/rs/Produces.html[`@Produces`]或いは  link:"
"{jaxrsapi}/javax/ws/rs/Consumes."
"html[`@Consumes`]アノテーションの場合は、最終的なクラスのアノテーションを上書きします。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:189
#, fuzzy
msgid ""
"The link:{jaxrsapi}/javax/ws/rs/core/MediaType.html[`MediaType`] class has "
"many constants you can use to point to specific pre-defined media types."
msgstr ""
"仝  link:{jaxrsapi}/javax/ws/rs/core/MediaType."
"html[`MediaType`]クラスには、あらかじめ定義された特定のメディアタイプを指すために使用できる多くの定数があります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:191
#, fuzzy
msgid "See <<negotiation>> for more information."
msgstr "詳しくは link:#negotiation[[ネゴシエーション]]をご覧ください。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:192
#, no-wrap, fuzzy
msgid "Accessing request parameters"
msgstr "リクエストパラメータへのアクセス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:198
#, fuzzy
msgid ""
"don't forget to configure your compiler to generate parameter name "
"information with `-parameters` (javac)  or `<parameters>` or `<maven."
"compiler.parameters>` (https://maven.apache.org/plugins/maven-compiler-"
"plugin/compile-mojo.html#parameters[Maven])."
msgstr ""
"`-parameters` (javac) または `&amp;lt;parameters&amp;gt;` または `&amp;lt;maven."
"compiler.parameters&amp;gt;`  link:https://maven.apache.org/plugins/maven-"
"compiler-plugin/compile-mojo.html#parameters[(Maven]) "
"でパラメータ名の情報を生成するようにコンパイラを設定することを忘れないでください。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:200
#, fuzzy
msgid ""
"The following HTTP request elements may be obtained by your endpoint method:"
msgstr "以下の HTTP リクエスト要素は、エンドポイントメソッドで取得することができます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:201
#, no-wrap, fuzzy
msgid "Table HTTP request parameter annotations"
msgstr "表 HTTP リクエストパラメータのアノテーション"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:230
#, no-wrap, fuzzy
msgid ""
"|HTTP element|Annotation|Usage \n"
"\n"
"|[[path-parameter]]Path parameter\n"
"|`@RestPath` (or nothing)\n"
"|URI template parameter (simplified version of the https://tools.ietf.org/"
"html/rfc6570[URI Template specification]), \n"
"see <<uri-parameters,URI parameters>> for more information.\n"
"\n"
"|Query parameter\n"
"|`@RestQuery`\n"
"|The value of an https://tools.ietf.org/html/rfc3986#section-3.4[URI query "
"parameter]\n"
"\n"
"|Header\n"
"|`@RestHeader`\n"
"|The value of an https://tools.ietf.org/html/rfc7230#section-3.2[HTTP "
"header]\n"
"\n"
"|Cookie\n"
"|`@RestCookie`\n"
"|The value of an https://tools.ietf.org/html/rfc6265#section-4.2[HTTP "
"cookie]\n"
"\n"
"|Form parameter\n"
"|`@RestForm`\n"
"|The value of an https://developer.mozilla.org/en-US/docs/Web/HTTP/Methods/"
"POST[HTTP URL-encoded FORM]\n"
"\n"
"|Matrix parameter\n"
"|`@RestMatrix`\n"
"|The value of an https://tools.ietf.org/html/rfc3986#section-3.3[URI path "
"segment parameter]\n"
"\n"
msgstr "|HTTP要素｜注釈｜用途"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:234
#, fuzzy
msgid ""
"For each of those annotations, you may specify the name of the element they "
"refer to, otherwise they will use the name of the annotated method parameter."
""
msgstr ""
"これらのアノテーションのそれぞれについて、参照する要素の名前を指定することができますが、そうでない場合は、アノテーションされたメソッド・パラメータの名前が使用されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:236
#, fuzzy
msgid "If a client made the following HTTP call:"
msgstr "クライアントが以下のHTTPコールを行った場合。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:243
#, no-wrap
msgid ""
"POST /cheeses;variant=goat/tomme?age=matured HTTP/1.1\n"
"Content-Type: application/x-www-form-urlencoded\n"
"Cookie: level=hardcore\n"
"X-Cheese-Secret-Handshake: fist-bump\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:245
#, no-wrap
msgid "smell=strong\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:248
#, fuzzy
msgid ""
"Then you could obtain all the various parameters with this endpoint method:"
msgstr "そうすれば、このエンドポイントメソッドで様々なパラメータをすべて取得することができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:255
#, no-wrap
msgid "import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:262
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.RestCookie;\n"
"import org.jboss.resteasy.reactive.RestForm;\n"
"import org.jboss.resteasy.reactive.RestHeader;\n"
"import org.jboss.resteasy.reactive.RestMatrix;\n"
"import org.jboss.resteasy.reactive.RestPath;\n"
"import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:265
#, no-wrap
msgid "@Path(\"/cheeses/{type}\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:277
#, no-wrap
msgid ""
"    @POST\n"
"    public String allParams(@RestPath String type,\n"
"                            @RestMatrix String variant,\n"
"                            @RestQuery String age,\n"
"                            @RestCookie String level,\n"
"                            @RestHeader(\"X-Cheese-Secret-Handshake\")\n"
"                            String secretHandshake,\n"
"                            @RestForm String smell){\n"
"        return type + \"/\" + variant + \"/\" + age + \"/\" + level + \"/\" "
"+ secretHandshake + \"/\" + smell;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:281
#, fuzzy
msgid ""
"the `@RestPath` annotation is optional: any parameter whose name matches an "
"existing URI template variable will be automatically assumed to have "
"`@RestPath`."
msgstr ""
"`@RestPath` アノテーションはオプションです: 名前が既存のURIテンプレート変数にマッチするパラメータは自動的に `@RestPath`."

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:289
#, fuzzy
msgid ""
"You can also use any of the JAX-RS annotations link:{jaxrsapi}/javax/ws/rs/"
"PathParam.html[`@PathParam`], link:{jaxrsapi}/javax/ws/rs/QueryParam."
"html[`@QueryParam`], link:{jaxrsapi}/javax/ws/rs/HeaderParam."
"html[`@HeaderParam`], link:{jaxrsapi}/javax/ws/rs/CookieParam."
"html[`@CookieParam`], link:{jaxrsapi}/javax/ws/rs/FormParam."
"html[`@FormParam`] or link:{jaxrsapi}/javax/ws/rs/MatrixParam."
"html[`@MatrixParam`] for this, but they require you to specify the parameter "
"name."
msgstr ""
"JAX-RS アノテーションのいずれかを使用することもできます。  link:{jaxrsapi}/javax/ws/rs/PathParam."
"html[`@PathParam`],  link:{jaxrsapi}/javax/ws/rs/QueryParam."
"html[`@QueryParam`],  link:{jaxrsapi}/javax/ws/rs/HeaderParam."
"html[`@HeaderParam`],  link:{jaxrsapi}/javax/ws/rs/CookieParam."
"html[`@CookieParam`],  link:{jaxrsapi}/javax/ws/rs/FormParam."
"html[`@FormParam`]或いは  link:{jaxrsapi}/javax/ws/rs/MatrixParam."
"html[`@MatrixParam`]を使用することができますが、パラメータ名を指定する必要があります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:291
#, fuzzy
msgid "See <<parameter-mapping>> for more advanced use-cases."
msgstr "より高度な使用例については、 link:#parameter-mapping[[パラメータマッピング]を]参照してください。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:292
#, no-wrap, fuzzy
msgid "Declaring URI parameters"
msgstr "URIパラメータの宣言"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:299
#, fuzzy
msgid ""
"You can declare URI parameters and use regular expressions in your path, so "
"for instance the following endpoint will serve requests for `/hello/stef/23` "
"and `/hello` but not `/hello/stef/0x23`:"
msgstr ""
"URI パラメータを宣言し、パスで正規表現を使用することができます。例えば、以下のエンドポイントは `/hello/stef/23` と `/"
"hello` のリクエストには応答しますが、 `/hello/stef/0x23` は応答しません。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:309 upstream/_guides/resteasy-reactive.adoc:1345
#, no-wrap
msgid "@Path(\"hello\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:315
#, no-wrap
msgid ""
"    @Path(\"{name}/{age:\\\\d+}\")\n"
"    @GET\n"
"    public String personalisedHello(String name, int age){\n"
"        return \"Hello \" + name + \" is your age really \" + age + \"?\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:321
#, no-wrap
msgid ""
"    @GET\n"
"    public String genericHello(){\n"
"        return \"Hello stranger\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:324
#, no-wrap, fuzzy
msgid "Accessing the request body"
msgstr "リクエストボディへのアクセス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:329
#, fuzzy
msgid ""
"Any method parameter with no annotation will receive the method body."
"footnote:[Unless it is a <<path-parameter,URI template parameter>> or a "
"<<context-objects,context object>>.], after it has been mapped from its HTTP "
"representation to the Java type of the parameter."
msgstr ""
"アノテーションのないメソッド・パラメータは、メソッド本体を受け取ります。HTTP 表現からパラメータの Java 型にマップされた後に、<sup "
"class=\"footnote\">[ link:#_footnotedef_1[1, id=_footnoteref_1, role="
"footnote, title=View footnote.]</sup>] を受け取ります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:331
#, fuzzy
msgid "The following parameter types will be supported out of the box:"
msgstr "以下のパラメータタイプがサポートされます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:334
#, no-wrap, fuzzy
msgid "Table Request body parameter type"
msgstr "表 リクエストボディパラメータの種類"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:372
#, no-wrap, fuzzy
msgid ""
"|Type|Usage\n"
"\n"
"|link:{jdkapi}/java/io/File.html[`File`]\n"
"|The entire request body in a temporary file\n"
"\n"
"|`byte[]`\n"
"|The entire request body, not decoded\n"
"\n"
"|`char[]`\n"
"|The entire request body, decoded\n"
"\n"
"|link:{jdkapi}/java/lang/String.html[`String`]\n"
"|The entire request body, decoded\n"
"\n"
"|link:{jdkapi}/java/io/InputStream.html[`InputStream`]\n"
"|The request body in a blocking stream\n"
"\n"
"|link:{jdkapi}/java/io/Reader.html[`Reader`]\n"
"|The request body in a blocking stream\n"
"\n"
"|All Java primitives and their wrapper classes\n"
"|Java primitive types\n"
"\n"
"|link:{jdkapi}/java/math/BigDecimal.html[`BigDecimal`], link:{jdkapi}/java/"
"math/BigInteger.html[`BigInteger`]\n"
"|Large integers and decimals.\n"
"\n"
"|link:{jsonpapi}/javax/json/JsonArray.html[`JsonArray`], link:{jsonpapi}/"
"javax/json/JsonArray.html[`JsonObject`],\n"
"link:{jsonpapi}/javax/json/JsonArray.html[`JsonStructure`], link:{jsonpapi}/"
"javax/json/JsonArray.html[`JsonValue`]\n"
"|JSON value types  \n"
"\n"
"|link:{vertxapi}io/vertx/core/buffer/Buffer.html[`Buffer`]\n"
"|Vert.x Buffer \n"
"\n"
"|any other type\n"
"|Will be <<json,mapped from JSON to that type>>\n"
"\n"
msgstr "|タイプ|用途"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:375
#, fuzzy
msgid "You can add support for more <<readers-writers,body parameter types>>."
msgstr "より多くの link:#readers-writers[ボディパラメータタイプの]サポートを追加することができます。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:376
#, no-wrap, fuzzy
msgid "Returning a response body"
msgstr "レスポンスボディを返す"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:381
#, fuzzy
msgid ""
"In order to return an HTTP response, simply return the resource you want "
"from your method. The method return type and its optional content type will "
"be used to decide how to serialise it to the HTTP response (see "
"<<negotiation>> for more advanced information)."
msgstr ""
"HTTP レスポンスを返すためには、メソッドから欲しいリソースを返すだけです。メソッドの戻り値の型とオプションの内容の型は、HTTP "
"レスポンスにどのようにシリアライズするかを決定するために使用されます (より高度な情報については link:"
"#negotiation[[negotiation] を]参照してください)。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:384
#, fuzzy
msgid ""
"You can return any of the pre-defined types that you can read from the "
"<<resource-types,HTTP response>>, and any other type will be mapped "
"<<json,from that type to JSON>>."
msgstr ""
"link:#resource-types[HTTPレスポンス]から読み込むことができる事前に定義された型のいずれかを返すことができ、それ以外の型は "
"link:#json[その型からJSONに]マッピングされます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:389
#, fuzzy
msgid ""
"Alternately, you can also return a <<reactive,reactive type>> such as link:"
"{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`], link:{mutinyapi}/io/smallrye/"
"mutiny/Multi.html[`Multi`] or link:{jdkapi}/java/util/concurrent/"
"CompletionStage.html[`CompletionStage`] that resolve to one of the mentioned "
"return types."
msgstr ""
"また、以下のような link:#reactive[反応型を]返すこともできます。  link:{mutinyapi}/io/smallrye/"
"mutiny/Uni.html[`Uni`],  link:{mutinyapi}/io/smallrye/mutiny/Multi."
"html[`Multi`]或いは  link:{jdkapi}/java/util/concurrent/CompletionStage."
"html[`CompletionStage`]のいずれかに解決されます。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:390
#, no-wrap, fuzzy
msgid "Setting other response properties"
msgstr "その他のレスポンスプロパティの設定"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:395
#, fuzzy
msgid ""
"If you need to set more properties on the HTTP response than just the body, "
"such as the status code or headers, you can make your method return the link:"
"{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`] type:"
msgstr ""
"HTTP レスポンスにボディだけでなく、ステータスコードやヘッダなど、より多くのプロパティを設定する必要がある場合は、メソッドが  link:"
"{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`]のタイプがあります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:403
#, no-wrap
msgid ""
"import java.time.Duration;\n"
"import java.time.Instant;\n"
"import java.util.Date;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:409
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.NewCookie;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:427
#, no-wrap
msgid ""
"    @GET\n"
"    public Response hello() {\n"
"        // HTTP OK status with text/plain content type\n"
"        return Response.ok(\"Hello, World!\", MediaType.TEXT_PLAIN_TYPE)\n"
"         // set a response header\n"
"         .header(\"X-FroMage\", \"Camembert\")\n"
"         // set the Expires response header to two days from now\n"
"         .expires(Date.from(Instant.now().plus(Duration.ofDays(2))))\n"
"         // send a new cookie\n"
"         .cookie(new NewCookie(\"Flavour\", \"praliné\"))\n"
"         // end of builder API\n"
"         .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:429
#, no-wrap, fuzzy
msgid "Async/reactive support"
msgstr "非同期/リアクティブのサポート"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:439
#, fuzzy
msgid ""
"If your endpoint method needs to accomplish an asynchronous or reactive task "
"before being able to answer, you can declare your method to return the link:"
"{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] type (from https://smallrye."
"io/smallrye-mutiny/[Mutiny]), in which case the current HTTP request will be "
"automatically suspended after your method, until the returned link:"
"{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`] instance resolves to a value, "
"which will be mapped to a response exactly according to the previously "
"described rules:"
msgstr ""
"エンドポイントメソッドが応答できるようになる前に非同期タスクやリアクティブタスクを実行する必要がある場合は、メソッドが  link:"
"{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni`]型 ( link:https://smallrye.io/"
"smallrye-mutiny/[Mutiny] から) を使用している場合、その場合、現在の HTTP リクエストはあなたのメソッドの後、返された  "
"link:{mutinyapi}/io/smallrye/mutiny/Uni."
"html[`Uni`]インスタンスは値に解決され、この値は前に説明したルールに従って正確にレスポンスにマッピングされます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:448 upstream/_guides/resteasy-reactive.adoc:767
#, no-wrap
msgid "import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:451 upstream/_guides/resteasy-reactive.adoc:530
#, no-wrap
msgid "@Path(\"escoffier\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:457
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<Book> culinaryGuide(){\n"
"        return Book.findByIsbn(\"978-2081229297\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:463
#, fuzzy
msgid ""
"This allows you to not block the event-loop thread while the book is being "
"fetched from the database, and allows Quarkus to serve more requests until "
"your book is ready to be sent to the client and terminate this request. "
"Check out our <<execution-model,Execution Model documentation>> for more "
"information."
msgstr ""
"これにより、ブックがデータベースからフェッチされている間、イベントループスレッドをブロックしないようにすることができ、Quarkusはブックがクライアントに送信される準備が整うまで、さらに多くのリクエストを処理して、このリクエストを終了させることができます。詳細については、 "
"link:#execution-model[実行モデルのドキュメントを]参照してください。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:466
#, fuzzy
msgid ""
"The link:{jdkapi}/java/util/concurrent/CompletionStage."
"html[`CompletionStage`] return type is also supported."
msgstr ""
"仝  link:{jdkapi}/java/util/concurrent/CompletionStage."
"html[`CompletionStage`]戻り値の型もサポートしています。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:467
#, no-wrap, fuzzy
msgid "Streaming support"
msgstr "ストリーミング対応"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:472
#, fuzzy
msgid ""
"If you want to stream your response element by element, you can make your "
"endpoint method return a link:{mutinyapi}/io/smallrye/mutiny/Multi."
"html[`Multi`] type (from https://smallrye.io/smallrye-mutiny/[Mutiny]).  "
"This is especially useful for streaming text or binary data."
msgstr ""
"レスポンスを要素ごとにストリーム配信したい場合は、エンドポイントメソッドが  link:{mutinyapi}/io/smallrye/mutiny/"
"Multi.html[`Multi`]型 ( link:https://smallrye.io/smallrye-mutiny/[Mutiny] から) "
"を使用します。これは特にテキストやバイナリデータのストリーミングに便利です。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:475
#, fuzzy
msgid ""
"This example, using link:reactive-messaging-http.html[Reactive Messaging] "
"shows how to stream text data:"
msgstr ""
"この例では、 link:reactive-messaging-http.html[Reactive "
"Messagingを]使用して、テキストデータをストリーミングする方法を示しています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:483
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:485
#, no-wrap
msgid "import org.eclipse.microprofile.reactive.messaging.Channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:487
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:490
#, no-wrap
msgid "@Path(\"logs\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:494
#, no-wrap
msgid "    @Inject\n"
"    @Channel(\"log-out\")\n"
"    Multi<String> logs;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:500
#, no-wrap
msgid ""
"    @GET\n"
"    public Multi<String> streamLogs() {\n"
"        return logs;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:502
#, no-wrap, fuzzy
msgid "Server-Sent Event (SSE) support"
msgstr "サーバ・セント・イベント（SSE）のサポート"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:510
#, fuzzy
msgid ""
"If you want to stream JSON objects in your response, you can use https://"
"html.spec.whatwg.org/multipage/server-sent-events.html[Server-Sent Events] "
"by just annotating your endpoint method with link:{jaxrsapi}/javax/ws/rs/"
"Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`] and specifying that "
"each element should be <<json,serialised to JSON>> with "
"`@RestSseElementType(MediaType.APPLICATION_JSON)`."
msgstr ""
"レスポンスで JSON オブジェクト link:https://html.spec.whatwg.org/multipage/server-sent-"
"events.html[を]ストリーム配信したい場合は、エンドポイントメソッドに  link:{jaxrsapi}/javax/ws/rs/"
"Produces.html[`@Produces(MediaType.SERVER_SENT_EVENTS)`]で、各要素を link:"
"#json[JSONにシリアライズする]ことを指定します。 `@RestSseElementType(MediaType."
"APPLICATION_JSON)`."

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:520
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:522
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestSseElementType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:525
#, no-wrap
msgid "import io.smallrye.mutiny.Multi;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:527
#, no-wrap
msgid "import io.smallrye.reactive.messaging.annotations.Channel;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:535
#, no-wrap
msgid ""
"    // Inject our Book channel\n"
"    @Inject\n"
"    @Channel(\"book-out\")\n"
"    Multi<Book> books;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:545
#, no-wrap
msgid ""
"    @GET\n"
"    // Send the stream over SSE\n"
"    @Produces(MediaType.SERVER_SENT_EVENTS)\n"
"    // Each element will be sent as JSON\n"
"    @RestSseElementType(MediaType.APPLICATION_JSON)\n"
"    public Multi<Book> stream() {\n"
"        return books;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:547
#, no-wrap, fuzzy
msgid "Accessing context objects"
msgstr "コンテキストオブジェクトへのアクセス"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:553
#, fuzzy
msgid ""
"There are a number of contextual objects that the framework will give you, "
"if your endpoint method takes parameters of the following type:"
msgstr "エンドポイントメソッドが以下の型のパラメータを取る場合、フレームワークが与えるコンテキストオブジェクトがいくつかあります。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:554 upstream/_guides/resteasy-reactive.adoc:685
#, no-wrap, fuzzy
msgid "Table Context object"
msgstr "テーブルコンテキストオブジェクト"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:594
#, no-wrap, fuzzy
msgid ""
"|Type|Usage\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/HttpHeaders.html[`HttpHeaders`]\n"
"|All the request headers\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/container/ResourceInfo.html[`ResourceInfo`]\n"
"|Information about the current endpoint method and class (requires "
"reflection)\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/SecurityContext.html[`SecurityContext`]\n"
"|Access to the current user and roles\n"
"\n"
"|`SimpleResourceInfo`\n"
"|Information about the current endpoint method and class (no reflection "
"required)\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/UriInfo.html[`UriInfo`]\n"
"|Provides information about the current endpoint and application URI\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/Application.html[`Application`]\n"
"|Advanced: Current JAX-RS application class\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/Configuration.html[`Configuration`]\n"
"|Advanced: Configuration about the deployed JAX-RS application\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/ext/Providers.html[`Providers`]\n"
"|Advanced: Runtime access to JAX-RS providers\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/Request.html[`Request`]\n"
"|Advanced: Access to the current HTTP method and <<preconditions>>\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/ResourceContext.html[`ResourceContext`]\n"
"|Advanced: access to instances of endpoints\n"
"\n"
"|`ServerRequestContext`\n"
"|Advanced: RESTEasy Reactive access to the current request/response\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/sse/Sse.html[`Sse`]\n"
"|Advanced: Complex SSE use-cases\n"
"\n"
msgstr "|タイプ|用途"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:597
#, fuzzy
msgid ""
"For example, here is how you can return the name of the currently logged-in "
"user:"
msgstr "例えば、現在ログインしているユーザーの名前を返す方法は次のようになります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:603 upstream/_guides/resteasy-reactive.adoc:628 upstream/_guides/resteasy-reactive.adoc:656
#, no-wrap
msgid "import java.security.Principal;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:607 upstream/_guides/resteasy-reactive.adoc:634 upstream/_guides/resteasy-reactive.adoc:660
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.SecurityContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:610 upstream/_guides/resteasy-reactive.adoc:637 upstream/_guides/resteasy-reactive.adoc:663
#, no-wrap
msgid "@Path(\"user\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:617
#, no-wrap
msgid ""
"    @GET\n"
"    public String userName(SecurityContext security) {\n"
"        Principal user = security.getUserPrincipal();\n"
"        return user != null ? user.getName() : \"<NOT LOGGED IN>\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:622
#, fuzzy
msgid ""
"You can also inject those context objects using https://javadoc.io/static/"
"javax.inject/javax.inject/1/javax/inject/Inject.html[`@Inject`] on fields of "
"the same type:"
msgstr ""
"また、これらのコンテキストオブジェクトを注入するには  link:https://javadoc.io/static/javax.inject/"
"javax.inject/1/javax/inject/Inject.html[`@Inject`]を同じタイプのフィールドで使用することができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:630
#, no-wrap
msgid "import javax.inject.Inject;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:640
#, no-wrap
msgid "    @Inject\n"
"    SecurityContext security;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:647 upstream/_guides/resteasy-reactive.adoc:676
#, no-wrap
msgid ""
"    @GET\n"
"    public String userName() {\n"
"        Principal user = security.getUserPrincipal();\n"
"        return user != null ? user.getName() : \"<NOT LOGGED IN>\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:650
#, fuzzy
msgid "Or even on your endpoint constructor:"
msgstr "あるいはエンドポイントのコンストラクタでも。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:665
#, no-wrap
msgid "    SecurityContext security;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:669
#, no-wrap
msgid ""
"    Endpoint(SecurityContext security){\n"
"        this.security = security;\n"
"    }\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:679
#, no-wrap, fuzzy
msgid "JSON serialisation"
msgstr "ＪＳＯＮシリアライズ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:684
#, fuzzy
msgid ""
"Instead of importing `io.quarkus:quarkus-resteasy-reactive`, you can import "
"either of the following modules to get support for JSON:"
msgstr ""
"`io.quarkus:quarkus-resteasy-reactive` をインポートする代わりに、以下のモジュールのいずれかをインポートして "
"JSON のサポートを得ることができます。"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:695
#, no-wrap, fuzzy
msgid ""
"|GAV|Usage\n"
"\n"
"|`io.quarkus:quarkus-resteasy-reactive-jackson`\n"
"|https://github.com/FasterXML/jackson[Jackson support]\n"
"\n"
"|`io.quarkus:quarkus-resteasy-reactive-jsonb`\n"
"|http://json-b.net/[JSONB support]\n"
"\n"
msgstr "|GAV|使用方法"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:700
#, fuzzy
msgid ""
"In both cases, importing those modules will allow HTTP message bodies to be "
"read from JSON and serialised to JSON, for <<resource-types,all the types "
"not already registered with a more specific serialisation>>."
msgstr ""
"どちらの場合も、これらのモジュールをインポートすることで、 link:#resource-"
"types[より特定のシリアライズで登録されていないすべてのタイプ]について、HTTP メッセージボディを JSON から読み込んで JSON "
"にシリアライズできるようになります。"

#. type: Title ==
#: upstream/_guides/resteasy-reactive.adoc:701
#, no-wrap, fuzzy
msgid "More advanced usage"
msgstr "より高度な使い方"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:705
#, fuzzy
msgid ""
"Here are some more advanced topics that you may not need to know about "
"initially, but could prove useful for more complex use-cases."
msgstr "ここでは、最初に知る必要はないかもしれませんが、より複雑なユースケースに役立つ可能性のある、より高度なトピックをいくつかご紹介します。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:706
#, no-wrap, fuzzy
msgid "Execution model, blocking, non-blocking"
msgstr "実行モデル、ブロッキング、ノンブロッキング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:711
#, fuzzy
msgid "RESTEasy Reactive is implemented using two main thread types:"
msgstr "RESTEasy Reactiveは、2つの主要なスレッドタイプを使用して実装されています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:713
#, fuzzy
msgid ""
"Event-loop threads: which are responsible, among other things, for reading "
"bytes from the HTTP request and"
msgstr "イベントループスレッド: HTTP リクエストからのバイトの読み込みや、HTTP リクエストからのバイトの読み込みなどを行います。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:714
#, fuzzy
msgid "writing bytes back to the HTTP response"
msgstr "HTTP レスポンスにバイトを書き戻す"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:715
#, fuzzy
msgid ""
"Worker threads: they are pooled and can be used to offload long-running "
"operations"
msgstr "ワーカースレッド: プールされており、長時間実行される操作をオフロードするために使用できます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:719
#, fuzzy
msgid ""
"The event-loop threads (also called IO threads) are responsible for actually "
"performing all the IO operations in an asynchronous way, and to trigger any "
"listener interested in the completion of those IO operations."
msgstr ""
"イベントループスレッド（IOスレッドとも呼ばれます）は、非同期的にすべてのIO操作を実際に実行し、それらのIO操作の完了に興味のあるリスナーをトリガーする責任があります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:722
#, fuzzy
msgid ""
"By default, RESTEasy Reactive will run endpoint methods on the event-loop "
"threads, on the assumption that they are going to be fast and only invoke "
"non-blocking operations."
msgstr ""
"デフォルトでは、RESTEasy Reactive "
"は、イベントループスレッドが高速で、ノンブロッキング操作のみを呼び出すことを前提に、イベントループスレッド上でエンドポイントメソッドを実行します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:725
#, fuzzy
msgid ""
"This is the model of execution that leads to best performance if your "
"endpoints do not do any blocking operation (such as blocking IO, blocking on "
"an asynchronous operation, or sleeping)."
msgstr ""
"これは、エンドポイントがブロッキング操作（IOのブロッキング、非同期操作でのブロッキング、スリープなど）を行わない場合に、最高のパフォーマンスを発揮する実行モデルです。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:730
#, fuzzy
msgid ""
"If your endpoint method needs to do any of those blocking operations, you "
"should add the https://javadoc.io/doc/io.smallrye.common/smallrye-common-"
"annotation/1.5.0/io/smallrye/common/annotation/Blocking.html[`@Blocking`] "
"annotation on your endpoint and it will instead be invoked on a worker "
"thread. Your endpoint method code can remain exactly the same, and it will "
"be allowed to block:"
msgstr ""
"エンドポイントメソッドがこれらのブロッキング操作のいずれかを行う必要がある場合は  link:https://javadoc.io/doc/io."
"smallrye.common/smallrye-common-annotation/1.5.0/io/smallrye/common/"
"annotation/Blocking."
"html[`@Blocking`]アノテーションを使用すると、ワーカースレッドで起動されるようになります。エンドポイントのメソッドコードはまったく同じままで、ブロックが許可されます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:739
#, no-wrap
msgid "import io.smallrye.common.annotation.Blocking;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:742 upstream/_guides/resteasy-reactive.adoc:770
#, no-wrap
msgid "@Path(\"yawn\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:751
#, no-wrap
msgid ""
"    @Blocking\n"
"    @GET\n"
"    public String blockingHello() throws InterruptedException {\n"
"        // do a blocking operation\n"
"        Thread.sleep(1000);\n"
"        return \"Yaaaawwwwnnnnnn…\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:756
#, fuzzy
msgid ""
"Most of the time, there are ways to achieve the same blocking operations in "
"an asynchronous/reactive way, using https://smallrye.io/smallrye-mutiny/"
"[Mutiny], http://hibernate.org/reactive/[Hibernate Reactive] or any of the "
"link:getting-started-reactive[Quarkus Reactive extensions] for example:"
msgstr ""
"ほとんどの場合、 link:https://smallrye.io/smallrye-mutiny/[Mutiny]、 link:http://"
"hibernate.org/reactive/[Hibernate Reactive]、または link:getting-started-"
"reactive[Quarkus Reactive拡張機能]などを使用して、非同期/リアクティブな方法で同じブロッキング操作を実現する方法があります。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:762
#, no-wrap
msgid "import java.time.Duration;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:778
#, no-wrap
msgid ""
"    @GET\n"
"    public Uni<String> blockingHello() throws InterruptedException {\n"
"        return Uni.createFrom().item(\"Yaaaawwwwnnnnnn…\")\n"
"                // do a non-blocking sleep\n"
"                .onItem().delayIt().by(Duration.ofSeconds(2));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:780
#, no-wrap, fuzzy
msgid "Exception mapping"
msgstr "例外マッピング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:785
#, fuzzy
msgid ""
"If your application needs to return non-nominal HTTP codes in error cases, "
"the best is to throw exceptions that will result in the proper HTTP response "
"being sent by the framework using link:{jaxrsapi}/javax/ws/rs/"
"WebApplicationException.html[`WebApplicationException`] or any of its "
"subtypes:"
msgstr ""
"アプリケーションがエラーの場合に名前ではない HTTP コードを返す必要がある場合は、フレームワークが  link:{jaxrsapi}/javax/"
"ws/rs/WebApplicationException."
"html[`WebApplicationException`]またはそのサブタイプのいずれかを使用します。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:794
#, no-wrap
msgid ""
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.NotFoundException;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:797 upstream/_guides/resteasy-reactive.adoc:857
#, no-wrap
msgid "@Path(\"fromages/{fromage}\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:809
#, no-wrap
msgid ""
"    @GET\n"
"    public String findFromage(String fromage) {\n"
"        if(fromage == null)\n"
"            // send a 400\n"
"            throw new BadRequestException();\n"
"        if(!fromage.equals(\"camembert\"))\n"
"            // send a 404\n"
"            throw new NotFoundException(\"Unknown cheese: \" + fromage);\n"
"        return \"Camembert is a very nice cheese\";\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:817
#, fuzzy
msgid ""
"If your endpoint method is delegating calls to another service layer which "
"does not know of JAX-RS, you need a way to turn service exceptions to an "
"HTTP response, and you can do that using the `@ServerExceptionMapper` "
"annotation on a method, with one parameter of the exception type you want to "
"handle, and turning that exception into a link:{jaxrsapi}/javax/ws/rs/core/"
"Response.html[`Response`] (or a link:{mutinyapi}/io/smallrye/mutiny/Uni."
"html[`Uni<Response>`]):"
msgstr ""
"`@ServerExceptionMapper` エンドポイントメソッドがJAX-"
"RSを知らない別のサービスレイヤーに呼び出しを委任している場合、サービスの例外をHTTPレスポンスに変換する方法が必要です。  link:"
"{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`](または  link:{mutinyapi}/"
"io/smallrye/mutiny/Uni.html[`Uni&amp;lt;Response&amp;gt;`]):"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:823
#, no-wrap
msgid "import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:830
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.BadRequestException;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:832 upstream/_guides/resteasy-reactive.adoc:889
#, no-wrap
msgid "import org.jboss.resteasy.reactive.server.ServerExceptionMapper;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:835
#, no-wrap
msgid ""
"class UnknownCheeseException extends RuntimeException {\n"
"    public final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:840
#, no-wrap
msgid ""
"    public UnknownCheeseException(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:846
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CheeseService {\n"
"    private static final Map<String, String> cheeses = \n"
"            Map.of(\"camembert\", \"Camembert is a very nice cheese\",\n"
"                   \"gouda\", \"Gouda is acceptable too, especially with "
"cumin\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:854
#, no-wrap
msgid ""
"    public String findCheese(String name) {\n"
"        String ret = cheeses.get(name);\n"
"        if(ret != null)\n"
"            return ret;\n"
"        throw new UnknownCheeseException(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:860
#, no-wrap
msgid "    @Inject\n"
"    CheeseService cheeses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:867
#, no-wrap
msgid ""
"    @ServerExceptionMapper\n"
"    public Response mapException(UnknownCheeseException x) {\n"
"        return Response.status(Response.Status.NOT_FOUND)\n"
"                       .entity(\"Unknown cheese: \" + x.name)\n"
"                       .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:876
#, no-wrap
msgid ""
"    @GET\n"
"    public String findFromage(String fromage) {\n"
"        if(fromage == null)\n"
"            // send a 400\n"
"            throw new BadRequestException();\n"
"        return cheeses.findCheese(fromage);\n"
"    }\n"
"} \n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:881
#, fuzzy
msgid ""
"exception mappers defined in REST endpoint classes will only be called if "
"the exception is thrown in the same class. If you want to define global "
"exception mappers, simply define them outside a REST endpoint class:"
msgstr ""
"REST "
"エンドポイントクラスで定義された例外マッパーは、同じクラスで例外がスローされた場合にのみ呼び出されます。グローバルな例外マッパーを定義したい場合は、REST "
"エンドポイントクラスの外で定義するだけです。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:887
#, no-wrap
msgid "import javax.ws.rs.core.Response;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:898
#, no-wrap
msgid ""
"class ExceptionMappers {\n"
"    @ServerExceptionMapper\n"
"    public Response mapException(UnknownCheeseException x) {\n"
"        return Response.status(Response.Status.NOT_FOUND)\n"
"                       .entity(\"Unknown cheese: \" + x.name)\n"
"                       .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:901
#, fuzzy
msgid ""
"You can also declare link:{jaxrsspec}#exceptionmapper[exception mappers in "
"the JAX-RS way]."
msgstr "link:{jaxrsspec}#exceptionmapper[JAX-RSの方法で例外マッパーを]宣言することもできます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:903
#, fuzzy
msgid ""
"Your exception mapper may declare any of the following parameter types:"
msgstr "例外マッパは、以下のパラメータ型のいずれかを宣言することができます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:904
#, no-wrap, fuzzy
msgid "Table Exception mapper parameters"
msgstr "表 例外マッパのパラメータ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:917
#, no-wrap, fuzzy
msgid ""
"|Type|Usage\n"
"\n"
"|An exception type\n"
"|Defines the exception type you want to handle\n"
"\n"
"|Any of the <<context-objects,Context objects>>\n"
"|\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/container/ContainerRequestContext."
"html[`ContainerRequestContext`]\n"
"|A context object to access the current request\n"
"\n"
msgstr "|タイプ|用途"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:920 upstream/_guides/resteasy-reactive.adoc:1008
#, fuzzy
msgid "It may declare any of the following return types:"
msgstr "以下のいずれかの戻り値の型を宣言することができます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:921
#, no-wrap, fuzzy
msgid "Table Exception mapper return types"
msgstr "表 例外マッパの戻り値の種類"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:931
#, no-wrap, fuzzy
msgid ""
"|Type|Usage\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`]\n"
"|The response to send to the client when the exception occurs\n"
"\n"
"|link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]\n"
"|An asynchronous response to send to the client when the exception occurs\n"
"\n"
msgstr "|タイプ|用途"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:933
#, no-wrap, fuzzy
msgid "Request or response filters"
msgstr "リクエストまたはレスポンスフィルタ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:936
#, fuzzy
msgid ""
"You can declare functions which are invoked in the following phases of the "
"request processing:"
msgstr "リクエスト処理の以下のフェーズで呼び出される関数を宣言することができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:938
#, fuzzy
msgid "Before the endpoint method is identified: pre-routing request filter"
msgstr "エンドポイントメソッドが特定される前に：ルーティング前リクエストフィルタ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:939
#, fuzzy
msgid ""
"After routing, but before the endpoint method is called: normal request "
"filter"
msgstr "ルーティングの後、エンドポイントメソッドが呼ばれる前: 通常のリクエストフィルタ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:940
#, fuzzy
msgid "After the endpoint method is called: response filter"
msgstr "エンドポイント・メソッドが呼ばれた後：レスポンス・フィルタ"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:944
#, fuzzy
msgid ""
"These filters allow you to do various things such as examine the request "
"URI, HTTP method, influence routing, look or change request headers, abort "
"the request, or modify the response."
msgstr ""
"これらのフィルタは、リクエストの URI、HTTP "
"メソッド、ルーティングに影響を与える、リクエストヘッダを見たり変更したり、リクエストを中止したり、レスポンスを変更したりするなど、さまざまなことを可能にします。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:946
#, fuzzy
msgid ""
"Request filters can be declared with the `@ServerRequestFilter` annotation:"
msgstr "リクエストフィルタは `@ServerRequestFilter` アノテーションで宣言できます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:950
#, no-wrap
msgid "class Filters {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:958
#, no-wrap
msgid ""
"    @ServerRequestFilter(preMatching = true)\n"
"    public void preMatchingFilter(ContainerRequestContext requestContext) {\n"
"        // make sure we don't lose cheese lovers\n"
"        if(\"yes\".equals(requestContext.getHeaderString(\"Cheese\"))) {\n"
"            requestContext.setRequestUri(URI.create(\"/cheese\"));\n"
"        }\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:967
#, no-wrap
msgid ""
"    @ServerRequestFilter\n"
"    public void getFilter(ContainerRequestContext ctx) {\n"
"        // only allow GET methods for now\n"
"        if(ctx.getMethod().equals(HttpMethod.GET)) {\n"
"            ctx.abortWith(Response.status(Response.Status."
"METHOD_NOT_ALLOWED).build());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:970
#, fuzzy
msgid ""
"Similarly, response filters can be declared with the `@ServerResponseFilter` "
"annotation:"
msgstr "同様に、レスポンスフィルタは `@ServerResponseFilter` アノテーションで宣言することができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:983
#, no-wrap
msgid ""
"class Filters {\n"
"    @ServerResponseFilter\n"
"    public void getFilter(ContainerResponseContext responseContext) {\n"
"        Object entity = responseContext.getEntity();\n"
"        if(entity instanceof String) {\n"
"            // make it shout\n"
"            responseContext.setEntity(((String)entity).toUpperCase());\n"
"        }\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:986
#, fuzzy
msgid ""
"You can also link:{jaxrsspec}#filters[declare request and response filters "
"in the JAX-RS way]."
msgstr ""
"また、 link:{jaxrsspec}#filters[JAX-RSの方法でリクエストフィルタとレスポンスフィルタを宣言する]こともできます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:988
#, fuzzy
msgid "Your filters may declare any of the following parameter types:"
msgstr "フィルタは以下のパラメータ型のいずれかを宣言することができます。"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:989
#, no-wrap, fuzzy
msgid "Table Filter parameters"
msgstr "表 フィルタパラメータ"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1005
#, no-wrap, fuzzy
msgid ""
"|Type|Usage\n"
"\n"
"|Any of the <<context-objects,Context objects>>\n"
"|\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/container/ContainerRequestContext."
"html[`ContainerRequestContext`]\n"
"|A context object to access the current request\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/container/ContainerResponseContext."
"html[`ContainerResponseContext`]\n"
"|A context object to access the current response\n"
"\n"
"|link:{jdkapi}/java/lang/Throwable.html[`Throwable`]\n"
"|Any thrown exception, or `null` (only for response filters)\n"
"\n"
msgstr "|タイプ|用途"

#. type: Block title
#: upstream/_guides/resteasy-reactive.adoc:1009
#, no-wrap, fuzzy
msgid "Table Filter return types"
msgstr "表 フィルタの戻り値の種類"

#. type: Table
#: upstream/_guides/resteasy-reactive.adoc:1022
#, no-wrap, fuzzy
msgid ""
"|Type|Usage\n"
"\n"
"|link:{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`]\n"
"|The response to send to the client instead of continuing the filter chain, "
"or `null` if the filter chain should proceed\n"
"\n"
"|link:{jdkapi}/java/util/Optional.html[`Optional<Response>`]\n"
"|An optional response to send to the client instead of continuing the filter "
"chain, or an empty value if the filter chain should proceed\n"
"\n"
"|link:{mutinyapi}/io/smallrye/mutiny/Uni.html[`Uni<Response>`]\n"
"|An asynchronous response to send to the client instead of continuing the "
"filter chain, or `null` if the filter chain should proceed\n"
"\n"
msgstr "|タイプ|用途"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1024
#, no-wrap, fuzzy
msgid "Readers and Writers: mapping entities and HTTP bodies"
msgstr "リーダーとライター: エンティティとHTTPボディのマッピング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1031
#, fuzzy
msgid ""
"Whenever your endpoint methods return a object (of when they return a link:"
"{jaxrsapi}/javax/ws/rs/core/Response.html[`Response`] with an entity), "
"RESTEasy Reactive will look for a way to map that into an HTTP response body."
""
msgstr ""
"エンドポイントメソッドがオブジェクトを返すときはいつでも（そのうち  link:{jaxrsapi}/javax/ws/rs/core/Response."
"html[`Response`]を使用している場合)、RESTEasy Reactive はそれを HTTP "
"レスポンスボディにマッピングする方法を探します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1034
#, fuzzy
msgid ""
"Similarly, whenever your endpoint method takes an object as parameter, we "
"will look for a way to map the HTTP request body into that object."
msgstr ""
"同様に、エンドポイントメソッドがオブジェクトをパラメータとして受け取るときはいつでも、HTTPリクエストのボディをそのオブジェクトにマッピングする方法を探します。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1039
#, fuzzy
msgid ""
"This is done via a pluggable system of link:{jaxrsapi}/javax/ws/rs/ext/"
"MessageBodyReader.html[`MessageBodyReader`] and link:{jaxrsapi}/javax/ws/rs/"
"ext/MessageBodyWriter.html[`MessageBodyWriter`] interfaces, which are "
"responsible for defining which Java type they map from/to, for which media "
"types, and how they turn HTTP bodies to/from Java instances of that type."
msgstr ""
"のプラガブルシステムを介して行われます。  link:{jaxrsapi}/javax/ws/rs/ext/MessageBodyReader."
"html[`MessageBodyReader`]そして  link:{jaxrsapi}/javax/ws/rs/ext/"
"MessageBodyWriter."
"html[`MessageBodyWriter`]インターフェイスは、どのJavaタイプにマッピングするか、どのメディアタイプにマッピングするか、そしてHTTPボディをどのようにしてそのタイプのJavaインスタンスとの間で変換するかを定義する責任があります。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1041
#, fuzzy
msgid "For example, if we have our own `FroMage` type on our endpoint:"
msgstr "例えば、エンドポイントに独自の `FroMage` タイプがある場合。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1049 upstream/_guides/resteasy-reactive.adoc:1200
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1052
#, no-wrap
msgid "class FroMage {\n"
"    public String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1057
#, no-wrap
msgid "    public FroMage(String name) {\n"
"        this.name = name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1060 upstream/_guides/resteasy-reactive.adoc:1203
#, no-wrap
msgid "@Path(\"cheese\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1065
#, no-wrap
msgid ""
"    @GET\n"
"    public FroMage sayCheese() {\n"
"        return new FroMage(\"Cheeeeeese\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1071
#, no-wrap
msgid ""
"    @PUT\n"
"    public void addCheese(FroMage fromage) {\n"
"        System.err.println(\"Received a new cheese: \" + fromage.name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1075
#, fuzzy
msgid ""
"Then we can define how to read and write it with our body reader/writers, "
"annotated with link:{jaxrsapi}/javax/ws/rs/ext/Provider.html[`@Provider`]:"
msgstr ""
"でアノテーションされたボディリーダ/ライタを使って、どのように読み書きするかを定義することができます。  link:{jaxrsapi}/javax/"
"ws/rs/ext/Provider.html[`@Provider`]:"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1086 upstream/_guides/resteasy-reactive.adoc:1149
#, no-wrap
msgid ""
"import java.io.IOException;\n"
"import java.io.InputStream;\n"
"import java.io.OutputStream;\n"
"import java.lang.annotation.Annotation;\n"
"import java.lang.reflect.Type;\n"
"import java.nio.charset.StandardCharsets;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1093
#, no-wrap
msgid ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import javax.ws.rs.ext.MessageBodyReader;\n"
"import javax.ws.rs.ext.MessageBodyWriter;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1097
#, no-wrap
msgid ""
"@Provider\n"
"public class FroMageBodyHandler implements MessageBodyReader<FroMage>, \n"
"                                           MessageBodyWriter<FroMage> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1103
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isWriteable(Class<?> type, Type genericType, \n"
"                               Annotation[] annotations, MediaType "
"mediaType) {\n"
"        return type == FroMage.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1113
#, no-wrap
msgid ""
"    @Override\n"
"    public void writeTo(FroMage t, Class<?> type, Type genericType, \n"
"                        Annotation[] annotations, MediaType mediaType,\n"
"                        MultivaluedMap<String, Object> httpHeaders, \n"
"                        OutputStream entityStream)\n"
"            throws IOException, WebApplicationException {\n"
"        entityStream.write((\"[FroMageV1]\" + t.name)\n"
"                           .getBytes(StandardCharsets.UTF_8));\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1119
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isReadable(Class<?> type, Type genericType, \n"
"                              Annotation[] annotations, MediaType mediaType) "
"{\n"
"        return type == FroMage.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1131
#, no-wrap
msgid ""
"    @Override\n"
"    public FroMage readFrom(Class<FroMage> type, Type genericType, \n"
"                            Annotation[] annotations, MediaType mediaType,\n"
"                            MultivaluedMap<String, String> httpHeaders,\n"
"                            InputStream entityStream)\n"
"            throws IOException, WebApplicationException {\n"
"        String body = new String(entityStream.readAllBytes(), "
"StandardCharsets.UTF_8);\n"
"        if(body.startsWith(\"[FroMageV1]\"))\n"
"            return new FroMage(body.substring(11));\n"
"        throw new IOException(\"Invalid fromage: \" + body);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1133 upstream/_guides/resteasy-reactive.adoc:1300 upstream/_guides/resteasy-reactive.adoc:1315
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1138
#, fuzzy
msgid ""
"If you want to get the most performance our of your writer, you can extend "
"`ServerMessageBodyWriter` instead of link:{jaxrsapi}/javax/ws/rs/ext/"
"MessageBodyWriter.html[`MessageBodyWriter`] where you will be able to use "
"less reflection and bypass the blocking IO layer:"
msgstr ""
"ライターのパフォーマンスを最大限に引き出したい場合は、 `ServerMessageBodyWriter` を拡張することができます。  link:"
"{jaxrsapi}/javax/ws/rs/ext/MessageBodyWriter."
"html[`MessageBodyWriter`]ここでは、より少ない反射を使用し、ブロッキングIO層をバイパスすることができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1155
#, no-wrap
msgid ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.core.MediaType;\n"
"import javax.ws.rs.core.MultivaluedMap;\n"
"import javax.ws.rs.ext.MessageBodyReader;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1159
#, no-wrap
msgid ""
"import org.jboss.resteasy.reactive.server.spi.ResteasyReactiveResourceInfo;\n"
"import org.jboss.resteasy.reactive.server.spi.ServerMessageBodyWriter;\n"
"import org.jboss.resteasy.reactive.server.spi.ServerRequestContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1163
#, no-wrap
msgid ""
"@Provider\n"
"public class FroMageBodyHandler implements MessageBodyReader<FroMage>, \n"
"                                           ServerMessageBodyWriter<FroMage> "
"{\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1165
#, no-wrap
msgid "    // …\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1171
#, no-wrap
msgid ""
"    @Override\n"
"    public boolean isWriteable(Class<?> type, ResteasyReactiveResourceInfo "
"target, \n"
"                               MediaType mediaType) {\n"
"        return type == FroMage.class;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1178
#, no-wrap
msgid ""
"    @Override\n"
"    public void writeResponse(FroMage t, ServerRequestContext context) \n"
"      throws WebApplicationException, IOException {\n"
"        context.serverResponse().end(\"[FroMageV1]\" + t.name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1183
#, fuzzy
msgid ""
"You can restrict which content-types your reader/writer apply to by adding "
"link:{jaxrsapi}/javax/ws/rs/Consumes.html[`Consumes`]/link:{jaxrsapi}/javax/"
"ws/rs/Produces.html[`Produces`] annotations on your provider class."
msgstr ""
"を追加することで、リーダライタが適用するコンテンツタイプを制限することができます。  link:{jaxrsapi}/javax/ws/rs/"
"Consumes.html[`Consumes`]/ link:{jaxrsapi}/javax/ws/rs/Produces."
"html[`Produces`]アノテーションを使用します。"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1184
#, no-wrap, fuzzy
msgid "Reader and Writer interceptors"
msgstr "リーダーとライターのインターセプター"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1190
#, fuzzy
msgid ""
"Just as you can intercept requests and responses, you can also intercept "
"readers and writers, by extending the link:{jaxrsapi}/javax/ws/rs/ext/"
"ReaderInterceptor.html[`ReaderInterceptor`] or link:{jaxrsapi}/javax/ws/rs/"
"ext/WriterInterceptor.html[`WriterInterceptor`] on a class annotated with "
"link:{jaxrsapi}/javax/ws/rs/ext/Provider.html[`@Provider`]."
msgstr ""
"リクエストやレスポンスを傍受することができるのと同じように、読者やライターを傍受することもできます。  link:{jaxrsapi}/javax/ws/"
"rs/ext/ReaderInterceptor.html[`ReaderInterceptor`]或いは  link:{jaxrsapi}/javax/"
"ws/rs/ext/WriterInterceptor.html[`WriterInterceptor`]でアノテーションされたクラスに対して  "
"link:{jaxrsapi}/javax/ws/rs/ext/Provider.html[`@Provider`]."

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1192
#, fuzzy
msgid "If we look at this endpoint:"
msgstr "このエンドポイントを見てみると"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1208
#, no-wrap
msgid ""
"    @GET\n"
"    public String sayCheese() {\n"
"        return \"Cheeeeeese\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1214
#, no-wrap
msgid ""
"    @PUT\n"
"    public void addCheese(String fromage) {\n"
"        System.err.println(\"Received a new cheese: \" + fromage);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1217
#, fuzzy
msgid "We can add reader and writer interceptors like this:"
msgstr "このようにリーダーやライターの迎撃を追加することができます。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1223
#, no-wrap
msgid "import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1230
#, no-wrap
msgid ""
"import javax.ws.rs.WebApplicationException;\n"
"import javax.ws.rs.ext.Provider;\n"
"import javax.ws.rs.ext.ReaderInterceptor;\n"
"import javax.ws.rs.ext.ReaderInterceptorContext;\n"
"import javax.ws.rs.ext.WriterInterceptor;\n"
"import javax.ws.rs.ext.WriterInterceptorContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1233
#, no-wrap
msgid ""
"@Provider\n"
"public class FroMageIOInterceptor implements ReaderInterceptor, "
"WriterInterceptor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1241
#, no-wrap
msgid ""
"    @Override\n"
"    public void aroundWriteTo(WriterInterceptorContext context)\n"
"      throws IOException, WebApplicationException {\n"
"        System.err.println(\"Before writing \" + context.getEntity());\n"
"        context.proceed();\n"
"        System.err.println(\"After writing \" + context.getEntity());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1251
#, no-wrap
msgid ""
"    @Override\n"
"    public Object aroundReadFrom(ReaderInterceptorContext context)\n"
"      throws IOException, WebApplicationException {\n"
"        System.err.println(\"Before reading \" + context.getGenericType());\n"
"        Object entity = context.proceed();\n"
"        System.err.println(\"After reading \" + entity);\n"
"        return entity;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1253
#, no-wrap, fuzzy
msgid "Parameter mapping"
msgstr "パラメータマッピング"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1257
#, fuzzy
msgid ""
"All <<request-parameters,Request Parameters>> can be declared as link:"
"{jdkapi}/java/lang/String.html[`String`], but also any of the following "
"types:"
msgstr ""
"すべての link:#request-parameters[リクエストパラメータは]  link:{jdkapi}/java/lang/String."
"html[`String`]の他にも、以下のいずれかのタイプを使用することができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1260
#, fuzzy
msgid ""
"Types for which a link:{jaxrsapi}/javax/ws/rs/ext/ParamConverter."
"html[`ParamConverter`] is available via a registered link:{jaxrsapi}/javax/"
"ws/rs/ext/ParamConverterProvider.html[`ParamConverterProvider`]."
msgstr ""
"の対象となるタイプ  link:{jaxrsapi}/javax/ws/rs/ext/ParamConverter."
"html[`ParamConverter`]は、登録された  link:{jaxrsapi}/javax/ws/rs/ext/"
"ParamConverterProvider.html[`ParamConverterProvider`]."

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1261
#, fuzzy
msgid "Primitive types."
msgstr "プリミティブ型。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1262
#, fuzzy
msgid ""
"Types that have a constructor that accepts a single link:{jdkapi}/java/lang/"
"String.html[`String`] argument."
msgstr ""
"コンストラクタで単一の  link:{jdkapi}/java/lang/String.html[`String`]の引数を指定しています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1265
#, fuzzy
msgid ""
"Types that have a static method named `valueOf` or `fromString` with a "
"single link:{jdkapi}/java/lang/String.html[`String`] argument that return an "
"instance of the type. If both methods are present then `valueOf` will be "
"used unless the type is an `enum` in which case `fromString` will be used."
msgstr ""
"`valueOf` または `fromString` という名前の静的メソッドを持つ型で、単一の  link:{jdkapi}/java/lang/"
"String.html[`String`]引数は、型のインスタンスを返すものです。 `valueOf` 両方のメソッドが存在する場合は、型が "
"`enum` の場合は `fromString` が使用されます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1267
#, fuzzy
msgid ""
"link:{jdkapi}/java/util/List.html[`List<T>`], link:{jdkapi}/java/util/Set."
"html[`Set<T>`], or link:{jdkapi}/java/util/SortedSet.html[`SortedSet<T>`], "
"where `T` satisfies any above criterion."
msgstr ""
"link:{jdkapi}/java/util/List.html[`List&amp;lt;T&amp;gt;`],  link:{jdkapi}/"
"java/util/Set.html[`Set&amp;lt;T&amp;gt;`]または  link:{jdkapi}/java/util/"
"SortedSet.html[`SortedSet&amp;lt;T&amp;gt;`]ここで、 `T` は上記のいずれかの基準を満たしています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1269
#, fuzzy
msgid "The following example illustrates all those possibilities:"
msgstr "以下の例は、これらの可能性をすべて示しています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1277
#, no-wrap
msgid ""
"import java.lang.annotation.Annotation;\n"
"import java.lang.reflect.Type;\n"
"import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1283
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.ext.ParamConverter;\n"
"import javax.ws.rs.ext.ParamConverterProvider;\n"
"import javax.ws.rs.ext.Provider;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1285
#, no-wrap
msgid "import org.jboss.resteasy.reactive.RestQuery;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1288
#, no-wrap
msgid ""
"@Provider\n"
"class MyConverterProvider implements ParamConverterProvider {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1298
#, no-wrap
msgid ""
"    @Override\n"
"    public <T> ParamConverter<T> getConverter(Class<T> rawType, Type "
"genericType,\n"
"                                              Annotation[] annotations) {\n"
"        // declare a converter for this type\n"
"        if(rawType == Converter.class) {\n"
"            return (ParamConverter<T>) new MyConverter();\n"
"        }\n"
"        return null;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1303
#, no-wrap
msgid ""
"// this is my custom converter\n"
"class MyConverter implements ParamConverter<Converter> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1308
#, no-wrap
msgid ""
"    @Override\n"
"    public Converter fromString(String value) {\n"
"        return new Converter(value);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1313
#, no-wrap
msgid ""
"    @Override\n"
"    public String toString(Converter value) {\n"
"        return value.value;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1323
#, no-wrap
msgid ""
"// this uses a converter\n"
"class Converter {\n"
"    String value;\n"
"    Converter(String value) {\n"
"        this.value = value;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1331
#, no-wrap
msgid ""
"class Constructor {\n"
"    String value;\n"
"    // this will use the constructor\n"
"    public Constructor(String value) {\n"
"        this.value = value;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1342
#, no-wrap
msgid ""
"class ValueOf {\n"
"    String value;\n"
"    private ValueOf(String value) {\n"
"        this.value = value;\n"
"    }\n"
"    // this will use the valueOf method\n"
"    public static ValueOf valueOf(String value) {\n"
"        return new ValueOf(value);\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1355
#, no-wrap
msgid ""
"    @Path(\"{converter}/{constructor}/{primitive}/{valueOf}\")\n"
"    @GET\n"
"    public String convertions(Converter converter, Constructor constructor,\n"
"                              int primitive, ValueOf valueOf, \n"
"                              @RestQuery List<Constructor> list){\n"
"        return converter + \"/\" + constructor + \"/\" + primitive \n"
"               + \"/\" + valueOf + \"/\" + list;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1357
#, no-wrap, fuzzy
msgid "Preconditions"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1361
#, fuzzy
msgid ""
"https://tools.ietf.org/html/rfc7232[HTTP allows requests to be conditional], "
"based on a number of conditions, such as:"
msgstr ""
"link:https://tools.ietf.org/html/rfc7232[HTTPでは]、以下のようないくつかの条件に基づいて、 link:"
"https://tools.ietf.org/html/rfc7232[リクエストを条件付きにすることができます]。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1363
#, fuzzy
msgid "Date of last resource modification"
msgstr "最終的なリソースの変更日"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1364
#, fuzzy
msgid ""
"A resource tag, similar to a hash code of the resource to designate its "
"state or version"
msgstr "リソースタグで、リソースの状態やバージョンを指定するためのリソースのハッシュコードに似ています。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1367
#, fuzzy
msgid ""
"Let's see how you can do conditional request validation using the link:"
"{jaxrsapi}/javax/ws/rs/core/Request.html[`Request`] context object:"
msgstr ""
"を使って条件付きリクエストの検証を行う方法を見てみましょう。  link:{jaxrsapi}/javax/ws/rs/core/Request."
"html[`Request`]コンテキストオブジェクトを使用しています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1376
#, no-wrap
msgid ""
"import java.time.Instant;\n"
"import java.time.temporal.ChronoUnit;\n"
"import java.time.temporal.TemporalUnit;\n"
"import java.util.Date;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1384
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.core.EntityTag;\n"
"import javax.ws.rs.core.Request;\n"
"import javax.ws.rs.core.Response;\n"
"import javax.ws.rs.core.Response.ResponseBuilder;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1387
#, no-wrap
msgid "@Path(\"conditional\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1394
#, no-wrap
msgid ""
"    // It's important to keep our date on seconds because that's how it's "
"sent to the\n"
"    // user in the Last-Modified header\n"
"    private Date date = Date.from(Instant.now().truncatedTo(ChronoUnit."
"SECONDS));\n"
"    private int version = 1;\n"
"    private EntityTag tag = new EntityTag(\"v1\");\n"
"    private String resource = \"Some resource\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1407
#, no-wrap
msgid ""
"    @GET\n"
"    public Response get(Request request){\n"
"        // first evaluate preconditions\n"
"        ResponseBuilder conditionalResponse = request."
"evaluatePreconditions(date, tag);\n"
"        if(conditionalResponse != null)\n"
"            return conditionalResponse.build();\n"
"        // preconditions are OK\n"
"        return Response.ok(resource)\n"
"                .lastModified(date)\n"
"                .tag(tag)\n"
"                .build();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1425
#, no-wrap
msgid ""
"    @PUT\n"
"    public Response put(Request request, String body){\n"
"        // first evaluate preconditions\n"
"        ResponseBuilder conditionalResponse = request."
"evaluatePreconditions(date, tag);\n"
"        if(conditionalResponse != null)\n"
"            return conditionalResponse.build();\n"
"        // preconditions are OK, we can update our resource\n"
"        resource = body;\n"
"        date = Date.from(Instant.now().truncatedTo(ChronoUnit.SECONDS));\n"
"        version++;\n"
"        tag = new EntityTag(\"v\" + version);\n"
"        return Response.ok(resource)\n"
"                .lastModified(date)\n"
"                .tag(tag)\n"
"                .build();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1428
#, fuzzy
msgid ""
"When we call `GET /conditional` the first time, we will get this response:"
msgstr "最初に `GET /conditional` に電話すると、このような反応が返ってきます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1435
#, fuzzy
msgid ""
"``` HTTP/1.1 200 OK Content-Type: text/plain;charset=UTF-8 ETag: \"v1\" Last-"
"Modified: Wed, 09 Dec 2020 16:10:19 GMT Content-Length: 13"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1438
#, fuzzy
msgid "Some resource ```"
msgstr "いくつかのリソース ```"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1440
#, fuzzy
msgid ""
"So now if we want to check if we need to fetch a new version, we can make "
"the following request:"
msgstr "そこで、新しいバージョンをフェッチする必要があるかどうかを確認したい場合は、次のようなリクエストをします。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1446
#, fuzzy
msgid ""
"``` GET /conditional HTTP/1.1 Host: localhost:8080 If-Modified-Since: Wed, "
"09 Dec 2020 16:10:19 GMT ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1448
#, fuzzy
msgid "And we would get the following response:"
msgstr "そして、次のような反応が返ってきます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1452
#, fuzzy
msgid "``` HTTP/1.1 304 Not Modified ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1457
#, fuzzy
msgid ""
"Because the resource has not been modified since that date. This saves on "
"sending the resource, but can also help your users detect concurrent "
"modification, for example, let's suppose that one client wants to update the "
"resource, but another user has modified it since. You can follow the "
"previous `GET` request with this update:"
msgstr ""
"なぜなら、リソースはその日付以降変更されていないからです。これはリソースを送信する手間を省くことができますが、ユーザーが同時に変更したことを検出するのにも役立ちます。例えば、あるクライアントがリソースを更新したいと思っているのに、別のユーザーが変更してしまったとします。この更新で、以前の "
"`GET` リクエストをフォローすることができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1465
#, fuzzy
msgid ""
"``` PUT /conditional HTTP/1.1 Host: localhost:8080 If-Unmodified-Since: Wed, "
"09 Dec 2020 16:25:43 GMT If-Match: v1 Content-Length: 8 Content-Type: text/"
"plain"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1468
#, fuzzy
msgid "newstuff ```"
msgstr "新物 ```"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1471
#, fuzzy
msgid ""
"And if some other user has modified the resource between your `GET` and your "
"`PUT` you would get this answer back:"
msgstr "また、他のユーザーがあなたの `GET` とあなたの `PUT` の間のリソースを変更した場合は、この回答が返ってくるでしょう。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1477
#, fuzzy
msgid "``` HTTP/1.1 412 Precondition Failed ETag: \"v2\" Content-Length: 0 ```"
msgstr "<pre class=\"highlight\"> ``</pre>"

#. type: Title ===
#: upstream/_guides/resteasy-reactive.adoc:1478
#, no-wrap, fuzzy
msgid "Negotiation"
msgstr "交渉"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1485
#, fuzzy
msgid ""
"One of the main ideas of REST (https://tools.ietf.org/html/rfc7231#section-3."
"4[and HTTP]) is that your resource is independent from its representation, "
"and that both the client and server are free to represent their resources in "
"as many media types as they want. This allows the server to declare support "
"for multiple representations and let the client declare which ones it "
"supports and get served something appropriate."
msgstr ""
"REST link:https://tools.ietf.org/html/rfc7231#section-3.4[(と HTTP]) "
"の主な考え方の一つは、リソースはその表現から独立しており、クライアントとサーバの両方がリソースを好きなだけ多くのメディアタイプで自由に表現できるということです。これにより、サーバは複数の表現のサポートを宣言し、クライアントはどの表現をサポートしているかを宣言して、適切なものを提供してもらうことができます。"

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1487
#, fuzzy
msgid "The following endpoint supports serving cheese in plain text or JSON:"
msgstr "以下のエンドポイントは、プレーンテキストまたはJSONでのチーズの提供をサポートしています。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1498
#, no-wrap
msgid ""
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.PUT;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1500
#, no-wrap
msgid "import com.fasterxml.jackson.annotation.JsonCreator;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1512
#, no-wrap
msgid ""
"class FroMage {\n"
"    public String name;\n"
"    @JsonCreator\n"
"    public FroMage(String name) {\n"
"        this.name = name;\n"
"    }\n"
"    @Override\n"
"    public String toString() {\n"
"        return \"Cheese: \" + name;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1515
#, no-wrap
msgid "@Path(\"negotiated\")\n"
"public class Endpoint {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1521
#, no-wrap
msgid ""
"    @Produces({MediaType.APPLICATION_JSON, MediaType.TEXT_PLAIN})\n"
"    @GET\n"
"    public FroMage get(){\n"
"        return new FroMage(\"Morbier\");\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1527
#, no-wrap
msgid ""
"    @Consumes(MediaType.TEXT_PLAIN)\n"
"    @PUT\n"
"    public FroMage putString(String cheese){\n"
"        return new FroMage(cheese);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1534
#, no-wrap
msgid ""
"    @Consumes(MediaType.APPLICATION_JSON)\n"
"    @PUT\n"
"    public FroMage putJson(FroMage fromage){\n"
"        return fromage;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1538
#, fuzzy
msgid ""
"The user will be able to select which representation it gets with the link:"
"{httpspec}#section-5.3.2[`Accept`] header, in the case of JSON:"
msgstr "ユーザーは、どの表現を取得するかを  link:{httpspec}#section-5.3.2[`Accept`]ヘッダを使用します。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1544
#, no-wrap
msgid ""
"> GET /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Accept: application/json\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1550
#, no-wrap
msgid ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json\n"
"< Content-Length: 18\n"
"< \n"
"< {\"name\":\"Morbier\"} \n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1553
#, fuzzy
msgid "And for text:"
msgstr "テキストのためにも。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1565
#, no-wrap
msgid ""
"> GET /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Accept: text/plain\n"
"> \n"
"< HTTP/1.1 200 OK\n"
"< Content-Type: text/plain\n"
"< Content-Length: 15\n"
"< \n"
"< Cheese: Morbier \n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1568
#, fuzzy
msgid "Similarly, you can `PUT` two different representations. JSON:"
msgstr "同様に、 `PUT` 2 つの異なる表現を使うことができます。JSONです。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1577
#, no-wrap
msgid ""
"> PUT /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Content-Type: application/json\n"
"> Content-Length: 16\n"
"> \n"
"> {\"name\": \"brie\"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1583
#, no-wrap
msgid ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json;charset=UTF-8\n"
"< Content-Length: 15\n"
"< \n"
"< {\"name\":\"brie\"} \n"
msgstr ""

#. type: Plain text
#: upstream/_guides/resteasy-reactive.adoc:1586
#, fuzzy
msgid "Or plain text:"
msgstr "もしくはプレーンテキスト。"

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1595
#, no-wrap
msgid ""
"> PUT /negotiated HTTP/1.1\n"
"> Host: localhost:8080\n"
"> Content-Type: text/plain\n"
"> Content-Length: 9\n"
">\n"
"> roquefort\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/resteasy-reactive.adoc:1601
#, no-wrap
msgid ""
"< HTTP/1.1 200 OK\n"
"< Content-Type: application/json;charset=UTF-8\n"
"< Content-Length: 20\n"
"< \n"
"< {\"name\":\"roquefort\"} \n"
msgstr ""
