# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
msgid ""
msgstr ""
"Project-Id-Version: \n"
"POT-Creation-Date: 2020-12-29 14:10+0900\n"
"PO-Revision-Date: 2021-01-09 13:50+0900\n"
"Language: ja\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Last-Translator: \n"
"Language-Team: \n"
"X-Generator: Poedit 2.4.2\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/building-my-first-extension.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Building my first extension"
msgstr "Quarkus - 私の最初の拡張機能を構築する"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:14
#, fuzzy
msgid ""
"Quarkus extensions enhance your application just as projects dependencies do."
"  The role of the extensions is to leverage Quarkus paradigms to integrate "
"seamlessly a library into Quarkus architecture - e.g. do more things at "
"build time.  This is how you can use your battle-tested ecosystem and take "
"advantage of Quarkus performance and native compilation.  Go to https://code."
"quarkus.io/[code.quarkus.io] to get the list of the supported extensions."
msgstr ""
"Quarkusの拡張機能は、プロジェクトの依存関係がそうであるように、アプリケーションを強化します。拡張機能の役割は、Quarkusのパラダイムを活用して、ライブラリをQuarkusアーキテクチャにシームレスに統合することです。このようにして、実績のあるエコシステムを利用して、Quarkusのパフォーマンスとネイティブコンパイルを活用することができます。 "
"link:https://code.quarkus.io/[code.quarkus."
"io]にアクセスして、サポートされている拡張機能のリストを入手してください。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:17
#, fuzzy
msgid ""
"In this guide we are going to develop the *Sample Greeting Extension*.  The "
"extension will expose a customizable HTTP endpoint which simply greets the "
"visitor."
msgstr ""
"このガイドでは、 *サンプルグリーティング拡張機能を*開発します。この拡張機能は、訪問者に挨拶をするだけのカスタマイズ可能な HTTP "
"エンドポイントを公開します。"

#. type: Block title
#: upstream/_guides/building-my-first-extension.adoc:19
#, no-wrap, fuzzy
msgid "Disclaimer"
msgstr "免責事項"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:23
#, fuzzy
msgid ""
"To be sure it's extra clear you don't need an extension to add a Servlet to "
"your application.  This guide is a simplified example to explain the "
"concepts of extensions development.  Keep in mind it's not representative of "
"the power of moving things to build time or simplifying the build of native "
"images."
msgstr ""
"アプリケーションにサーブレットを追加するのに拡張機能は必要ありません。このガイドは拡張機能開発の概念を説明するための簡略化された例です。ビルド時間に物を動かす力や、ネイティブイメージのビルドを単純化する力を代表するものではないことを覚えておいてください。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:26
#, no-wrap
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:29
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下が必要です："

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:29
#, fuzzy
msgid "less than 30 minutes"
msgstr "三十分以内"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:32
msgid "an IDE"
msgstr "IDE"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:31
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME` が適切に設定されていること"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:33
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version}"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:33
#, no-wrap, fuzzy
msgid "Basic Concepts"
msgstr "基本概念"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:36
#, fuzzy
msgid "First things first, we will need to start with some basic concepts."
msgstr "まず最初に、いくつかの基本的な概念から始めましょう。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:38
#, fuzzy
msgid "JVM mode vs Native mode"
msgstr "JVMモードとネイティブモード"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:39
#, fuzzy
msgid ""
"Quarkus is first and foremost a Java framework, that means you can develop, "
"package and run classic JAR applications, that's what we call *JVM mode*."
msgstr "つまり、古典的な *JAR*アプリケーションを開発、パッケージ化、実行することができます。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:40
#, fuzzy
msgid ""
"Thanks to https://graalvm.org/[GraalVM] you can compile your Java "
"application into machine specific code (like you do in Go or C++) and that's "
"what we call *Native mode*."
msgstr ""
"link:https://graalvm.org/[GraalVMの]おかげで、Javaアプリケーションをマシン "
"*固有*のコードにコンパイルすることができます（GoやC++のように）。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:42
#, fuzzy
msgid ""
"The operation of compiling Java bytecode into a native system-specific "
"machine code is named *Ahead of Time Compilation* (aka AoT)."
msgstr ""
"Javaバイトコードをネイティブシステム固有のマシンコードにコンパイルする操作は、 *Ahead of Time "
"Compilation*(AoT)と呼ばれています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:44
#, fuzzy
msgid "build time vs runtime in classic Java frameworks"
msgstr "古典的なJavaフレームワークにおけるビルド時間とランタイムの比較"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:45
#, fuzzy
msgid ""
"The build time corresponds to all the actions you apply to your Java source "
"files to convert them into something runnable (class files, jar/war, native "
"images)."
msgstr ""
"ビルド時間は、Javaソースファイルを実行可能なもの（クラスファイル、jar/"
"war、ネイティブイメージ）に変換するためにJavaソースファイルに適用するすべてのアクションに対応しています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:46
#, fuzzy
msgid ""
"Usually this stage is composed by the compilation, annotation processing, "
"bytecode generation, etc. At this point, everything is under the developer's "
"scope and control."
msgstr ""
"通常、この段階はコンパイル、アノテーション処理、バイトコード生成などで構成されます。この時点では、すべてが開発者のスコープとコントロール下にあります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:47
#, fuzzy
msgid ""
"The runtime is all the actions that happen when you execute your application."
""
msgstr "ランタイムとは、アプリケーションを実行するときに発生するすべてのアクションのことです。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:48
#, fuzzy
msgid ""
"It's obviously focused on starting your business-oriented actions but it "
"relies on a lot of technical actions like loading libraries and "
"configuration files, scanning the application's classpath, configuring the "
"dependency injection, setting up your Object-Relational Mapping, "
"instantiating your REST controllers, etc."
msgstr ""
"これは明らかにビジネス指向のアクションを開始することに焦点を当てていますが、ライブラリや設定ファイルのロード、アプリケーションのクラスパスのスキャン、依存性インジェクションの設定、オブジェクトリレーショナルマッピングの設定、RESTコントローラのインスタンス化など、多くの技術的なアクションに依存しています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:50
#, fuzzy
msgid ""
"Usually, Java frameworks do their bootstrapping during the runtime before "
"actually starting the application \"Business oriented layer\". During "
"bootstrap, frameworks dynamically collect metadata by scanning the classpath "
"to find configurations, entity definitions, dependency injection binding, "
"etc. in order to instantiate proper objects through reflection. The main "
"consequences are:"
msgstr ""
"通常、Javaフレームワークは、アプリケーションの「ビジネス指向レイヤー」を実際に起動する前に、ランタイム中にブートストラップを行います。ブートストラップの間、フレームワークは、リフレクションによって適切なオブジェクトをインスタンス化するために、設定、エンティティ定義、依存性注入バインディングなどを見つけるためにクラスパスをスキャンすることによって動的にメタデータを収集します。主な結果は以下の通りです。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:52
#, fuzzy
msgid ""
"Delaying the readiness of your application: you need to wait a couple of "
"seconds before actually serving a business request."
msgstr "アプリケーションの準備を遅らせる：実際にビジネスリクエストに対応する前に数秒待つ必要があります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:53
#, fuzzy
msgid ""
"Having a peak of resource consumption at bootstrap: in a constrained "
"environment, you will need to size the needed resources based on your "
"technical bootstrap needs rather than your actual business needs."
msgstr ""
"ブートストラップでリソース消費のピークを持つ：制約のある環境では、実際のビジネスニーズではなく、技術的なブートストラップのニーズに基づいて、必要なリソースのサイズを決定する必要があります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:56
#, fuzzy
msgid ""
"Quarkus' philosophy is to prevent as much as possible slow and memory "
"intensive dynamic code execution by shifting left these actions and "
"eventually do them during the build time.  A Quarkus extension is a Java "
"piece of code acting as an adapter layer for your favorite library or "
"technology."
msgstr ""
"Quarkusの哲学は、これらのアクションを左にシフトし、最終的にはビルド時に実行することで、可能な限り低速でメモリ集約的な動的コードの実行を防ぐことです。Quarkusの拡張機能は、お気に入りのライブラリやテクノロジーのアダプターレイヤーとして機能するJavaのコードです。"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:57
#, no-wrap, fuzzy
msgid "Description of a Quarkus extension"
msgstr "Quarkusの拡張機能の説明"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:60
#, fuzzy
msgid "A Quarkus extension consists of two parts:"
msgstr "Quarkusの拡張機能は、2つの部分から構成されています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:63
#, fuzzy
msgid ""
"The *runtime module* which represents the capabilities the extension "
"developer exposes to the application's developer (an authentication filter, "
"an enhanced data layer API, etc).  Runtime dependencies are the ones the "
"users will add as their application dependencies (in Maven POMs or Gradle "
"build scripts)."
msgstr ""
"拡張機能開発者がアプリケーションの開発者に公開する機能を表す "
"*ランタイムモジュール*(認証フィルタ、強化されたデータ層APIなど)。ランタイム依存関係は、ユーザーがアプリケーションの依存関係として追加するものです "
"(Maven POM または Gradle ビルドスクリプトで)。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:67
#, fuzzy
msgid ""
"The *deployment module* which is used during the augmentation phase of the "
"build, it describes how to \"deploy\" a library following the Quarkus "
"philosophy.  In other words, it applies all the Quarkus optimizations to "
"your application during the build.  The deployment module is also where we "
"prepare things for GraalVM's native compilation."
msgstr ""
"ビルドの拡張フェーズで使用される "
"*デプロイモジュール*で、Quarkusの哲学に従ったライブラリを「デプロイ」する方法を説明しています。言い換えれば、ビルド中にアプリケーションにQuarkusのすべての最適化を適用します。デプロイメントモジュールは、GraalVMのネイティブコンパイルのための準備をする場所でもあります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:70
#, fuzzy
msgid ""
"Users should not be adding the deployment modules of extension as "
"application dependencies. The deployment dependencies are resolved by "
"Quarkus during the augmentation phase from the runtime dependencies of the "
"application."
msgstr ""
"ユーザーは、拡張機能のデプロイメントモジュールをアプリケーションの依存関係として追加すべきではありません。デプロイメントの依存関係は、拡張フェーズの間にQuarkusによってアプリケーションのランタイム依存関係から解決されます。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:72
#, fuzzy
msgid ""
"At this point, you should have understood that most of the magic will happen "
"at the Augmentation build time thanks to the deployment module."
msgstr "この時点で、デプロイメントモジュールのおかげで、ほとんどのマジックは拡張ビルド時に起こることを理解しているはずです。"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:73
#, no-wrap, fuzzy
msgid "Quarkus Application Bootstrap"
msgstr "Quarkusアプリケーションブートストラップ"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:76
#, fuzzy
msgid "There are three distinct bootstrap phases of a Quarkus application."
msgstr "Quarkusアプリケーションには、3つの異なるブートストラップフェーズがあります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:81
#, no-wrap, fuzzy
msgid ""
"*Augmentation*. During the build time, the Quarkus extensions will load and "
"scan your application's bytecode (including the dependencies) and "
"configuration.\n"
"At this stage, the extension can read configuration files, scan classes for "
"specific annotations, etc.\n"
"Once all the metadata has been collected, the extensions can pre-process the "
"libraries bootstrap actions like your ORM, DI or REST controllers "
"configurations.\n"
"The result of the bootstrap is directly recorded into bytecode and will be "
"part of your final application package.\n"
msgstr ""
"*拡張*。ビルド時に、Quarkus拡張機能はアプリケーションのバイトコード（依存関係を含む）と設定をロードしてスキャンします。この段階で、拡張機能は設定ファイルを読み込んだり、特定のアノテーションのためにクラスをスキャンしたりすることができます。すべてのメタデータが収集されると、拡張機能は、ORM、DI、またはRESTコントローラの設定のようなライブラリのブートストラップアクションを前処理することができます。ブートストラップの結果はバイトコードに直接記録され、最終的なアプリケーションパッケージの一部となります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:84
#, no-wrap, fuzzy
msgid ""
"*Static Init*. During the run time, Quarkus will execute first a static init "
"method which contains some extensions actions/configurations.\n"
"When you will do your native packaging, this static method will be pre-"
"processed during the build time and the objects it has generated will be "
"serialized into the final native executable, so the initialization code will "
"not be executed in the native mode (imagine you execute a Fibonacci function "
"during this phase, the result of the computation will be directly recorded "
"in the native executable).\n"
"When running the application in JVM mode, this static init phase is executed "
"at the start of the application.\n"
msgstr ""
"スタティック *init*.ランタイムの間、Quarkusは最初に、いくつかの拡張アクション/"
"設定を含む静的initメソッドを実行します。ネイティブパッケージングを行う場合、このスタティックメソッドはビルド時に前処理され、生成されたオブジェクトは最終的なネイティブ実行ファイルにシリアライズされるため、初期化コードはネイティブモードでは実行されません（このフェーズでフィボナッチ関数を実行すると想像してください。JVMモードでアプリケーションを実行している場合、この静的initフェーズはアプリケーションの開始時に実行されます。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:87
#, no-wrap, fuzzy
msgid ""
"*Runtime Init*. Well nothing fancy here, we do classic run time code "
"execution.\n"
"So, the more code you run during the two phases above, the faster your "
"application will start.\n"
msgstr ""
"ラン "
"*タイム*起動ここでは何も派手なことはしていませんが、古典的なランタイムコードの実行を行います。つまり、上記の2つのフェーズでより多くのコードを実行すればするほど、アプリケーションの起動が速くなります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:89
#, fuzzy
msgid "Now that everything is explained, we can start coding!"
msgstr "これで全てが説明されたので、さっそくコーディングに取り掛かりましょう"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:90
#, no-wrap, fuzzy
msgid "Maven setup"
msgstr "Mavenのセットアップ"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:93
#, fuzzy
msgid ""
"Quarkus provides `create-extension` Maven Mojo to initialize your extension "
"project."
msgstr "Quarkusは、 `create-extension` Maven Mojoを提供し、拡張プロジェクトを初期化します。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:114
#, no-wrap
msgid ""
"$ mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create-extension -N "
"\\\n"
"    -DgroupId=org.acme \\ #<1>\n"
"    -DartifactId=quarkus-greeting \\  #<2>\n"
"    -Dversion=1.0-SNAPSHOT \\ #<3>\n"
"    -Dquarkus.nameBase=\"Greeting Extension\" #<4>\n"
"[INFO] Scanning for projects...\n"
"[INFO] \n"
"[INFO] ------------------< org.apache.maven:standalone-pom >-----------------"
"--\n"
"[INFO] Building Maven Stub Project (No POM) 1\n"
"[INFO] --------------------------------[ pom ]-------------------------------"
"--\n"
"[INFO] \n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:create-extension (default-"
"cli) @ standalone-pom ---\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Total time:  1.233 s\n"
"[INFO] Finished at: 2020-04-22T23:28:15+02:00\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:117
#, fuzzy
msgid "Project's groupId"
msgstr "プロジェクトのグループID"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:118
#, fuzzy
msgid ""
"artifactId for the runtime artifact of the extension (the deployment "
"artifactId will be derived from the runtime artifactId by appending `-"
"deployment`)"
msgstr ""
"拡張機能の実行時アーティファクトのartifactId (展開時アーティファクトIdは `-deployment` "
"を付加することで実行時アーティファクトIdから導出されます)"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:119
#, fuzzy
msgid "Project's version"
msgstr "プロジェクトのバージョン"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:120
#, fuzzy
msgid "Prefix for the `<name>` element values in the generated POMs"
msgstr "生成された POM の `&amp;lt;name&amp;gt;` 要素値の接頭辞"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:122
#, fuzzy
msgid ""
"Maven has generated a `quarkus-greeting` directory containing the extension "
"project which consists of the parent `pom.xml`, the `runtime` and the "
"`deployment` modules."
msgstr ""
"Maven は、親 `pom.xml` 、 `runtime` 、 `deployment` モジュールからなる拡張プロジェクトを含む `quarkus-"
"greeting` ディレクトリを生成しました。"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:123
#, no-wrap, fuzzy
msgid "The parent pom.xml"
msgstr "親の pom.xml"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:126
#, fuzzy
msgid ""
"Your extension is a multi-module project. So let's start by checking out the "
"parent POM at `./quarkus-greeting/pom.xml`."
msgstr ""
"あなたの拡張モジュールはマルチモジュールプロジェクトです。ですから、まず親の POM を `./quarkus-greeting/pom.xml` "
"からチェックしてみましょう。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:134
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 https://"
"maven.apache.org/xsd/maven-4.0.0.xsd\">\n"
"    <modelVersion>4.0.0</modelVersion>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:139
#, no-wrap
msgid ""
"    <groupId>org.acme</groupId>\n"
"    <artifactId>quarkus-greeting-parent</artifactId>\n"
"    <version>1.0-SNAPSHOT</version>\n"
"    <name>Greeting Extension - Parent</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:177
#, no-wrap
msgid ""
"    <packaging>pom</packaging>\n"
"    <properties>\n"
"        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>\n"
"        <project.reporting.outputEncoding>UTF-8</project.reporting."
"outputEncoding>\n"
"        <maven.compiler.source>1.8</maven.compiler.source>\n"
"        <maven.compiler.target>1.8</maven.compiler.target>\n"
"        <maven.compiler.parameters>true</maven.compiler.parameters>\n"
"        <quarkus.version>{quarkus-version}</quarkus.version>\n"
"        <compiler-plugin.version>3.8.1</compiler-plugin.version>\n"
"    </properties>\n"
"    <modules> #<1>\n"
"        <module>deployment</module>\n"
"        <module>runtime</module>\n"
"    </modules>\n"
"    <dependencyManagement>\n"
"        <dependencies>\n"
"            <dependency>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-bom</artifactId> #<2>\n"
"                <version>${quarkus.version}</version>\n"
"                <type>pom</type>\n"
"                <scope>import</scope>\n"
"            </dependency>\n"
"        </dependencies>\n"
"    </dependencyManagement>\n"
"    <build>\n"
"        <pluginManagement>\n"
"            <plugins>\n"
"                <plugin>\n"
"                    <groupId>org.apache.maven.plugins</groupId>\n"
"                    <artifactId>maven-compiler-plugin</artifactId>\n"
"                    <version>${compiler-plugin.version}</version> #<3>\n"
"                </plugin>\n"
"            </plugins>\n"
"        </pluginManagement>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:180
#, fuzzy
msgid "Your extension declares 2 sub-modules `deployment` and `runtime`."
msgstr "あなたの拡張機能は、2つのサブモジュール `deployment` と `runtime` を宣言しています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:181
#, fuzzy
msgid ""
"The `quarkus-bom` aligns your dependencies with those used by Quarkus during "
"the augmentation phase."
msgstr "`quarkus-bom` は、オーグメンテーションの段階でQuarkusが使用している依存関係を調整します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:182
#, fuzzy
msgid ""
"Quarkus requires a recent version of the Maven compiler plugin supporting "
"the annotationProcessorPaths configuration."
msgstr ""
"Quarkusでは、annotationProcessorPaths設定をサポートするMavenコンパイラプラグインの最新バージョンが必要です。"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:183
#, no-wrap, fuzzy
msgid "The Deployment module"
msgstr "デプロイメントモジュール"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:186
#, fuzzy
msgid ""
"Let's have a look at the deployment's `./quarkus-greeting/deployment/pom."
"xml`."
msgstr "デプロイメントの `./quarkus-greeting/deployment/pom.xml`."

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:199
#: upstream/_guides/building-my-first-extension.adoc:291
#, no-wrap
msgid ""
"<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven."
"apache.org/xsd/maven-4.0.0.xsd\">\n"
"    <modelVersion>4.0.0</modelVersion>\n"
"    <parent>\n"
"        <groupId>org.acme</groupId>\n"
"        <artifactId>quarkus-greeting-parent</artifactId>\n"
"        <version>1.0-SNAPSHOT</version>\n"
"        <relativePath>../pom.xml</relativePath>\n"
"    </parent>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:202
#, no-wrap
msgid ""
"    <artifactId>quarkus-greeting-deployment</artifactId> <!--1-->\n"
"    <name>Greeting Extension - Deployment</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:215
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-core-deployment</artifactId> <!--2-->\n"
"            <version>${quarkus.version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId> <!--3-->\n"
"            <version>${project.version}</version>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:233
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <groupId>org.apache.maven.plugins</groupId>\n"
"                <artifactId>maven-compiler-plugin</artifactId>\n"
"                <configuration>\n"
"                    <annotationProcessorPaths>\n"
"                        <path>\n"
"                            <groupId>io.quarkus</groupId>\n"
"                            <artifactId>quarkus-extension-processor</"
"artifactId>  <!--4-->\n"
"                            <version>${quarkus.version}</version>\n"
"                        </path>\n"
"                    </annotationProcessorPaths>\n"
"                </configuration>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:235
#: upstream/_guides/building-my-first-extension.adoc:575
#, no-wrap
msgid "</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:238
#: upstream/_guides/building-my-first-extension.adoc:336
#, fuzzy
msgid "The key points are:"
msgstr "肝心のポイントは"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:240
#, fuzzy
msgid ""
"By convention, the deployment module has the `-deployment` suffix (`greeting-"
"deployment`)."
msgstr "慣例では、配置モジュールのサフィックスは `-deployment` ( `greeting-deployment`) です。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:242
#, fuzzy
msgid ""
"The deployment module depends on the `quarkus-core-deployment` artifact.  We "
"will see later which dependencies are convenient to add."
msgstr ""
"デプロイメントモジュールは `quarkus-core-deployment` "
"アーティファクトに依存しています。どの依存関係を追加するのが便利かは後ほど見ていきます。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:243
#, fuzzy
msgid "The deployment module also *must* depend on the runtime module."
msgstr "デプロイメントモジュールもランタイムモジュールに依存する *必要があります*。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:244
#: upstream/_guides/building-my-first-extension.adoc:340
#, fuzzy
msgid ""
"We add the `quarkus-extension-processor` to the compiler annotation "
"processors."
msgstr "コンパイラのアノテーションプロセッサに `quarkus-extension-processor` を追加します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:246
#, fuzzy
msgid ""
"In addition to the `pom.xml` `create-extension` also generated the `org.acme."
"quarkus.greeting.deployment.GreetingProcessor` class."
msgstr ""
"`pom.xml` `create-extension` に加えて `org.acme.quarkus.greeting.deployment."
"GreetingProcessor` クラスも生成されました。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:250
#: upstream/_guides/building-my-first-extension.adoc:403
#: upstream/_guides/building-my-first-extension.adoc:465
#: upstream/_guides/building-my-first-extension.adoc:594
#, no-wrap
msgid "package org.acme.quarkus.greeting.deployment;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:253
#: upstream/_guides/building-my-first-extension.adoc:406
#, no-wrap
msgid ""
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.builditem.FeatureBuildItem;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:255
#: upstream/_guides/building-my-first-extension.adoc:408
#: upstream/_guides/building-my-first-extension.adoc:472
#, no-wrap
msgid "class GreetingProcessor {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:257
#: upstream/_guides/building-my-first-extension.adoc:410
#: upstream/_guides/building-my-first-extension.adoc:474
#, no-wrap
msgid "    private static final String FEATURE = \"greeting\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:262
#: upstream/_guides/building-my-first-extension.adoc:479
#, no-wrap
msgid ""
"    @BuildStep\n"
"    FeatureBuildItem feature() {\n"
"        return new FeatureBuildItem(FEATURE);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:347
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:269
#, fuzzy
msgid ""
"`FeatureBuildItem` represents a functionality provided by an extension.  The "
"name of the feature gets displayed in the log during application bootstrap.  "
"An extension should provide at most one feature."
msgstr ""
"`FeatureBuildItem` "
"は拡張機能によって提供される機能を表します。機能の名前は、アプリケーションの起動時にログに表示されます。拡張機能は最大でも一つの機能を提供しなければなりません。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:273
#, fuzzy
msgid ""
"Be patient, we will explain the `Build Step Processor` concept and all the "
"extension deployment API later on.  At this point, you just need to "
"understand that this class explains to Quarkus how to deploy a feature named "
"`greeting` which is your extension.  In other words, you are augmenting your "
"application to use the `greeting` extension with all the Quarkus benefits "
"(build time optimization, native support, etc.)."
msgstr ""
"`Build Step Processor` の概念とすべての拡張機能のデプロイメント API については、後で説明します。この時点では、このクラスは、 "
"`greeting` "
"という拡張機能をデプロイする方法をQuarkusに説明していることを理解する必要があります。言い換えれば、アプリケーションを拡張して、 "
"`greeting` 拡張機能を使用して、Quarkusのすべての利点（ビルド時間の最適化、ネイティブサポートなど）を利用することになります。"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:274
#, no-wrap, fuzzy
msgid "The Runtime module"
msgstr "ランタイムモジュール"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:277
#, fuzzy
msgid "Finally `./quarkus-greeting/runtime/pom.xml`."
msgstr "最後に `./quarkus-greeting/runtime/pom.xml`."

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:294
#, no-wrap
msgid ""
"    <artifactId>quarkus-greeting</artifactId>  <!--1-->\n"
"    <name>Greeting Extension - Runtime</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:297
#, no-wrap
msgid "    <dependencies>\n"
"    </dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:333
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <groupId>io.quarkus</groupId>\n"
"                <artifactId>quarkus-bootstrap-maven-plugin</artifactId>  <!--"
"2-->\n"
"                <version>${quarkus.version}</version>\n"
"                <executions>\n"
"                    <execution>\n"
"                        <goals>\n"
"                            <goal>extension-descriptor</goal>\n"
"                        </goals>\n"
"                        <phase>compile</phase>\n"
"                        <configuration>\n"
"                            <deployment>${project.groupId}:${project."
"artifactId}-deployment:${project.version}\n"
"                            </deployment>\n"
"                        </configuration>\n"
"                    </execution>\n"
"                </executions>\n"
"            </plugin>\n"
"            <plugin>\n"
"                <groupId>org.apache.maven.plugins</groupId>\n"
"                <artifactId>maven-compiler-plugin</artifactId>\n"
"                <configuration>\n"
"                    <annotationProcessorPaths>\n"
"                        <path>\n"
"                            <groupId>io.quarkus</groupId>\n"
"                            <artifactId>quarkus-extension-processor</"
"artifactId> <!--3-->\n"
"                            <version>${quarkus.version}</version>\n"
"                        </path>\n"
"                    </annotationProcessorPaths>\n"
"                </configuration>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
"</project>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:338
#, fuzzy
msgid ""
"By convention, the runtime module has no suffix (`greeting`) as it is the "
"artifact exposed to the end user."
msgstr "慣習的に、ランタイムモジュールはエンドユーザーに公開される成果物であるため、サフィックス ( `greeting`) を持たない。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:339
#, fuzzy
msgid ""
"We add the `quarkus-bootstrap-maven-plugin` to generate the Quarkus "
"extension descriptor included into the runtime artifact which links it with "
"the corresponding deployment artifact."
msgstr ""
"ランタイム成果物に含まれるQuarkus拡張記述子を生成するために `quarkus-bootstrap-maven-plugin` "
"を追加し、これを対応するデプロイメント成果物とリンクさせています。"

#. type: Title ==
#: upstream/_guides/building-my-first-extension.adoc:341
#, no-wrap, fuzzy
msgid "Basic version of the Sample Greeting extension"
msgstr "サンプルグリーティング拡張機能の基本バージョン"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:343
#, no-wrap, fuzzy
msgid "Implementing the Greeting feature"
msgstr "グリーティング機能の実装"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:346
#, fuzzy
msgid ""
"The (killer) feature proposed by our extension is to greet the user.  To do "
"so, our extension will deploy, in the user application, a Servlet exposing "
"the HTTP endpoint `/greeting` which responds to the GET verb with a plain "
"text `Hello`."
msgstr ""
"私たちの拡張機能が提案する(キラー)機能は、ユーザに挨拶をすることです。 "
"`Hello`これを実現するために、我々の拡張機能はユーザアプリケーション内に、HTTP エンドポイント `/greeting` "
"を公開するサーブレットを配置します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:348
#, fuzzy
msgid ""
"The `runtime` module is where you develop the feature you want to propose to "
"your users, so it's time to create our Web Servlet."
msgstr "`runtime` モジュールは、ユーザーに提案したい機能を開発するところなので、そろそろ Web Servlet を作成しましょう。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:352
#, fuzzy
msgid ""
"To use Servlets in your applications you need to have a Servlet Container "
"such as http://undertow.io[Undertow].  Luckily, `quarkus-bom` imported by "
"our parent `pom.xml` already includes the Undertow Quarkus extension.  All "
"we need to do is add"
msgstr ""
"アプリケーションでサーブレットを使用するには、 link:http://undertow."
"io[Undertow]のようなサーブレットコンテナが必要です。 `pom.xml` 幸いにも、親である `quarkus-bom` がインポートした "
"には、すでに Undertow Quarkus 拡張機能が含まれています。必要なのは"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:360
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-undertow</artifactId>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:362
#, fuzzy
msgid "to our `./quarkus-greeting/runtime/pom.xml`."
msgstr "を `./quarkus-greeting/runtime/pom.xml` に移動します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:364
#, fuzzy
msgid ""
"Now we can create our Servlet `org.acme.quarkus.greeting.GreetingServlet` in "
"the `runtime` module."
msgstr ""
"これで、 `runtime` モジュールでサーブレット `org.acme.quarkus.greeting.GreetingServlet` "
"を作成することができるようになりました。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:367
#, no-wrap
msgid "package org.acme.quarkus.greeting;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:373
#, no-wrap
msgid ""
"import javax.servlet.annotation.WebServlet;\n"
"import javax.servlet.http.HttpServlet;\n"
"import javax.servlet.http.HttpServletRequest;\n"
"import javax.servlet.http.HttpServletResponse;\n"
"import java.io.IOException;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:376
#, no-wrap
msgid "@WebServlet\n"
"public class GreetingServlet extends HttpServlet { // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:382
#, no-wrap
msgid ""
"    @Override\n"
"    protected void doGet(HttpServletRequest req, HttpServletResponse resp) "
"throws IOException { // <2>\n"
"        resp.getWriter().write(\"Hello\");\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:385
#, fuzzy
msgid ""
"As usual, defining a servlet requires to extend `javax.servlet.http."
"HttpServlet`."
msgstr "いつものように、サーブレットを定義するには `javax.servlet.http.HttpServlet`."

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:386
#, fuzzy
msgid ""
"Since we want to respond to the HTTP GET verb, we override the `doGet` "
"method and write `Hello` in the Servlet response's output stream."
msgstr ""
"HTTP GET動詞に応答したいので、 `doGet` メソッドをオーバーライドして、サーブレット応答の出力ストリームに `Hello` を記述します。"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:387
#, no-wrap, fuzzy
msgid "Deploying the Greeting feature"
msgstr "グリーティング機能の展開"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:392
#, fuzzy
msgid ""
"Quarkus magic relies on bytecode generation at build time rather than "
"waiting for the runtime code evaluation, that's the role of your extension's "
"`deployment` module.  Calm down, we know, bytecode is hard and you don't "
"want to do it manually, Quarkus proposes a high level API to make your life "
"easier.  Thanks to basic concepts, you will describe the items to produce/"
"consume and the corresponding steps in order to generate the bytecode to "
"produce during the deployment time."
msgstr ""
"`deployment` Quarkus "
"magicは、実行時のコード評価を待つのではなく、ビルド時のバイトコード生成に依存しています。落ち着いてください。バイトコードは難しいし、手動でやりたくないことはわかっています。基本的な概念のおかげで、デプロイ時に生成するバイトコードを生成するために、生成/"
"消費するアイテムとそれに対応するステップを記述します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:394
#, fuzzy
msgid ""
"The `io.quarkus.builder.item.BuildItem` concept represents object instances "
"you will produce or consume (and at some point convert into bytecode) thanks "
"to methods annotated with `@io.quarkus.deployment.annotations.BuildStep` "
"which describe your extension's deployment tasks."
msgstr ""
"`io.quarkus.builder.item.BuildItem` の概念は、 `@io.quarkus.deployment."
"annotations.BuildStep` でアノテーションされたメソッドのおかげで、あなたが生成したり消費したり "
"(そしてある時点でバイトコードに変換したり) するオブジェクトインスタンスを表しており、拡張機能の展開タスクを記述します。"

#. type: Labeled list
#: upstream/_guides/building-my-first-extension.adoc:395
#, no-wrap, fuzzy
msgid "NOTE"
msgstr "ノート"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:396
#, fuzzy
msgid ""
"See link:all-builditems[the complete list of BuildItem implementations in "
"core] for more information"
msgstr "詳細は link:all-builditems[core の BuildItem 実装の完全なリストを]参照してください。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:399
#, fuzzy
msgid ""
"Go back to the generated `org.acme.quarkus.greeting.deployment."
"GreetingProcessor` class."
msgstr ""
"生成された `org.acme.quarkus.greeting.deployment.GreetingProcessor` クラスに戻ります。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:415
#, no-wrap
msgid ""
"    @BuildStep // <1>\n"
"    FeatureBuildItem feature() {\n"
"        return new FeatureBuildItem(FEATURE); // <2>\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:422
#, fuzzy
msgid ""
"`feature()` method is annotated with `@BuildStep` which means it is "
"identified as a deployment task Quarkus will have to execute during the "
"deployment.  `BuildStep` methods are run concurrently at augmentation time "
"to augment the application.  They use a producer/consumer model, where a "
"step is guaranteed not to be run until all the items that it is consuming "
"have been produced."
msgstr ""
"`feature()` メソッドには `@BuildStep` "
"というアノテーションが付けられており、Quarkusがデプロイ時に実行しなければならないデプロイタスクとして識別されます。 `BuildStep` "
"メソッドは、アプリケーションを拡張するための拡張時に同時に実行されます。プロデューサ／消費者モデルを使用しています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:425
#, fuzzy
msgid ""
"`io.quarkus.deployment.builditem.FeatureBuildItem` is an implementation of "
"`BuildItem` which represents the description of an extension.  This "
"`BuildItem` will be used by Quarkus to display information to the users when "
"the application is starting."
msgstr ""
"`io.quarkus.deployment.builditem.FeatureBuildItem` は、拡張機能の記述を表す `BuildItem` "
"の実装です。この `BuildItem` は、アプリケーションの起動時にユーザーに情報を表示するためにQuarkusが使用します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:428
#, fuzzy
msgid ""
"There are many `BuildItem` implementations, each one represents an aspect of "
"the deployment process.  Here are some examples:"
msgstr "多くの `BuildItem` 実装があり、それぞれが展開プロセスの一面を表しています。ここではいくつかの例を紹介します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:430
#, fuzzy
msgid ""
"`ServletBuildItem`: describes a Servlet (name, path, etc.) we want to "
"generate during the deployment."
msgstr "`ServletBuildItem`: デプロイ時に生成したいサーブレット(名前、パスなど)を記述します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:431
#, fuzzy
msgid ""
"`BeanContainerBuildItem`: describes a container used to store and retrieve "
"object instances during the deployment."
msgstr ""
"`BeanContainerBuildItem`: デプロイ時にオブジェクトインスタンスを保存・取得するために使用するコンテナについて説明します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:434
#, fuzzy
msgid ""
"If you don't find a `BuildItem` for what you want to achieve, you can create "
"your own implementation. Keep in mind that a `BuildItem` should be as fine-"
"grained as possible, representing a specific part of the deployment.  To "
"create your `BuildItem` you can extend:"
msgstr ""
"実現したいことに対応する `BuildItem` が見つからない場合は、独自の実装を作成することができます。 `BuildItem` "
"は、デプロイメントの特定の部分を表すもので、できるだけ細かいものでなければならないということを覚えておいてください。 `BuildItem` "
"を作成するには"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:436
#, fuzzy
msgid ""
"`io.quarkus.builder.item.SimpleBuildItem` if you need only a single instance "
"of the item during the deployment (e.g. `BeanContainerBuildItem`, you only "
"want one container)."
msgstr ""
"`io.quarkus.builder.item.SimpleBuildItem` デプロイ時にアイテムのインスタンスを1つだけ必要とする場合(例: "
"`BeanContainerBuildItem`, コンテナを1つだけにしたい場合)。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:437
#, fuzzy
msgid ""
"`io.quarkus.builder.item.MultiBuildItem` if you want to have multiple "
"instances (e.g. `ServletBuildItem`, you can produce many Servlets during the "
"deployment)."
msgstr ""
"複数のインスタンスを持ちたい場合は `io.quarkus.builder.item.MultiBuildItem` (例: "
"`ServletBuildItem`, デプロイ時に多くのサーブレットを生成することができます)。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:440
#, fuzzy
msgid ""
"It's now time to declare our HTTP endpoint. To do so, we need to produce a "
"`ServletBuildItem`.  At this point, we are sure you understood that if the "
"`quarkus-undertow` dependency proposes Servlet support for our `runtime` "
"module, we will need the `quarkus-undertow-deployment` dependency in our "
"`deployment` module to have access to the `io.quarkus.undertow.deployment."
"ServletBuildItem`."
msgstr ""
"これで、HTTP エンドポイントを宣言する時が来ました。これを行うには、 `ServletBuildItem` を生成する必要があります。この時点で、 "
"`quarkus-undertow` 依存関係が `runtime` モジュールの Servlet サポートを提案している場合、 "
"`deployment` モジュールの `quarkus-undertow-deployment` 依存関係が `io.quarkus.undertow."
"deployment.ServletBuildItem` にアクセスできるようにする必要があることをご理解いただけたと思います。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:442
#, fuzzy
msgid "Update the `./quarkus-greeting/deployment/pom.xml` as follows:"
msgstr "`./quarkus-greeting/deployment/pom.xml` を以下のように更新します。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:456
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId>\n"
"            <version>${project.version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-undertow-deployment</artifactId>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:459
#, fuzzy
msgid ""
"The dependency on `quarkus-core-deployment` generated by the `create-"
"extension` mojo can now be removed since `quarkus-undertow-deployment` "
"already depends on it."
msgstr ""
"`create-extension` mojo で生成された `quarkus-core-deployment` への依存は、 `quarkus-"
"undertow-deployment` が既に依存しているので、これで削除できます。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:461
#, fuzzy
msgid ""
"We can now update `org.acme.quarkus.greeting.deployment.GreetingProcessor`:"
msgstr ""
"`org.acme.quarkus.greeting.deployment.GreetingProcessor` を更新できるようになりました。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:470
#, no-wrap
msgid ""
"import io.quarkus.deployment.annotations.BuildStep;\n"
"import io.quarkus.deployment.builditem.FeatureBuildItem;\n"
"import org.acme.quarkus.greeting.GreetingServlet;\n"
"import io.quarkus.undertow.deployment.ServletBuildItem;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:487
#, no-wrap
msgid ""
"    @BuildStep\n"
"    ServletBuildItem createServlet() { // <1>\n"
"      ServletBuildItem servletBuildItem = ServletBuildItem."
"builder(\"greeting\", GreetingServlet.class.getName())\n"
"        .addMapping(\"/greeting\")\n"
"        .build(); // <2>\n"
"      return servletBuildItem;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:493
#, fuzzy
msgid ""
"We add a `createServlet` method which returns a `ServletBuildItem` and "
"annotate it with `@BuildStep`.  Now, Quarkus will process this new task "
"which will result in the bytecode generation of the Servlet registration at "
"build time."
msgstr ""
"`ServletBuildItem` を返す `createServlet` メソッドを追加し、 `@BuildStep` "
"とアノテーションを付けます。これで、Quarkusはこの新しいタスクを処理して、ビルド時にサーブレット登録のバイトコードを生成します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:495
#, fuzzy
msgid ""
"`ServletBuildItem` proposes a fluent API to instantiate a Servlet named "
"`greeting` of type `GreetingServlet` (it's our class provided by our "
"extension `runtime` module), and map it the `/greeting` path."
msgstr ""
"`ServletBuildItem` は、 `GreetingServlet` 型の `greeting` というサーブレットをインスタンス化し、 `/"
"greeting` パスをマッピングするための流暢な API を提案しています (拡張モジュール `runtime` によって提供されるクラスです)。"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:496
#, no-wrap, fuzzy
msgid "Testing the Greeting feature"
msgstr "グリーティング機能のテスト"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:500
#, fuzzy
msgid ""
"When developing a Quarkus extension, you mainly want to test your feature is "
"properly deployed in an application and works as expected.  That's why the "
"tests will be hosted in the `deployment` module."
msgstr ""
"Quarkus拡張機能を開発する際には、主に機能がアプリケーションに正しくデプロイされ、期待通りに動作するかどうかをテストしたいと考えています。そのため、テストは "
"`deployment` モジュールでホストされます。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:502
#, fuzzy
msgid ""
"Let's add the testing dependencies into the `./quarkus-greeting/deployment/"
"pom.xml` and `maven-surefire` configuration"
msgstr ""
"`./quarkus-greeting/deployment/pom.xml` と `maven-surefire` "
"の設定にテスト用の依存関係を追加してみましょう。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:516
#, no-wrap
msgid ""
"    <?xml version=\"1.0\" encoding=\"UTF-8\"?>\n"
"<project xmlns=\"http://maven.apache.org/POM/4.0.0\"\n"
"         xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n"
"         xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven."
"apache.org/xsd/maven-4.0.0.xsd\">\n"
"    <modelVersion>4.0.0</modelVersion>\n"
"    <parent>\n"
"        <groupId>org.acme</groupId>\n"
"        <artifactId>quarkus-greeting-parent</artifactId>\n"
"        <version>1.0-SNAPSHOT</version>\n"
"        <relativePath>../pom.xml</relativePath>\n"
"    </parent>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:519
#, no-wrap
msgid ""
"    <artifactId>quarkus-greeting-deployment</artifactId>\n"
"    <name>Greeting Extension - Deployment</name>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:523
#, no-wrap
msgid ""
"    <properties>\n"
"        <maven.surefire.version>3.0.0-M4</maven.surefire.version>\n"
"    </properties>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:545
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId>\n"
"            <version>${project.version}</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-undertow-deployment</artifactId>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-junit5-internal</artifactId> <!--1-->\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.rest-assured</groupId>\n"
"            <artifactId>rest-assured</artifactId> <!--2-->\n"
"            <scope>test</scope>\n"
"        </dependency>\n"
"    </dependencies>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:573
#, no-wrap
msgid ""
"    <build>\n"
"        <plugins>\n"
"            <plugin>\n"
"                <groupId>org.apache.maven.plugins</groupId>\n"
"                <artifactId>maven-compiler-plugin</artifactId>\n"
"                <configuration>\n"
"                    <annotationProcessorPaths>\n"
"                        <path>\n"
"                            <groupId>io.quarkus</groupId>\n"
"                            <artifactId>quarkus-extension-processor</"
"artifactId>\n"
"                            <version>${quarkus.version}</version>\n"
"                        </path>\n"
"                    </annotationProcessorPaths>\n"
"                </configuration>\n"
"            </plugin>\n"
"            <plugin>\n"
"                <artifactId>maven-surefire-plugin</artifactId> <!--3-->\n"
"                <version>${maven.surefire.version}</version>\n"
"                <configuration>\n"
"                    <systemPropertyVariables>\n"
"                        <java.util.logging.manager>org.jboss.logmanager."
"LogManager</java.util.logging.manager>\n"
"                        <maven.home>${maven.home}</maven.home>\n"
"                    </systemPropertyVariables>\n"
"                </configuration>\n"
"            </plugin>\n"
"        </plugins>\n"
"    </build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:579
#, fuzzy
msgid ""
"Quarkus proposes facilities to test extensions via the `quarkus-junit5-"
"internal` artifact, in particular the `io.quarkus.test.QuarkusUnitTest` "
"runner which starts an application with your extension."
msgstr ""
"Quarkusは、 `quarkus-junit5-internal` "
"アーティファクトを介して拡張機能をテストするための機能、特に拡張機能を使ってアプリケーションを起動する `io.quarkus.test."
"QuarkusUnitTest` ランナーを提案しています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:580
#, fuzzy
msgid ""
"We will use http://rest-assured.io[RestAssured] (massively used in Quarkus) "
"to test our HTTP endpoint."
msgstr ""
"link:http://rest-assured."
"io[RestAssured]（Quarkusで大量に使用されている）を使用してHTTPエンドポイントをテストします。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:581
#, fuzzy
msgid ""
"In order to not fallback to JUnit 4 legacy mode you need to define a recent "
"version of `maven-surefire` plugin."
msgstr ""
"JUnit 4 のレガシーモードにフォールバックしないようにするには、 `maven-surefire` "
"プラグインの最新バージョンを定義する必要があります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:583
#, fuzzy
msgid ""
"Currently, the `create-extension` Maven Mojo does not create the test "
"structure. We'll create it ourselves:"
msgstr "現在、 `create-extension` Maven Mojoはテスト構造を作成しません。自分たちで作成します。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:587
#, no-wrap
msgid ""
"mkdir -p ./quarkus-greeting/deployment/src/test/java/org/acme/quarkus/"
"greeting/deployment\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:590
#, fuzzy
msgid ""
"To start testing your extension, create the following `org.acme.quarkus."
"greeting.deployment.GreetingTest` test class:"
msgstr ""
"拡張機能のテストを開始するには、次の `org.acme.quarkus.greeting.deployment.GreetingTest` "
"テストクラスを作成します。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:601
#, no-wrap
msgid ""
"import io.quarkus.test.QuarkusUnitTest;\n"
"import io.restassured.RestAssured;\n"
"import org.jboss.shrinkwrap.api.ShrinkWrap;\n"
"import org.jboss.shrinkwrap.api.spec.JavaArchive;\n"
"import org.junit.jupiter.api.Test;\n"
"import org.junit.jupiter.api.extension.RegisterExtension;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:603
#, no-wrap
msgid "import static org.hamcrest.Matchers.containsString;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:605
#, no-wrap
msgid "public class GreetingTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:609
#, no-wrap
msgid ""
"  @RegisterExtension\n"
"  static final QuarkusUnitTest config = new QuarkusUnitTest()\n"
"    .setArchiveProducer(() -> ShrinkWrap.create(JavaArchive.class)); // "
"<1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:614
#, no-wrap
msgid ""
"  @Test\n"
"  public void testGreeting() {\n"
"    RestAssured.when().get(\"/greeting\").then().statusCode(200)."
"body(containsString(\"Hello\")); // <2>\n"
"  }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:619
#, fuzzy
msgid ""
"We register a Junit Extension which will start a Quarkus application with "
"the Greeting extension."
msgstr "グリーティング拡張機能でQuarkusアプリを起動するJunit拡張機能を登録しています。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:620
#, fuzzy
msgid ""
"We verify the application has a `greeting` endpoint responding to a HTTP GET "
"request with a OK status (200) and a plain text body containing `Hello`"
msgstr ""
"アプリケーションが `greeting` エンドポイントから OK ステータス (200) の HTTP GET "
"要求に応答していることと、以下の内容を含むプレーンテキストボディを持っていることを確認します。 `Hello`"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:622
#, fuzzy
msgid "Time to test!"
msgstr "テストの時間だ！"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:664
#, no-wrap
msgid ""
"$ mvn clean test\n"
"[INFO] Scanning for projects...\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Reactor Build Order:\n"
"[INFO]\n"
"[INFO] Greeting Extension - Parent                                        "
"[pom]\n"
"[INFO] Greeting Extension - Runtime                                       "
"[jar]\n"
"[INFO] Greeting Extension - Deployment                                    "
"[jar]\n"
"[INFO]\n"
"...\n"
"[INFO] --- maven-surefire-plugin:3.0.0-M4:test (default-test) @ quarkus-"
"greeting-deployment ---\n"
"[INFO] \n"
"[INFO] -------------------------------------------------------\n"
"[INFO]  T E S T S\n"
"[INFO] -------------------------------------------------------\n"
"[INFO] Running org.acme.quarkus.greeting.deployment.GreetingTest\n"
"2020-04-23 13:55:44,612 INFO  [io.quarkus] (main) Quarkus {quarkus-version} "
"started in 0.395s. Listening on: http://0.0.0.0:8081\n"
"2020-04-23 13:55:44,614 INFO  [io.quarkus] (main) Profile test activated. \n"
"2020-04-23 13:55:44,614 INFO  [io.quarkus] (main) Installed features: [cdi, "
"quarkus-greeting, servlet]\n"
"2020-04-23 13:55:45,876 INFO  [io.quarkus] (main) Quarkus stopped in 0.025s\n"
"[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 3.609 "
"s - in org.acme.quarkus.greeting.deployment.GreetingTest\n"
"[INFO] \n"
"[INFO] Results:\n"
"[INFO] \n"
"[INFO] Tests run: 1, Failures: 0, Errors: 0, Skipped: 0\n"
"[INFO]\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Reactor Summary for getting-started-extension 1.0-SNAPSHOT:\n"
"[INFO]\n"
"[INFO] getting-started-extension .......................... SUCCESS [  0.076 "
"s]\n"
"[INFO] Greeting Extension - Parent ........................ SUCCESS [  0.002 "
"s]\n"
"[INFO] Greeting Extension - Runtime ....................... SUCCESS [  1.467 "
"s]\n"
"[INFO] Greeting Extension - Deployment .................... SUCCESS [  4.099 "
"s]\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] BUILD SUCCESS\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
"[INFO] Total time:  5.745 s\n"
"[INFO] Finished at: 2020-01-28T22:40:56+01:00\n"
"[INFO] ----------------------------------------------------------------------"
"--\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:667
#, fuzzy
msgid "Looks good! Congratulations you just finished your first extension."
msgstr "良さそうですね～。初めての増築を終えたばかりで、おめでとうございます。"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:668
#, no-wrap, fuzzy
msgid "Debugging your extension"
msgstr "拡張機能のデバッグ"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:672
#, fuzzy
msgid ""
"_If debugging is the process of removing bugs, then programming must be the "
"process of putting them in._ Edsger W. Dijkstra"
msgstr "_デバッグがバグを取り除く作業であるならば、プログラミングはバグを入れる作業でなければならない。_エドガー・W・ダイクストラ"

#. type: Title ====
#: upstream/_guides/building-my-first-extension.adoc:674
#, no-wrap, fuzzy
msgid "Debugging your application build"
msgstr "アプリケーションのビルドをデバッグする"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:678
#, fuzzy
msgid ""
"Since your extension deployment is made during the application build, this "
"process is triggered by your build tool.  That means if you want to debug "
"this phase you need to launch your build tool with the remote debug mode "
"switched one."
msgstr ""
"拡張機能のデプロイはアプリケーションのビルド中に行われるので、このプロセスはビルドツールによってトリガされます。つまり、このフェーズをデバッグしたい場合は、リモートデバッグモードを切り替えてビルドツールを起動する必要があります。"

#. type: Title =====
#: upstream/_guides/building-my-first-extension.adoc:679
#, no-wrap, fuzzy
msgid "Maven"
msgstr "メイヴン"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:683
#, fuzzy
msgid ""
"You can activate Maven remote debugging by using `mvnDebug`.  You can launch "
"your application with the following command line:"
msgstr ""
"`mvnDebug` を使用して、Maven リモートデバッグを有効にすることができます。以下のコマンドラインでアプリケーションを起動できます。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:687
#, no-wrap
msgid "mvnDebug clean compile quarkus:dev\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:691
#, fuzzy
msgid ""
"By default, Maven will wait for a connection on `localhost:8000`.  Now, you "
"can run your IDE `Remote` configuration to attach it to `localhost:8000`."
msgstr ""
"デフォルトでは、Mavenは、 `localhost:8000` 上の接続を待ちます。今、あなたはそれをアタッチするために、IDE `Remote` "
"の設定を実行することができます `localhost:8000`."

#. type: Title =====
#: upstream/_guides/building-my-first-extension.adoc:692
#, no-wrap, fuzzy
msgid "Gradle"
msgstr "グラドル"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:696
#, fuzzy
msgid ""
"You can activate Gradle remote debugging by using the flags `org.gradle."
"debug=true` or `org.gradle.daemon.debug=true` in daemon mode.  You can "
"launch your application with the following command line:"
msgstr ""
"Gradle のリモートデバッグは、デーモンモードでフラグ `org.gradle.debug=true` または `org.gradle.daemon."
"debug=true` を使用して有効にすることができます。以下のコマンドラインでアプリケーションを起動することができます。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:700
#, no-wrap
msgid "./gradlew quarkusDev -Dorg.gradle.daemon.debug=true\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:704
#, fuzzy
msgid ""
"By default, Gradle will wait for a connection on `localhost:5005`.  Now, you "
"can run your IDE `Remote` configuration to attach it to `localhost:5005`."
msgstr ""
"デフォルトでは、Gradleは、 `localhost:5005` 上の接続を待ちます。今、あなたはそれを `localhost:5005` "
"にアタッチするために、あなたの IDE `Remote` の設定を実行することができます。"

#. type: Title ====
#: upstream/_guides/building-my-first-extension.adoc:706
#, no-wrap, fuzzy
msgid "Debugging your extension tests"
msgstr "拡張機能テストのデバッグ"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:710
#, fuzzy
msgid ""
"We have seen together how to test your extension and sometimes things don't "
"go so well and you want to debug your tests.  Same principle here, the trick "
"is to enable the Maven Surefire remote debugging in order to attach an IDE "
"`Remote` configuration."
msgstr ""
"拡張機能をテストする方法を一緒に見てきましたが、時にはうまくいかず、テストをデバッグしたい場合もあります。ここでも同じ原理で、IDE `Remote` "
"の設定をアタッチするために Maven Surefire リモートデバッグを有効にするのがコツです。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:715
#, no-wrap
msgid "$ cd ./greeting\n"
"$ mvn clean test -Dmaven.surefire.debug\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:718
#, fuzzy
msgid "By default, Maven will wait for a connection on `localhost:5005`."
msgstr "デフォルトでは、Maven は `localhost:5005` で接続を待ちます。"

#. type: Title ===
#: upstream/_guides/building-my-first-extension.adoc:719
#, no-wrap, fuzzy
msgid "Extension publication"
msgstr "拡張出版物"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:722
#, fuzzy
msgid ""
"Now that you just finished building your first extension you should be eager "
"to use it in a Quarkus application!"
msgstr "最初の拡張機能を構築し終えたばかりなので、Quarkusアプリケーションで使いたいと思うはずです。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:724
#, no-wrap, fuzzy
msgid "*Classic Maven publication*\n"
msgstr "*古典的なメイヴンの出版*"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:727
#, fuzzy
msgid ""
"Because your extension produces traditional JARs, the easiest way to share "
"your extension is to publish it to a Maven repository.  Once published you "
"can simply declare it with your project dependencies. Let's demonstrate that "
"by creating a simple Quarkus application"
msgstr ""
"あなたの拡張機能は従来の JAR を生成するので、拡張機能を共有する最も簡単な方法は Maven "
"リポジトリに公開することです。公開したら、プロジェクトの依存関係とともに宣言するだけです。シンプルなQuarkusアプリケーションを作成してみましょう。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:735
#, no-wrap
msgid ""
"$mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"     -DprojectGroupId=org.acme \\\n"
"     -DprojectArtifactId=greeting-app \\\n"
"     -DprojectVersion=1.0-SNAPSHOT \\\n"
"     -DnoExamples\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:738
#, fuzzy
msgid ""
"`cd` into `greeting-app` and add the dependency on `quarkus-greeting` "
"extension we created above."
msgstr ""
"`cd` を `greeting-app` に入れて、上で作成した `quarkus-greeting` の拡張機能に依存関係を追加します。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:740
#, fuzzy
msgid ""
"`quarkus-greeting` extension has to be installed in the local Maven "
"repository to be usable in the application."
msgstr ""
"`quarkus-greeting` 拡張機能をアプリケーションで使用できるようにするには、ローカルの Maven "
"リポジトリにインストールする必要があります。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:754
#, no-wrap
msgid ""
"    <dependencies>\n"
"        <dependency>\n"
"            <groupId>org.acme</groupId>\n"
"            <artifactId>quarkus-greeting</artifactId>\n"
"            <version>1.0-SNAPSHOT</version>\n"
"        </dependency>\n"
"        <dependency>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-resteasy</artifactId>\n"
"        </dependency>\n"
"        <!-- the rest of the application dependencies -->\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:757
#, fuzzy
msgid ""
"Run the application and notice the `Install Features` list contains the "
"`quarkus-greeting` extension."
msgstr ""
"アプリケーションを実行して、 `Install Features` のリストに `quarkus-greeting` "
"の拡張子が含まれていることに気づきます。"

#. type: delimited block -
#: upstream/_guides/building-my-first-extension.adoc:787
#, no-wrap
msgid ""
"$ mvn clean compile quarkus:dev\n"
"[INFO] Scanning for projects...\n"
"[INFO]\n"
"[INFO] ---------------------< org.acme:code-with-quarkus >-------------------"
"--\n"
"[INFO] Building code-with-quarkus 1.0.0-SNAPSHOT\n"
"[INFO] --------------------------------[ jar ]-------------------------------"
"--\n"
"[INFO]\n"
"[INFO] --- maven-clean-plugin:2.5:clean (default-clean) @ code-with-quarkus -"
"--\n"
"[INFO] Deleting /tmp/code-with-quarkus/target\n"
"[INFO]\n"
"[INFO] --- maven-resources-plugin:2.6:resources (default-resources) @ code-"
"with-quarkus ---\n"
"[INFO] Using 'UTF-8' encoding to copy filtered resources.\n"
"[INFO] Copying 2 resources\n"
"[INFO]\n"
"[INFO] --- maven-compiler-plugin:3.8.1:compile (default-compile) @ code-with-"
"quarkus ---\n"
"[INFO] Changes detected - recompiling the module!\n"
"[INFO] Compiling 1 source file to /tmp/code-with-quarkus/target/classes\n"
"[INFO]\n"
"[INFO] --- quarkus-maven-plugin:{quarkus-version}:dev (default-cli) @ code-"
"with-quarkus ---\n"
"Listening for transport dt_socket at address: 5005\n"
"__  ____  __  _____   ___  __ ____  ______ \n"
" --/ __ \\/ / / / _ | / _ \\/ //_/ / / / __/ \n"
" -/ /_/ / /_/ / __ |/ , _/ ,< / /_/ /\\ \\   \n"
"--\\___\\_\\____/_/ |_/_/|_/_/|_|\\____/___/   \n"
"2020-04-23 14:17:36,137 INFO  [io.quarkus] (Quarkus Main Thread) greeting-"
"app 1.0-SNAPSHOT (powered by Quarkus {quarkus-version}) started in 0.985s. "
"Listening on: http://0.0.0.0:8080\n"
"2020-04-23 14:17:36,140 INFO  [io.quarkus] (Quarkus Main Thread) Profile dev "
"activated. Live Coding activated.\n"
"2020-04-23 14:17:36,140 INFO  [io.quarkus] (Quarkus Main Thread) Installed "
"features: [cdi, quarkus-greeting, resteasy, servlet]\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:792
#, fuzzy
msgid ""
"From an extension developer standpoint the Maven publication strategy is "
"very handy and fast but Quarkus wants to go one step further by also "
"ensuring a reliability of the ecosystem for the people who will use the "
"extensions.  Think about it, we all had a poor Developer Experience with an "
"unmaintained library, an incompatibility between dependencies (and we don't "
"even talk about legal issues).  That's why there is the Quarkus Platform."
msgstr ""
"拡張機能の開発者の立場からすると、Mavenの公開戦略は非常に便利で高速ですが、Quarkusは、拡張機能を使用する人々のためにエコシステムの信頼性も確保することで、さらに一歩進んでいきたいと考えています。考えてみてください。私たちは皆、メンテナンスされていないライブラリ、依存関係間の非互換性（法的な問題についても話しません）で、開発者の経験が乏しいことを経験しています。そのためにQuarkus "
"Platformがあるのです。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:794
#, no-wrap, fuzzy
msgid "*Quarkus Platform*\n"
msgstr "*Quarkusプラットフォーム*"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:796
#, fuzzy
msgid ""
"Quarkus proposes a `quarkus-universe-bom` which is a certified list of "
"extensions placed under the Quarkus Platform label. From an application "
"developer, the objectives of the platform are:"
msgstr ""
"Quarkusは、Quarkus Platformラベルの下に置かれた拡張機能の認定リストである `quarkus-universe-bom` "
"を提案しています。アプリケーション開発者からすると、このプラットフォームの目的は"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:798
#, fuzzy
msgid ""
"To guarantee a supportability of the extension (bugfix, security issues, "
"dependency upgrades)"
msgstr "拡張機能のサポート性を保証するために (バグフィックス、セキュリティ問題、依存関係のアップグレード)"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:799
#, fuzzy
msgid ""
"To ease the extension discovery through the Quarkus CLI or https://code."
"quarkus.io/"
msgstr "Quarkus CLIまたは https://code.quarkus.io/ を通じて拡張機能の発見を容易にするには"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:800
#, fuzzy
msgid "To ensure a global consistency of the extension ecosystem"
msgstr "拡張エコシステムのグローバルな整合性を確保するために"

#. type: Block title
#: upstream/_guides/building-my-first-extension.adoc:802
#, no-wrap, fuzzy
msgid "Should I publish my extension to the platform?"
msgstr "拡張機能をプラットフォームに公開すべきか？"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:807
#, fuzzy
msgid ""
"If you feel your extensions is for you or a limited group, simply publishing "
"to Maven is fine.  If the extension solves a general problem, it is very "
"handy for Quarkus users to see it on https://code.quarkus.io.  But this "
"comes with some responsibility for you, keeping it up to date with Quarkus "
"minor releases (every month or so at the moment).  When in doubt, have a "
"conversation with the community in the https://groups.google.com/forum/"
"#!forum/quarkus-dev[Quarkus Google Group]. We can make a collective decision."
""
msgstr ""
"拡張機能が自分や限定されたグループのためのものだと感じるのであれば、Mavenに公開するだけでも構いません。拡張機能が一般的な問題を解決する場合、Quarkusユーザーにとって、 "
"https://code.quarkus.io  "
"でそれを見ることができるのは非常に便利です。しかし、これには、Quarkusのマイナーリリース（現時点では1ヶ月に1回程度）に合わせて最新の状態に保つという、あなたの責任が伴います。疑問がある場合は、Quarkusの "
"link:https://groups.google.com/forum/#!forum/quarkus-"
"dev[Googleグループ]でコミュニティと会話をしてください。集団的な決定をすることができます。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:811
#, fuzzy
msgid ""
"As for now, the process to propose a new extension is not defined yet.  Your "
"best chance is to present your extension on the https://groups.google.com/"
"forum/#!forum/quarkus-dev[Quarkus Google Group] and wait for an official "
"invitation to join the Quarkus Platform."
msgstr ""
"今のところ、新しい拡張機能を提案するプロセスはまだ定義されていません。最良のチャンスは、 link:https://groups.google.com/"
"forum/#!forum/quarkus-dev[Quarkus Googleグループ]で拡張機能を提案し、Quarkus "
"Platformへの正式な招待状が届くのを待つことです。"

#. type: Title ==
#: upstream/_guides/mailer.adoc:402
#, no-wrap, fuzzy
msgid "Conclusion"
msgstr "結論"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:815
#, fuzzy
msgid ""
"Creating new extensions may appear to be an intricate task at first but once "
"you understood the Quarkus game-changer paradigm (build time vs runtime) the "
"structure of an extension makes perfectly sense."
msgstr ""
"新しい拡張機能の作成は、最初は複雑な作業に見えるかもしれませんが、Quarkusのゲームチェンジャーのパラダイム（ビルド時間とランタイム）を理解してしまえば、拡張機能の構造は完璧に理にかなったものになります。"

#. type: Plain text
#: upstream/_guides/building-my-first-extension.adoc:816
#, fuzzy
msgid ""
"As usual, along the path Quarkus simplifies things under the hood (Maven "
"Mojo, bytecode generation or testing) to make it pleasant to develop new "
"features."
msgstr ""
"いつものように、Quarkusはパスに沿って、新機能の開発を快適にするために、フードの下で物事を単純化します（Maven "
"Mojo、バイトコード生成またはテスト）。"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/microprofile-graphql.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - GraphQL"
msgstr "Quarkus - GraphQL"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:12
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can utilize the "
"**Eclipse MicroProfile GraphQL** specification through the SmallRye GraphQL "
"extension."
msgstr ""
"このガイドでは、QuarkusアプリケーションがSmallRye GraphQL拡張機能を使用して *Eclipse MicroProfile "
"GraphQL*仕様を利用する方法を説明します。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:14
#, fuzzy
msgid "As the https://www.graphql.org/[GraphQL] specification website states:"
msgstr "link:https://www.graphql.org/[GraphQLの]仕様サイトにも記載されているように"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:20
#, fuzzy
msgid ""
"GraphQL is a query language for APIs and a runtime for fulfilling those "
"queries with your existing data.  GraphQL provides a complete and "
"understandable description of the data in your API, gives clients the power "
"to ask for exactly what they need and nothing more, makes it easier to "
"evolve APIs over time, and enables powerful developer tools."
msgstr ""
"GraphQLはAPI用のクエリ言語であり、既存のデータを使ってクエリを実行するためのランタイムです。GraphQLは、API内のデータを完全かつ理解しやすい形で記述し、クライアントが必要とするものを正確に求めることができるようにします。"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:23
#, no-wrap, fuzzy
msgid ""
"**GraphQL** was originally developed by **Facebook** in 2012 and has been\n"
"an open standard since 2015.\n"
msgstr "*GraphQLは*もともと2012年に *Facebookが*開発したもので、2015年からはオープンスタンダードとなっています。"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:26
#, fuzzy
msgid ""
"GraphQL is not a replacement for REST API specification but merely an "
"alternative. Unlike REST, GraphQL API's have the ability to benefit the "
"client by:"
msgstr ""
"GraphQLはREST APIの仕様を置き換えるものではなく、単なる代替品です。RESTとは異なり、GraphQL "
"APIは以下のようにクライアントに利益をもたらす機能を持っています。"

#. type: Labeled list
#: upstream/_guides/microprofile-graphql.adoc:27
#, no-wrap, fuzzy
msgid "Preventing Over-fetching and Under-fetching"
msgstr "オーバーフェッチとアンダーフェッチの防止"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:33
#, fuzzy
msgid ""
"REST API's are server-driven fixed data responses that cannot be determined "
"by the client. Although the client does not require all the fields the "
"client must retrieve all the data hence `Over-fetching`. A client may also "
"require multiple REST API calls according to the first call (HATEOAS) to "
"retrieve all the data that is required thereby `Under-fetching`."
msgstr ""
"REST API "
"は、クライアントが決定できないサーバー主導の固定データレスポンスです。クライアントはすべてのフィールドを必要としませんが、クライアントはすべてのデータを取得しなければならないため、 "
"`Over-fetching` 。クライアントはまた、必要とされるすべてのデータを取得するために、最初の呼び出し（HATEOAS）に応じて複数のREST "
"API呼び出しを必要とする場合があります。 `Under-fetching`."

#. type: Labeled list
#: upstream/_guides/microprofile-graphql.adoc:34
#, no-wrap, fuzzy
msgid "API Evolution"
msgstr "APIの進化"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:38
#, fuzzy
msgid ""
"Since GraphQL API's returns data that are requested by the client adding "
"additional fields and capabilities to existing API will not create breaking "
"changes to existing clients."
msgstr ""
"GraphQL "
"APIはクライアントから要求されたデータを返すので、既存のAPIにフィールドや機能を追加しても、既存のクライアントに大きな変更を加えることはありません。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:17
#, fuzzy
msgid "less than 15 minutes"
msgstr "15分以内"

#. type: Title ==
#: upstream/_guides/mailer.adoc:23
#, no-wrap, fuzzy
msgid "Architecture"
msgstr "建築"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:52
#, fuzzy
msgid ""
"In this guide, we build a simple GraphQL application that exposes a GraphQL "
"API at `/graphql`."
msgstr "このガイドでは、 `/graphql` で GraphQL API を公開するシンプルな GraphQL アプリケーションを構築します。"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:54
#, fuzzy
msgid "This example was inspired by a popular GraphQL API."
msgstr "この例は、人気のある GraphQL API にインスパイアされたものです。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:88
#, no-wrap
msgid "Solution"
msgstr "ソリューション"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:93
msgid ""
"We recommend that you follow the instructions in the next sections and "
"create the application step by step.  However, you can go right to the "
"completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:95
msgid ""
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download "
"an {quickstarts-archive-url}[archive]."
msgstr ""
"Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、または {quickstarts-"
"archive-url}[archive] をダウンロードしてください。"

#. type: quote
#: upstream/_guides/microprofile-graphql.adoc:63
#, fuzzy
msgid ""
"The solution is located in the `microprofile-graphql-quickstart` "
"{quickstarts-tree-url}/microprofile-graphql-quickstart[directory]."
msgstr ""
"ソリューションは `microprofile-graphql-quickstart` {quickstarts-tree-url}/"
"microprofile-graphql-quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_guides/mailer.adoc:28
#, no-wrap, fuzzy
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:101
msgid ""
"First, we need a new project. Create a new project with the following "
"command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:76
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=microprofile-graphql-quickstart \\\n"
"    -DclassName=\"org.acme.microprofile.graphql.FilmResource\" \\\n"
"    -Dextensions=\"graphql\"\n"
"cd microprofile-graphql-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:79
#, fuzzy
msgid ""
"This command generates a Maven project, importing the `smallrye-graphql` "
"extension which is an implementation of the MicroProfile GraphQL "
"specification used in Quarkus."
msgstr ""
"このコマンドは、Quarkusで使用されているMicroProfile GraphQL仕様の実装である `smallrye-graphql` "
"拡張子をインポートして、Mavenプロジェクトを生成します。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:82
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the "
"`smallrye-graphql` extension to your project by running the following "
"command in your project base directory:"
msgstr ""
"すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、プロジェクトに "
"`smallrye-graphql` 拡張機能を追加することができます。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:86
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"graphql\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:49
#, fuzzy
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml`."

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:96
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-smallrye-graphql</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:98
#, no-wrap, fuzzy
msgid "Preparing an Application: GraphQL API"
msgstr "アプリケーションの準備GraphQL API"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:101
#, fuzzy
msgid "In this section we will start creating the GraphQL API."
msgstr "このセクションでは、GraphQL APIの作成を開始します。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:103
#, fuzzy
msgid ""
"First, create the following entities representing a film from a galaxy far "
"far away:"
msgstr "まず、遠く離れた銀河系の映画を表す次のような実体を作りなさい。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:107
#, no-wrap
msgid "package org.acme.microprofile.graphql;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:109
#, no-wrap
msgid "public class Film {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:114
#, no-wrap
msgid ""
"    private String title;\n"
"    private Integer episodeID;\n"
"    private String director;\n"
"    private LocalDate releaseDate;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:118
#, no-wrap
msgid "    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:122
#, no-wrap
msgid ""
"    public void setTitle(String title) {\n"
"        this.title = title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:126
#, no-wrap
msgid "    public Integer getEpisodeID() {\n"
"        return episodeID;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:130
#, no-wrap
msgid ""
"    public void setEpisodeID(Integer episodeID) {\n"
"        this.episodeID = episodeID;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:134
#, no-wrap
msgid "    public String getDirector() {\n"
"        return director;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:138
#, no-wrap
msgid ""
"    public void setDirector(String director) {\n"
"        this.director = director;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:142
#, no-wrap
msgid ""
"    public LocalDate getReleaseDate() {\n"
"        return releaseDate;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:146
#, no-wrap
msgid ""
"    public void setReleaseDate(LocalDate releaseDate) {\n"
"        this.releaseDate = releaseDate;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:150
#, no-wrap
msgid "public class Hero {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:158
#, no-wrap
msgid ""
"    private String name;\n"
"    private String surname;\n"
"    private Double height;\n"
"    private Integer mass;\n"
"    private Boolean darkSide;\n"
"    private LightSaber lightSaber;\n"
"    private List<Integer> episodeIds = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:162
#, no-wrap
msgid "    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:166
#, no-wrap
msgid ""
"    public void setName(String name) {\n"
"        this.name = name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:170
#, no-wrap
msgid "    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:174
#, no-wrap
msgid ""
"    public void setSurname(String surname) {\n"
"        this.surname = surname;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:178
#, no-wrap
msgid "    public Double getHeight() {\n"
"        return height;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:182
#, no-wrap
msgid ""
"    public void setHeight(Double height) {\n"
"        this.height = height;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:186
#, no-wrap
msgid "    public Integer getMass() {\n"
"        return mass;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:190
#, no-wrap
msgid ""
"    public void setMass(Integer mass) {\n"
"        this.mass = mass;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:194
#, no-wrap
msgid "    public Boolean getDarkSide() {\n"
"        return darkSide;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:198
#, no-wrap
msgid ""
"    public void setDarkSide(Boolean darkSide) {\n"
"        this.darkSide = darkSide;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:202
#, no-wrap
msgid ""
"    public LightSaber getLightSaber() {\n"
"        return lightSaber;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:206
#, no-wrap
msgid ""
"    public void setLightSaber(LightSaber lightSaber) {\n"
"        this.lightSaber = lightSaber;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:210
#, no-wrap
msgid ""
"    public List<Integer> getEpisodeIds() {\n"
"        return episodeIds;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:215
#, no-wrap
msgid ""
"    public void setEpisodeIds(List<Integer> episodeIds) {\n"
"        this.episodeIds = episodeIds;\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:219
#, no-wrap
msgid "enum LightSaber {\n"
"    RED, BLUE, GREEN\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:223
#, fuzzy
msgid ""
"The classes we have just created describe the GraphQL schema which is a set "
"of possible data (objects, fields, relationships) that a client can access."
msgstr ""
"先ほど作成したクラスは、クライアントがアクセスできる可能性のあるデータ（オブジェクト、フィールド、リレーションシップ）のセットである GraphQL "
"スキーマを記述しています。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:225
#, fuzzy
msgid ""
"Let's continue with an example CDI bean, that would work as a repository:"
msgstr "リポジトリとして動作するCDIビーンの例を見てみましょう。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:230
#, no-wrap
msgid "@ApplicationScoped\n"
"public class GalaxyService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:232
#, no-wrap
msgid "    private List<Hero> heroes = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:234
#, no-wrap
msgid "    private List<Film> films = new ArrayList<>();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:236
#, no-wrap
msgid "    public GalaxyService() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:242
#, no-wrap
msgid ""
"        Film aNewHope = new Film();\n"
"        aNewHope.setTitle(\"A New Hope\");\n"
"        aNewHope.setReleaseDate(LocalDate.of(1977, Month.MAY, 25));\n"
"        aNewHope.setEpisodeID(4);\n"
"        aNewHope.setDirector(\"George Lucas\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:248
#, no-wrap
msgid ""
"        Film theEmpireStrikesBack = new Film();\n"
"        theEmpireStrikesBack.setTitle(\"The Empire Strikes Back\");\n"
"        theEmpireStrikesBack.setReleaseDate(LocalDate.of(1980, Month.MAY, "
"21));\n"
"        theEmpireStrikesBack.setEpisodeID(5);\n"
"        theEmpireStrikesBack.setDirector(\"George Lucas\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:254
#, no-wrap
msgid ""
"        Film returnOfTheJedi = new Film();\n"
"        returnOfTheJedi.setTitle(\"Return Of The Jedi\");\n"
"        returnOfTheJedi.setReleaseDate(LocalDate.of(1983, Month.MAY, 25));\n"
"        returnOfTheJedi.setEpisodeID(6);\n"
"        returnOfTheJedi.setDirector(\"George Lucas\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:258
#, no-wrap
msgid ""
"        films.add(aNewHope);\n"
"        films.add(theEmpireStrikesBack);\n"
"        films.add(returnOfTheJedi);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:267
#, no-wrap
msgid ""
"        Hero luke = new Hero();\n"
"        luke.setName(\"Luke\");\n"
"        luke.setSurname(\"Skywalker\");\n"
"        luke.setHeight(1.7);\n"
"        luke.setMass(73);\n"
"        luke.setLightSaber(LightSaber.GREEN);\n"
"        luke.setDarkSide(false);\n"
"        luke.getEpisodeIds().addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:275
#, no-wrap
msgid ""
"        Hero leia = new Hero();\n"
"        leia.setName(\"Leia\");\n"
"        leia.setSurname(\"Organa\");\n"
"        leia.setHeight(1.5);\n"
"        leia.setMass(51);\n"
"        leia.setDarkSide(false);\n"
"        leia.getEpisodeIds().addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:285
#, no-wrap
msgid ""
"        Hero vader = new Hero();\n"
"        vader.setName(\"Darth\");\n"
"        vader.setSurname(\"Vader\");\n"
"        vader.setHeight(1.9);\n"
"        vader.setMass(89);\n"
"        vader.setDarkSide(true);\n"
"        vader.setLightSaber(LightSaber.RED);\n"
"        vader.getEpisodeIds().addAll(Arrays.asList(4, 5, 6));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:289
#, no-wrap
msgid ""
"        heroes.add(luke);\n"
"        heroes.add(leia);\n"
"        heroes.add(vader);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:291
#, no-wrap
msgid "    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:295
#, no-wrap
msgid "    public List<Film> getAllFilms() {\n"
"        return films;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:299
#, no-wrap
msgid "    public Film getFilm(int id) {\n"
"        return films.get(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:305
#, no-wrap
msgid ""
"    public List<Hero> getHeroesByFilm(Film film) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.getEpisodeIds().contains(film."
"getEpisodeID()))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:309
#, no-wrap
msgid "    public void addHero(Hero hero) {\n"
"        heroes.add(hero);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:313
#, no-wrap
msgid ""
"    public Hero deleteHero(int id) {\n"
"        return heroes.remove(id);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:320
#, no-wrap
msgid ""
"    public List<Hero> getHeroesBySurname(String surname) {\n"
"        return heroes.stream()\n"
"                .filter(hero -> hero.getSurname().equals(surname))\n"
"                .collect(Collectors.toList());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:323
#, fuzzy
msgid "Now, let's create our first GraphQL API."
msgstr "では、最初の GraphQL API を作成してみましょう。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:325
#, fuzzy
msgid ""
"Edit the `org.acme.microprofile.graphql.FilmResource` class as following:"
msgstr "`org.acme.microprofile.graphql.FilmResource` クラスを以下のように編集します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:330
#, no-wrap
msgid "@GraphQLApi // <1>\n"
"public class FilmResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:333
#, no-wrap
msgid "    @Inject\n"
"    GalaxyService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:340
#, no-wrap
msgid ""
"    @Query(\"allFilms\") // <2>\n"
"    @Description(\"Get all Films from a galaxy far far away\") // <3>\n"
"    public List<Film> getAllFilms() {\n"
"        return service.getAllFilms();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:343
#, fuzzy
msgid ""
"`@GraphQLApi` annotation indicates that the CDI bean will be a GraphQL "
"endpoint"
msgstr "`@GraphQLApi` アノテーションは、CDI BeanがGraphQLエンドポイントになることを示します。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:344
#, fuzzy
msgid ""
"`@Query` annotation defines that this method will be queryable with the name "
"`allFilms`"
msgstr "`@Query` アノテーションは、このメソッドが名前を付けてクエリ可能であることを定義しています。 `allFilms`"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:345
#, fuzzy
msgid "Documentation of the queryable method"
msgstr "クエリー可能なメソッドのドキュメント"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:348
#, fuzzy
msgid ""
"The value of the `@Query` annotation is optional and would implicitly be "
"defaulted to the method name if absent."
msgstr "`@Query` アノテーションの値はオプションで、これがない場合は暗黙のうちにメソッド名がデフォルトになります。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:350
#, fuzzy
msgid ""
"This way we have created our first queryable API which we will later expand."
msgstr "このようにして、最初のクエリー可能なAPIを作成しました。"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:351
#, no-wrap, fuzzy
msgid "Launch"
msgstr "打ち上げ"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:354
#, fuzzy
msgid "Launch the quarkus app:"
msgstr "quarkusアプリを起動します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:357
#, no-wrap
msgid "./mvnw compile quarkus:dev\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:359
#, no-wrap, fuzzy
msgid "Introspect"
msgstr "内観"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:362
#, fuzzy
msgid ""
"The full schema of the GraphQL API can be retrieved by calling the following:"
""
msgstr "GraphQL APIの完全なスキーマは、以下のように呼び出すことで取得できます。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:366
#, no-wrap
msgid "curl http://localhost:8080/graphql/schema.graphql\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:369
#, fuzzy
msgid "The server will return the complete schema of the GraphQL API."
msgstr "サーバーはGraphQL APIの完全なスキーマを返します。"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:370
#, no-wrap, fuzzy
msgid "GraphiQL UI"
msgstr "グラフィQL UI"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:373
#, fuzzy
msgid "Experimental - not included in the MicroProfile specification"
msgstr "実験 - MicroProfile仕様には含まれていません。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:375
#, fuzzy
msgid ""
"GraphiQL UI is a great tool permitting easy interaction with your GraphQL "
"APIs."
msgstr "GraphiQL UIは、GraphQL APIを簡単に操作できる素晴らしいツールです。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:378
#, fuzzy
msgid ""
"The Quarkus `smallrye-graphql` extension ships with `GraphiQL` and enables "
"it by default in `dev` and `test` modes, but it can also be explicitly "
"configured for `production` mode as well."
msgstr ""
"Quarkus `smallrye-graphql` 拡張機能は `GraphiQL` と同梱されており、デフォルトでは `dev` と `test` "
"モードで有効になっていますが、 `production` モードでも明示的に設定することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:380
#, fuzzy
msgid "GraphiQL can be accessed from http://localhost:8080/graphql-ui/ ."
msgstr "GraphiQL は http://localhost:8080/graphql-ui/ からアクセスできます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:382
#, fuzzy
msgid "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"
msgstr "image:graphql-ui-screenshot01.png[alt=GraphQL UI]"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:383
#, no-wrap, fuzzy
msgid "Query the GraphQL API"
msgstr "GraphQL API に問い合わせる"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:386
#, fuzzy
msgid "Now visit the GraphiQL page that has been deployed in `dev` mode."
msgstr "ここで、 `dev` モードでデプロイされた GraphiQL のページにアクセスします。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:388
#, fuzzy
msgid "Enter the following query to GraphiQL and press the `play` button:"
msgstr "GraphiQLに以下のクエリを入力し、 `play` ボタンを押します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:399
#, no-wrap
msgid ""
"query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:405
#, fuzzy
msgid ""
"Since our query contains all the fields in the `Film` class we will retrieve "
"all the fields in our response. Since GraphQL API responses are client "
"determined, the client can choose which fields it will require."
msgstr ""
"クエリには `Film` クラスのすべてのフィールドが含まれているので、レスポンスに含まれるすべてのフィールドを取得します。GraphQL API "
"のレスポンスはクライアントが決定するので、クライアントはどのフィールドを必要とするかを選択することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:409
#, fuzzy
msgid ""
"Let's assume that our client only requires `title` and `releaseDate` making "
"the previous call to the API `Over-fetching` of unnecessary data."
msgstr ""
"私たちのクライアントは `title` と `releaseDate` のみを必要とし、API `Over-fetching` "
"への前回の呼び出しで不要なデータを作っていると仮定してみましょう。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:411
#, fuzzy
msgid "Enter the following query into GraphiQL and hit the `play` button:"
msgstr "GraphiQLに以下のクエリを入力し、 `play` ボタンを押します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:420
#, no-wrap
msgid "query allFilms {\n"
"  allFilms {\n"
"    title\n"
"    releaseDate\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:424
#, fuzzy
msgid ""
"Notice in the response we have only retrieved the required fields.  "
"Therefore, we have prevented `Over-fetching`."
msgstr "レスポンスでは、必須フィールドのみを取得していることに注意してください。そのため、 `Over-fetching`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:427
#, fuzzy
msgid ""
"Let's continue to expand our GraphQL API by adding the following to the "
"`FilmResource` class."
msgstr "引き続き、 `FilmResource` クラスに以下を追加して GraphQL API を拡張してみましょう。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:435
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Film getFilm(@Name(\"filmId\") int id) {\n"
"        return service.getFilm(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:440
#, fuzzy
msgid ""
"Notice how we have excluded the value in the `@Query` annotation.  "
"Therefore, the name of the query is implicitly set as the method name "
"excluding the `get`."
msgstr "`@Query` アノテーションの値を除外したことに注目してください。したがって、クエリの名前は暗黙のうちに `get`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:442
#, fuzzy
msgid "This query will allow the client to retrieve the film by id."
msgstr "このクエリは、クライアントがIDでフィルムを検索することを可能にします。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:444
#, fuzzy
msgid "Enter the following into `GraphiQL` and make a request."
msgstr "`GraphiQL` に以下を入力してリクエストしてください。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:455
#, no-wrap
msgid ""
"query getFilm {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:460
#, fuzzy
msgid ""
"The `film` query method requested fields can be determined as such in our "
"previous example. This way we can retrieve individual film information."
msgstr ""
"`film` "
"クエリメソッドで要求されたフィールドは、先ほどの例のように決定することができます。このようにして、個々のフィルム情報を取得することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:464
#, fuzzy
msgid ""
"However, say our client requires both films with filmId `0` and `1`.  In a "
"REST API the client would have to make two calls to the API.  Therefore, the "
"client would be `Under-fetching`."
msgstr ""
"しかし、クライアントが filmId `0` と `1` の両方のフィルムを要求しているとします。REST "
"APIでは、クライアントはAPIへの呼び出しを2回行う必要があります。したがって、クライアントは `Under-fetching`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:466
#, fuzzy
msgid "In GraphQL it is possible to make multiple queries at once."
msgstr "GraphQLでは、一度に複数のクエリを作成することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:468
#, fuzzy
msgid "Enter the following into GraphiQL to retrieve two films:"
msgstr "GraphiQLに以下のように入力して、2つのフィルムを取得します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:485 upstream/_guides/microprofile-graphql.adoc:592
#, no-wrap
msgid ""
"query getFilms {\n"
"  film0: film(filmId: 0) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"  film1: film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:488
#, fuzzy
msgid ""
"This enabled the client to fetch the required data in a single request."
msgstr "これにより、クライアントは1回のリクエストで必要なデータを取得できるようになりました。"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:489
#, no-wrap, fuzzy
msgid "Expanding the API"
msgstr "APIの拡張"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:493
#, fuzzy
msgid ""
"Until now, we have created a GraphQL API to retrieve film data.  We now want "
"to enable the clients to retrieve the `Hero` data of the `Film`."
msgstr ""
"今までは、映画のデータを取得するためのGraphQL APIを作成していました。今度はクライアントが `Hero` のデータを取得できるようにしたい "
"`Film`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:495 upstream/_guides/microprofile-graphql.adoc:601
#: upstream/_guides/microprofile-graphql.adoc:664
#, fuzzy
msgid "Add the following to our `FilmResource` class:"
msgstr "`FilmResource` クラスに以下を追加します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:501
#, no-wrap
msgid ""
"    public List<Hero> heroes(@Source Film film) { // <1>\n"
"        return service.getHeroesByFilm(film);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:504
#, fuzzy
msgid ""
"Enable `List<Hero>` data to be added to queries that respond with `Film`"
msgstr "で応答するクエリに `List&amp;lt;Hero&amp;gt;` データを追加できるようにします。 `Film`"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:508
#, fuzzy
msgid ""
"By adding this method we have effectively changed the schema of the GraphQL "
"API.  Although the schema has changed the previous queries will still work.  "
"Since we only expanded the API to be able to retrieve the `Hero` data of the "
"`Film`."
msgstr ""
"このメソッドを追加することで、実質的に GraphQL API "
"のスキーマを変更しました。スキーマが変更されても、以前のクエリはまだ動作します。私たちは、 `Hero` のデータを取得できるように API "
"を拡張しただけなので、 `Film`."

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:510
#, fuzzy
msgid "Enter the following into GraphiQL to retrieve the film and hero data."
msgstr "GraphiQLに以下のように入力して、映画やヒーローのデータを取得します。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:528
#, no-wrap
msgid ""
"query getFilmHeroes {\n"
"  film(filmId: 1) {\n"
"    title\n"
"    director\n"
"    releaseDate\n"
"    episodeID\n"
"    heroes {\n"
"      name\n"
"      height\n"
"      mass\n"
"      darkSide\n"
"      lightSaber\n"
"    }\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:531
#, fuzzy
msgid "The response now includes the heroes of the film."
msgstr "今の反応は、この映画の主人公たちも含めて。"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:532
#, no-wrap, fuzzy
msgid "Batching"
msgstr "バッチ処理"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:536
#, fuzzy
msgid ""
"When you are exposing a `Collection` return like our `getAllFilms`, you "
"might want to use the batch form of the above, to more efficiently fetch the "
"heroes:"
msgstr ""
"`getAllFilms` のように `Collection` "
"のリターンを公開している場合、より効率的にヒーローを取得するために、上記のバッチ形式を使用した方が良いかもしれません。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:542
#, no-wrap
msgid ""
"    public List<List<Hero>> heroes(@Source List<Film> films) { // <1>\n"
"        // Here fetch all hero lists\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:545
#, fuzzy
msgid ""
"Here receive the films as a batch, allowing you to fetch the corresponding "
"heroes."
msgstr "ここでは、対応するヒーローを取得することができ、バッチとしてフィルムを受信します。"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:546
#, no-wrap, fuzzy
msgid "Reactive"
msgstr "反応性"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:549
#, fuzzy
msgid ""
"Queries can be made reactive by using `Uni`, or `CompletionStage` as a "
"return type, for example:"
msgstr ""
"クエリは、例えば `Uni` や `CompletionStage` をリターンタイプとして使用することで、リアクティブにすることができます。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:557
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public Uni<Film> getFilm(@Name(\"filmId\") int id) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:560
#, fuzzy
msgid ""
"Due to the underlying library, graphql-java, `Uni` is creating a "
"`CompletionStage` under the hood."
msgstr ""
"基盤となるライブラリであるgraphql-javaのせいで、 `Uni` 、 `CompletionStage` 、アンダーフードを作成しています。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:562
#, fuzzy
msgid "Or you can use `CompletionStage`:"
msgstr "または、 `CompletionStage`."

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:570
#, no-wrap
msgid ""
"    @Query\n"
"    @Description(\"Get a Films from a galaxy far far away\")\n"
"    public CompletionStage<Film> getFilm(@Name(\"filmId\") int id) {\n"
"        // ...\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:573
#, fuzzy
msgid ""
"Using `Uni` or `CompletionStage` means that when a request contains more "
"than one query, they will be executed concurrently."
msgstr ""
"`Uni` や `CompletionStage` "
"を使うということは、リクエストに複数のクエリが含まれている場合、それらが同時に実行されることを意味します。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:575
#, fuzzy
msgid ""
"For instance, the query below will fetch `film0` and `film1` concurrently:"
msgstr "例えば、以下のクエリは `film0` と `film1` を同時に取得します。"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:594
#, no-wrap, fuzzy
msgid "Mutations"
msgstr "変異"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:597
#, fuzzy
msgid "Mutations are used when data is created, updated or deleted."
msgstr "突然変異は、データの作成、更新、削除の際に使用されます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:599
#, fuzzy
msgid "Let's now add the ability to add and delete heroes to our GraphQL API."
msgstr "それでは、GraphQL APIにヒーローを追加・削除する機能を追加してみましょう。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:609
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero createHero(Hero hero) {\n"
"        service.addHero(hero);\n"
"        return hero;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:614
#, no-wrap
msgid ""
"    @Mutation\n"
"    public Hero deleteHero(int id) {\n"
"        return service.deleteHero(id);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:617
#, fuzzy
msgid "Enter the following into `GraphiQL` to insert a `Hero`:"
msgstr "`GraphiQL` に以下のように入力すると、 `Hero`."

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:635
#, no-wrap
msgid ""
"mutation addHero {\n"
"  createHero(hero: {\n"
"      name: \"Han\",\n"
"      surname: \"Solo\"\n"
"      height: 1.85\n"
"      mass: 80\n"
"      darkSide: false\n"
"      episodeIds: [4, 5, 6]\n"
"  \t}\n"
"  )\n"
"  {\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:638
#, fuzzy
msgid "By using this mutation we have created a `Hero` entity in our service."
msgstr "この突然変異を使用して、私たちのサービスに `Hero` エンティティを作成しました。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:643
#, fuzzy
msgid ""
"Notice how in the response we have retrieved the `name` and `surname` of the "
"created Hero. This is because we selected to retrieve these fields in the "
"response within the `{ }` in the mutation query.  This can easily be a "
"server side generated field that the client may require."
msgstr ""
"レスポンスでは、作成したヒーローの `name` と `surname` を取得していることに注目してください。これは、突然変異クエリの `{ }` "
"でこれらのフィールドを取得するように選択したためです。これは、クライアントが必要とするサーバー側のフィールドを簡単に生成することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:645
#, fuzzy
msgid "Let's now try deleting an entry:"
msgstr "それでは、エントリーを削除してみましょう。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:653
#, no-wrap
msgid "mutation DeleteHero {\n"
"  deleteHero(id :3){\n"
"    name\n"
"    surname\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:657
#, fuzzy
msgid ""
"Similar to the `createHero` mutation method we also retrieve the `name` and "
"`surname` of the hero we have deleted which is defined in `{ }`."
msgstr "`createHero` `{ }` 突然変異法と同様に、削除したヒーローの と も取得します。 `name` `surname`"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:658
#, no-wrap, fuzzy
msgid "Creating Queries by fields"
msgstr "フィールドによるクエリの作成"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:662
#, fuzzy
msgid ""
"Queries can also be done on individual fields. For example, let's create a "
"method to query heroes by their last name."
msgstr "クエリは、個々のフィールドに対しても行うことができます。例えば、ヒーローの姓名判断でクエリを行うメソッドを作成してみましょう。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:671
#, no-wrap
msgid ""
"    @Query\n"
"    public List<Hero> getHeroesWithSurname(@DefaultValue(\"Skywalker\") "
"String surname) {\n"
"        return service.getHeroesBySurname(surname);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:675
#, fuzzy
msgid ""
"By using the `@DefaultValue` annotation we have determined that the surname "
"value will be `Skywalker` when the parameter is not provided."
msgstr ""
"`@DefaultValue` アノテーションを使用することで、パラメータが提供されていない場合、苗字の値は `Skywalker` "
"になると判断しています。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:677
#, fuzzy
msgid "Test the following queries with GraphiQL:"
msgstr "以下のクエリをGraphiQLでテストします。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:694
#, no-wrap
msgid ""
"query heroWithDefaultSurname {\n"
"  heroesWithSurname{\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
"query heroWithSurnames {\n"
"  heroesWithSurname(surname: \"Vader\") {\n"
"    name\n"
"    surname\n"
"    lightSaber\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:696
#, no-wrap, fuzzy
msgid "Context"
msgstr "文脈"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:699
#, fuzzy
msgid ""
"You can get information about the GraphQL request anywhere in your code, "
"using this experimental, SmallRye specific feature:"
msgstr "この実験的な SmallRye 特有の機能を使えば、コードのどこにいても GraphQL リクエストに関する情報を得ることができます。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:704
#, no-wrap
msgid "@Inject\n"
"Context context;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:707
#, fuzzy
msgid "The context object allows you to get:"
msgstr "コンテキストオブジェクトで取得できます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:709
#, fuzzy
msgid "the original request (Query/Mutation)"
msgstr "元のリクエスト (クエリ/ミューテーション)"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:710
#, fuzzy
msgid "the arguments"
msgstr "引数"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:711
#, fuzzy
msgid "the path"
msgstr "道筋"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:712
#, fuzzy
msgid "the selected fields"
msgstr "選択されたフィールド"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:713
#, fuzzy
msgid "any variables"
msgstr "任意の変数"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:715
#, fuzzy
msgid "This allows you to optimize the downstream queries to the datastore."
msgstr "これにより、データストアへのダウンストリームクエリを最適化することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:717
#, fuzzy
msgid ""
"See the https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/"
"smallrye/graphql/api/Context.html[JavaDoc] for more details."
msgstr ""
"詳細は link:https://javadoc.io/doc/io.smallrye/smallrye-graphql-api/latest/io/"
"smallrye/graphql/api/Context.html[JavaDoc]を参照してください。"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:718
#, no-wrap, fuzzy
msgid "GraphQL-Java"
msgstr "グラフQL-Java"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:721
#, fuzzy
msgid ""
"This context object also allows you to fall down to the underlying https://"
"www.graphql-java.com/[graphql-java] features by using the leaky abstraction:"
msgstr ""
"このコンテキストオブジェクトはまた、リーキー抽象化を使用して、基礎となる link:https://www.graphql-java.com/"
"[graphql-javaの]機能にフォールダウンすることを可能にします。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:725
#, no-wrap
msgid ""
"DataFetchingEnvironment dfe = context.unwrap(DataFetchingEnvironment."
"class);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:728
#, fuzzy
msgid ""
"You can also get access to the underlying `graphql-java` during schema "
"generation, to add your own features directly:"
msgstr "また、スキーマの生成中に、スキーマの基礎となる `graphql-java` にアクセスして、独自の機能を直接追加することもできます。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:732
#, no-wrap
msgid ""
"public GraphQLSchema.Builder addMyOwnEnum(@Observes GraphQLSchema.Builder "
"builder) {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:739
#, no-wrap
msgid ""
"    // Here add your own features directly, example adding an Enum\n"
"    GraphQLEnumType myOwnEnum = GraphQLEnumType.newEnum()\n"
"            .name(\"SomeEnum\")\n"
"            .description(\"Adding some enum type\")\n"
"            .value(\"value1\")\n"
"            .value(\"value2\").build();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:742
#, no-wrap
msgid "    return builder.additionalType(myOwnEnum);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:745
#, fuzzy
msgid "By using the `@Observer` you can add anything to the Schema builder."
msgstr "`@Observer` を使用することで、スキーマビルダーに何でも追加することができます。"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:746
#, no-wrap, fuzzy
msgid "Map to Scalar"
msgstr "スカラーへの地図"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:750
#, fuzzy
msgid ""
"Another SmallRye specific experimental feature, allows you to map an "
"existing scalar (that is mapped by the implementation to a certain Java "
"type) to another type, or to map complex object, that would typically create "
"a `Type` or `Input` in GraphQL, to an existing scalar."
msgstr ""
"もう一つのSmallRye特有の実験的な機能として、既存のスカラ（実装によって特定のJava型にマップされている）を別の型にマップしたり、複雑なオブジェクトをマップしたりすることができます（通常はGraphQLで "
"`Type` や `Input` を作成します）。"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:751
#, no-wrap, fuzzy
msgid "Mapping an existing Scalar to another type:"
msgstr "既存のスカラを別のタイプにマッピングします。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:756
#, no-wrap
msgid "public class Movie {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:759
#, no-wrap
msgid "    @ToScalar(Scalar.Int.class)\n"
"    Long idLongThatShouldChangeToInt;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:762 upstream/_guides/microprofile-graphql.adoc:777
#, no-wrap
msgid "    // ....\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:765
#, fuzzy
msgid ""
"Above will map the `Long` java type to an `Int` Scalar type, rather than the "
"https://download.eclipse.org/microprofile/microprofile-graphql-1.0/"
"microprofile-graphql.html#scalars[default] `BigInteger`."
msgstr ""
"上記の例では、 `Long` java 型を link:https://download.eclipse.org/microprofile/"
"microprofile-graphql-1.0/microprofile-graphql.html#scalars[デフォルトの] "
"`BigInteger`.NET Framework 型ではなく `Int` Scalar 型にマップします。"

#. type: Title ===
#: upstream/_guides/microprofile-graphql.adoc:766
#, no-wrap, fuzzy
msgid "Mapping a complex object to a Scalar type:"
msgstr "複雑なオブジェクトをスカラー型にマッピングします。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:771
#, no-wrap
msgid "public class Person {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:774
#, no-wrap
msgid "    @ToScalar(Scalar.String.class)\n"
"    Phone phone;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:780
#, fuzzy
msgid ""
"This will, rather than creating a `Type` or `Input` in GraphQL, map to a "
"String scalar."
msgstr "これにより、GraphQLで `Type` や `Input` を作成するのではなく、Stringスカラーにマッピングされます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:784
#, fuzzy
msgid ""
"To be able to do the above, the `Phone` object needs to have a constructor "
"that takes a String (or `Int` / `Date` / etc.), or have a setter method for "
"the String (or `Int` / `Date` / etc.), or have a `fromString` (or `fromInt` /"
" `fromDate` - depending on the Scalar type) static method."
msgstr ""
"上記を行うためには、 `Phone` オブジェクトが String (または `Int` / `Date` / など) "
"を受け取るコンストラクタを持つか、String (または `Int` / `Date` / など) のセッターメソッドを持つか、 "
"`fromString` (または `fromInt` / `fromDate` - Scalar の型によって異なります) "
"のスタティックメソッドを持つ必要があります。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:786
#, fuzzy
msgid "For example:"
msgstr "例えば"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:790
#, no-wrap
msgid "public class Phone {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:792
#, no-wrap
msgid "    private String number;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:794
#, no-wrap
msgid "    // Getters and setters....\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:801
#, no-wrap
msgid ""
"    public static Phone fromString(String number) {\n"
"        Phone phone = new Phone();\n"
"        phone.setNumber(number);\n"
"        return phone;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:804
#, fuzzy
msgid ""
"See more about the `@ToScalar` feature in the https://javadoc.io/static/io."
"smallrye/smallrye-graphql-api/1.0.6/index.html?io/smallrye/graphql/api/"
"ToScalar.html[JavaDoc]."
msgstr ""
"link:https://javadoc.io/static/io.smallrye/smallrye-graphql-api/1.0.6/index."
"html?io/smallrye/graphql/api/ToScalar.html[JavaDoc]の「 `@ToScalar` "
"」機能については、こちらをご覧ください。"

#. type: Title ==
#: upstream/_guides/microprofile-graphql.adoc:805
#, no-wrap, fuzzy
msgid "Error code"
msgstr "エラーコード"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:808
#, fuzzy
msgid ""
"You can add an error code on the error output in the GraphQL response by "
"using the (SmallRye specific) `@ErrorCode`:"
msgstr "(SmallRye特有の) `@ErrorCode`.GraphQLレスポンスのエラー出力にエラーコードを追加することができます。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:815
#, no-wrap
msgid ""
"@ErrorCode(\"some-business-error-code\")\n"
"public class SomeBusinessException extends RuntimeException {\n"
"    // ...\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:818
#, fuzzy
msgid ""
"When `SomeBusinessException` occurs, the error output will contain the Error "
"code:"
msgstr "`SomeBusinessException` が発生した場合、エラー出力にはエラーコードが含まれます。"

#. type: delimited block -
#: upstream/_guides/microprofile-graphql.adoc:845
#, no-wrap
msgid ""
"{\n"
"    \"errors\": [\n"
"        {\n"
"            \"message\": \"Unexpected failure in the system. Jarvis is "
"working to fix it.\",\n"
"            \"locations\": [\n"
"                {\n"
"                    \"line\": 2,\n"
"                    \"column\": 3\n"
"                }\n"
"            ],\n"
"            \"path\": [\n"
"                \"annotatedCustomBusinessException\"\n"
"            ],\n"
"            \"extensions\": {\n"
"                \"exception\": \"io.smallrye.graphql.test.apps.error.api."
"ErrorApi$AnnotatedCustomBusinessException\",\n"
"                \"classification\": \"DataFetchingException\",\n"
"                \"code\": \"some-business-error-code\" <1>\n"
"            }\n"
"        }\n"
"    ],\n"
"    \"data\": {\n"
"        ...\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:848
#, fuzzy
msgid "The error code"
msgstr "エラーコード"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:853
#, fuzzy
msgid ""
"MicroProfile GraphQL enables clients to retrieve the exact data that is "
"required preventing `Over-fetching` and `Under-fetching`."
msgstr ""
"MicroProfile GraphQLを使用すると、クライアントは、 `Over-fetching` と `Under-fetching` "
"を防ぐために必要なデータを正確に取得することができます。"

#. type: Plain text
#: upstream/_guides/microprofile-graphql.adoc:856
#, fuzzy
msgid ""
"The GraphQL API can be expanded without breaking previous queries enabling "
"easy API `evolution`."
msgstr ""
"GraphQL API は、以前のクエリを壊すことなく拡張することができ、簡単に API を利用することができます `evolution`."

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:272
#, no-wrap
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/mailer.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Sending emails"
msgstr "Quarkus - メールの送信"

#. type: Plain text
#: upstream/_guides/mailer.adoc:11
#, fuzzy
msgid ""
"This guide demonstrates how your Quarkus application can send emails using "
"an SMTP server."
msgstr "このガイドでは、QuarkusアプリケーションがSMTPサーバーを使用して電子メールを送信する方法を説明します。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:18
#, fuzzy
msgid "The SMTP hostname, port and credentials, and an email address"
msgstr "SMTPホスト名、ポート、資格情報、および電子メール アドレス。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:22
#, fuzzy
msgid "GraalVM installed if you want to run in native mode."
msgstr "ネイティブモードで動作させたい場合は、GraalVMをインストールします。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:27
#, fuzzy
msgid ""
"In this guide, we are going to see how you can send emails from a Quarkus "
"application.  It covers simple emails, attachments, inlined attachments, the "
"reactive and imperative APIs..."
msgstr ""
"このガイドでは、Quarkusアプリケーションからメールを送信する方法を見ていきます。シンプルな電子メール、添付ファイル、インラインの添付ファイル、反応型と命令型のAPIをカバーしています。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:31
#, fuzzy
msgid "Create a new project with the following command:"
msgstr "以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:39
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=sending-email-quickstart \\\n"
"    -Dextensions=\"mailer\"\n"
"cd sending-email-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:42
#, fuzzy
msgid "If you already have an existing project, add the `mailer` extension:"
msgstr "既存のプロジェクトがある場合は、 `mailer` の拡張子を追加してください。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:46
#, no-wrap
msgid "./mvnw quarkus:add-extensions -Dextensions=\"mailer\"\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:56
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-mailer</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mailer.adoc:58
#, no-wrap, fuzzy
msgid "Configuring the mailer"
msgstr "メーラーの設定"

#. type: Plain text
#: upstream/_guides/mailer.adoc:62
#, fuzzy
msgid ""
"The Quarkus mailer is using SMTP. In the `src/main/resources/application."
"properties` file, you need to configure the host, port, username, password "
"as well as the other configuration aspect.  Note that the password can also "
"be configured using system properties and environment variables."
msgstr ""
"QuarkusのメーラーはSMTPを使用しています。 `src/main/resources/application.properties` "
"ファイルでは、ホスト、ポート、ユーザー名、パスワードだけでなく、他の設定面も設定する必要があります。パスワードは、システムのプロパティや環境変数を使って設定することもできるので注意してください。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:64
#, fuzzy
msgid "Here is an example using _sendgrid_:"
msgstr "ここでは _sendgridを_使用した例を示します。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:74
#, no-wrap
msgid ""
"quarkus.mailer.from=test@quarkus.io\n"
"quarkus.mailer.host=smtp.sendgrid.net\n"
"quarkus.mailer.port=465\n"
"quarkus.mailer.ssl=true\n"
"quarkus.mailer.username=....\n"
"quarkus.mailer.password=....\n"
"quarkus.mailer.mock=false\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mailer.adoc:82
#, fuzzy
msgid ""
"It is recommended to encrypt any sensitive data, such as the `quarkus.mailer."
"password`.  One approach is to save the value into a secure store like "
"HashiCorp Vault, and refer to it from the configuration.  Assuming for "
"instance that Vault contains key `mail-password` at path `myapps/myapp/"
"myconfig`, then the mailer extension can be simply configured as:"
msgstr ""
"`quarkus.mailer.password` "
"のようなセンシティブなデータは暗号化しておくことをお勧めします。一つの方法としては、HashiCorp Vault "
"のような安全なストアに値を保存し、設定から参照するという方法があります。例えば、Vault がパス `myapps/myapp/myconfig` "
"にキー `mail-password` を含んでいると仮定すると、メーラーの拡張子は単純に次のように設定することができます。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:88
#, no-wrap
msgid ""
"...\n"
"# path within the kv secret engine where is located the application "
"sensitive configuration\n"
"quarkus.vault.secret-config-kv-path=myapps/myapp/myconfig\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:91
#, no-wrap
msgid "...\n"
"quarkus.mailer.password=${mail-password}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:94
#, fuzzy
msgid ""
"Please note that the password value is evaluated only once, at startup time. "
"If `mail-password` was changed in Vault, the only way to get the new value "
"would be to restart the application."
msgstr ""
"パスワードの値は、起動時に一度だけ評価されますのでご注意ください。Vault で `mail-password` "
"が変更された場合、新しい値を取得するにはアプリケーションを再起動するしかありません。"

#. type: delimited block =
#: upstream/_guides/mailer.adoc:98
#, fuzzy
msgid ""
"For more information about the Mailer extension configuration please refer "
"to the <<configuration-reference, Configuration Reference>>."
msgstr "メーラー拡張設定の詳細については、 link:#configuration-reference[設定リファレンスを]参照してください。"

#. type: Title ==
#: upstream/_guides/mailer.adoc:99
#, no-wrap, fuzzy
msgid "Sending simple emails"
msgstr "簡単なメールの送信"

#. type: delimited block =
#: upstream/_guides/mailer.adoc:102
#, fuzzy
msgid ""
"In a JAX-RS resource, or in a bean, you can inject the mailer as follows:"
msgstr "JAX-RSリソース内、またはビーン内では、以下のようにメーラーを注入することができます。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:107
#, no-wrap
msgid "@Inject\n"
"Mailer mailer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:110
#, no-wrap
msgid "@Inject\n"
"ReactiveMailer reactiveMailer;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:113
#, fuzzy
msgid "There are 2 APIs:"
msgstr "APIは2つあります。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:115
#, fuzzy
msgid ""
"`io.quarkus.mailer.Mailer` provides the imperative (blocking and "
"synchronous) API;"
msgstr "`io.quarkus.mailer.Mailer` は、必須（ブロッキングと同期）APIを提供しています。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:116
#, fuzzy
msgid ""
"`io.quarkus.mailer.reactive.ReactiveMailer` provides the reactive (non-"
"blocking and asynchronous) API"
msgstr ""
"`io.quarkus.mailer.reactive.ReactiveMailer` は反応的な (ノンブロッキングで非同期の) API "
"を提供しています。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:118
#, fuzzy
msgid ""
"The two APIs are equivalent feature-wise. Actually the `Mailer` "
"implementation is built on top of the `ReactiveMailer` implementation."
msgstr "2つのAPIは機能的には同等です。実際には `Mailer` の実装は `ReactiveMailer` の実装の上に構築されています。"

#. type: Block title
#: upstream/_guides/mailer.adoc:120
#, no-wrap, fuzzy
msgid "Deprecation"
msgstr "非推奨"

#. type: delimited block =
#: upstream/_guides/mailer.adoc:123
#, fuzzy
msgid ""
"`io.quarkus.mailer.ReactiveMailer` is deprecated in favor of `io.quarkus."
"mailer.reactive.ReactiveMailer`."
msgstr ""
"`io.quarkus.mailer.ReactiveMailer` は `io.quarkus.mailer.reactive."
"ReactiveMailer` に代わって非推奨となりました。"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:137
#, no-wrap, fuzzy
msgid "Mutiny"
msgstr "反乱"

#. type: delimited block =
#: upstream/_guides/mailer.adoc:129
#, fuzzy
msgid ""
"The reactive mailer uses Mutiny reactive types, if you're not familiar with "
"them, read the link:getting-started-reactive#mutiny[Getting Started with "
"Reactive guide] first."
msgstr ""
"リアクティブメーラーはMutiny link:getting-started-reactive#mutiny[リアクティブタイプ]を使用しています。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:132
#, fuzzy
msgid "To send a simple email, proceed as follows:"
msgstr "簡単なメールを送信するには、以下のように進めます。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:139
#, no-wrap
msgid ""
"// Imperative API:\n"
"mailer.send(Mail.withText(\"to@acme.org\", \"A simple email from quarkus\", "
"\"This is my body.\"));\n"
"// Reactive API:\n"
"Uni<Void> stage = reactiveMailer.send(Mail.withText(\"to@acme.org\", \"A "
"reactive email from quarkus\", \"This is my body.\"));\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:142
#, fuzzy
msgid "For example, you can use the `Mailer` in a JAX-RS endpoint as follows:"
msgstr "例えば、JAX-RS のエンドポイントで `Mailer` を使用すると、以下のようになります。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:151
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/simple\")\n"
"public Response sendASimpleEmail() {\n"
"    mailer.send(Mail.withText(\"to@acme.org\", \"A simple email from "
"quarkus\", \"This is my body\"));\n"
"    return Response.accepted().build();\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:160
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/async\")\n"
"public CompletionStage<Response> sendASimpleEmailAsync() {\n"
"    return reactiveMailer.send(\n"
"            Mail.withText(\"to@acme.org\", \"A reactive email from "
"quarkus\", \"This is my body\"))\n"
"            .subscribeAsCompletionStage()\n"
"            .thenApply(x -> Response.accepted().build());\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/mailer.adoc:165
#, fuzzy
msgid ""
"With the `quarkus-resteasy-mutiny` extension, you can return an instance of "
"`Uni` directly."
msgstr "`quarkus-resteasy-mutiny` 拡張モジュールを使用すると、 `Uni` のインスタンスを直接返すことができます。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:168
#, fuzzy
msgid ""
"With such a JAX-RS resource, you can check that everything is working with:"
msgstr "このようなJAX-RSリソースがあれば、すべてが動作していることを確認することができます。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:173
#, no-wrap
msgid "curl http://localhost:8080/simple\n"
"curl http://localhost:8080/async\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:178
#, fuzzy
msgid ""
"You can create new `io.quarkus.mailer.Mail` instances from the constructor "
"or from the `Mail.withText` and `Mail.withHtml` helper methods. The `Mail` "
"instance lets you add recipients (to, cc, or bcc), set the subject, headers, "
"sender (from) address..."
msgstr ""
"コンストラクタ、または `Mail.withText` と `Mail.withHtml` ヘルパーメソッドから、新しい `io.quarkus."
"mailer.Mail` インスタンスを作成できます。 `Mail` インスタンスでは、受信者 (to, cc, bcc) の追加、件名、ヘッダ、送信者 "
"(from) アドレスの設定などを行うことができます。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:180
#, fuzzy
msgid "You can also send several `Mail` objects in one call:"
msgstr "一度の呼び出しで複数の `Mail` オブジェクトを送信することもできます。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:184
#, no-wrap
msgid "mailer.send(mail1, mail2, mail3);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mailer.adoc:186
#, no-wrap, fuzzy
msgid "Sending attachments"
msgstr "添付ファイルの送信"

#. type: Plain text
#: upstream/_guides/mailer.adoc:189
#, fuzzy
msgid ""
"To send attachment, just use the `addAttachment` methods on the `io.quarkus."
"mailer.Mail` instance:"
msgstr ""
"添付ファイルを送信するには、 `io.quarkus.mailer.Mail` インスタンスの `addAttachment` "
"メソッドを使用するだけです。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:201
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/attachment\")\n"
"public Response sendEmailWithAttachment() {\n"
"    mailer.send(Mail.withText(\"to@acme.org\", \"An email from quarkus with "
"attachment\",\n"
"            \"This is my body\")\n"
"            .addAttachment(\"my-file.txt\",\n"
"                \"content of my file\".getBytes(), \"text/plain\"));\n"
"    return Response.accepted().build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:204
#, fuzzy
msgid ""
"Attachments can be created from raw bytes (as shown in the snippet) or files."
""
msgstr "添付ファイルは、（スニペットに示すように）生のバイトから作成することも、ファイルから作成することもできます。"

#. type: Title ==
#: upstream/_guides/mailer.adoc:205
#, no-wrap, fuzzy
msgid "Sending HTML emails with inlined attachments"
msgstr "インライン付きの添付ファイルでHTMLメールを送信する"

#. type: Plain text
#: upstream/_guides/mailer.adoc:209
#, fuzzy
msgid ""
"When sending HTML email, you can add inlined attachments.  For example, you "
"can send an image with your email, and this image will be displayed in the "
"mail content. If you put the image file into resources folder, you should "
"specify the full path to the file. \"e.g.\" \"META-INF/resources/quarkus-"
"logo.png\" otherwise quarkus will lookup in the root folder of the project"
msgstr ""
"HTMLメールを送信する際に、インラインの添付ファイルを追加することができます。例えば、メールに画像を添付して送信すると、この画像がメールの内容に表示されます。画像ファイルをリソースフォルダに入れる場合は、ファイルのフルパスを指定する必要があります。\"例\"\"META-"
"INF/resources/quarkus-logo.png\" でない場合、quarkusはプロジェクトのルートフォルダを検索します。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:224
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/html\")\n"
"public Response sendingHTML() {\n"
"    String body = \"<strong>Hello!</strong>\" + \"\\n\" +\n"
"        \"<p>Here is an image for you: <img src=\\\"cid:my-image@quarkus."
"io\\\"/></p>\" +\n"
"        \"<p>Regards</p>\";\n"
"    mailer.send(Mail.withHtml(\"to@acme.org\", \"An email in HTML\", body)\n"
"        .addInlineAttachment(\"quarkus-logo.png\",\n"
"            new File(\"quarkus-logo.png\"),\n"
"            \"image/png\", \"<my-image@quarkus.io>\"));\n"
"    return Response.accepted().build();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:230
#, fuzzy
msgid ""
"Note the _content-id_ format and reference.  By spec, when you create the "
"inline attachment, the content-id must be structured as follows: "
"`<id@domain>`.  If you don't wrap your content-id between `<>`, it is "
"automatically wrapped for you.  When you want to reference your attachment, "
"for instance in the `src` attribute, use `cid:id@domain` (without the `<` "
"and `>`)."
msgstr ""
"content _-id の_形式と参照に注意してください。仕様上、インライン添付ファイルを作成する際には、content-"
"idは以下のように構成する必要があります。 `&amp;lt;id@domain&amp;gt;`. `&amp;lt;&amp;gt;` の間に "
"content-id を挟まない場合は、自動的にラップされます。添付ファイルを参照したい場合、例えば `src` 属性で参照したい場合は `cid:"
"id@domain` を使用してください（ `&amp;lt;` と `&amp;gt;` は使用しないでください）。"

#. type: Title ==
#: upstream/_guides/mailer.adoc:231
#, no-wrap, fuzzy
msgid "Message Body Based on Qute Templates"
msgstr "Quteテンプレートをベースにしたメッセージボディ"

#. type: Plain text
#: upstream/_guides/mailer.adoc:234
#, fuzzy
msgid ""
"It's also possible to inject a mail template, where the message body is "
"created automatically using link:qute[Qute templates]."
msgstr "また、 link:qute[Quteのテンプレートを]使ってメッセージ本文が自動的に作成されるメールテンプレートを注入することも可能です。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:239
#, no-wrap
msgid "@Path(\"\")\n"
"public class MailingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:244
#, no-wrap
msgid ""
"    @CheckedTemplate\n"
"    class Templates {\n"
"        public static native MailTemplateInstance hello(String name); <1>\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:257
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/mail\")\n"
"    public CompletionStage<Response> send() {\n"
"        // the template looks like: Hello {name}! <2>\n"
"        return Templates.hello(\"John\")\n"
"           .to(\"to@acme.org\") <3>\n"
"           .subject(\"Hello from Qute template\")\n"
"           .send() <4>\n"
"           .subscribeAsCompletionStage()\n"
"           .thenApply(x -> Response.accepted().build());\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:260
#, fuzzy
msgid ""
"By convention, the enclosing class name and method names are used to locate "
"the template. In this particular case, we will use the `MailingResource/"
"hello.html` and `MailingResource/hello.txt` templates to create the message "
"body."
msgstr ""
"慣例では、テンプレートの場所を特定するには、クラス名とメソッド名を囲んだ部分が使用されます。この例では、 `MailingResource/hello."
"html` および `MailingResource/hello.txt` テンプレートを使用してメッセージ本文を作成します。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:261 upstream/_guides/mailer.adoc:288
#, fuzzy
msgid "Set the data used in the template."
msgstr "テンプレートで使用するデータを設定します。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:262 upstream/_guides/mailer.adoc:287
#, fuzzy
msgid "Create a mail template instance and set the recipient."
msgstr "メールテンプレートのインスタンスを作成し、受信者を設定します。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:263 upstream/_guides/mailer.adoc:289
#, fuzzy
msgid ""
"`MailTemplate.send()` triggers the rendering and, once finished, sends the e-"
"mail via a `Mailer` instance."
msgstr ""
"`MailTemplate.send()` はレンダリングをトリガーし、レンダリングが完了すると `Mailer` "
"インスタンスを経由して電子メールを送信します。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:265 upstream/_guides/mailer.adoc:291
#, fuzzy
msgid ""
"Injected mail templates are validated during build. If there is no matching "
"template in `src/main/resources/templates` the build fails."
msgstr ""
"インジェクションされたメールテンプレートはビルド中に検証されます。 `src/main/resources/templates` "
"に一致するテンプレートがない場合、ビルドは失敗します。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:267
#, fuzzy
msgid "You can also do this without type-safe templates:"
msgstr "タイプセーフのテンプレートがなくてもできます。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:272
#, no-wrap
msgid "@Inject\n"
"MailTemplate hello; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:284
#, no-wrap
msgid ""
"@GET\n"
"@Path(\"/mail\")\n"
"public CompletionStage<Response> send() {\n"
"    return hello.to(\"to@acme.org\") <2>\n"
"       .subject(\"Hello from Qute template\")\n"
"       // the template looks like: Hello {name}!\n"
"       .data(\"name\", \"John\") <3>\n"
"       .send() <4>\n"
"       .subscribeAsCompletionStage()\n"
"       .thenApply(x -> Response.accepted().build());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:286
#, fuzzy
msgid ""
"If there is no `@ResourcePath` qualifier provided, the field name is used to "
"locate the template. In this particular case, we will use the `hello.html` "
"and `hello.txt` templates to create the message body."
msgstr ""
"`@ResourcePath` の修飾子が指定されていない場合は、フィールド名がテンプレートの場所を特定するために使用されます。この場合、 `hello."
"html` および `hello.txt` テンプレートを使用してメッセージ本文を作成します。"

#. type: Title ==
#: upstream/_guides/mailer.adoc:292
#, no-wrap, fuzzy
msgid "Testing email sending"
msgstr "メール送信のテスト"

#. type: Plain text
#: upstream/_guides/mailer.adoc:297
#, fuzzy
msgid ""
"Because it is very inconvenient to send emails during development and "
"testing, you can set the `quarkus.mailer.mock` boolean configuration to "
"`true` to not actually send emails but print them on stdout and collect them "
"in a `MockMailbox` bean instead.  This is the default if you are running "
"Quarkus in `DEV` or `TEST` mode."
msgstr ""
"開発中やテスト中にメールを送信するのは非常に不便なので、 `quarkus.mailer.mock` のブール設定を `true` "
"に設定して、実際にはメールを送信せずに標準出力に印刷して、代わりに `MockMailbox` ビーンに収集することができます。これは、 `DEV` "
"または `TEST` モードでQuarkusを実行している場合のデフォルトです。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:299
#, fuzzy
msgid ""
"You can then write tests to verify that your emails were sent, for example, "
"by a REST endpoint:"
msgstr "そして、テストを書いて、例えばRESTエンドポイントでメールが送信されたかどうかを確認することができます。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:304
#, no-wrap
msgid "@QuarkusTest\n"
"class MailTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:306
#, no-wrap
msgid "    private static final String TO = \"foo@quarkus.io\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:309
#, no-wrap
msgid "    @Inject\n"
"    MockMailbox mailbox;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:314
#, no-wrap
msgid "    @BeforeEach\n"
"    void init() {\n"
"        mailbox.clear();\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:324
#, no-wrap
msgid ""
"    @Test\n"
"    void testTextMail() throws MessagingException, IOException {\n"
"        // call a REST endpoint that sends email\n"
"        given()\n"
"        .when()\n"
"        .get(\"/send-email\")\n"
"        .then()\n"
"           .statusCode(202)\n"
"           .body(is(\"OK\"));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:331
#, no-wrap
msgid ""
"        // verify that it was sent\n"
"        List<Mail> sent = mailbox.getMessagesSentTo(TO);\n"
"        assertThat(sent).hasSize(1);\n"
"        Mail actual = sent.get(0);\n"
"        assertThat(actual.getText()).contains(\"Wake up!\");\n"
"        assertThat(actual.getSubject()).isEqualTo(\"Alarm!\");\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:335
#, no-wrap
msgid ""
"        assertThat(mailbox.getTotalMessagesSent()).isEqualTo(6);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mailer.adoc:337
#, no-wrap, fuzzy
msgid "Gmail specific configuration"
msgstr "Gmail特有の設定"

#. type: Plain text
#: upstream/_guides/mailer.adoc:340
#, fuzzy
msgid ""
"If you want to use the Gmail SMTP server, first create a dedicated password "
"in `Google Account > Security > App passwords` or go to https://myaccount."
"google.com/apppasswords."
msgstr ""
"GmailのSMTPサーバーを利用する場合は、まず、 `Google Account &amp;gt; Security &amp;gt; App "
"passwords` で専用のパスワードを作成するか、 https://myaccount.google.com/apppasswords 。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:342
#, fuzzy
msgid ""
"When done, you can configure your Quarkus application by adding the "
"following properties to your `application.properties`:"
msgstr ""
"完了したら、 `application.properties`."
"Quarkusアプリケーションに以下のプロパティを追加して、Quarkusアプリケーションを設定することができます。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:344
#, fuzzy
msgid "With TLS:"
msgstr "TLSで。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:354
#, no-wrap
msgid ""
"quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 PLAIN "
"LOGIN\n"
"quarkus.mailer.from=YOUREMAIL@gmail.com\n"
"quarkus.mailer.host=smtp.gmail.com\n"
"quarkus.mailer.port=587\n"
"quarkus.mailer.start-tls=REQUIRED\n"
"quarkus.mailer.username=YOUREMAIL@gmail.com\n"
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:357
#, fuzzy
msgid "Or with SSL:"
msgstr "もしくはSSLで。"

#. type: Plain text
#: upstream/_guides/mailer.adoc:367
#, fuzzy
msgid ""
"  quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 "
"PLAIN LOGIN quarkus.mailer.from=YOUREMAIL@gmail.com quarkus.mailer.host=smtp."
"gmail.com quarkus.mailer.port=465 quarkus.mailer.ssl=true quarkus.mailer."
"username=YOUREMAIL@gmail.com quarkus.mailer.password="
"YOURGENERATEDAPPLICATIONPASSWORD"
msgstr ""
"<pre>quarkus.mailer.auth-methods=DIGEST-MD5 CRAM-SHA256 CRAM-SHA1 CRAM-MD5 "
"PLAIN LOGIN quarkus.mailer.from=YOUREMAIL@gmail.com quarkus.mailer.host=smtp."
"gmail.com quarkus.mailer.port=465 quarkus.mailer.ssl=true quarkus.mailer."
"username=YOUREMAIL@gmail.com quarkus.mailer.password="
"YOURGENERATEDAPPLICATIONPASSWORD quarkus.mailer.username=YOUREMAIL@gmail.com "
"quarkus.mailer.password=YOURGENERATEDAPPLICATIONPASSWORD</pre>"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:374
#, no-wrap
msgid ""
"[NOTE]\n"
"====\n"
"The `quarkus.mailer.auth-methods` configuration option is needed for the "
"Quarkus mailer to support password authentication with Gmail.\n"
"By default both the mailer and Gmail default to `XOAUTH2` which requires "
"registering an application, getting tokens, etc.\n"
"====\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/mailer.adoc:375
#, no-wrap, fuzzy
msgid "Using SSL with native executables"
msgstr "ネイティブ実行ファイルでSSLを使用する"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:379
msgid ""
"Note that if you enable SSL for the mailer and you want to build a native "
"executable, you will need to enable the SSL support.  Please refer to the "
"link:native-and-ssl[Using SSL With Native Executables] guide for more "
"information."
msgstr ""

#. type: Title ==
#: upstream/_guides/mailer.adoc:380
#, no-wrap, fuzzy
msgid "Using the underlying Vert.x Mail Client"
msgstr "基盤となる Vert.x メールクライアントの使用"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:384
msgid ""
"The Quarkus Mailer is implemented on top of the https://vertx.io/docs/vertx-"
"mail-client/java/[Vert.x Mail Client], providing an asynchronous and non-"
"blocking way to send emails.  If you need fine control on how the mail is "
"sent, for instance if you need to retrieve the message ids, you can inject "
"the underlying client, and use it directly:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:386
msgid "[source, java]"
msgstr ""

#. type: Plain text
#: upstream/_guides/mailer.adoc:388
#, fuzzy
msgid "@Inject MailClient client;"
msgstr "メールクライアントのクライアントをインジェクトします。"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:391
#, no-wrap
msgid "Three API flavors are exposed:\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:396
#, no-wrap
msgid ""
"* the Mutiny client (`io.vertx.mutiny.ext.mail.MailClient`)\n"
"* the Axle client (`io.vertx.axle.ext.mail.MailClient`), using "
"`CompletionStage` and Reactive Streams `Publisher` - deprecated, it is "
"recommended to switch to the Mutiny client\n"
"* the RX Java 2 client (`io.vertx.reactivex.ext.mail.MailClient`) - "
"deprecated, it is recommended to switch to the Mutiny client\n"
"* the bare client (`io.vertx.ext.mail.MailClient`)\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:398
#, no-wrap
msgid ""
"Check the link:vertx[Using Vert.x guide] for further details about these "
"different APIs and how to select the most suitable for you.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:401
#, no-wrap
msgid ""
"The retrieved `MailClient` is configured using the configuration key "
"presented above.\n"
"You can also create your own instance, and pass your own configuration.\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:406
msgid ""
"This guide has shown how you can send emails from a Quarkus application.  "
"The _mailer_ extension works in JVM and native mode."
msgstr ""

#. type: delimited block -
#: upstream/_guides/mailer.adoc:409
msgid "[[configuration-reference]]"
msgstr ""

#. type: Title ==
#: upstream/_guides/mailer.adoc:409
#, no-wrap, fuzzy
msgid "Mailer Configuration Reference"
msgstr "メーラー設定リファレンス"

#. type: delimited block -
#: upstream/_guides/mailer.adoc:411
msgid ""
"include::{generated-dir}/config/quarkus-mailer.adoc[opts=optional, "
"leveloffset=+1]"
msgstr ""

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/infinispan-client.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Infinispan Client"
msgstr "Quarkus - Infinispanクライアント"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:12
#, fuzzy
msgid ""
"Infinispan is an in memory data grid that allows running in a server outside "
"of application processes. This extension provides functionality to allow the "
"client that can connect to said server when running in Quarkus."
msgstr ""
"Infinispanは、アプリケーションプロセス以外のサーバーでの実行を可能にするメモリ内データグリッドです。この拡張機能は、Quarkusで実行しているときに、クライアントがサーバーに接続できるようにする機能を提供します。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:15
#, fuzzy
msgid ""
"More information can be found about Infinispan at https://infinispan.org and "
"the client/server at https://infinispan.org/docs/dev/user_guide/user_guide."
"html#client_server"
msgstr ""
"Infinispan についての詳細は https://infinispan.org に、クライアント/サーバーについては https://"
"infinispan.org/docs/dev/user_guide/user_guide.html#client_server に記載されています。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:16
#, no-wrap, fuzzy
msgid "Configuration"
msgstr "構成"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:20
#, fuzzy
msgid ""
"Once you have your Quarkus project configured you can add the `infinispan-"
"client` extension to your project by running the following from the command "
"line in your project base directory."
msgstr ""
"Quarkusプロジェクトを設定したら、プロジェクトのベースディレクトリのコマンドラインから以下を実行して、 `infinispan-client` "
"拡張機能をプロジェクトに追加することができます。"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:24
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"infinispan-client\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:27
#, fuzzy
msgid "This will add the following to your pom.xml"
msgstr "これにより、以下が pom.xml に追加されます。"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:34
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-infinispan-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:39
#, fuzzy
msgid ""
"The Infinispan client is configurable in the `application.properties` file "
"that can be provided in the `src/main/resources` directory. These are the "
"properties that can be configured in this file:"
msgstr ""
"Infinispan クライアントは、 `src/main/resources` ディレクトリで提供される `application."
"properties` ファイルで設定できます。このファイルで設定できるプロパティは以下の通りです。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:45
#, fuzzy
msgid ""
"It is also possible to configure a `hotrod-client.properties` as described "
"in the Infinispan user guide. Note that the `hotrod-client.properties` "
"values overwrite any matching property from the other configuration values "
"(eg. near cache).  This properties file is build time only and if it is "
"changed, requires a full rebuild."
msgstr ""
"Infinispan ユーザーガイドに記載されているように `hotrod-client.properties` を設定することも可能です。 "
"`hotrod-client.properties` "
"の値は、他の設定値（例：ニアキャッシュ）から一致するプロパティを上書きすることに注意してください。このプロパティファイルはビルド時のみのもので、変更された場合は完全に再構築する必要があります。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:46
#, no-wrap, fuzzy
msgid "Serialization (Key Value types support)"
msgstr "連載（キーバリュー型のサポート"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:51
#, fuzzy
msgid ""
"By default the client will support keys and values of the following types: "
"byte[], primitive wrappers (eg. Integer, Long, Double etc.), String, Date "
"and Instant. User types require some additional steps that are detailed here."
" Let's say we have the following user classes:"
msgstr ""
"デフォルトでは、クライアントは以下の型のキーと値をサポートします: byte[]、プリミティブラッパー(例: "
"Integer、Long、Doubleなど)、String、Date、Instant。ユーザー型については、ここで詳しく説明している追加のステップが必要です。以下のようなユーザクラスがあるとします。"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:52
#: upstream/_guides/infinispan-client.adoc:96
#, no-wrap, fuzzy
msgid "Author.java"
msgstr "作成者.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:58
#, no-wrap
msgid ""
"public class Author {\n"
"   private final String name;\n"
"   private final String surname;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:65
#, no-wrap
msgid ""
"   public Author(String name, String surname) {\n"
"      this.name = Objects.requireNonNull(name);\n"
"      this.surname = Objects.requireNonNull(surname);\n"
"   }\n"
"   // Getter/Setter/equals/hashCode/toString omitted\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:67
#: upstream/_guides/infinispan-client.adoc:116
#, no-wrap, fuzzy
msgid "Book.java"
msgstr "Book.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:75
#, no-wrap
msgid ""
"public class Book {\n"
"   private final String title;\n"
"   private final String description;\n"
"   private final int publicationYear;\n"
"   private final Set<Author> authors;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:84
#, no-wrap
msgid ""
"   public Book(String title, String description, int publicationYear, "
"Set<Author> authors) {\n"
"      this.title = Objects.requireNonNull(title);\n"
"      this.description = Objects.requireNonNull(description);\n"
"      this.publicationYear = publicationYear;\n"
"      this.authors = Objects.requireNonNull(authors);\n"
"   }\n"
"   // Getter/Setter/equals/hashCode/toString omitted\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:87
#, fuzzy
msgid ""
"Serialization of user types uses a library based on protobuf, called "
"Protostream."
msgstr "ユーザータイプのシリアライズは、Protostreamと呼ばれるprotobufをベースにしたライブラリを使用します。"

#. type: Title ===
#: upstream/_guides/infinispan-client.adoc:88
#, no-wrap, fuzzy
msgid "Annotation based Serialization"
msgstr "アノテーションに基づくシリアライゼーション"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:93
#, fuzzy
msgid ""
"This can be done automatically by adding protostream annotations to your "
"user classes.  In addition a single Initializer annotated interface is "
"required which controls how the supporting classes are generated."
msgstr ""
"これは、ユーザクラスに protostream "
"アノテーションを追加することで自動的に行うことができます。さらに、サポートするクラスがどのように生成されるかを制御するために、単一の "
"Initializer アノテーションされたインターフェイスが必要です。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:95
#, fuzzy
msgid "Here is an example of how the preceding classes should be changed:"
msgstr "ここでは、先行するクラスをどのように変更するかの例を示します。"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:104
#, no-wrap
msgid ""
"    @ProtoFactory\n"
"    public Author(String name, String surname) {\n"
"        this.name = Objects.requireNonNull(name);\n"
"        this.surname = Objects.requireNonNull(surname);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:109
#, no-wrap
msgid ""
"    @ProtoField(number = 1)\n"
"    public String getName() {\n"
"        return name;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:114
#, no-wrap
msgid ""
"    @ProtoField(number = 2)\n"
"    public String getSurname() {\n"
"        return surname;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:126
#, no-wrap
msgid ""
"    @ProtoFactory\n"
"    public Book(String title, String description, int publicationYear, "
"Set<Author> authors) {\n"
"        this.title = Objects.requireNonNull(title);\n"
"        this.description = Objects.requireNonNull(description);\n"
"        this.publicationYear = publicationYear;\n"
"        this.authors = Objects.requireNonNull(authors);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:131
#, no-wrap
msgid ""
"    @ProtoField(number = 1)\n"
"    public String getTitle() {\n"
"        return title;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:136
#, no-wrap
msgid ""
"    @ProtoField(number = 2)\n"
"    public String getDescription() {\n"
"        return description;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:141
#, no-wrap
msgid ""
"    @ProtoField(number = 3, defaultValue = \"-1\")\n"
"    public int getPublicationYear() {\n"
"        return publicationYear;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:146
#, no-wrap
msgid ""
"    @ProtoField(number = 4)\n"
"    public Set<Author> getAuthors() {\n"
"        return authors;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:149
#, fuzzy
msgid ""
"If your classes have only mutable fields, then the `ProtoFactory` annotation "
"is not required, assuming your class has a no arg constructor."
msgstr "クラスが mutable フィールドしかない場合は、 `ProtoFactory` アノテーションは必要ありません。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:152
#, fuzzy
msgid ""
"Then all that is required is a very simple `SerializationContextInitializer` "
"interface with an annotation on it to specify configuration settings"
msgstr ""
"必要なのは、非常にシンプルな `SerializationContextInitializer` "
"インターフェイスにアノテーションを付けて設定を指定するだけです。"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:153
#, no-wrap, fuzzy
msgid "BookContextInitializer.java"
msgstr "BookContextInitializer.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:159
#, no-wrap
msgid ""
"@AutoProtoSchemaBuilder(includeClasses = { Book.class, Author.class }, "
"schemaPackageName = \"book_sample\")\n"
"interface BookContextInitializer extends SerializationContextInitializer {\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:164
#, fuzzy
msgid ""
"So in this case we will automatically generate the marshaller and schemas "
"for the included classes and place them in the schema package automatically. "
"The package does not have to be provided, but if you utilize querying, you "
"must know the generated package."
msgstr ""
"そこで今回は、含まれるクラスのマーシャラーとスキーマを自動生成して、スキーマパッケージに自動で配置します。パッケージは用意する必要はありませんが、クエリを利用する場合は生成されたパッケージを知っておく必要があります。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:166
#, fuzzy
msgid ""
"In Quarkus the `schemaFileName` and `schemaFilePath` attributes should NOT "
"be set on the `AutoProtoSchemaBuilder` annotation, setting either will cause "
"native runtime to error."
msgstr ""
"Quarkusでは、 `schemaFileName` と `schemaFilePath` 属性は、 `AutoProtoSchemaBuilder` "
"アノテーションに設定すべきではありません。"

#. type: Title ===
#: upstream/_guides/infinispan-client.adoc:167
#, no-wrap, fuzzy
msgid "User written serialization"
msgstr "ユーザーが書いたシリアル化"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:173
#, fuzzy
msgid ""
"The previous method is suggested for any case when the user can annotate "
"their classes.  Unfortunately the user may not be able to annotate all "
"classes they will put in the cache. In this case you must define your schema "
"and create your own Marshaller(s)  yourself."
msgstr ""
"前の方法は、ユーザが自分のクラスにアノテーションを付けることができる場合のために提案されています。残念ながら、ユーザーはキャッシュに入れるすべてのクラスにアノテーションを付けることができないかもしれません。このような場合はスキーマを定義し、自分で独自のマーシャルを作成しなければなりません。"

#. type: Labeled list
#: upstream/_guides/infinispan-client.adoc:174
#, no-wrap, fuzzy
msgid "Protobuf schema"
msgstr "プロトバフスキーマ"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:175
#, fuzzy
msgid "You can supply a protobuf schema through either one of two ways."
msgstr "2つの方法のいずれかでprotobufスキーマを提供することができます。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:176
#, fuzzy
msgid "Proto File"
msgstr "プロトファイル"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:179
#, fuzzy
msgid ""
"+ You can put the `.proto` file in the `META-INF` directory of the project. "
"These files will automatically be picked up at initialization time."
msgstr ""
"+ プロジェクトの `META-INF` ディレクトリに `.proto` "
"ファイルを置くことができます。これらのファイルは、初期化時に自動的にピックアップされます。"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:180
#, no-wrap, fuzzy
msgid "library.proto"
msgstr "ライブラリープロト"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:183
#, no-wrap
msgid "package book_sample;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:188
#, no-wrap
msgid ""
"message Book {\n"
"  required string title = 1;\n"
"  required string description = 2;\n"
"  required int32 publicationYear = 3; // no native Date type available in "
"Protobuf\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:191
#, no-wrap
msgid "  repeated Author authors = 4;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:196
#, no-wrap
msgid ""
"message Author {\n"
"  required string name = 1;\n"
"  required string surname = 2;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:198
#, fuzzy
msgid "In Code"
msgstr "コードでは"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:201
#, fuzzy
msgid ""
"+ Or you can define the proto schema directly in user code by defining a "
"produced bean of type `org.infinispan.protostream.FileDescriptorSource`."
msgstr ""
"`org.infinispan.protostream.FileDescriptorSource`+ "
"または、ユーザコードで直接protoスキーマを定義することができます。"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:221
#, no-wrap
msgid ""
"   @Produces\n"
"   FileDescriptorSource bookProtoDefinition() {\n"
"      return FileDescriptorSource.fromString(\"library.proto\", \"package "
"book_sample;\\n\" +\n"
"            \"\\n\" +\n"
"            \"message Book {\\n\" +\n"
"            \"  required string title = 1;\\n\" +\n"
"            \"  required string description = 2;\\n\" +\n"
"            \"  required int32 publicationYear = 3; // no native Date type "
"available in Protobuf\\n\" +\n"
"            \"\\n\" +\n"
"            \"  repeated Author authors = 4;\\n\" +\n"
"            \"}\\n\" +\n"
"            \"\\n\" +\n"
"            \"message Author {\\n\" +\n"
"            \"  required string name = 1;\\n\" +\n"
"            \"  required string surname = 2;\\n\" +\n"
"            \"}\");\n"
"   }\n"
msgstr ""

#. type: Labeled list
#: upstream/_guides/infinispan-client.adoc:222
#, no-wrap, fuzzy
msgid "User Marshaller"
msgstr "ユーザーマーシャラー"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:226
#, fuzzy
msgid ""
"The last thing to do is to provide a `org.infinispan.protostream."
"MessageMarshaller` implementation for each user class defined in the proto "
"schema. This class is then provided via `@Produces` in a similar fashion to "
"the code based proto schema definition above."
msgstr ""
"最後にすべきことは、proto スキーマで定義された各ユーザークラスの `org.infinispan.protostream."
"MessageMarshaller` 実装を提供することです。このクラスは、上記のコードベースの proto スキーマの定義と同様の方法で "
"`@Produces` を介して提供されます。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:228
#, fuzzy
msgid "Here is the Marshaller class for our Author & Book classes."
msgstr "こちらは、著者＆本のクラスのマーシャラークラスです。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:230
#, fuzzy
msgid ""
"The type name must match the `<protobuf package>.<protobuf message>` "
"exactly!"
msgstr ""
"タイプ名は `&amp;lt;protobuf package&amp;gt;.&amp;lt;protobuf message&amp;gt;` "
"と正確に一致している必要があります!"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:231
#, no-wrap, fuzzy
msgid "AuthorMarshaller.java"
msgstr "AuthorMarshaller.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:235
#, no-wrap
msgid "public class AuthorMarshaller implements MessageMarshaller<Author> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:240
#, no-wrap
msgid ""
"   @Override\n"
"   public String getTypeName() {\n"
"      return \"book_sample.Author\";\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:245
#, no-wrap
msgid ""
"   @Override\n"
"   public Class<? extends Author> getJavaClass() {\n"
"      return Author.class;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:251
#, no-wrap
msgid ""
"   @Override\n"
"   public void writeTo(ProtoStreamWriter writer, Author author) throws "
"IOException {\n"
"      writer.writeString(\"name\", author.getName());\n"
"      writer.writeString(\"surname\", author.getSurname());\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:259
#, no-wrap
msgid ""
"   @Override\n"
"   public Author readFrom(ProtoStreamReader reader) throws IOException {\n"
"      String name = reader.readString(\"name\");\n"
"      String surname = reader.readString(\"surname\");\n"
"      return new Author(name, surname);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:261
#, no-wrap, fuzzy
msgid "BookMarshaller.java"
msgstr "BookMarshaller.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:265
#, no-wrap
msgid "public class BookMarshaller implements MessageMarshaller<Book> {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:270
#, no-wrap
msgid ""
"   @Override\n"
"   public String getTypeName() {\n"
"      return \"book_sample.Book\";\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:275
#, no-wrap
msgid ""
"   @Override\n"
"   public Class<? extends Book> getJavaClass() {\n"
"      return Book.class;\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:283
#, no-wrap
msgid ""
"   @Override\n"
"   public void writeTo(ProtoStreamWriter writer, Book book) throws "
"IOException {\n"
"      writer.writeString(\"title\", book.getTitle());\n"
"      writer.writeString(\"description\", book.getDescription());\n"
"      writer.writeInt(\"publicationYear\", book.getPublicationYear());\n"
"      writer.writeCollection(\"authors\", book.getAuthors(), Author.class);\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:293
#, no-wrap
msgid ""
"   @Override\n"
"   public Book readFrom(ProtoStreamReader reader) throws IOException {\n"
"      String title = reader.readString(\"title\");\n"
"      String description = reader.readString(\"description\");\n"
"      int publicationYear = reader.readInt(\"publicationYear\");\n"
"      Set<Author> authors = reader.readCollection(\"authors\", new "
"HashSet<>(), Author.class);\n"
"      return new Book(title, description, publicationYear, authors);\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:296
#, fuzzy
msgid "And you pass the marshaller by defining the following:"
msgstr "そして、以下のように定義してマーシャラーをパスします。"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:303
#, no-wrap
msgid ""
"   @Produces\n"
"   MessageMarshaller authorMarshaller() {\n"
"      return new AuthorMarshaller();\n"
"   }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:308
#, no-wrap
msgid ""
"   @Produces\n"
"   MessageMarshaller bookMarshaller() {\n"
"      return new BookMarshaller();\n"
"   }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:310
#, fuzzy
msgid ""
"The above produced Marshaller method MUST return `MessageMarshaller` without "
"types or else it will not be found."
msgstr ""
"上記のように生成されたMarshallerメソッドは、型なしで `MessageMarshaller` を返さなければなりません(MUST)。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:311
#, no-wrap, fuzzy
msgid "Dependency Injection"
msgstr "依存性注入"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:317
#, fuzzy
msgid ""
"As you saw above we support the user injecting Marshaller configuration. You "
"can do the inverse with the Infinispan client extension providing injection "
"for `RemoteCacheManager` and `RemoteCache` objects.  There is one global "
"`RemoteCacheManager` that takes all of the configuration parameters setup in "
"the above sections."
msgstr ""
"上で見たように、Marshaller の設定をユーザーがインジェクションすることをサポートしています。Infinispan "
"クライアント拡張機能を使用すると、 `RemoteCacheManager` と `RemoteCache` "
"オブジェクトにインジェクションを行うことができます。上記のセクションで設定したすべての設定パラメータを受け取るグローバル "
"`RemoteCacheManager` があります。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:320
#, fuzzy
msgid ""
"It is very simple to inject these components. All you need to do is to add "
"the Inject annotation to the field, constructor or method. In the below code "
"we utilize field and constructor injection."
msgstr ""
"これらのコンポーネントを注入するのは非常に簡単です。必要なのは、フィールド、コンストラクタ、またはメソッドにインジェクションアノテーションを追加するだけです。以下のコードでは、フィールドとコンストラクタのインジェクションを利用しています。"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:321
#, no-wrap, fuzzy
msgid "SomeClass.java"
msgstr "SomeClass.java"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:327
#, no-wrap
msgid ""
"    @Inject SomeClass(RemoteCacheManager remoteCacheManager) {\n"
"       this.remoteCacheManager = remoteCacheManager;\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:330
#, no-wrap
msgid "    @Inject @Remote(\"myCache\")\n"
"    RemoteCache<String, Book> cache;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:332
#, no-wrap
msgid "    RemoteCacheManager remoteCacheManager;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:337
#, fuzzy
msgid ""
"If you notice the `RemoteCache` declaration has an additional optional "
"annotation named `Remote`.  This is a qualifier annotation allowing you to "
"specify which named cache that will be injected. This annotation is not "
"required and if it is not supplied, the default cache will be injected."
msgstr ""
"`RemoteCache` 宣言に `Remote` "
"というオプションのアノテーションが追加されていることにお気づきでしょうか。これは、注入される名前付きキャッシュを指定するための修飾子アノテーションです。このアノテーションは必須ではなく、指定しなかった場合はデフォルトのキャッシュが注入されます。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:339
#, fuzzy
msgid ""
"Other types may be supported for injection, please see other sections for "
"more information"
msgstr "その他のタイプは注入のためにサポートされている場合がありますが、詳細については他のセクションを参照してください。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:340
#, no-wrap, fuzzy
msgid "Querying"
msgstr "問い合わせ"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:345
#, fuzzy
msgid ""
"The Infinispan client supports both indexed and non indexed querying as long "
"as the `ProtoStreamMarshaller` is configured above. This allows the user to "
"query based on the properties of the proto schema."
msgstr ""
"Infinispan クライアントは、上記の `ProtoStreamMarshaller` "
"が設定されている限り、インデックス付きと非インデックス付きの両方のクエリをサポートしています。これにより、ユーザはプロトスキーマのプロパティに基づいてクエリを行うことができます。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:350
#, fuzzy
msgid ""
"Query builds upon the proto definitions you can configure when setting up "
"the `ProtoStreamMarshaller`.  Either method of Serialization above will "
"automatically register the schema with the server at startup, meaning that "
"you will automatically gain the ability to query objects stored in the "
"remote Infinispan Server."
msgstr ""
"Query は、 `ProtoStreamMarshaller` "
"の設定時に設定できるプロト定義に基づいて構築されます。上記のいずれのシリアライズ方法でも、起動時に自動的にスキーマをサーバーに登録し、リモートの "
"Infinispan サーバーに保存されているオブジェクトをクエリする機能を自動的に得ることができます。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:352
#, fuzzy
msgid ""
"You can read more about this at https://infinispan.org/docs/stable/titles/"
"developing/developing.html#query_dsl."
msgstr ""
"これについては、 https://infinispan.org/docs/stable/titles/developing/developing."
"html#query_dsl 。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:355
#, fuzzy
msgid ""
"You can use either the Query DSL or the Ickle Query language with the "
"Quarkus Infinispan client extension."
msgstr "Quarkus Infinispanクライアントエクステンションでは、クエリDSLまたはIckleクエリ言語のいずれかを使用できます。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:356
#, no-wrap, fuzzy
msgid "Counters"
msgstr "カウンター"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:360
#, fuzzy
msgid ""
"Infinispan also has a notion of counters and the Quarkus Infinispan client "
"supports them out of the box."
msgstr ""
"Infinispanにはカウンターという概念もあり、Quarkus Infinispanのクライアントはそれらを箱から出してサポートしています。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:364
#, fuzzy
msgid ""
"The Quarkus Infinispan client extension allows for Dependency Injection of "
"the `CounterManager` directly. All you need to do is annotate your field, "
"constructor or method and you get it with no fuss. You can then use counters "
"as you would normally."
msgstr ""
"Quarkus Infinispanクライアント拡張機能を使用すると、 `CounterManager` "
"の依存性インジェクションを直接行うことができます。必要なのは、フィールド、コンストラクタ、メソッドにアノテーションを付けるだけで、手間をかけずにインジェクションが可能になります。そして、通常のようにカウンターを使用することができます。"

#. type: delimited block -
#: upstream/_guides/infinispan-client.adoc:369
#, no-wrap
msgid "@Inject\n"
"CounterManager counterManager;\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:371
#, no-wrap, fuzzy
msgid "Near Caching"
msgstr "ニアキャッシング"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:377
#, fuzzy
msgid ""
"Near caching is disabled by default, but you can enable it by setting the "
"profile config property `quarkus.infinispan-client.near-cache-max-entries` "
"to a value greater than 0. You can also configure a regular expression so "
"that only a subset of caches have near caching applied through the `quarkus."
"infinispan-client.near-cache-name-pattern` attribute."
msgstr ""
"ニア・キャッシングは既定では無効になっていますが、プロファイル構成プロパティ `quarkus.infinispan-client.near-cache-"
"max-entries` を 0 より大きい値に設定することで有効にすることができます。 また、正規表現を構成して、キャッシュのサブセットのみが "
"`quarkus.infinispan-client.near-cache-name-pattern` "
"属性を通じてニア・キャッシングを適用するようにすることもできます。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:378
#, no-wrap, fuzzy
msgid "Encryption"
msgstr "暗号化"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:381
#, fuzzy
msgid "Encryption at this point requires additional steps to get working."
msgstr "この時点での暗号化には、作業を開始するための追加のステップが必要です。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:385
#, fuzzy
msgid ""
"The first step is to configure the `hotrod-client.properties` file to point "
"to your truststore and/or keystore. This is further detailed at https://"
"infinispan.org/docs/dev/user_guide/user_guide.html#hr_encryption."
msgstr ""
"最初のステップは、 `hotrod-client.properties` ファイルが truststore および/または keystore "
"を指すように設定することです。これは https://infinispan.org/docs/dev/user_guide/user_guide."
"html#hr_encryption  でさらに詳しく説明されています。"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:388
#, fuzzy
msgid ""
"The Infinispan Client extension enables SSL by default. You can read more "
"about this at link:native-and-ssl[Using SSL With Native Executables]."
msgstr ""
"Infinispanクライアント拡張機能は、デフォルトでSSLを有効にします。これについての詳細は link:native-and-ssl[Using "
"SSL With Native Executables] を参照してください。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:389
#, no-wrap, fuzzy
msgid "Authentication"
msgstr "認証"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:393
#, fuzzy
msgid ""
"This chart illustrates what mechanisms have been verified to be working "
"properly with the Quarkus Infinispan Client extension."
msgstr "この図は、Quarkus Infinispanクライアント拡張機能で正常に動作することが確認されているメカニズムを示しています。"

#. type: Block title
#: upstream/_guides/infinispan-client.adoc:394
#, no-wrap, fuzzy
msgid "Mechanisms"
msgstr "メカニズム"

#. type: Table
#: upstream/_guides/infinispan-client.adoc:413
#, no-wrap, fuzzy
msgid ""
"| Name | Verified\n"
"\n"
"| DIGEST-MD5\n"
"| [green]*Y*\n"
"\n"
"| PLAIN\n"
"| [green]*Y*\n"
"\n"
"| EXTERNAL\n"
"| [green]*Y*\n"
"\n"
"| GSSAPI\n"
"| [red]*N*\n"
"\n"
"| Custom\n"
"| [red]*N*\n"
"\n"
msgstr "| 名前｜名前｜検証済み"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:417
#, fuzzy
msgid ""
"The guide for configuring these can be found at https://infinispan.org/docs/"
"dev/user_guide/user_guide.html#authentication.  However you need to "
"configure these through the `hotrod-client.properties` file if using "
"Dependency Injection."
msgstr ""
"これらを設定するためのガイドは https://infinispan.org/docs/dev/user_guide/user_guide."
"html#authentication  にあります。ただし、依存性インジェクションを使用する場合は `hotrod-client."
"properties` ファイルから設定する必要があります。"

#. type: Title ==
#: upstream/_guides/infinispan-client.adoc:418
#, no-wrap, fuzzy
msgid "Additional Features"
msgstr "追加機能"

#. type: Plain text
#: upstream/_guides/infinispan-client.adoc:422
#, fuzzy
msgid ""
"The Infinispan Client has additional features that were not mentioned here. "
"This means this feature was not tested in a Quarkus environment and they may "
"or may not work. Please let us know if you need these added!"
msgstr ""
"Infinispanクライアントには、ここでは触れられていない追加機能があります。これは、この機能がQuarkus環境でテストされていないことを意味します。これらの機能を追加する必要がある場合は、ご連絡ください。"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/reactive-event-bus.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Using the event bus"
msgstr "Quarkus - イベントバスの使用"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:13
#, fuzzy
msgid ""
"Quarkus allows different beans to interact using asynchronous events, thus "
"promoting loose-coupling.  The messages are sent to _virtual addresses_.  It "
"offers 3 types of delivery mechanism:"
msgstr ""
"Quarkusでは、異なるビーンが非同期イベントを使用して相互作用することができるため、ゆるやかなカップリングが促進されます。メッセージは "
"_仮想アドレス_に送信されます。3種類の配信メカニズムを提供しています。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:15
#, fuzzy
msgid ""
"point-to-point - send the message, one consumer receives it. If several "
"consumers listen to the address, a round robin is applied;"
msgstr ""
"point-to-point - メッセージを送信し、1 "
"つのコンシューマがそれを受信します。複数の消費者がアドレスを聞いている場合、ラウンドロビンが適用されます。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:16
#, fuzzy
msgid ""
"publish/subscribe - publish a message, all the consumers listening to the "
"address are receiving the message;"
msgstr "publish/subscribe - メッセージを公開し、アドレスを聞いているすべての消費者がメッセージを受信します。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:17
#, fuzzy
msgid ""
"request/reply - send the message and expect a response. The receiver can "
"respond to the message in an asynchronous-fashion"
msgstr "request/reply - メッセージを送信し、応答を期待します。受信者は非同期的にメッセージに応答することができます。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:19
#, fuzzy
msgid ""
"All these delivery mechanism are non-blocking, and are providing one of the "
"fundamental brick to build reactive applications."
msgstr "これらの配信メカニズムはすべてノンブロッキングであり、反応型アプリケーションを構築するための基本的なレンガの1つを提供しています。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:22
#, fuzzy
msgid ""
"The asynchronous message passing feature allows replying to messages which "
"is not supported by Reactive Messaging.  However, it is limited to single-"
"event behavior (no stream) and to local messages."
msgstr ""
"非同期メッセージパッシング機能は、Reactive "
"Messagingではサポートされていないメッセージへの返信を可能にします。ただし、シングルイベント動作(ストリームなし)とローカルメッセージに限定されます。"

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:23
#, no-wrap, fuzzy
msgid "Installing"
msgstr "インストール"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:27
#, fuzzy
msgid ""
"This mechanism uses the Vert.x EventBus, so you need to enable the `vertx` "
"extension to use this feature.  If you are creating a new project, set the "
"`extensions` parameter are follows:"
msgstr ""
"この仕組みはVert.x EventBusを利用しているので、この機能を利用するには `vertx` "
"拡張機能を有効にする必要があります。新規プロジェクトを作成する場合は、 `extensions` パラメータを以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:36
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-quickstart \\\n"
"    -Dextensions=\"vertx,resteasy-mutiny\" \\\n"
"    -DnoExamples\n"
"cd vertx-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:40
#, fuzzy
msgid ""
"If you have an already created project, the `vertx` extension can be added "
"to an existing Quarkus project with the `add-extension` command:"
msgstr ""
"すでに作成済みのプロジェクトがある場合は、 `vertx` 拡張機能を既存のQuarkusプロジェクトに追加するには、 `add-extension` "
"コマンドを使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:44
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"vertx,resteasy-mutiny\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:47
#, fuzzy
msgid ""
"Otherwise, you can manually add this to the dependencies section of your "
"`pom.xml` file:"
msgstr "そうでなければ、 `pom.xml` ファイルの依存関係セクションに手動で追加することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:54
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-vertx</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:56
#, no-wrap, fuzzy
msgid "Consuming events"
msgstr "消費イベント"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:59
#, fuzzy
msgid "To consume events, use the `io.quarkus.vertx.ConsumeEvent` annotation:"
msgstr "イベントを消費するには、 `io.quarkus.vertx.ConsumeEvent` アノテーションを使用します。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:63
#: upstream/_guides/reactive-event-bus.adoc:111
#: upstream/_guides/reactive-event-bus.adoc:222
#: upstream/_guides/reactive-event-bus.adoc:296
#: upstream/_guides/reactive-event-bus.adoc:333
#, no-wrap
msgid "package org.acme.vertx;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:65
#: upstream/_guides/reactive-event-bus.adoc:113
#: upstream/_guides/reactive-event-bus.adoc:335
#, no-wrap
msgid "import io.quarkus.vertx.ConsumeEvent;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:67
#: upstream/_guides/reactive-event-bus.adoc:337
#, no-wrap
msgid "import javax.enterprise.context.ApplicationScoped;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:70
#: upstream/_guides/reactive-event-bus.adoc:121
#: upstream/_guides/reactive-event-bus.adoc:340
#, no-wrap
msgid "@ApplicationScoped\n"
"public class GreetingService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:76
#, no-wrap
msgid ""
"    @ConsumeEvent                           // <1>\n"
"    public String consume(String name) {    // <2>\n"
"        return name.toUpperCase();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:78
#, fuzzy
msgid ""
"If not set, the address is the fully qualified name of the bean, for "
"instance, in this snippet it's `org.acme.vertx.GreetingService`."
msgstr ""
"設定されていない場合、アドレスはビーンの完全修飾名となり、例えばこのスニペットでは `org.acme.vertx.GreetingService`."

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:79
#, fuzzy
msgid ""
"The method parameter is the message body. If the method returns _something_ "
"it's the message response."
msgstr "メソッドのパラメータはメッセージ本体です。メソッドが _何かを_返す場合は、それがメッセージのレスポンスになります。"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:84
#, fuzzy
msgid ""
"By default, the code consuming the event must be _non-blocking_, as it's "
"called on the Vert.x event loop.  If your processing is blocking, use the "
"`blocking` attribute:"
msgstr ""
"デフォルトでは、Vert.x イベントループで呼び出されるため、イベントを消費するコードは "
"_ノン_ブロッキングでなければなりません。処理がブロッキングされている場合は、 `blocking` 属性を使用してください。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:91
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\", blocking = true)\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:94
#, fuzzy
msgid ""
"Alternatively, you can annotate your method with `@io.smallrye.common."
"annotation.Blocking`:"
msgstr "あるいは、メソッドに `@io.smallrye.common.annotation.Blocking` と注釈を付けることもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:101
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"blocking-consumer\")\n"
"@Blocking\n"
"void consumeBlocking(String message) {\n"
"    // Something blocking\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:104
#, fuzzy
msgid ""
"When using `@Blocking`, it ignores the value of the `blocking` attribute of "
"`@ConsumeEvent`."
msgstr "`@Blocking` を使用する場合、 `@ConsumeEvent` の `blocking` 属性の値は無視されます。"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:107
#, fuzzy
msgid ""
"Asynchronous processing is also possible by returning either an `io.smallrye."
"mutiny.Uni` or a `java.util.concurrent.CompletionStage`:"
msgstr ""
"`io.smallrye.mutiny.Uni` または `java.util.concurrent.CompletionStage`.NET "
"のどちらかを返すことで、非同期処理も可能です。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:118
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import java.util.concurrent.CompletableFuture;\n"
"import java.util.concurrent.CompletionStage;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:127
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public CompletionStage<String> consume(String name) {\n"
"        // return a CompletionStage completed when the processing is "
"finished.\n"
"        // You can also fail the CompletionStage explicitly\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:134
#, no-wrap
msgid ""
"    @ConsumeEvent\n"
"    public Uni<String> process(String name) {\n"
"        // return an Uni completed when the processing is finished.\n"
"        // You can also fail the Uni explicitly\n"
"    }\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:140
#, fuzzy
msgid ""
"The previous example uses Mutiny reactive types, if you're not familiar with "
"them, we recommend reading the link:getting-started-reactive#mutiny[Getting "
"Started with Reactive guide]."
msgstr ""
"前の例では Mutiny リアクティブタイプを使用していますが、もしよく知らないのであれば、 link:getting-started-"
"reactive#mutiny[Reactive の入門ガイド]を読むことをお勧めします。"

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:142
#, no-wrap, fuzzy
msgid "Configuring the address"
msgstr "アドレスの設定"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:145
#, fuzzy
msgid "The `@ConsumeEvent` annotation can be configured to set the address:"
msgstr "`@ConsumeEvent` アノテーションでアドレスを設定することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:152
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")               // <1>\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:154
#, fuzzy
msgid "Receive the messages sent to the `greeting` address"
msgstr "`greeting` アドレスに送信されたメッセージを受信する"

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:155
#, no-wrap, fuzzy
msgid "Replying"
msgstr "返事をする"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:159
#, fuzzy
msgid ""
"The _return_ value of a method annotated with `@ConsumeEvent` is used as "
"response to the incoming message.  For instance, in the following snippet, "
"the returned `String` is the response."
msgstr ""
"`@ConsumeEvent` でアノテーションされたメソッドの "
"_戻り_値が、着信メッセージに対するレスポンスとして使用されます。例えば、次のスニペットでは、 `String` がレスポンスとして返されます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:166
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public String consume(String name) {\n"
"    return name.toUpperCase();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:169
#, fuzzy
msgid ""
"You can also return a `Uni<T>` or a `CompletionStage<T>` to handle "
"asynchronous reply:"
msgstr ""
"また、 `Uni&amp;lt;T&amp;gt;` や `CompletionStage&amp;lt;T&amp;gt;` "
"を返すことで、非同期返信を処理することもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:176
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public Uni<String> consume2(String name) {\n"
"    return Uni.createFrom().item(() -> name.toUpperCase()).emitOn(executor);\n"
"}\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:181
#, fuzzy
msgid ""
"You can inject an `executor` if you use the Context Propagation extension:"
msgstr "Context Propagation 拡張機能を使えば、 `executor` を注入することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:184
#, no-wrap
msgid "@Inject Executor executor;\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:187
#, no-wrap, fuzzy
msgid "Implementing fire and forget interactions"
msgstr "fire and forgetインタラクションの実装"

#. type: delimited block =
#: upstream/_guides/reactive-event-bus.adoc:192
#, fuzzy
msgid ""
"You don't have to reply to received messages.  Typically for a _fire and "
"forget_ interaction, the messages are consumed and the sender does not need "
"to know about it.  To implement this, your consumer method just returns "
"`void`"
msgstr ""
"受信したメッセージに返信する必要はありません。通常、 _fire and "
"forget_インタラクションでは、メッセージは消費され、送信者はそれについて知る必要はありません。これを実装するには、 consumer メソッドは "
"`void`"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:199
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(String event) {\n"
"    // Do something with the event\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/reactive-event-bus.adoc:201
#, no-wrap, fuzzy
msgid "Dealing with messages"
msgstr "メッセージへの対応"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:204
#, fuzzy
msgid ""
"As said above, this mechanism is based on the Vert.x event bus. So, you can "
"also use `Message` directly:"
msgstr "上でも述べたように、この仕組みはVert.xイベントバスをベースにしています。なので、直接 `Message` を使うこともできます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:212
#, no-wrap
msgid ""
"@ConsumeEvent(\"greeting\")\n"
"public void consume(Message<String> msg) {\n"
"    System.out.println(msg.address());\n"
"    System.out.println(msg.body());\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:214
#, no-wrap, fuzzy
msgid "Sending messages"
msgstr "メッセージの送信"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:218
#, fuzzy
msgid ""
"Ok, we have seen how to receive messages, let's now switch to the _other "
"side_: the sender.  Sending and publishing messages use the Vert.x event bus:"
""
msgstr ""
"さて、メッセージを受信する方法を見てきましたが、次は送信者 _側_に切り替えましょう。メッセージの送信と公開は Vert.x イベントバスを使います。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:227
#: upstream/_guides/reactive-event-bus.adoc:301
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import io.vertx.mutiny.core.eventbus.EventBus;\n"
"import io.vertx.mutiny.core.eventbus.Message;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:233
#: upstream/_guides/reactive-event-bus.adoc:307
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:236
#: upstream/_guides/reactive-event-bus.adoc:310
#, no-wrap
msgid "@Path(\"/async\")\n"
"public class EventResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:239
#, no-wrap
msgid ""
"    @Inject\n"
"    EventBus bus;                                       // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:248
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)        // <2>\n"
"                .onItem().transform(Message::body);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:250
#, fuzzy
msgid "Inject the Event bus"
msgstr "イベントバスのインジェクト"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:251
#, fuzzy
msgid "Send a message to the address `greeting`. Message payload is `name`"
msgstr "アドレス `greeting` にメッセージを送信してください。メッセージのペイロードは `name`"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:253
#, fuzzy
msgid "The `EventBus` object provides methods to:"
msgstr "`EventBus` オブジェクトは、以下のメソッドを提供します。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:255
#, fuzzy
msgid ""
"`send` a message to a specific address - one single consumer receives the "
"message."
msgstr "`send` 特定のアドレスへのメッセージ - 一人の消費者がメッセージを受信する。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:256
#, fuzzy
msgid ""
"`publish` a message to a specific address - all consumers receive the "
"messages."
msgstr "`publish` 特定のアドレスにメッセージを送る - すべての消費者がメッセージを受け取る。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:257
#, fuzzy
msgid "`send` a message and expect reply"
msgstr "`send` メッセージを送って返信を期待する"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:267
#, no-wrap
msgid ""
"// Case 1\n"
"bus.sendAndForget(\"greeting\", name)\n"
"// Case 2\n"
"bus.publish(\"greeting\", name)\n"
"// Case 3\n"
"Uni<String> response = bus.<String>request(\"address\", \"hello, how are "
"you?\")\n"
"        .onItem().transform(Message::body);\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:269
#, no-wrap, fuzzy
msgid "Putting things together - bridging HTTP and messages"
msgstr "物事をまとめる - HTTPとメッセージのブリッジング"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:275
#, fuzzy
msgid ""
"Let's revisit a greeting HTTP endpoint and use asynchronous message passing "
"to delegate the call to a separated bean.  It uses the request/reply "
"dispatching mechanism.  Instead of implementing the business logic inside "
"the JAX-RS endpoint, we are sending a message.  This message is consumed by "
"another bean and the response is sent using the _reply_ mechanism."
msgstr ""
"挨拶HTTPエンドポイントを再訪し、非同期メッセージパッシングを使用して分離されたビーンに呼び出しを委譲してみましょう。リクエスト/"
"レスポンスディスパッチの仕組みを利用しています。JAX-"
"RSエンドポイント内にビジネスロジックを実装する代わりに、メッセージを送信しています。このメッセージは別のBeanによって消費され、応答は "
"_応答_機構を使用して送信されます。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:277
#, fuzzy
msgid "First create a new project using:"
msgstr "まず、新しいプロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:286
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=vertx-http-quickstart \\\n"
"    -Dextensions=\"vertx\" \\\n"
"    -DnoExamples\n"
"cd vertx-http-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:289
#, fuzzy
msgid ""
"You can already start the application in _dev mode_ using `./mvnw compile "
"quarkus:dev`."
msgstr "`./mvnw compile quarkus:dev` を使用して、すでに _開発者モード_でアプリケーションを起動することができます。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:291
#, fuzzy
msgid "Then, creates a new JAX-RS resource with the following content:"
msgstr "そして、以下の内容のJAX-RSリソースを新規に作成します。"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:293
#, no-wrap, fuzzy
msgid "src/main/java/org/acme/vertx/EventResource.java"
msgstr "src/main/java/org/acme/vertx/ventResource.java"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:313
#, no-wrap
msgid "    @Inject\n"
"    EventBus bus;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:322
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    @Path(\"{name}\")\n"
"    public Uni<String> greeting(@PathParam String name) {\n"
"        return bus.<String>request(\"greeting\", name)            // <1>\n"
"                .onItem().transform(Message::body);            // <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:324
#, fuzzy
msgid "send the `name` to the `greeting` address and request a response"
msgstr "`name` `greeting` を送信し、回答を求める。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:325
#, fuzzy
msgid "when we get the response, extract the body and send it to the user"
msgstr "レスポンスを取得したら、本文を抽出してユーザーに送信します。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:328
#, fuzzy
msgid ""
"If you call this endpoint, you will wait and get a timeout. Indeed, no one "
"is listening.  So, we need a consumer listening on the `greeting` address. "
"Create a `GreetingService` bean with the following content:"
msgstr ""
"このエンドポイントを呼び出すと、待っていてタイムアウトになります。確かに、誰も聞いていません。そこで、 `greeting` "
"アドレスでリスニングしているコンシューマーが必要です。以下の内容の `GreetingService` ビーンを作成します。"

#. type: Block title
#: upstream/_guides/reactive-event-bus.adoc:330
#, no-wrap, fuzzy
msgid "src/main/java/org/acme/vertx/GreetingService.java"
msgstr "src/main/java/org/acme/vertx/GreetingService.java"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:345
#, no-wrap
msgid ""
"    @ConsumeEvent(\"greeting\")\n"
"    public String greeting(String name) {\n"
"        return \"Hello \" + name;\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:350
#, fuzzy
msgid "This bean receives the name, and returns the greeting message."
msgstr "このBeanは名前を受け取り，挨拶メッセージを返します．"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:352
#, fuzzy
msgid ""
"Now, open your browser to http://localhost:8080/async/Quarkus, and you "
"should see:"
msgstr "さて、ブラウザを開いて http://localhost:8080/async/Quarkus 。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:356
#, no-wrap
msgid "Hello Quarkus\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:359
#, fuzzy
msgid ""
"To better understand, let's detail how the HTTP request/response has been "
"handled:"
msgstr "より理解しやすくするために、HTTPリクエスト/レスポンスがどのように処理されたかを詳しく見てみましょう。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:361
#, fuzzy
msgid "The request is received by the `hello` method"
msgstr "リクエストは `hello` メソッドで受信します。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:362
#, fuzzy
msgid "a message containing the _name_ is sent to the event bus"
msgstr "_名前を_含むメッセージがイベントバスに送信されます。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:363
#, fuzzy
msgid "Another bean receives this message and computes the response"
msgstr "別のBeanはこのメッセージを受信して，応答を計算します．"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:364
#, fuzzy
msgid "This response is sent back using the reply mechanism"
msgstr "この応答は、リプライ機構を使用して返信されます。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:365
#, fuzzy
msgid ""
"Once the reply is received by the sender, the content is written to the HTTP "
"response"
msgstr "送信者が返信を受信すると、HTTPレスポンスに内容が書き込まれます。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:367
#, fuzzy
msgid "This application can be packaged using:"
msgstr "このアプリケーションは、以下の方法でパッケージ化することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:371
#, no-wrap
msgid "./mvnw clean package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:374
#, fuzzy
msgid "You can also compile it as a native executable with:"
msgstr "でネイティブ実行ファイルとしてコンパイルすることもできます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:378
#, no-wrap
msgid "./mvnw clean package -Pnative\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/reactive-event-bus.adoc:380
#, no-wrap, fuzzy
msgid "Using codecs"
msgstr "コーデックを使う"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:385
#, fuzzy
msgid ""
"The https://vertx.io/docs/vertx-core/java/#event_bus[Vert.x Event Bus] uses "
"codecs to _serialize_ and _deserialize_ objects.  Quarkus provides a default "
"codec for local delivery.  So you can exchange objects as follows:"
msgstr ""
"link:https://vertx.io/docs/vertx-core/java/#event_bus[Vert."
"xイベントバスで]は、コーデックを使用してオブジェクトの _シリアライズ_と "
"_デシリアライズ_を行います。Quarkusでは、ローカル配信用のデフォルトのコーデックを提供しています。そのため、以下のようにオブジェクトを交換することができます。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:395
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", new MyName(name))\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:400
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\")\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \" + name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:403
#, fuzzy
msgid ""
"If you want to use a specific codec, you need to explicitly set it on both "
"ends:"
msgstr "特定のコーデックを使用したい場合は、両端で明示的に設定する必要があります。"

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:414
#, no-wrap
msgid ""
"@GET\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Path(\"{name}\")\n"
"public Uni<String> greeting(@PathParam String name) {\n"
"    return bus.<String>request(\"greeting\", name,\n"
"        new DeliveryOptions().setCodecName(MyNameCodec.class.getName())) // "
"<1>\n"
"        .onItem().transform(Message::body);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/reactive-event-bus.adoc:419
#, no-wrap
msgid ""
"@ConsumeEvent(value = \"greeting\", codec = MyNameCodec.class)            // "
"<2>\n"
"Uni<String> greeting(MyName name) {\n"
"    return Uni.createFrom().item(() -> \"Hello \"+name.getName());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:421
#, fuzzy
msgid "Set the name of the codec to use to send the message"
msgstr "メッセージの送信に使用するコーデックの名前を設定します。"

#. type: Plain text
#: upstream/_guides/reactive-event-bus.adoc:421
#, fuzzy
msgid "Set the codec to use to receive the message"
msgstr "メッセージの受信に使用するコーデックを設定します。"

#. type: Title =
#: upstream/_guides/quarkus-intro.adoc:1
#, no-wrap, fuzzy
msgid "What is Quarkus"
msgstr "クォークスとは"

#.  tag::intro[]
#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:19
#, fuzzy
msgid ""
"Quarkus is a Cloud Native, Container First framework for writing Java "
"applications."
msgstr "Quarkusは、Javaアプリケーションを書くためのクラウドネイティブ、コンテナファーストのフレームワークです。"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:21
#, no-wrap, fuzzy
msgid "Container First"
msgstr "コンテナファースト"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:23
#, fuzzy
msgid ""
"Minimal footprint Java applications optimized for running in containers"
msgstr "コンテナでの実行に最適化されたミニマムフットプリントのJavaアプリケーション"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:23
#: upstream/_guides/quarkus-intro.adoc:56
#, no-wrap, fuzzy
msgid "Cloud Native"
msgstr "クラウドネイティブ"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:25
#, fuzzy
msgid "Embraces 12 factor architecture in environments like Kubernetes"
msgstr "Kubernetesのような環境で12因子アーキテクチャを採用"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:25
#, no-wrap, fuzzy
msgid "Unify imperative and reactive"
msgstr "命令的なものと反応的なものを統一する"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:27
#, fuzzy
msgid ""
"Brings under one programming model non blocking and imperative styles of "
"development"
msgstr "ノンブロッキングと命令型の開発スタイルを1つのプログラミングモデルにまとめました。"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:27
#, no-wrap, fuzzy
msgid "Standards-based"
msgstr "標準化された"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:29
#, fuzzy
msgid ""
"Based on the standards and the libraries you love and use (RESTEasy, "
"Hibernate, Netty, Eclipse Vert.x, Apache Camel...)"
msgstr ""
"標準や愛用しているライブラリ（RESTEasy、Hibernate、Netty、Eclipse Vert.x、Apache Camel..."
"）に基づいています。"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:29
#, no-wrap, fuzzy
msgid "Microservice First"
msgstr "マイクロサービスファースト"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:31
#, fuzzy
msgid "Brings lightning fast startup time to Java applications"
msgstr "Javaアプリケーションの起動時間を大幅に短縮"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:31
#, no-wrap, fuzzy
msgid "Extreme productivity"
msgstr "極限の生産性"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:33
#, fuzzy
msgid ""
"Instant hot code replacement: don't allow build, deploy, boot delays disrupt "
"your flow"
msgstr "インスタントホットコードの置き換え: ビルド、デプロイ、ブートの遅延がフローを混乱させないようにする"

#. type: Labeled list
#: upstream/_guides/quarkus-intro.adoc:33
#, no-wrap, fuzzy
msgid "Developer Joy"
msgstr "開発者の喜び"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:35
#, fuzzy
msgid ""
"Development-centric experience without compromises to bring your amazing "
"applications to life in no time"
msgstr "妥協のない開発中心の体験で、素晴らしいアプリケーションを短時間で実現"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:37
#, fuzzy
msgid "All under one framework."
msgstr "すべては一つの枠組みの下で。"

#.  end::intro[]
#. type: Title ==
#: upstream/_guides/quarkus-intro.adoc:40
#, no-wrap, fuzzy
msgid "Scratch pad"
msgstr "スクラッチパッド"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:44
#, fuzzy
msgid "Quarkus believes in developer Joy."
msgstr "クォークスは開発者のジョイを信じています。"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:48
#, fuzzy
msgid ""
"It unifies imperative and reactive.  It is a Microservice first toolkit."
msgstr "インプライベーティブとリアクティブを統一しています。マイクロサービスファーストのツールキットです。"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:51
#, fuzzy
msgid ""
"Standards based Quarkus brings all the standards and frameworks you love and "
"use: RESTEasy, Hibernate, Netty, vert.x, Camel...)"
msgstr ""
"標準ベースのQuarkusは、あなたが好きで使っているすべての標準やフレームワークを提供します。RESTEasy、Hibernate、Netty、vert."
"x、Camelなどです。)"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:53
#, fuzzy
msgid "Imperative and Reactive"
msgstr "強迫的と反応的"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:55
#, fuzzy
msgid "ahead-of-time native binary (executable binary)"
msgstr "先行ネイティブバイナリ"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:57
#, fuzzy
msgid "Java"
msgstr "ジャワ"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:58
#, fuzzy
msgid "modular"
msgstr "モジュラー"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:59
#, fuzzy
msgid "Substrate VM native"
msgstr "基板 VM ネイティブ"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:61
#, fuzzy
msgid "Seamlessly build container optimal"
msgstr "シームレスに最適なコンテナを構築"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:63
#, fuzzy
msgid "Container affinity"
msgstr "コンテナとの親和性"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:65
#, fuzzy
msgid "Container optimal"
msgstr "コンテナの最適化"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:67
#, fuzzy
msgid "low memory"
msgstr "ローメモリ"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:68
#, fuzzy
msgid "low startup time"
msgstr "低起動時間"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:69
#, fuzzy
msgid "ahead of time optimal"
msgstr "先行最適"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:71
#, fuzzy
msgid "Unifying Imperative and Reactive under one framework."
msgstr "ImperativeとReactiveを一つのフレームワークで統一する。"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:73
#, fuzzy
msgid "Usability"
msgstr "ユーザビリティ"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:74
#, fuzzy
msgid "easy to use"
msgstr "使いやすい"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:75
#, fuzzy
msgid "productive environment"
msgstr "せいさんかんきょう"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:76
#, fuzzy
msgid "hot reload"
msgstr "ホットリロード"

#. type: Plain text
#: upstream/_guides/quarkus-intro.adoc:78
#, fuzzy
msgid "Standards based"
msgstr "標準化された"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/amazon-ses.adoc:6
#, no-wrap
msgid "Quarkus - Amazon SES Client"
msgstr "Quarkus - Amazon SES クライアント"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:13
msgid ""
"Amazon Simple Email Service (SES) is a flexible and highly-scalable email "
"sending and receiving service.  Using SES, you can send emails with any type "
"of correspondence. You can find more information about SES at https://aws."
"amazon.com/ses/[the Amazon SES website]."
msgstr ""
"Amazon Simple Email "
"Service（SES）は、柔軟で拡張性の高いメール送受信サービスです。SESを利用することで、あらゆる対応でメールを送信することができます。SESの詳細については、 "
"link:https://aws.amazon.com/ses/[Amazon SESのウェブサイト]で確認できます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:16
msgid ""
"The SES extension is based on https://docs.aws.amazon.com/sdk-for-java/v2/"
"developer-guide/welcome.html[AWS Java SDK 2.x].  It's a major rewrite of the "
"1.x code base that offers two programming models (Blocking & Async)."
msgstr ""
"SESのエクステンションは link:https://docs.aws.amazon.com/sdk-for-java/v2/developer-"
"guide/welcome.html[AWS Java SDK 2.x]をベースにしており、2つのプログラミングモデル（Blocking &amp; "
"Async）を提供する1.xのコードベースを大幅に書き換えています。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:20
msgid "The Quarkus extension supports two programming models:"
msgstr "Quarkusエクステンションは、2つのプログラミングモデルをサポートしています。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:22
msgid ""
"Blocking access using URL Connection HTTP client (by default) or the Apache "
"HTTP Client"
msgstr ""
"URL Connection HTTP クライアント (デフォルト) または Apache HTTP クライアントを使ってアクセスをブロックする"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:23
msgid ""
"https://docs.aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async."
"html[Asynchronous programming] based on JDK's `CompletableFuture` objects "
"and the Netty HTTP client."
msgstr ""
"JDK の `CompletableFuture` オブジェクトと Netty HTTP クライアントをベースにした link:https://docs."
"aws.amazon.com/sdk-for-java/v2/developer-guide/basics-async."
"html[非同期プログラミング]。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:25
msgid ""
"In this guide, we see how you can get your REST services to use SES locally "
"and on AWS."
msgstr "このガイドでは、RESTサービスを利用してローカルでAWS上でSESを利用する方法を見ていきます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:34
msgid "An AWS Account to access the SES service"
msgstr "SESサービスにアクセスするためのAWSアカウント"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:35
msgid "Docker for your system to run SES locally for testing purposes"
msgstr "テスト目的でローカルでSESを実行するためのDocker"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:36
#, no-wrap
msgid "Set up SES locally"
msgstr "ローカルでSESを設定する"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:40
msgid ""
"The easiest way to start working with SES is to run a local instance as a "
"container.  However, local instance of SES is only mocks the SES APIs "
"without the actual email sending capabilities. You can still use it for this "
"guide to verify an API communication or integration test purposes."
msgstr ""
"SESを使い始める最も簡単な方法は、コンテナとしてローカルインスタンスを実行することです。しかし、SESのローカルインスタンスは、実際のメール送信機能を持たずにSESのAPIをモックしているに過ぎません。それでも、このガイドではAPI通信の検証や統合テストの目的で使用することができます。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:44
#, no-wrap
msgid ""
"docker run --rm --name local-ses -p 8012:4579 -e SERVICES=ses -e START_WEB=0 "
"-d localstack/localstack:0.11.1\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:46
msgid "This starts a SES instance that is accessible on port `8012`."
msgstr "これは、ポート `8012` でアクセス可能な SES インスタンスを起動します。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:48
msgid "Create an AWS profile for your local instance using AWS CLI:"
msgstr "AWS CLIを使ってローカルインスタンスのAWSプロファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:55
#, no-wrap
msgid ""
"$ aws configure --profile localstack\n"
"AWS Access Key ID [None]: test-key\n"
"AWS Secret Access Key [None]: test-secret\n"
"Default region name [None]: us-east-1\n"
"Default output format [None]:\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:57
#, no-wrap
msgid "Using SES on your AWS account"
msgstr "AWSアカウントでSESを使う"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:61
msgid ""
"Amazon applies certain restrictions to new Amazon SES accounts, mainly to "
"prevent fraud and abuse. All new accounts are in the Amazon SES *sandbox*.  "
"All the features of the Amazon SES are still available while in sandbox, but "
"a following restrictions applies:"
msgstr ""
"Amazonは、主に詐欺や悪用を防ぐために、Amazon SESの新規アカウントに一定の制限を適用しています。新規アカウントはすべてAmazon "
"SESの *サンドボックス*に入っています。サンドボックスにいる間もAmazon SESの機能はすべて利用できますが、以下の制限が適用されます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:62
msgid ""
"You can send mail to verified email addresses and domains or to the https://"
"docs.aws.amazon.com/ses/latest/DeveloperGuide/send-email-simulator."
"html[Amazon SES mailbox simulator]"
msgstr ""
"検証済みのメールアドレスやドメインにメールを送信したり、 link:https://docs.aws.amazon.com/ses/latest/"
"DeveloperGuide/send-email-simulator.html[Amazon "
"SESのメールボックスシミュレータ]にメールを送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:63
msgid "You can only send mail from verified email addresses and domains"
msgstr "検証済みのメールアドレスとドメインからのみメールを送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:64
msgid "You can send a maximum of 1 message per second."
msgstr "1秒間に最大1メッセージまで送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:66
msgid ""
"Going production, you'd need to get your account of the sandbox following "
"the https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-production-"
"access.html[Amazon procedure]."
msgstr ""
"本番にするには、 link:https://docs.aws.amazon.com/ses/latest/DeveloperGuide/request-"
"production-access.html[Amazonの手順]に沿ってサンドボックスのアカウントを取得する必要があります。"

#. type: Title ===
#: upstream/_guides/amazon-ses.adoc:67
#, no-wrap
msgid "Set up AWS SES"
msgstr "AWS SESの設定"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:71
msgid ""
"We assume you are going to use AWS SES sandbox for the sake of this guide. "
"But before sending any email, you must verify sender and recipient email "
"addresses using AWS CLI.  You can use your personal email or any temporary "
"email service available if you wish."
msgstr ""
"このガイドでは、AWS SESサンドボックスを使用することを想定しています。しかし、メールを送信する前に、AWS "
"CLIを使って送信者と受信者のメールアドレスを確認する必要があります。必要に応じて、個人のメールや利用可能な一時的なメールサービスを利用することができます。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:76
#, no-wrap
msgid ""
"aws ses verify-email-identity --email-address <sender@email.address>\n"
"aws ses verify-email-identity --email-address <recipient@email.address>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:78
msgid ""
"Now, you need to open a mailboxes of those email addresses in order to "
"follow confirmation procedure. Once email is approved you can use it in your "
"application."
msgstr "ここで、確認のためにメールアドレスのメールボックスを開く必要があります。メールが承認されれば、申請に使用することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:81
msgid ""
"If you are using local SES you still need to verify email addresses, "
"otherwise your send email in order to let local SES accepting your request.  "
"However, no emails to be send as it only mocks the service APIs."
msgstr ""
"ローカルSESを使用している場合は、メールアドレスを確認する必要がありますが、そうでない場合は、ローカルSESにリクエストを受け付けるためにメールを送信します。ただし、サービスのAPIをモックするだけなので、メールは送信されません。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:86
#, no-wrap
msgid ""
"aws ses verify-email-identity --email-address <sender@email.address> --"
"profile localstack --endpoint-url=http://localhost:8012\n"
"aws ses verify-email-identity --email-address <recipient@email.address> --"
"profile localstack --endpoint-url=http://localhost:8012\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:90
msgid ""
"The application built here allows sending text emails to the recipients that "
"are verified on AWS SES."
msgstr "ここで構築したアプリケーションでは、AWS SES上で確認された受信者にテキストメールを送信することができます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:97
msgid ""
"The solution is located in the `amazon-ses-quickstart` {quickstarts-tree-"
"url}/amazon-ses-quickstart[directory]."
msgstr ""
"ソリューションは `amazon-ses-quickstart` {quickstarts-tree-url}/amazon-ses-"
"quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:98
#, no-wrap
msgid "Creating the Maven project"
msgstr "Mavenプロジェクトの作成"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:111
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=amazon-ses-quickstart \\\n"
"    -DclassName=\"org.acme.ses.QuarkusSesSyncResource\" \\\n"
"    -Dpath=\"/sync\" \\\n"
"    -Dextensions=\"resteasy-jackson,amazon-ses,resteasy-mutiny\"\n"
"cd amazon-ses-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:115
msgid ""
"This command generates a Maven structure importing the RESTEasy/JAX-RS, "
"Mutiny and Amazon SES Client extensions.  After this, the `amazon-ses` "
"extension has been added to your `pom.xml` as well as the Mutiny support for "
"RESTEasy."
msgstr ""
"このコマンドは、RESTEasy/JAX-RS、Mutiny、Amazon SES "
"ClientエクステンションをインポートしたMavenディレクトリ構造を生成します。 `pom.xml` "
"この後、RESTEasyのMutinyサポートと同様に、 `amazon-ses` エクステンションが追加されています。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:116
#, no-wrap
msgid "Creating JSON REST service"
msgstr "JSON RESTサービスの作成"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:119
msgid ""
"Lets create a `org.acme.ses.QuarkusSesSyncResource` that will provide an API "
"to send emails using the synchronous client."
msgstr ""
"同期クライアントを使用して電子メールを送信するためのAPIを提供する `org.acme.ses.QuarkusSesSyncResource` "
"を作成しましょう。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:123 upstream/_guides/amazon-ses.adoc:225
#, no-wrap
msgid "package org.acme.ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:132
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.ses.model.Email;\n"
"import software.amazon.awssdk.services.ses.SesClient;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:137
#, no-wrap
msgid ""
"@Path(\"/sync\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarkusSesSyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:140
#, no-wrap
msgid "    @Inject\n"
"    SesClient ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:152
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/email\")\n"
"    public String encrypt(Email data) {\n"
"        return ses.sendEmail(req -> req\n"
"            .source(data.getFrom())\n"
"            .destination(d -> d.toAddresses(data.getTo()))\n"
"            .message(msg -> msg\n"
"                .subject(sub -> sub.data(data.getSubject()))\n"
"                .body(b -> b.text(txt -> txt.data(data.getBody())))))."
"messageId();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:154
#, no-wrap
msgid "Configuring SES clients"
msgstr "SESクライアントの設定"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:159
msgid ""
"Both SES clients (sync and async) are configurable via the `application."
"properties` file that can be provided in the `src/main/resources` directory. "
" Additionally, you need to add to the classpath a proper implementation of "
"the sync client. By default the extension uses the URL connection HTTP "
"client, so you need to add a URL connection client dependency to the `pom."
"xml` file:"
msgstr ""
"SES クライアント (sync と async) は、 `src/main/resources` ディレクトリにある `application."
"properties` "
"ファイルを介して設定可能です。さらに、同期クライアントの適切な実装をクラスパスに追加する必要があります。デフォルトでは、拡張機能は URL 接続 "
"HTTP クライアントを使用するので、URL 接続クライアントの依存関係を `pom.xml` ファイルに追加する必要があります。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:166
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>url-connection-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:169
msgid ""
"If you want to use Apache HTTP client instead, configure it as follows:"
msgstr "代わりにApache HTTPクライアントを使用したい場合は、以下のように設定します。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:172
#, no-wrap
msgid "quarkus.ses.sync-client.type=apache\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:175
msgid "And add the following dependency to the application `pom.xml`:"
msgstr "そして、以下の依存関係をアプリケーションの `pom.xml`に追加します。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:181
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>apache-client</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:184
msgid "If you're going to use a local SES instance, configure it as follows:"
msgstr "ローカルのSESインスタンスを使用する場合は、以下のように設定します："

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:188
#, no-wrap
msgid "quarkus.ses.endpoint-override=http://localhost:8012\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:193
#, no-wrap
msgid ""
"quarkus.ses.aws.region=us-east-1\n"
"quarkus.ses.aws.credentials.type=static\n"
"quarkus.ses.aws.credentials.static-provider.access-key-id=test-key\n"
"quarkus.ses.aws.credentials.static-provider.secret-access-key=test-secret\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:196
msgid ""
"`quarkus.ses.aws.region` - It's required by the client, but since you're "
"using a local SES instance use `us-east-1` as it's a default region of "
"localstack's SES."
msgstr ""
"`quarkus.ses.aws.region` - "
"クライアントで必要ですが、ローカルのSESインスタンスを使用しているので、ローカルスタックのSESのデフォルトリージョンである `us-east-1` "
"を使用してください。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:197
msgid ""
"`quarkus.ses.aws.credentials.type` - Set `static` credentials provider with "
"any values for `access-key-id` and `secret-access-key`"
msgstr ""
"`quarkus.ses.aws.credentials.type` - `static` 資格情報プロバイダを設定し、 `access-key-id` "
"と `secret-access-key`を任意の値で設定します"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:198
msgid ""
"`quarkus.ses.endpoint-override` - Override the SES client to use a local "
"instance instead of an AWS service"
msgstr ""
"`quarkus.ses.endpoint-override` - SES クライアントをオーバーライドして AWS "
"サービスの代わりにローカルインスタンスを使うようにする"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:201
msgid ""
"If you want to work with an AWS account, you can simply remove or comment "
"out all Amazon SES related properties. By default, the SES client extension "
"will use the `default` credentials provider chain that looks for credentials "
"in this order:"
msgstr ""
"AWSアカウントで作業したい場合は、Amazon "
"SES関連のプロパティをすべて削除するかコメントアウトするだけです。デフォルトでは、SESクライアントエクステンションは、`default` "
"クレデンシャルプロバイダチェーンは使用し、以下の順番でクレデンシャルを検索します："

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:205
msgid "And the region from your AWS CLI profile will be used."
msgstr "そして、AWS CLIプロファイルからのリージョンが使用されます。"

#. type: Title ==
#: upstream/_guides/amazon-ses.adoc:206
#, no-wrap
msgid "Next steps"
msgstr "次のステップ"

#. type: Title ===
#: upstream/_guides/amazon-ses.adoc:208
#, no-wrap
msgid "Packaging"
msgstr "パッケージング"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:212
msgid ""
"Packaging your application is as simple as `./mvnw clean package`.  It can "
"be run with `java -jar target/amazon-ses-quickstart-1.0-SNAPSHOT-runner.jar`."
""
msgstr ""
"アプリケーションのパッケージ化は `./mvnw clean package` のように簡単です。 `java -jar target/amazon-"
"ses-quickstart-1.0-SNAPSHOT-runner.jar` で実行できます。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:215
msgid ""
"With GraalVM installed, you can also create a native executable binary: `./"
"mvnw clean package -Dnative`.  Depending on your system, that will take some "
"time."
msgstr ""
"GraalVMをインストールした状態で、ネイティブの実行バイナリを作成することもできます: `./mvnw clean package -"
"Dnative`.お使いのシステムにもよりますが、時間がかかります。"

#. type: Title ===
#: upstream/_guides/amazon-ses.adoc:216
#, no-wrap
msgid "Going asynchronous"
msgstr "非同期実行"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:219
msgid ""
"Thanks to the AWS SDK v2.x used by the Quarkus extension, you can use the "
"asynchronous programming model out of the box."
msgstr "Quarkusの拡張機能で使われているAWS SDK v2.xのおかげで、非同期プログラミングモデルをすぐに使えるようになりました。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:221
msgid ""
"Create a `org.acme.ses.QuarkusSesAsyncResource` REST resource that will be "
"similar to our `QuarkusSesSyncResource` but using an asynchronous "
"programming model."
msgstr ""
"`org.acme.ses.QuarkusSesAsyncResource` RESTリソースを作成します。 "
"`QuarkusSesSyncResource` と似ていますが、非同期プログラミングモデルを使用しています。"

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:236
#, no-wrap
msgid ""
"import io.smallrye.mutiny.Uni;\n"
"import javax.inject.Inject;\n"
"import javax.ws.rs.Consumes;\n"
"import javax.ws.rs.POST;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import org.acme.ses.model.Email;\n"
"import software.amazon.awssdk.services.ses.SesAsyncClient;\n"
"import software.amazon.awssdk.services.ses.model.SendEmailResponse;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:241
#, no-wrap
msgid ""
"@Path(\"/async\")\n"
"@Produces(MediaType.TEXT_PLAIN)\n"
"@Consumes(MediaType.APPLICATION_JSON)\n"
"public class QuarkusSesAsyncResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:244
#, no-wrap
msgid "    @Inject\n"
"    SesAsyncClient ses;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:259
#, no-wrap
msgid ""
"    @POST\n"
"    @Path(\"/email\")\n"
"    public Uni<String> encrypt(Email data) {\n"
"        return Uni.createFrom()\n"
"            .completionStage(\n"
"                ses.sendEmail(req -> req\n"
"                    .source(data.getFrom())\n"
"                    .destination(d -> d.toAddresses(data.getTo()))\n"
"                    .message(msg -> msg\n"
"                        .subject(sub -> sub.data(data.getSubject()))\n"
"                        .body(b -> b.text(txt -> txt.data(data."
"getBody()))))))\n"
"            .onItem().apply(SendEmailResponse::messageId);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:261
msgid ""
"We create `Uni` instances from the `CompletionStage` objects returned by the "
"asynchronous SES client, and then transform the emitted item."
msgstr ""
"非同期SESクライアントから返された `CompletionStage` オブジェクトから `Uni` "
"インスタンスを作成し、生成されたアイテムを変換します。"

#. type: Plain text
#: upstream/_guides/amazon-ses.adoc:263
msgid "And we need to add the Netty HTTP client dependency to the `pom.xml`:"
msgstr "そして、NETTY HTTPクライアント依存関係を `pom.xml`に追加する必要があります："

#. type: delimited block -
#: upstream/_guides/amazon-ses.adoc:270
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>software.amazon.awssdk</groupId>\n"
"    <artifactId>netty-nio-client</artifactId>\n"
"</dependency>\n"
msgstr ""
