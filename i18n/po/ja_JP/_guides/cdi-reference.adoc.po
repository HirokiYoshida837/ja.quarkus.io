# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/cdi-reference.adoc:6
#, no-wrap, fuzzy
msgid "Quarkus - Contexts and Dependency Injection"
msgstr "Quarkus - コンテキストと依存性インジェクション"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:17
#, fuzzy
msgid ""
"Quarkus DI solution is based on the http://docs.jboss.org/cdi/spec/2.0/cdi-"
"spec.html[Contexts and Dependency Injection for Java 2.0, window=\"_blank\"] "
"specification.  However, it is not a full CDI implementation verified by the "
"TCK.  Only a subset of the CDI features is implemented - see also "
"<<supported_features,the list of supported features>> and <<limitations,the "
"list of limitations>>."
msgstr ""
"QuarkusのDIソリューションは、 link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html[Contexts and Dependency Injection for Java 2.0, window="
"_blank]仕様に基づいています。しかし、TCKによって検証されたCDIの完全な実装ではありません。CDI機能のサブセットのみが実装されています - "
"link:#supported_features[サポートされている機能のリスト]と link:"
"#limitations[制限事項のリスト]も参照してください。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:19
#, fuzzy
msgid ""
"If you're new to CDI then we recommend you to read the link:cdi[Introduction "
"to CDI] first."
msgstr "CDI が初めての方は、最初に link:cdi[CDI の紹介]を読むことをお勧めします。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:21
#, fuzzy
msgid ""
"Most of the existing CDI code should work just fine but there are some small "
"differences which follow from the Quarkus architecture and goals."
msgstr "既存のCDIコードのほとんどは問題なく動作するはずですが、Quarkusのアーキテクチャや目標との間には、いくつかの小さな違いがあります。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:23
#, no-wrap, fuzzy
msgid "Bean Discovery"
msgstr "豆の発見"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:28
#, fuzzy
msgid ""
"Bean discovery in CDI is a complex process which involves legacy deployment "
"structures and accessibility requirements of the underlying module "
"architecture.  However, Quarkus is using a *simplified bean discovery*.  "
"There is only single bean archive with the https://docs.jboss.org/cdi/spec/2."
"0/cdi-spec.html#default_bean_discovery[bean discovery mode `annotated`, "
"window=\"_blank\"] and no visibility boundaries."
msgstr ""
"CDIでのビーンディスカバリは、レガシーなデプロイメント構造と、基礎となるモジュールアーキテクチャのアクセシビリティ要件を含む複雑なプロセスです。しかし、Quarkusは "
"*簡素化された*ビーンディスカバリーを使用しています。ビーン発見 link:https://docs.jboss.org/cdi/spec/2.0/"
"cdi-spec.html#default_bean_discovery[モード（ `annotated`）, window="
"_blank]と可視性の境界線がない単一のビーンアーカイブのみが存在します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:30
#, fuzzy
msgid "The bean archive is synthesized from:"
msgstr "豆のアーカイブから合成しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:32
#, fuzzy
msgid "the application classes,"
msgstr "アプリケーションクラスを使用しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:33
#, fuzzy
msgid ""
"dependencies that contain a `beans.xml` descriptor (content is ignored),"
msgstr "`beans.xml` 記述子を含む依存関係 (内容は無視されます)。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:34
#, fuzzy
msgid "dependencies that contain a Jandex index - `META-INF/jandex.idx`,"
msgstr "Jandex インデックスを含む依存関係 - `META-INF/jandex.idx`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:35
#, fuzzy
msgid ""
"dependencies referenced by `quarkus.index-dependency` in `application."
"properties`,"
msgstr "`quarkus.index-dependency` で参照される依存関係 `application.properties`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:36
#, fuzzy
msgid "and Quarkus integration code."
msgstr "とQuarkusの統合コードを使用しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:41
#, fuzzy
msgid ""
"Bean classes that don't have a http://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#bean_defining_annotations[bean defining annotation, window=\"_blank\"] "
"are not discovered.  This behavior is defined by CDI.  But producer methods "
"and fields and observer methods are discovered even if the declaring class "
"is not annotated with a bean defining annotation (this behavior is different "
"to what is defined in CDI).  In fact, the declaring bean classes are "
"considered annotated with `@Dependent`."
msgstr ""
"Bean定義 link:http://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#bean_defining_annotations[アノテーションを, window="
"_blank]持たないBeanクラスは発見されない。この動作はCDIで定義されています。しかし，プロデューサメソッドやフィールド，オブザーバメソッドは，宣言クラスがビーン定義アノテーションを持たない場合でも発見されます（この動作はCDIで定義されているものとは異なります）。実際には、宣言ビーンクラスは "
"`@Dependent`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:43
#, fuzzy
msgid ""
"Quarkus extensions may declare additional discovery rules. For example, "
"`@Scheduled` business methods are registered even if the declaring class is "
"not annotated with a bean defining annotation."
msgstr ""
"Quarkusのエクステンションは、追加のディスカバリールールを宣言することができます。例えば、 `@Scheduled` "
"ビジネスメソッドは、宣言するクラスがビーン定義アノテーションでアノテーションされていなくても登録されます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:44
#, no-wrap, fuzzy
msgid "How to Generate a Jandex Index"
msgstr "ジャンデックスインデックスの生成方法"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:48
#, fuzzy
msgid ""
"A dependency with a Jandex index is automatically scanned for beans.  To "
"generate the index just add the following to your `pom.xml`:"
msgstr "Jandex インデックスを持つ依存関係は、自動的にビーンズをスキャンします。インデックスを生成するには、以下を `pom.xml`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:68
#, no-wrap
msgid ""
"<build>\n"
"  <plugins>\n"
"    <plugin>\n"
"      <groupId>org.jboss.jandex</groupId>\n"
"      <artifactId>jandex-maven-plugin</artifactId>\n"
"      <version>1.0.7</version>\n"
"      <executions>\n"
"        <execution>\n"
"          <id>make-index</id>\n"
"          <goals>\n"
"            <goal>jandex</goal>\n"
"          </goals>\n"
"        </execution>\n"
"      </executions>\n"
"    </plugin>\n"
"  </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:71
#, fuzzy
msgid ""
"If you are are using gradle, you can apply the following plugin to your "
"`build.gradle`:"
msgstr "gradleを使っている場合は、以下のプラグインを `build.gradle` に適用することができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:77
#, no-wrap
msgid "plugins {\n"
"    id 'org.kordamp.gradle.jandex' version '0.6.0'\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:80
#, fuzzy
msgid ""
"If you can't modify the dependency, you can still index it by adding "
"`quarkus.index-dependency` entries to your `application.properties`:"
msgstr ""
"依存関係を変更できなくても、 `quarkus.index-dependency` エントリを `application.properties`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:86
#, no-wrap
msgid ""
"quarkus.index-dependency.<name>.group-id=\n"
"quarkus.index-dependency.<name>.artifact-id=\n"
"quarkus.index-dependency.<name>.classifier=(this one is optional)\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:89
#, fuzzy
msgid ""
"For example, the following entries ensure that the `org.acme:acme-api` "
"dependency is indexed:"
msgstr "例えば、以下のエントリは、 `org.acme:acme-api` 依存関係がインデックス化されることを確実にします。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:90
#: upstream/_guides/cdi-reference.adoc:115
#: upstream/_guides/cdi-reference.adoc:127
#: upstream/_guides/cdi-reference.adoc:428
#: upstream/_guides/cdi-reference.adoc:602
#, no-wrap, fuzzy
msgid "Example application.properties"
msgstr "例：application.properties"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:95
#, no-wrap
msgid ""
"quarkus.index-dependency.acme.group-id=org.acme <1>\n"
"quarkus.index-dependency.acme.artifact-id=acme-api <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:97
#: upstream/_guides/cdi-reference.adoc:134
#, fuzzy
msgid "Value is a group id for a dependency identified by name `acme`."
msgstr "値は、名前で識別される依存関係のグループ ID `acme`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:98
#: upstream/_guides/cdi-reference.adoc:135
#, fuzzy
msgid "Value is an artifact id for a dependency identified by name `acme`."
msgstr "値は、名前 `acme` で識別される依存関係のアーティファクト ID です。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:99
#, no-wrap, fuzzy
msgid "How To Exclude Types and Dependencies from Discovery"
msgstr "ディスカバリーから型と依存関係を除外する方法"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:105
#, fuzzy
msgid ""
"It may happen that some beans from third-party libraries do not work "
"correctly in Quarkus.  A typical example is a bean injecting a portable "
"extension.  In such case, it's possible to exclude types and dependencies "
"from the bean discovery.  The `quarkus.arc.exclude-types` property accepts a "
"list of string values that are used to match classes that should be excluded."
""
msgstr ""
"サードパーティのライブラリからのいくつかのビーンがQuarkusで正しく動作しないことがあります。典型的な例は、ポータブルエクステンションを注入するビーンです。このような場合、型や依存関係をビーンの検出から除外することができます。 "
"`quarkus.arc.exclude-types` プロパティは、除外すべきクラスにマッチするために使用される文字列値のリストを受け入れます。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:106
#: upstream/_guides/cdi-reference.adoc:419
#: upstream/_guides/cdi-reference.adoc:593
#, no-wrap, fuzzy
msgid "Value Examples"
msgstr "値の例"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:113
#, no-wrap, fuzzy
msgid ""
"|Value|Description\n"
"|`org.acme.Foo`| Match the fully qualified name of the class\n"
"|`org.acme.*`| Match classes with package `org.acme`\n"
"|`org.acme.**`| Match classes where the package starts with `org.acme` \n"
"|`Bar`| Match the simple name of the class\n"
msgstr ""
"|値|Description｜ `org.acme.Foo` ｜クラスの完全修飾名にマッチします。 `org.acme. **`| "
"*&lt;code&gt;org.acme&lt;/code&gt; |&lt;code&gt;org.acme.&lt;/code&gt;* `*` "
"| パッケージが `org.acme` で始まるクラスをマッチさせる | `Bar`| クラスのシンプルな名前をマッチさせる"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:119
#, no-wrap
msgid "quarkus.arc.exclude-types=org.acme.Foo,org.acme.*,Bar <1><2><3>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:121
#, fuzzy
msgid "Exclude the type `org.acme.Foo`."
msgstr "タイプ `org.acme.Foo` を除外します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:122
#, fuzzy
msgid "Exclude all types from the `org.acme` package."
msgstr "`org.acme` パッケージからすべてのタイプを除外します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:123
#, fuzzy
msgid "Exclude all types whose simple name is `Bar`"
msgstr "シンプルな名前が `Bar`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:126
#, fuzzy
msgid ""
"It is also possible to exclude a dependency artifact that would be otherwise "
"scanned for beans.  For example, because it contains a `beans.xml` "
"descriptor."
msgstr ""
"また、そうしなければビーンズをスキャンしてしまうような依存性アーティファクトを除外することも可能です。例えば、それが `beans.xml` "
"記述子を含んでいるからです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:132
#, no-wrap
msgid ""
"quarkus.arc.exclude-dependency.acme.group-id=org.acme <1>\n"
"quarkus.arc.exclude-dependency.acme.artifact-id=acme-services <2>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:136
#, no-wrap, fuzzy
msgid "Native Executables and Private Members"
msgstr "ネイティブ実行ファイルとプライベートメンバー"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:142
#, fuzzy
msgid ""
"Quarkus is using GraalVM to build a native executable.  One of the "
"limitations of GraalVM is the usage of https://github.com/oracle/graal/blob/"
"master/substratevm/Limitations.md#reflection[Reflection, window=\"_blank\"]. "
" Reflective operations are supported but all relevant members must be "
"registered for reflection explicitly.  Those registrations result in a "
"bigger native executable."
msgstr ""
"Quarkusでは、GraalVMを使用してネイティブ実行ファイルを構築しています。GraalVMの制限事項の1つは、 link:https://"
"github.com/oracle/graal/blob/master/substratevm/Limitations."
"md#reflection[Reflection, window="
"_blank]の使用です。リフレクション操作はサポートされていますが、関連するすべてのメンバーを明示的にリフレクション用に登録する必要があります。これらの登録は、より大きなネイティブ実行ファイルになります。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:146
#, fuzzy
msgid ""
"And if Quarkus DI needs to access a private member it *has to use "
"reflection*.  That's why Quarkus users are encouraged __not to use private "
"members__ in their beans.  This involves injection fields, constructors and "
"initializers, observer methods, producer methods and fields, disposers and "
"interceptor methods."
msgstr ""
"また、Quarkus DIがプライベートメンバーにアクセスする必要がある場合は、 "
"*リフレクションを使用し*なければなりません。そのため、Quarkusユーザーは、プライベートメンバーをビーンで "
"_使用しないこと_が推奨されています。これには、インジェクションフィールド、コンストラクタとイニシャライザ、オブザーバメソッド、プロデューサメソッドとフィールド、ディスポーザとインターセプターメソッドが含まれます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:149
#, fuzzy
msgid ""
"How to avoid using private members? You can use package-private modifiers:"
msgstr "プライベートメンバーの使用を避けるには？package-private修飾子を使うことができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:154
#: upstream/_guides/cdi-reference.adoc:171
#, no-wrap
msgid "@ApplicationScoped\n"
"public class CounterBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:157
#, no-wrap
msgid "    @Inject\n"
"    CounterService counterService; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:161
#, no-wrap
msgid "    void onMessage(@Observes Event msg) { <2>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:163
#, fuzzy
msgid "A package-private injection field."
msgstr "パッケージ・プライベート注入フィールド。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:164
#, fuzzy
msgid "A package-private observer method."
msgstr "パッケージ・プライベート・オブザーバ・メソッド。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:166
#, fuzzy
msgid "Or constructor injection:"
msgstr "あるいはコンストラクタのインジェクション。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:173
#, no-wrap
msgid "    private CounterService service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:178
#, no-wrap
msgid ""
"    CounterBean(CounterService service) { <1>\n"
"      this.service = service;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:180
#, fuzzy
msgid ""
"A package-private constructor injection. `@Inject` is optional in this "
"particular case."
msgstr "`@Inject` は、この場合はオプションです。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:182
#, no-wrap, fuzzy
msgid "Supported Features"
msgstr "サポートされている機能"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:185
#, fuzzy
msgid "Programming model"
msgstr "プログラミングモデル"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:186
#, fuzzy
msgid "Managed beans implemented by a Java class"
msgstr "Javaクラスで実装された管理豆"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:187
#, fuzzy
msgid "`@PostConstruct` and `@PreDestroy` lifecycle callbacks"
msgstr "`@PostConstruct` と `@PreDestroy` ライフサイクルコールバック"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:188
#, fuzzy
msgid "Producer methods and fields, disposers"
msgstr "生産者の方法と畑、ディスポーザー"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:189
#, fuzzy
msgid "Qualifiers"
msgstr "クオリファイヤ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:190
#, fuzzy
msgid "Alternatives"
msgstr "代替品"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:191
#, fuzzy
msgid "Stereotypes"
msgstr "ステレオタイプ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:192
#, fuzzy
msgid "Dependency injection and lookup"
msgstr "依存関係の注入とルックアップ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:193
#, fuzzy
msgid "Field, constructor and initializer/setter injection"
msgstr "フィールド、コンストラクタ、イニシャライザ/セッター注入"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:194
#, fuzzy
msgid "Type-safe resolution"
msgstr "タイプセーフ解決"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:195
#, fuzzy
msgid "Programmatic lookup via `javax.enterprise.inject.Instance`"
msgstr "を介したプログラム検索 `javax.enterprise.inject.Instance`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:196
#, fuzzy
msgid "Client proxies"
msgstr "クライアントのプロキシ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:197
#, fuzzy
msgid "Injection point metadata"
msgstr "注入点メタデータ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:198
#, fuzzy
msgid "Scopes and contexts"
msgstr "スコープとコンテキスト"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:199
#, fuzzy
msgid ""
"`@Dependent`, `@ApplicationScoped`, `@Singleton`, `@RequestScoped` and "
"`@SessionScoped`"
msgstr ""
"`@Dependent`, `@ApplicationScoped`, `@Singleton`, `@RequestScoped` "
"`@SessionScoped`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:200
#, fuzzy
msgid "Custom scopes and contexts"
msgstr "カスタム スコープとコンテキスト"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:201
#, fuzzy
msgid "Interceptors"
msgstr "インターセプター"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:202
#, fuzzy
msgid "Business method interceptors: `@AroundInvoke`"
msgstr "ビジネスメソッドの傍受者。 `@AroundInvoke`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:203
#, fuzzy
msgid ""
"Interceptors for lifecycle event callbacks: `@PostConstruct`, `@PreDestroy`, "
"`@AroundConstruct`"
msgstr ""
"ライフサイクルイベントコールバックのためのインターセプター: `@PostConstruct`, `@PreDestroy`. "
"`@AroundConstruct`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:204
#, fuzzy
msgid ""
"Events and observer methods, including asynchronous events and transactional "
"observer methods"
msgstr "非同期イベントとトランザクション・オブザーバ・メソッドを含むイベントとオブザーバ・メソッド"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:206
#: upstream/_guides/cdi-reference.adoc:666
#, no-wrap, fuzzy
msgid "Limitations"
msgstr "制限事項"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:209
#, fuzzy
msgid "`@ConversationScoped` is not supported"
msgstr "`@ConversationScoped` はサポートされていません"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:210
#, fuzzy
msgid "Decorators are not supported"
msgstr "デコレータはサポートされていません"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:211
#, fuzzy
msgid "Portable Extensions are not supported"
msgstr "ポータブルエクステンションはサポートされていません"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:212
#, fuzzy
msgid ""
"`BeanManager` - only the following methods are implemented: `getBeans()`, "
"`createCreationalContext()`, `getReference()`, `getInjectableReference()` , "
"`resolve()`, `getContext()`, `fireEvent()`, `getEvent()` and "
"`createInstance()`"
msgstr ""
"`BeanManager` - 以下のメソッドのみ実装されています： `getBeans()`, "
"`createCreationalContext()`, `getReference()`, `getInjectableReference()`, "
"`resolve()`, , `getContext()`, `fireEvent()`, `getEvent()` および "
"`createInstance()`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:213
#, fuzzy
msgid "Specialization is not supported"
msgstr "専門性はサポートされていません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:214
#, fuzzy
msgid "`beans.xml` descriptor content is ignored"
msgstr "`beans.xml` 記述子の内容は無視されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:215
#, fuzzy
msgid "Passivation and passivating scopes are not supported"
msgstr "不動態化および不動態化スコープはサポートされていません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:216
#, fuzzy
msgid "Interceptor methods on superclasses are not implemented yet"
msgstr "スーパークラスのインターセプターメソッドはまだ実装されていません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:217
#, fuzzy
msgid "`@Interceptors` is not supported"
msgstr "`@Interceptors` はサポートされていません"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:219
#, no-wrap, fuzzy
msgid "Non-standard Features"
msgstr "標準外の機能"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:221
#, no-wrap, fuzzy
msgid "Eager Instantiation of Beans"
msgstr "ビーンズの熱心なインスタンス化"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:224
#, no-wrap, fuzzy
msgid "Lazy By Default"
msgstr "デフォルトでは怠け者"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:228
#, fuzzy
msgid ""
"By default, CDI beans are created lazily, when needed.  What exactly "
"\"needed\" means depends on the scope of a bean."
msgstr "デフォルトでは、CDIビーンは必要なときに怠惰に作成されます。何を正確に「必要とされる」というのかは、ビーンのスコープに依存します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:230
#, fuzzy
msgid ""
"A *normal scoped bean* (`@ApplicationScoped`, `@RequestScoped`, etc.) is "
"needed when a method is invoked upon an injected instance (contextual "
"reference per the specification)."
msgstr ""
"インジェクションされたインスタンス（仕様による文脈参照）からメソッドが呼び出される場合、 *通常のスコープドビーン*（ "
"`@ApplicationScoped`, `@RequestScoped`, など）が必要になります。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:232
#, fuzzy
msgid ""
"In other words, injecting a normal scoped bean will not suffice because a "
"_client proxy_ is injected instead of a contextual instance of the bean."
msgstr ""
"言い換えれば、通常のスコープ付きビーンを注入しても、ビーンのコンテキストインスタンスの代わりに "
"_クライアントプロキシ_が注入されるので、十分ではありません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:234
#, fuzzy
msgid ""
"A *bean with a pseudo-scope* (`@Dependent` and `@Singleton` ) is created "
"when injected."
msgstr "注入時に疑似スコープを *持つビーン*( `@Dependent` と `@Singleton` )が作成されます。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:235
#, no-wrap, fuzzy
msgid "Lazy Instantiation Example"
msgstr "遅延インスタンス化の例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:244
#, no-wrap
msgid ""
"@Singleton // => pseudo-scope\n"
"class AmazingService {\n"
"  String ping() {\n"
"    return \"amazing\";\n"
"  }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:251
#, no-wrap
msgid ""
"@ApplicationScoped // => normal scope\n"
"class CoolService {\n"
"  String ping() {\n"
"    return \"cool\";\n"
"  }\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:254
#, no-wrap
msgid "@Path(\"/ping\")\n"
"public class PingResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:257
#, no-wrap
msgid "  @Inject\n"
"  AmazingService s1; <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:260
#, no-wrap
msgid "  @Inject\n"
"  CoolService s2; <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:266
#, no-wrap
msgid ""
"  @GET\n"
"  public String ping() {\n"
"    return s1.ping() + s2.ping(); <3>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:268
#, fuzzy
msgid "Injection triggers the instantiation of `AmazingService`."
msgstr "インジェクションは、 `AmazingService`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:269
#, fuzzy
msgid ""
"Injection itself does not result in the instantiation of `CoolService`. A "
"client proxy is injected."
msgstr "インジェクション自体は、 `CoolService` のインスタンス化にはなりません。クライアントプロキシがインジェクションされます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:270
#, fuzzy
msgid ""
"The first invocation upon the injected proxy triggers the instantiation of "
"`CoolService`."
msgstr "注入されたプロキシに対する最初の呼び出しは、 `CoolService`."

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:271
#, no-wrap, fuzzy
msgid "Startup Event"
msgstr "スタートアップイベント"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:274
#, fuzzy
msgid "However, if you really need to instantiate a bean eagerly you can:"
msgstr "しかし、本当に熱心にBeanをインスタンス化する必要がある場合は、あなたはすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:276
#, fuzzy
msgid ""
"Declare an observer of the `StartupEvent` - the scope of the bean does not "
"matter in this case:"
msgstr "`StartupEvent` のオブザーバを宣言する - この場合、ビーンのスコープは重要ではありません。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:284
#, no-wrap
msgid ""
"@ApplicationScoped\n"
"class CoolService {\n"
"  void startup(@Observes StartupEvent event) { <1>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:286
#, fuzzy
msgid ""
"A `CoolService` is created during startup to service the observer method "
"invocation."
msgstr "`CoolService` は、起動時に作成され、オブザーバー・メソッドの呼び出しをサービスするためのものです。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:288
#, no-wrap, fuzzy
msgid ""
"Use the bean in an observer of the `StartupEvent` - normal scoped beans must "
"be used as described in <<lazy_by_default>>:    \n"
msgstr ""
"`StartupEvent`  link:#lazy_by_default[- "
"[lazy_by_default]]で説明されているように、通常のスコープ付きビーンを使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:293
#, no-wrap
msgid "@Dependent\n"
"class MyBeanStarter {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:298
#, no-wrap
msgid ""
"  void startup(@Observes StartupEvent event, AmazingService amazing, "
"CoolService cool) { <1>\n"
"    cool.toString(); <2>\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:300
#, fuzzy
msgid "The `AmazingService` is created during injection."
msgstr "`AmazingService` は注入時に作成されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:301
#, fuzzy
msgid ""
"The `CoolService` is a normal scoped bean so we have to invoke a method upon "
"the injected proxy to force the instantiation."
msgstr ""
"`CoolService` "
"は通常のスコープされたビーンなので、強制的にインスタンス化するために注入されたプロキシにメソッドを呼び出さなければなりません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:303
#, fuzzy
msgid ""
"Annotate the bean with `@io.quarkus.runtime.Startup` as described in link:"
"lifecycle#startup_annotation[Startup annotation]:"
msgstr ""
"link:lifecycle#startup_annotation[スタートアップアノテーション]で説明したように、 `@io.quarkus."
"runtime.Startup` でビーンをアノテーションします。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:309
#, no-wrap
msgid "@Startup // <1>\n"
"@ApplicationScoped\n"
"public class EagerAppBean {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:311
#, no-wrap
msgid "   private final String name;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:316
#, no-wrap
msgid ""
"   EagerAppBean(NameGenerator generator) { // <2>\n"
"     this.name = generator.createName();\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:318
#, fuzzy
msgid ""
"For each bean annotated with `@Startup` a synthetic observer of "
"`StartupEvent` is generated. The default priority is used."
msgstr ""
"`@Startup` でアノテーションされた各ビーンに対して、 `StartupEvent` "
"の合成オブザーバが生成されます。デフォルトの優先度が使用されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:319
#, fuzzy
msgid ""
"The bean constructor is called when the application starts and the resulting "
"contextual instance is stored in the application context."
msgstr ""
"ビーンのコンストラクタは、アプリケーションの起動時に呼び出され、結果として得られるコンテキストインスタンスがアプリケーションのコンテキストに格納されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:321
#, fuzzy
msgid ""
"Quarkus users are encouraged to always prefer the `@Observes StartupEvent` "
"to `@Initialized(ApplicationScoped.class)` as explained in the link:"
"lifecycle[Application Initialization and Termination] guide."
msgstr ""
"Quarkusユーザーは、 link:lifecycle[アプリケーションの初期化と終了の]ガイドで説明されているように、常に "
"`@Initialized(ApplicationScoped.class)` よりも `@Observes StartupEvent` "
"を選択することをお勧めします。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:322
#, no-wrap, fuzzy
msgid "Request Context Lifecycle"
msgstr "リクエストコンテキストのライフサイクル"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:325
#, fuzzy
msgid "The request context is also active:"
msgstr "リクエストコンテキストもアクティブになっています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:327
#, fuzzy
msgid "during notification of a synchronous observer method."
msgstr "同期オブザーバメソッドの通知中に"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:329
#, fuzzy
msgid "The request context is destroyed:"
msgstr "リクエストコンテキストは破棄されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:331
#, fuzzy
msgid ""
"after the observer notification completes for an event, if it was not "
"already active when the notification started."
msgstr "イベントのオブザーバー通知が完了した後、通知が開始されたときにまだアクティブではなかった場合は"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:333
#, fuzzy
msgid ""
"An event with qualifier `@Initialized(RequestScoped.class)` is fired when "
"the request context is initialized for an observer notification. Moreover, "
"the events with qualifiers `@BeforeDestroyed(RequestScoped.class)` and "
"`@Destroyed(RequestScoped.class)` are fired when the request context is "
"destroyed."
msgstr ""
"オブザーバ通知のためにリクエストコンテキストが初期化されると、修飾子 `@Initialized(RequestScoped.class)` "
"を持つイベントが発生します。さらに、修飾子 `@BeforeDestroyed(RequestScoped.class)` と "
"`@Destroyed(RequestScoped.class)` を持つイベントは、リクエストコンテキストが破棄されたときに発生します。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:334
#, no-wrap, fuzzy
msgid "Qualified Injected Fields"
msgstr "適格注入分野"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:337
#, fuzzy
msgid ""
"In CDI, if you declare a field injection point you need to use `@Inject` and "
"optionally a set of qualifiers."
msgstr ""
"CDI では、フィールドインジェクションポイントを宣言する場合は `@Inject` とオプションで修飾子のセットを使用する必要があります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:343
#: upstream/_guides/cdi-reference.adoc:619
#, no-wrap
msgid "  @Inject\n"
"  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:346
#, fuzzy
msgid ""
"In Quarkus, you can skip the `@Inject` annotation completely if the injected "
"field declares at least one qualifier."
msgstr ""
"Quarkusでは、注入されたフィールドが少なくとも1つの修飾子を宣言している場合、 `@Inject` "
"アノテーションを完全にスキップすることができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:351
#: upstream/_guides/cdi-reference.adoc:636
#, no-wrap
msgid "  @ConfigProperty(name = \"cool\")\n"
"  String coolProperty;\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:354
#, fuzzy
msgid ""
"With the notable exception of one special case discussed below, `@Inject` is "
"still required for constructor and method injection."
msgstr "後述する特別なケースを除いて、コンストラクタとメソッドのインジェクションには `@Inject` が必要です。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:355
#, no-wrap, fuzzy
msgid "Simplified Constructor Injection"
msgstr "簡略化されたコンストラクタインジェクション"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:359
#, fuzzy
msgid ""
"In CDI, a normal scoped bean must always declare a no-args constructor (this "
"constructor is normally generated by the compiler unless you declare any "
"other constructor).  However, this requirement complicates constructor "
"injection - you need to provide a dummy no-args constructor to make things "
"work in CDI."
msgstr ""
"CDIでは、通常のスコープ付きBeanは常にno-"
"argsコンストラクタを宣言しなければなりません（このコンストラクタは、他のコンストラクタを宣言しない限り、通常はコンパイラによって生成されます）。しかし、この要件はコンストラクタのインジェクションを複雑にします "
"- CDI で動作させるためにはダミーの no-args コンストラクタを提供する必要があります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:364
#: upstream/_guides/cdi-reference.adoc:384
#, no-wrap
msgid "@ApplicationScoped\n"
"public class MyCoolService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:366
#: upstream/_guides/cdi-reference.adoc:386
#, no-wrap
msgid "  private SimpleProcessor processor;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:369
#, no-wrap
msgid "  MyCoolService() { // dummy constructor needed\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:375
#, no-wrap
msgid ""
"  @Inject // constructor injection\n"
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:379
#, fuzzy
msgid ""
"There is no need to declare dummy constructors for normal scoped bean in "
"Quarkus - they are generated automatically.  Also if there's only one "
"constructor there is no need for `@Inject`."
msgstr ""
"Quarkusでは、通常のスコープ付きビーンのためにダミーのコンストラクタを宣言する必要はありません - "
"自動的に生成されます。また、コンストラクタが1つしかない場合は、 `@Inject`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:391
#, no-wrap
msgid ""
"  MyCoolService(SimpleProcessor processor) {\n"
"    this.processor = processor;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:394
#, fuzzy
msgid ""
"We don't generate a no-args constructor automatically if a bean class "
"extends a class that does not declare a no-args constructor."
msgstr "引数なしのコンストラクタを宣言していないクラスをビーンクラスが継承している場合、引数なしのコンストラクタは自動的に生成されません。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:396
#, no-wrap, fuzzy
msgid "Removing Unused Beans"
msgstr "使用していない豆の除去"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:400
#, fuzzy
msgid ""
"The container attempts to remove all unused beans during build by default.  "
"This optimization can be disabled by setting `quarkus.arc.remove-unused-"
"beans` to `none` or `false`."
msgstr ""
"コンテナは、デフォルトではビルド中にすべての未使用のビーンを削除しようとします。この最適化は、 `quarkus.arc.remove-unused-"
"beans` を `none` または `false` に設定することで無効にすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:402
#, fuzzy
msgid "An unused bean:"
msgstr "使われていない豆。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:404
#, fuzzy
msgid "is not a built-in bean or an interceptor,"
msgstr "はビルトインビーンでもインターセプターでもありません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:405
#, fuzzy
msgid "is not eligible for injection to any injection point,"
msgstr "は、任意の注入点への注入の対象とはなりません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:406
#, fuzzy
msgid "is not excluded by any extension,"
msgstr "は、どのような拡張子を用いても除外されません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:407
#, fuzzy
msgid "does not have a name,"
msgstr "には名前がありません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:408
#, fuzzy
msgid "does not declare an observer,"
msgstr "はオブザーバーを宣言しません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:409
#, fuzzy
msgid ""
"does not declare any producer which is eligible for injection to any "
"injection point,"
msgstr "は、任意の注入ポイントへの注入対象となる生産者を宣言しない。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:410
#, fuzzy
msgid ""
"is not directly eligible for injection into any `javax.enterprise.inject."
"Instance` or `javax.inject.Provider` injection point"
msgstr ""
"は、 `javax.enterprise.inject.Instance` または `javax.inject.Provider` "
"の注入ポイントに直接注入することはできません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:412
#, fuzzy
msgid ""
"This optimization applies to all forms of bean declarations: bean class, "
"producer method, producer field."
msgstr "この最適化は、ビーンクラス、プロデューサメソッド、プロデューサフィールドなど、ビーン宣言のすべての形式に適用されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:415
#, fuzzy
msgid ""
"Users can instruct the container to not remove any of their specific beans "
"(even if they satisfy all the rules specified above) by annotating them with "
"`io.quarkus.arc.Unremovable`.  This annotation can be placed on the types, "
"producer methods, and producer fields."
msgstr ""
"ユーザーは、コンテナに `io.quarkus.arc.Unremovable` "
"をアノテーションすることで、特定のビーンを削除しないように指示することができます（上で指定したルールをすべて満たしていても）。このアノテーションは、型、プロデューサメソッド、プロデューサフィールドに配置することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:418
#, fuzzy
msgid ""
"Since this is not always possible, there is an option to achieve the same "
"via `application.properties`.  The `quarkus.arc.unremovable-types` property "
"accepts a list of string values that are used to match beans based on their "
"name or package."
msgstr ""
"これは常に可能ではないので、 `application.properties` を通して同じことを実現するオプションがあります。 `quarkus."
"arc.unremovable-types` プロパティは、ビーンズの名前やパッケージに基づいてマッチさせるための文字列値のリストを受け付けます。"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:426
#, no-wrap, fuzzy
msgid ""
"|Value|Description\n"
"|`org.acme.Foo`| Match the fully qualified name of the bean class\n"
"|`org.acme.*`| Match beans where the package of the bean class is `org.acme`\n"
"|`org.acme.**`| Match beans where the package of the bean class starts with "
"`org.acme`\n"
"|`Bar`| Match the simple name of the bean class\n"
msgstr ""
"|値|Description | `org.acme.Foo`| ビーンクラスの完全修飾名にマッチします。 `org.acme. **` `Bar`| "
"ビーンクラスの *パッケージが&lt;code&gt;org.acme&lt;/code&gt; |&lt;code&gt;org.acme.&lt;/"
"code&gt;* `*` | ビーンクラスのパッケージが `org.acme` で始まるビーンにマッチする。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:432
#, no-wrap
msgid "quarkus.arc.unremovable-types=org.acme.Foo,org.acme.*,Bar\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:435
#, fuzzy
msgid ""
"Furthermore, extensions can eliminate possible false positives by producing "
"`UnremovableBeanBuildItem`."
msgstr "さらに、エクステンションは `UnremovableBeanBuildItem` を生成することで、可能性のある誤検出を排除することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:438
#, fuzzy
msgid ""
"Finally, Quarkus provides a middle ground for the bean removal optimization "
"where application beans are never removed whether or not they are unused, "
"while the optimization proceeds normally for non application classes. To use "
"this mode, set `quarkus.arc.remove-unused-beans` to `fwk` or `framework`."
msgstr ""
"最後に、Quarkusでは、アプリケーションビーンが未使用であるかどうかに関わらず削除されることはありませんが、アプリケーショ "
"ン以外のクラスについては通常通り最適化が行われるという、ビーン削除最適化のためのミドルグラウンドを提供しています。このモードを使用するには、 "
"`quarkus.arc.remove-unused-beans` を `fwk` に設定するか、 `framework`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:441
#, fuzzy
msgid ""
"When using the dev mode (running `./mvnw clean compile quarkus:dev`), you "
"can see more information about which beans are being removed by enabling "
"additional logging via the following line in your `application.properties`."
msgstr ""
"dev モード ( `./mvnw clean compile quarkus:dev` を実行している) を使用している場合、 "
"`application.properties`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:444
#, no-wrap
msgid "quarkus.log.category.\"io.quarkus.arc.processor\".level=DEBUG\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:447
#, no-wrap, fuzzy
msgid "Default Beans"
msgstr "デフォルトのビーンズ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:451
#, fuzzy
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to "
"conditionally declare a bean if no other bean with equal types and "
"qualifiers was declared by any available means (bean class, producer, "
"synthetic bean, ...)  This is done using the `@io.quarkus.arc.DefaultBean` "
"annotation and is best explained with an example."
msgstr ""
"`@io.quarkus.arc.DefaultBean` "
"Quarkusは、CDIが現在サポートしていない機能を追加しました。これは、利用可能な手段（ビーンクラス、プロデューサー、合成ビーン、..."
"）で宣言された型と修飾子が等しい他のビーンがない場合に、条件付きでビーンを宣言するというものです。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:453
#, fuzzy
msgid ""
"Say there is a Quarkus extension that among other things declares a few CDI "
"beans like the following code does:"
msgstr "以下のコードのようにいくつかのCDIビーンを宣言するQuarkusエクステンションがあるとします。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:458
#: upstream/_guides/cdi-reference.adoc:511
#: upstream/_guides/cdi-reference.adoc:532
#: upstream/_guides/cdi-reference.adoc:561
#, no-wrap
msgid "@Dependent\n"
"public class TracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:463
#, no-wrap
msgid ""
"    @Produces\n"
"    public Tracer tracer(Reporter reporter, Configuration configuration) {\n"
"        return new Tracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:469
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Configuration configuration() {\n"
"        // create a Configuration\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:476
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Reporter reporter(){\n"
"        // create a Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:481
#, fuzzy
msgid ""
"The idea is that the extension auto-configures things for the user, "
"eliminating a lot of boilerplate - we can just `@Inject` a `Tracer` wherever "
"it is needed.  Now imagine that in our application we would like to utilize "
"the configured `Tracer`, but we need to customize it a little, for example "
"by providing a custom `Reporter`.  The only thing that would be needed in "
"our application would be something like the following:"
msgstr ""
"これは、エクステンションがユーザーのために自動設定を行うことで、多くの決まり文句を排除し、必要なところで `@Inject` を `Tracer` "
"にすればよいという考え方です。さて、私たちのアプリケーションでは、設定された `Tracer` を利用したいのですが、例えばカスタム "
"`Reporter` "
"を提供するなどして、少しカスタマイズする必要があると想像してみてください。このアプリケーションで必要なのは、以下のようなものだけです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:487
#, no-wrap
msgid "@Dependent\n"
"public class CustomTracerConfiguration {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:493
#, no-wrap
msgid ""
"    @Produces\n"
"    public Reporter reporter(){\n"
"        // create a custom Reporter\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:497
#, fuzzy
msgid ""
"`@DefaultBean` allows extensions (or any other code for that matter) to "
"provide defaults while backing off if beans of that type are supplied in any "
"way Quarkus supports."
msgstr ""
"`@DefaultBean` "
"では、Quarkusがサポートしている方法でそのタイプのビーンが提供されている場合には、デフォルトを提供する一方で、Quarkusがサポートしている方法では、そのようなビーンが提供されていない場合には、バックオフすることができます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:498
#, no-wrap, fuzzy
msgid "Enabling Beans for Quarkus Build Profile"
msgstr "ビーンズをQuarkusビルドプロファイルで使用可能にする"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:503
#, fuzzy
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to "
"conditionally enable a bean when a Quarkus build time profile is enabled, "
"via the `@io.quarkus.arc.profile.IfBuildProfile` and `@io.quarkus.arc."
"profile.UnlessBuildProfile` annotations.  When used in conjunction with `@io."
"quarkus.arc.DefaultBean`, these annotations allow for the creation of "
"different bean configurations for different build profiles."
msgstr ""
"Quarkusは、CDIが現在サポートしていない機能を追加しました。これは、Quarkusのビルドタイムプロファイルが有効になっているときに条件付きでビーンを有効にするというもので、 "
"`@io.quarkus.arc.profile.IfBuildProfile` と `@io.quarkus.arc.profile."
"UnlessBuildProfile` のアノテーションを使用します。 `@io.quarkus.arc.DefaultBean` "
"と合わせて使用すると、これらのアノテーションにより、異なるビルドプロファイルに対して異なるビーン構成を作成することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:506
#, fuzzy
msgid ""
"Imagine for instance that an application contains a bean named `Tracer`, "
"which needs to be do nothing when in tests or dev-mode, but works in its "
"normal capacity for the production artifact.  An elegant way to create such "
"beans is the following:"
msgstr ""
"例えば、アプリケーションが `Tracer` "
"という名前のビーンを含んでいると想像してみてください。このビーンは、テストや開発モードでは何もしない必要がありますが、本番の成果物に対しては通常の能力で動作します。このようなビーンを作成するエレガントな方法は以下の通りです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:517
#, no-wrap
msgid ""
"    @Produces\n"
"    @IfBuildProfile(\"prod\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) "
"{\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:524
#: upstream/_guides/cdi-reference.adoc:545
#: upstream/_guides/cdi-reference.adoc:574
#, no-wrap
msgid ""
"    @Produces\n"
"    @DefaultBean\n"
"    public Tracer noopTracer() {\n"
"        return new NoopTracer();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:527
#, fuzzy
msgid ""
"If instead, it is required that the `Tracer` bean also works in dev-mode and "
"only default to doing nothing for tests, then `@UnlessBuildProfile` would be "
"ideal. The code would look like:"
msgstr ""
"代わりに、 `Tracer` ビーンもdevモードで動作し、デフォルトではテストのために何もしないことが要求される場合は、 "
"`@UnlessBuildProfile` が理想的です。コードは次のようになります。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:538
#, no-wrap
msgid ""
"    @Produces\n"
"    @UnlessBuildProfile(\"test\") // this will be enabled for both prod and "
"dev build time profiles\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) "
"{\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:548
#, fuzzy
msgid ""
"The runtime profile has absolutely no effect on the bean resolution using "
"`@IfBuildProfile` and `@UnlessBuildProfile`."
msgstr "ランタイムプロファイルは、 `@IfBuildProfile` と `@UnlessBuildProfile`."

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:549
#, no-wrap, fuzzy
msgid "Enabling Beans for Quarkus Build Properties"
msgstr "Quarkusビルドプロパティでビーンズを使用可能にする"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:554
#, fuzzy
msgid ""
"Quarkus adds a capability that CDI currently does not support which is to "
"conditionally enable a bean when a Quarkus build time property has a "
"specific value, via the `@io.quarkus.arc.properties.IfBuildProperty` "
"annotation.  When used in conjunction with `@io.quarkus.arc.DefaultBean`, "
"this annotation allow for the creation of different bean configurations for "
"different build properties."
msgstr ""
"Quarkusは、CDIが現在サポートしていない機能を追加しました。これは、Quarkusのビルド時間プロパティが特定の値を持っているときに条件付きでビーンを有効にするというもので、 "
"`@io.quarkus.arc.properties.IfBuildProperty` アノテーションを介して使用します。このアノテーションを "
"`@io.quarkus.arc.DefaultBean` "
"と組み合わせて使用すると、異なるビルドプロパティに対して異なるビーン設定を作成することができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:556
#, fuzzy
msgid ""
"The scenario we mentioned above with `Tracer` could also be implemented in "
"the following way:"
msgstr "`Tracer` を使って上で述べたシナリオも、以下のように実装することができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:567
#, no-wrap
msgid ""
"    @Produces\n"
"    @IfBuildProperty(name = \"some.tracer.enabled\", stringValue = \"true\")\n"
"    public Tracer realTracer(Reporter reporter, Configuration configuration) "
"{\n"
"        return new RealTracer(reporter, configuration);\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:577
#, fuzzy
msgid ""
"Properties set at runtime have absolutely no effect on the bean resolution "
"using `@IfBuildProperty`."
msgstr "実行時に設定されたプロパティは、 `@IfBuildProperty` を使用してもビーンの解像度には全く影響しません。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:578
#, no-wrap, fuzzy
msgid "Declaring Selected Alternatives"
msgstr "選択された代替案の宣言"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:582
#, fuzzy
msgid ""
"In CDI, an alternative bean may be selected either globally for an "
"application by means of `@Priority`, or for a bean archive using a `beans."
"xml` descriptor.  Quarkus has a simplified bean discovery and the content of "
"`beans.xml` is ignored."
msgstr ""
"CDIでは、代替ビーンは、 `@Priority` を使用してアプリケーションに対してグローバルに選択するか、 `beans.xml` "
"記述子を使用してビーンアーカイブに対して選択することができます。Quarkusは単純化されたビーン発見機能を持っており、 `beans.xml` "
"の内容は無視されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:587
#, fuzzy
msgid ""
"The disadvantage of `@Priority` is that it has `@Target({ TYPE, PARAMETER "
"})` and so it cannot be used for producer methods and fields.  To address "
"this problem and to simplify the code Quarkus provides the `io.quarkus.arc."
"AlternativePriority` annotation.  It's basically a shortcut for "
"`@Alternative` plus `@Priority`.  Additionally, it can be used for producers."
""
msgstr ""
"`@Priority` の欠点は、 `@Target({ TYPE, PARAMETER })` "
"があるので、プロデューサーメソッドやフィールドには使えないことです。この問題を解決し、コードを単純化するために、Quarkusは `io.quarkus."
"arc.AlternativePriority` アノテーションを提供しています。これは、基本的には `@Alternative` と "
"`@Priority` のショートカットです。さらに、これはプロデューサーにも使用できます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:592
#, fuzzy
msgid ""
"However, it is also possible to select alternatives for an application using "
"the unified configuration.  The `quarkus.arc.selected-alternatives` property "
"accepts a list of string values that are used to match alternative beans.  "
"If any value matches then the priority of `Integer#MAX_VALUE` is used for "
"the relevant bean.  The priority declared via `@Priority` or "
"`@AlternativePriority` is overridden."
msgstr ""
"ただし、統一された設定を使用してアプリケーションの代替品を選択することも可能です。 `quarkus.arc.selected-"
"alternatives` プロパティは、代替ビーンにマッチするために使用される文字列値のリストを受け入れます。いずれかの値が一致する場合は、 "
"`Integer#MAX_VALUE` の優先度が関連するビーンに使用されます。 `@Priority` または "
"`@AlternativePriority` で宣言された優先度は上書きされます。"

#. type: Table
#: upstream/_guides/cdi-reference.adoc:600
#, no-wrap, fuzzy
msgid ""
"|Value|Description\n"
"|`org.acme.Foo`| Match the fully qualified name of the bean class or the "
"bean class of the bean that declares the producer\n"
"|`org.acme.*`| Match beans where the package of the bean class is `org.acme`\n"
"|`org.acme.**`| Match beans where the package of the bean class starts with "
"`org.acme` \n"
"|`Bar`| Match the simple name of the bean class or the bean class of the "
"bean that declares the producer\n"
msgstr ""
"|値|Description | `org.acme.Foo`| 生産者を宣言するビーンのビーンクラスまたはビーンクラスの完全修飾名にマッチします。 "
"`org.acme. **`| ビーンクラスのパッケージが *&lt;code&gt;org.acme&lt;/code&gt; "
"|&lt;code&gt;org.acme.&lt;/code&gt;* `*` | ビーンクラスのパッケージが `org.acme` "
"で始まるビーンにマッチさせる | `Bar`| 生産者を宣言するビーンのビーンクラスまたはビーンクラスの単純な名前にマッチさせる"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:606
#, no-wrap
msgid "quarkus.arc.selected-alternatives=org.acme.Foo,org.acme.*,Bar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:608
#, no-wrap, fuzzy
msgid "Simplified Producer Method Declaration"
msgstr "簡易生産者法申告書"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:611
#, fuzzy
msgid "In CDI, a producer method must be always annotated with `@Produces`."
msgstr "CDI では、producer メソッドは常に `@Produces` とアノテーションされていなければなりません。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:615
#: upstream/_guides/cdi-reference.adoc:633
#, no-wrap
msgid "class Producers {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:626
#, no-wrap
msgid ""
"  @Produces\n"
"  @ApplicationScoped\n"
"  MyService produceService() {\n"
"    return new MyService(coolProperty);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:629
#, fuzzy
msgid ""
"In Quarkus, you can skip the `@Produces` annotation completely if the "
"producer method is annotated with a scope annotation, a stereotype or a "
"qualifier."
msgstr ""
"Quarkusでは、プロデューサーメソッドがスコープアノテーション、ステレオタイプ、または修飾子でアノテーションされている場合、 `@Produces` "
"アノテーションを完全にスキップすることができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:642
#, no-wrap
msgid ""
"  @ApplicationScoped\n"
"  MyService produceService() {\n"
"    return new MyService(coolProperty);\n"
"  }\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:644
#, no-wrap, fuzzy
msgid "Interception of Static Methods "
msgstr "静的メソッドの傍受"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:650
#, fuzzy
msgid ""
"The Interceptors specification is clear that _around-invoke_ methods must "
"not be declared static.  However, this restriction was driven mostly by "
"technical limitations.  And since Quarkus is a build-time oriented stack "
"that allows for additional class transformations, those limitations don't "
"apply anymore.  It's possible to annotate a non-private static method with "
"an interceptor binding:"
msgstr ""
"Interceptorsの仕様では、 _around-"
"invoke_メソッドは静的に宣言してはならないことが明確になっています。しかし、この制限はほとんどが技術的な制限によって行われていました。Quarkusは、追加のクラス変換を可能にするビルドタイム指向のスタックなので、この制限はもう適用されません。プライベートではない静的メソッドにインターセプターバインディングでアノテーションを付けることは可能です。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:654
#, no-wrap
msgid "class Services {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:662
#, no-wrap
msgid ""
"  @Logged <1>\n"
"  static BigDecimal computePrice(long amount) { <2>\n"
"    BigDecimal price;\n"
"    // Perform computations...\n"
"    return price;\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:664
#, fuzzy
msgid "`Logged` is an interceptor binding."
msgstr "`Logged` はインターセプターバインディングです。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:665
#, fuzzy
msgid ""
"Each method invocation is intercepted if there is an interceptor associated "
"with `Logged`."
msgstr "各メソッドの呼び出しは、 `Logged` に関連付けられたインターセプターがある場合にインターセプトされます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:669
#, fuzzy
msgid ""
"Only *method-level bindings* are considered for backward compatibility "
"reasons (otherwise static methods of bean classes that declare class-level "
"bindings would be suddenly intercepted)"
msgstr ""
"下位互換性の理由から "
"*メソッドレベルのバインディング*のみが考慮されます（そうでなければクラスレベルのバインディングを宣言しているビーンクラスの静的メソッドが突然傍受されてしまいます）。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:670
#, fuzzy
msgid "Private static methods are never intercepted"
msgstr "プライベートなスタティックメソッドは決して傍受されない"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:671
#, fuzzy
msgid ""
"`InvocationContext#getTarget()` returns `null` for obvious reasons; "
"therefore not all existing interceptors may behave correctly when "
"intercepting static methods"
msgstr ""
"`InvocationContext#getTarget()` は明らかな理由から `null` "
"を返します。そのため、既存のすべてのインターセプターが静的メソッドを傍受する際に正しく動作するとは限りません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:673
#, fuzzy
msgid ""
"Interceptors can use `InvocationContext.getMethod()` to detect static "
"methods and adjust the behavior accordingly."
msgstr ""
"インターセプターは `InvocationContext.getMethod()` "
"を使用して静的メソッドを検出し、それに応じて動作を調整することができます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:674
#, no-wrap, fuzzy
msgid "Ability to handle 'final' classes and methods"
msgstr "最終的な」クラスとメソッドを扱う能力"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:679
#, fuzzy
msgid ""
"In normal CDI, classes that are marked as `final` and / or have `final` "
"methods are not eligible for proxy creation, which in turn means that "
"interceptors and normal scoped beans don't work properly.  This situation is "
"very common when trying to use CDI with alternative JVM languages like "
"Kotlin where classes and methods are `final` by default."
msgstr ""
"通常のCDIでは、 `final` とマークされているクラス、および/または `final` "
"メソッドを持つクラスはプロキシ作成の対象外となり、インターセプターや通常のスコープ付きビーンが正しく動作しません。この状況は、クラスやメソッドがデフォルトで "
"`final` となっている Kotlin のような代替 JVM 言語で CDI を使用しようとした場合に非常によく見られます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:681
#, fuzzy
msgid ""
"Quarkus however, can overcome these limitations when `quarkus.arc.transform-"
"unproxyable-classes` is set to `true` (which is the default value)."
msgstr ""
"しかし、Quarkusでは、 `quarkus.arc.transform-unproxyable-classes` を `true` "
"（デフォルト値）に設定すると、これらの制限を克服することができます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:682
#, no-wrap, fuzzy
msgid "Container-managed Concurrency"
msgstr "コンテナ管理型の並行処理"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:690
#, fuzzy
msgid ""
"There is no standard concurrency control mechanism for CDI beans.  "
"Nevertheless, a bean instance can be shared and accessed concurrently from "
"multiple threads.  In that case it should be thread-safe.  You can use "
"standard Java constructs (`volatile`, `synchronized`, `ReadWriteLock`, etc.) "
"or let the container control the concurrent access.  Quarkus provides `@io."
"quarkus.arc.Lock` and a built-in interceptor for this interceptor binding.  "
"Each interceptor instance associated with a contextual instance of an "
"intercepted bean holds a separate `ReadWriteLock` with non-fair ordering "
"policy."
msgstr ""
"CDI "
"ビーンには、標準的な同時実行制御メカニズムはありません。それにもかかわらず、ビーンのインスタンスは共有され、複数のスレッドから同時にアクセスすることができます。その場合、それはスレッドセーフでなければなりません。標準的な "
"Java コンストラクト ( `volatile`, `synchronized`, `ReadWriteLock`, など) "
"を使用するか、コンテナに同時アクセスを制御させることができます。Quarkusは、 `@io.quarkus.arc.Lock` "
"と、このインターセプターバインディングのための組み込みインターセプターを提供しています。インターセプトされたビーンのコンテキストインスタンスに関連付けられた各インターセプターインスタンスは、不公平な注文ポリシーを持つ個別の "
"`ReadWriteLock` を保持しています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:692
#, fuzzy
msgid ""
"`io.quarkus.arc.Lock` is a regular interceptor binding and as such can be "
"used for any bean with any scope. However, it is especially useful for "
"\"shared\" scopes, e.g. `@Singleton` and `@ApplicationScoped`."
msgstr ""
"`io.quarkus.arc.Lock` "
"は通常のインターセプターバインディングなので、任意のスコープを持つ任意のビーンに使用することができます。しかし、特に\"共有\"スコープ、例えば "
"`@Singleton` や `@ApplicationScoped`."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:693
#, no-wrap, fuzzy
msgid "Container-managed Concurrency Example"
msgstr "コンテナ管理された並行処理の例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:697
#, no-wrap
msgid "import io.quarkus.arc.Lock;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:701
#, no-wrap
msgid "@Lock <1>\n"
"@ApplicationScoped\n"
"class SharedService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:705
#, no-wrap
msgid ""
"  void addAmount(BigDecimal amount) {\n"
"    // ...changes some internal state of the bean\n"
"  }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:711
#, no-wrap
msgid ""
"  @Lock(value = Lock.Type.READ, time = 1, unit = TimeUnit.SECONDS) <2> <3>\n"
"  BigDecimal getAmount() {\n"
"    // ...it is safe to read the value concurrently\n"
"  }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:713
#, fuzzy
msgid ""
"`@Lock` (which maps to `@Lock(Lock.Type.WRITE)`) declared on the class "
"instructs the container to lock the bean instance for any invocation of any "
"business method, i.e. the client has \"exclusive access\" and no concurrent "
"invocations will be allowed."
msgstr ""
"`@Lock` ( `@Lock(Lock.Type.WRITE)` にマップされます ) "
"クラス上で宣言されたコンテナは、任意のビジネスメソッドの呼び出しに対してビーンのインスタンスをロックするように指示します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:714
#, fuzzy
msgid ""
"`@Lock(Lock.Type.READ)` overrides the value specified at class level. It "
"means that any number of clients can invoke the method concurrently, unless "
"the bean instance is locked by `@Lock(Lock.Type.WRITE)`."
msgstr ""
"`@Lock(Lock.Type.READ)` は、クラスレベルで指定された値を上書きします。これは、ビーンのインスタンスが `@Lock(Lock."
"Type.WRITE)` によってロックされていない限り、任意の数のクライアントが同時にメソッドを呼び出すことができることを意味します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:715
#, fuzzy
msgid ""
"You can also specify the \"wait time\". If it's not possible to acquire the "
"lock in the given time a `LockException` is thrown."
msgstr "また、「待ち時間」を指定することもできます。指定した時間内にロックを取得できない場合は `LockException` がスローされます。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:717
#, no-wrap, fuzzy
msgid "Build Time Extension Points"
msgstr "ビルドタイム延長ポイント"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:720
#, no-wrap, fuzzy
msgid "Portable Extensions"
msgstr "携帯用エクステンション"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:725
#, fuzzy
msgid ""
"Quarkus incorporates build-time optimizations in order to provide instant "
"startup and low memory footprint.  The downside of this approach is that CDI "
"Portable Extensions cannot be supported.  Nevertheless, most of the "
"functionality can be achieved using Quarkus link:writing-"
"extensions[extensions]."
msgstr ""
"Quarkusは、即時の起動と低メモリフットプリントを実現するために、ビルド時の最適化を組み込んでいます。このアプローチの欠点は、CDIポータブルエクステンションがサポートされていないことです。それでも、ほとんどの機能はQuarkusの "
"link:writing-extensions[エクステンション]を使用して実現できます。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:726
#, no-wrap, fuzzy
msgid "Additional Bean Defining Annotations"
msgstr "追加のBean定義アノテーション"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:730
#, fuzzy
msgid ""
"As described in <<bean_discovery>> bean classes that don’t have a bean "
"defining annotation are not discovered.  However, "
"`BeanDefiningAnnotationBuildItem` can be used to extend the set of default "
"bean defining annotations (`@Dependent`, `@Singleton`, `@ApplicationScoped`, "
"`@RequestScoped` and `@Stereotype` annotations):"
msgstr ""
"link:"
"#bean_discovery[bean_discovery]]で説明されているように、ビーン定義アノテーションを持たないビーンクラスは発見されません。しかし、 "
"`BeanDefiningAnnotationBuildItem` は、デフォルトのビーン定義アノテーション（ `@Dependent`, "
"`@Singleton`, `@ApplicationScoped`, `@RequestScoped`, `@Stereotype` "
"アノテーション）のセットを拡張するために使用することができます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:737
#, no-wrap
msgid ""
"@BuildStep\n"
"BeanDefiningAnnotationBuildItem additionalBeanDefiningAnnotation() {\n"
"    return new BeanDefiningAnnotationBuildItem(DotName.createSimple(\"javax."
"ws.rs.Path\")));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:740
#, fuzzy
msgid ""
"Bean registrations that are result of a `BeanDefiningAnnotationBuildItem` "
"are unremovable by default. See also <<remove_unused_beans>>."
msgstr ""
"`BeanDefiningAnnotationBuildItem` の結果である Bean 登録は、デフォルトでは削除できません。 link:"
"#remove_unused_beans[remove_unused_beans]]も参照してください。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:741
#, no-wrap, fuzzy
msgid "Resource Annotations"
msgstr "リソースアノテーション"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:744
#, fuzzy
msgid ""
"`ResourceAnnotationBuildItem` is used to specify resource annotations that "
"make it possible to resolve non-CDI injection points, such as Java EE "
"resources."
msgstr ""
"`ResourceAnnotationBuildItem` は、Java EE リソースなどの非 CDI "
"インジェクションポイントの解決を可能にするリソースアノテーションを指定するために使用されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:746
#, fuzzy
msgid ""
"An integrator must also provide a corresponding `io.quarkus.arc."
"ResourceReferenceProvider` implementation."
msgstr ""
"インテグレータは、対応する `io.quarkus.arc.ResourceReferenceProvider` の実装も提供しなければなりません。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:755
#, no-wrap
msgid ""
"@BuildStep\n"
"void setupResourceInjection(BuildProducer<ResourceAnnotationBuildItem> "
"resourceAnnotations, BuildProducer<GeneratedResourceBuildItem> resources) {\n"
"    resources.produce(new GeneratedResourceBuildItem(\"META-INF/services/io."
"quarkus.arc.ResourceReferenceProvider\",\n"
"        JPAResourceReferenceProvider.class.getName().getBytes()));\n"
"    resourceAnnotations.produce(new ResourceAnnotationBuildItem(DotName."
"createSimple(PersistenceContext.class.getName())));\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:758
#, no-wrap, fuzzy
msgid "Additional Beans"
msgstr "追加の豆"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:762
#, fuzzy
msgid ""
"`AdditionalBeanBuildItem` is used to specify additional bean classes to be "
"analyzed during discovery.  Additional bean classes are transparently added "
"to the application index processed by the container."
msgstr ""
"`AdditionalBeanBuildItem` "
"は、発見時に解析する追加のビーンクラスを指定するために使用されます。追加のビーンクラスは、コンテナによって処理されるアプリケーションインデックスに透過的に追加されます。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:771
#, no-wrap
msgid ""
"@BuildStep\n"
"List<AdditionalBeanBuildItem> additionalBeans() {\n"
"     return Arrays.asList(\n"
"          new AdditionalBeanBuildItem(SmallRyeHealthReporter.class),\n"
"          new AdditionalBeanBuildItem(HealthServlet.class));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:774
#, fuzzy
msgid ""
"A bean registration that is a result of an `AdditionalBeanBuildItem` is "
"removable by default. See also <<remove_unused_beans>>."
msgstr ""
"`AdditionalBeanBuildItem` の結果であるビーン登録は、デフォルトでは削除可能です。 link:"
"#remove_unused_beans[remove_unused_beans]]も参照してください。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:776
#, no-wrap, fuzzy
msgid "Synthetic Beans"
msgstr "合成豆"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:783
#, fuzzy
msgid ""
"Sometimes it is very useful to be able to register a synthetic bean.  Bean "
"attributes of a synthetic bean are not derived from a java class, method or "
"field.  Instead, the attributes are specified by an extension.  In CDI, this "
"could be achieved using the `AfterBeanDiscovery.addBean()` methods.  In "
"Quarkus, there are three ways to register a synthetic bean."
msgstr ""
"合成ビーンを登録できると非常に便利なことがあります。合成ビーンのビーン属性は，javaクラス，メソッド，フィールドから派生したものではありません。その代わりに、属性はエクステンションによって指定されます。CDIでは、 "
"`AfterBeanDiscovery.addBean()` "
"メソッドを使用することで実現できます。Quarkusでは、合成ビーンを登録するには3つの方法があります。"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:784
#, no-wrap, fuzzy
msgid "`BeanRegistrarBuildItem`"
msgstr "`BeanRegistrarBuildItem`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:787
#, fuzzy
msgid ""
"A build step can produce a `BeanRegistrarBuildItem` and leverage the `io."
"quarkus.arc.processor.BeanConfigurator` API to build a synthetic bean "
"definition."
msgstr ""
"ビルドステップでは、 `BeanRegistrarBuildItem` を生成し、 `io.quarkus.arc.processor."
"BeanConfigurator` API を利用して合成ビーン定義を構築することができます。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:788
#, no-wrap, fuzzy
msgid "`BeanRegistrarBuildItem` Example"
msgstr "`BeanRegistrarBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:794
#, no-wrap
msgid ""
"@BuildStep\n"
"BeanRegistrarBuildItem syntheticBean() {\n"
"     return new BeanRegistrarBuildItem(new BeanRegistrar() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:801
#, no-wrap
msgid ""
"            @Override\n"
"            public void register(RegistrationContext registrationContext) {\n"
"                 registrationContext.configure(String.class).types(String."
"class).qualifiers(new MyQualifierLiteral()).creator(mc -> mc.returnValue(mc."
"load(\"foo\"))).done();\n"
"            }\n"
"        }));\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:804
#, fuzzy
msgid ""
"The output of a `BeanConfigurator` is recorded as bytecode. Therefore there "
"are some limitations in how a synthetic bean instance is created. See also "
"`BeanConfigurator.creator()` methods."
msgstr ""
"`BeanConfigurator` の出力はバイトコードとして記録されます。そのため、合成Beanインスタンスの生成方法にはいくつかの制限があります。 "
"`BeanConfigurator.creator()` のメソッドも参照してください。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:806
#, fuzzy
msgid ""
"You can easily filter all class-based beans via the convenient `BeanStream` "
"returned from the `RegistrationContext.beans()` method."
msgstr ""
"`RegistrationContext.beans()` メソッドから返される便利な `BeanStream` "
"を使って、すべてのクラスベースの豆を簡単にフィルタリングすることができます。"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:807
#, no-wrap, fuzzy
msgid "`BeanRegistrationPhaseBuildItem`"
msgstr "`BeanRegistrationPhaseBuildItem`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:811
#, fuzzy
msgid ""
"If a build step *needs to produce other build items during the registration* "
"it should use the `BeanRegistrationPhaseBuildItem`.  The reason is that "
"injected objects are only valid during a `@BuildStep` method invocation."
msgstr ""
"ビルドステップが *登録中に他のビルド項目を生成する必要がある*場合は、 `BeanRegistrationPhaseBuildItem`."
"理由は、注入されたオブジェクトは `@BuildStep` メソッドの呼び出し時にのみ有効だからです。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:812
#, no-wrap, fuzzy
msgid "`BeanRegistrationPhaseBuildItem` Example"
msgstr "`BeanRegistrationPhaseBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:822
#, no-wrap
msgid ""
"@BuildStep\n"
"void syntheticBean(BeanRegistrationPhaseBuildItem beanRegistrationPhase,\n"
"            BuildProducer<MyBuildItem> myBuildItem, \n"
"            BuildProducer<BeanConfiguratorBuildItem> beanConfigurators) {\n"
"   beanConfigurators.produce(new "
"BeanConfiguratorBuildItem(beanRegistrationPhase.getContext()."
"configure(String.class).types(String.class).qualifiers(new "
"MyQualifierLiteral()).creator(mc -> mc.returnValue(mc.load(\"foo\")))));\n"
"   myBuildItem.produce(new MyBuildItem());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:825
#, fuzzy
msgid "See the `BeanRegistrationPhaseBuildItem` javadoc for more information."
msgstr "詳細は `BeanRegistrationPhaseBuildItem` javadoc を参照してください。"

#. type: Title ====
#: upstream/_guides/cdi-reference.adoc:826
#, no-wrap, fuzzy
msgid "`SyntheticBeanBuildItem`"
msgstr "`SyntheticBeanBuildItem`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:830
#, fuzzy
msgid ""
"Finally, a build step can produce a `SyntheticBeanBuildItem` to register a "
"synthetic bean whose instance can be easily *produced through a <<writing-"
"extensions.adoc#bytecode-recording,recorder>>*.  The extended "
"`BeanConfigurator` accepts either a `io.quarkus.runtime.RuntimeValue` or a "
"`java.util.function.Supplier`."
msgstr ""
"最後に、ビルドステップでは、レ *&lt;a href=\"writing-extensions.html#bytecode-"
"recording\"&gt;コーダ&lt;/a&gt;*を通してインスタンスを簡単に *生成*できる合成ビーンを登録するために "
"`SyntheticBeanBuildItem` を生成することができます。拡張 `BeanConfigurator` は `io.quarkus."
"runtime.RuntimeValue` または `java.util.function.Supplier`."

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:831
#, no-wrap, fuzzy
msgid "`SyntheticBeanBuildItem` Example"
msgstr "`SyntheticBeanBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:841
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(STATIC_INIT) <1>\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(Foo.class).scope(Singleton.class)\n"
"                .runtimeValue(recorder.createFoo()) <2>\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:843
#, fuzzy
msgid "By default, a synthetic bean is initialized during `STATIC_INIT`."
msgstr "デフォルトでは、合成ビーンは `STATIC_INIT`."

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:844
#, fuzzy
msgid ""
"The bean instance is supplied by a value returned from a recorder method."
msgstr "ビーンのインスタンスは，レコーダメソッドから返された値によって供給されます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:846
#, fuzzy
msgid ""
"It is possible to mark a synthetic bean to be initialized during "
"`RUNTIME_INIT`:"
msgstr "`RUNTIME_INIT` の間に初期化する合成ビーンをマークすることができます。"

#. type: Block title
#: upstream/_guides/cdi-reference.adoc:847
#, no-wrap, fuzzy
msgid "`RUNTIME_INIT` `SyntheticBeanBuildItem` Example"
msgstr "`RUNTIME_INIT` `SyntheticBeanBuildItem` 例"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:858
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(RUNTIME_INIT) <1>\n"
"SyntheticBeanBuildItem syntheticBean(TestRecorder recorder) {\n"
"   return SyntheticBeanBuildItem.configure(Foo.class).scope(Singleton.class)\n"
"                .setRuntimeInit() <2>\n"
"                .runtimeValue(recorder.createFoo())\n"
"                .done();\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:860
#, fuzzy
msgid ""
"The recorder must be executed in the `ExecutionTime.RUNTIME_INIT` phase."
msgstr "レコーダーは `ExecutionTime.RUNTIME_INIT` フェーズで実行する必要があります。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:861
#, fuzzy
msgid "The bean instance is initialized during `RUNTIME_INIT`."
msgstr "Beanインスタンスは、 `RUNTIME_INIT`."

#. type: delimited block =
#: upstream/_guides/cdi-reference.adoc:865
#, fuzzy
msgid ""
"Synthetic bean initialized during `RUNTIME_INIT` must not be accessed during "
"`STATIC_INIT`. `RUNTIME_INIT` build steps that access a runtime-init "
"synthetic bean should consume the `SyntheticBeansRuntimeInitBuildItem`:"
msgstr ""
"`RUNTIME_INIT` の間に初期化された合成ビーンは、 `STATIC_INIT` の間にアクセスしてはいけません。 "
"`RUNTIME_INIT` のビルドステップで、実行時に初期化された合成ビーンにアクセスする場合は、 "
"`SyntheticBeansRuntimeInitBuildItem`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:874
#, no-wrap
msgid ""
"@BuildStep\n"
"@Record(RUNTIME_INIT) \n"
"@Consume(SyntheticBeansRuntimeInitBuildItem.class) <1>\n"
"void accessFoo(TestRecorder recorder) {\n"
"   recorder.foo(); <2>\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:876
#, fuzzy
msgid "This build step must be executed after `syntheticBean()` completes."
msgstr "このビルドステップは `syntheticBean()` が完了した後に実行する必要があります。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:877
#, fuzzy
msgid ""
"This recorder method results in an invocation of the `Foo` bean instance."
msgstr "このレコーダメソッドは、 `Foo` ビーンインスタンスの呼び出しをもたらします。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:879
#, no-wrap, fuzzy
msgid "Annotation Transformations"
msgstr "アノテーション変換"

#. type: delimited block =
#: upstream/_guides/cdi-reference.adoc:884
#, fuzzy
msgid ""
"A very common task is to override the annotations found on the bean classes. "
" For example you might want to add an interceptor binding to a specific bean "
"class.  Here is how to do it - use the `AnnotationsTransformerBuildItem`:"
msgstr ""
"非常に一般的なタスクは、ビーンクラスで見つかったアノテーションをオーバーライドすることです。例えば、特定のビーンクラスにインターセプターバインディングを追加したいとします。以下にそれを行う方法を示します "
"- `AnnotationsTransformerBuildItem`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:890
#, no-wrap
msgid ""
"@BuildStep\n"
"AnnotationsTransformerBuildItem transform() {\n"
"    return new AnnotationsTransformerBuildItem(new AnnotationsTransformer() "
"{\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:894
#, no-wrap
msgid ""
"        public boolean appliesTo(org.jboss.jandex.AnnotationTarget.Kind "
"kind) {\n"
"            return kind == org.jboss.jandex.AnnotationTarget.Kind.CLASS;\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:902
#, no-wrap
msgid ""
"        public void transform(TransformationContext context) {\n"
"            if (context.getTarget().asClass().name().toString().equals(\"com."
"foo.Bar\")) {\n"
"                context.transform().add(MyInterceptorBinding.class).done();\n"
"            }\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:904
#, no-wrap, fuzzy
msgid "Additional Interceptor Bindings"
msgstr "追加のインターセプターバインディング"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:910
#, fuzzy
msgid ""
"In rare cases it might be handy to programmatically register an existing "
"annotation as interceptor binding.  This is similar to what pure CDI "
"achieves through `BeforeBeanDiscovery#addInterceptorBinding()`.  Though here "
"we are going to use `InterceptorBindingRegistrarBuildItem` to get it done.  "
"Note that you can register multiple annotations in one go:"
msgstr ""
"まれに、 既存の注釈をインターセプターバインディングとしてプログラム的に登録しておくと便利かもしれません。これは、純粋な CDI が "
"`BeforeBeanDiscovery#addInterceptorBinding()` を通じて達成するものに似ています。しかし、ここでは "
"`InterceptorBindingRegistrarBuildItem` "
"を使ってそれを実現しようとしています。一度に複数のアノテーションを登録することができることに注意してください。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:926
#, no-wrap
msgid ""
"@BuildStep\n"
"InterceptorBindingRegistrarBuildItem addInterceptorBindings() {\n"
"    InterceptorBindingRegistrarBuildItem additionalBindingsRegistrar = new "
"InterceptorBindingRegistrarBuildItem(new InterceptorBindingRegistrar() {\n"
"        @Override\n"
"        public Collection<DotName> registerAdditionalBindings() {\n"
"            Collection<DotName> result = new HashSet<>();\n"
"            result.add(DotName.createSimple(MyAnnotation.class.getName()));\n"
"            result.add(DotName.createSimple(MyOtherAnnotation.class."
"getName()));\n"
"            return result;\n"
"        }\n"
"    });\n"
"    return additionalBindingsRegistrar;\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:928
#, no-wrap, fuzzy
msgid "Injection Point Transformation"
msgstr "注入点変換"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:933
#, fuzzy
msgid ""
"Every now and then it is handy to be able to change qualifiers of an "
"injection point programmatically.  You can do just that with "
"`InjectionPointTransformerBuildItem`.  The following sample shows how to "
"apply transformation to injection points with type `Foo` that contain "
"qualifier `MyQualifier`:"
msgstr ""
"インジェクションポイントの修飾子をプログラムで変更できるのは便利です。 `InjectionPointTransformerBuildItem` "
"を使用すると、それが可能になります。 `MyQualifier`次のサンプルは、 `Foo` 型のインジェクション "
"ポイントに変換を適用する方法を示しています。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:939
#, no-wrap
msgid ""
"@BuildStep\n"
"InjectionPointTransformerBuildItem transformer() {\n"
"    return new InjectionPointTransformerBuildItem(new "
"InjectionPointsTransformer() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:943
#, no-wrap
msgid ""
"        public boolean appliesTo(Type requiredType) {\n"
"            return requiredType.name().equals(DotName.createSimple(Foo.class."
"getName()));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:955
#, no-wrap
msgid ""
"        public void transform(TransformationContext context) {\n"
"            if (context.getQualifiers().stream()\n"
"                    .anyMatch(a -> a.name().equals(DotName."
"createSimple(MyQualifier.class.getName())))) {\n"
"                context.transform()\n"
"                        .removeAll()\n"
"                        .add(DotName.createSimple(MyOtherQualifier.class."
"getName()))\n"
"                        .done();\n"
"            }\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:957
#, no-wrap, fuzzy
msgid "Observer Transformation"
msgstr "オブザーバ変換"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:961
#, fuzzy
msgid ""
"Any https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#observer_methods[observer method] definition can be vetoed or "
"transformed using an `ObserverTransformerBuildItem`.  The attributes that "
"can be transformed include:"
msgstr ""
"link:https://docs.jboss.org/cdi/spec/2.0/cdi-spec."
"html#observer_methods[オブザーバ・メソッドの]定義は、 `ObserverTransformerBuildItem` "
"を使用して拒否権を付与したり、変換したりすることができます。変換できる属性には、以下のものがあります。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:963
#, fuzzy
msgid ""
"https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getObservedQualifiers--[qualifiers]"
msgstr ""
"link:https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getObservedQualifiers--[予選者]"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:964
#, fuzzy
msgid ""
"https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getReception--[reception]"
msgstr ""
"link:https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getReception--[懇親会]"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:965
#, fuzzy
msgid ""
"https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getPriority--[priority]"
msgstr ""
"link:https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getPriority--[ゆうせん]"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:966
#, fuzzy
msgid ""
"https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getTransactionPhase--[transaction phase]"
msgstr ""
"link:https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#getTransactionPhase--[トランザクションフェーズ]"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:967
#, fuzzy
msgid ""
"https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#isAsync--[asynchronous]"
msgstr ""
"link:https://docs.jboss.org/cdi/api/2.0/javax/enterprise/inject/spi/"
"ObserverMethod.html#isAsync--[非同期]"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:973
#, no-wrap
msgid ""
"@BuildStep\n"
"ObserverTransformerBuildItem transformer() {\n"
"    return new ObserverTransformerBuildItem(new ObserverTransformer() {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:977
#, no-wrap
msgid ""
"        public boolean appliesTo(Type observedType, Set<AnnotationInstance> "
"qualifiers) {\n"
"            return observedType.name.equals(DotName.createSimple(MyEvent."
"class.getName()));\n"
"        }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:984
#, no-wrap
msgid ""
"        public void transform(TransformationContext context) {\n"
"            // Veto all observers of MyEvent\n"
"            context.veto();\n"
"        }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:986
#, no-wrap, fuzzy
msgid "Bean Deployment Validation"
msgstr "Beanデプロイメント検証"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:990
#, fuzzy
msgid ""
"Once the bean deployment is ready an extension can perform additional "
"validations and inspect the found beans, observers and injection points.  "
"Register a `BeanDeploymentValidatorBuildItem`:"
msgstr ""
"ビーンのデプロイの準備ができたら、エクステンションは追加の検証を実行し、見つかったビーン、オブザーバ、インジェクションポイントを検査することができます。 "
"`BeanDeploymentValidatorBuildItem`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1003
#, no-wrap
msgid ""
"@BuildStep\n"
"BeanDeploymentValidatorBuildItem beanDeploymentValidator() {\n"
"    return new BeanDeploymentValidatorBuildItem(new "
"BeanDeploymentValidator() {\n"
"         public void validate(ValidationContext validationContext) {\n"
"             for (InjectionPointInfo injectionPoint : validationContext."
"get(Key.INJECTION_POINTS)) {\n"
"                 System.out.println(\"Injection point: \" + injectionPoint);\n"
"             }\n"
"         }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1006
#, fuzzy
msgid ""
"You can easily filter all registered beans via the convenient `BeanStream` "
"returned from the `ValidationContext.beans()` method."
msgstr ""
"`ValidationContext.beans()` メソッドから返される便利な `BeanStream` "
"を使って、すべての登録された豆を簡単にフィルタリングすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1009
#, fuzzy
msgid ""
"If an extension needs to produce other build items during the \"validation\" "
"phase it should use the `ValidationPhaseBuildItem` instead.  The reason is "
"that injected objects are only valid during a `@BuildStep` method invocation."
""
msgstr ""
"もし拡張モジュールが \"validation\" の段階で他のビルド項目を生成する必要がある場合は、代わりに "
"`ValidationPhaseBuildItem` を使うべきです。理由は、注入されたオブジェクトが有効なのは `@BuildStep` "
"メソッドの呼び出しの間だけだからです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1021
#, no-wrap
msgid ""
"@BuildStep\n"
"void validate(ValidationPhaseBuildItem validationPhase,\n"
"            BuildProducer<MyBuildItem> myBuildItem, \n"
"            BuildProducer<ValidationErrorBuildItem> errors) {\n"
"   if (someCondition) {\n"
"     errors.produce(new ValidationErrorBuildItem(new "
"IllegalStateException()));\n"
"     myBuildItem.produce(new MyBuildItem());\n"
"   }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1024
#, fuzzy
msgid "See `ValidationPhaseBuildItem` javadoc for more information."
msgstr "詳細は `ValidationPhaseBuildItem` javadoc を参照してください。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:1026
#, no-wrap, fuzzy
msgid "Custom Contexts"
msgstr "カスタムコンテキスト"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1029
#, fuzzy
msgid ""
"An extension can register a custom `InjectableContext` implementation by "
"means of a `ContextRegistrarBuildItem`:"
msgstr "エクステンションは、カスタム `InjectableContext` の実装を `ContextRegistrarBuildItem`."

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1040
#, no-wrap
msgid ""
"@BuildStep\n"
"ContextRegistrarBuildItem customContext() {\n"
"    return new ContextRegistrarBuildItem(new ContextRegistrar() {\n"
"         public void register(RegistrationContext registrationContext) {\n"
"            registrationContext.configure(CustomScoped.class).normal()."
"contextClass(MyCustomContext.class).done();\n"
"         }\n"
"    });\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1044
#, fuzzy
msgid ""
"If an extension needs to produce other build items during the \"context "
"registration\" phase it should use the `ContextRegistrationPhaseBuildItem` "
"instead.  The reason is that injected objects are only valid during a "
"`@BuildStep` method invocation."
msgstr ""
"拡張モジュールが「コンテキスト登録」の段階で他のビルド項目を生成する必要がある場合は、代わりに "
"`ContextRegistrationPhaseBuildItem` を使用しなければなりません。理由は、注入されたオブジェクトは "
"`@BuildStep` メソッドの呼び出し中にのみ有効になるからです。"

#. type: delimited block -
#: upstream/_guides/cdi-reference.adoc:1054
#, no-wrap
msgid ""
"@BuildStep\n"
"void addContext(ContextRegistrationPhaseBuildItem contextRegistrationPhase,\n"
"            BuildProducer<MyBuildItem> myBuildItem, \n"
"            BuildProducer<ContextConfiguratorBuildItem> contexts) {\n"
"   contexts.produce(new "
"ContextConfiguratorBuildItem(contextRegistrationPhase.getContext()."
"configure(CustomScoped.class).normal().contextClass(MyCustomContext."
"class)));\n"
"   myBuildItem.produce(new MyBuildItem());\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1057
#, fuzzy
msgid "See `ContextRegistrationPhaseBuildItem` javadoc for more information."
msgstr "詳細は `ContextRegistrationPhaseBuildItem` javadoc を参照してください。"

#. type: Title ===
#: upstream/_guides/cdi-reference.adoc:1060
#, no-wrap, fuzzy
msgid "Available Build Time Metadata"
msgstr "利用可能なビルド時間のメタデータ"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1064
#, fuzzy
msgid ""
"Any of the above extensions that operates with `BuildExtension.BuildContext` "
"can leverage certain build time metadata that are generated during build.  "
"The built-in keys located in `io.quarkus.arc.processor.BuildExtension.Key` "
"are:"
msgstr ""
"`BuildExtension.BuildContext` "
"で動作する上記のエクステンションはいずれも、ビルド時に生成される特定のビルド時メタデータを利用することができます。 `io.quarkus.arc."
"processor.BuildExtension.Key` にある組み込みキーは以下の通りです。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1066
#, fuzzy
msgid "`ANNOTATION_STORE`"
msgstr "`ANNOTATION_STORE`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1067
#, fuzzy
msgid ""
"Contains an `AnnotationStore` that keeps information about all "
"`AnnotationTarget` annotations after application of annotation transformers"
msgstr ""
"`AnnotationStore` を含み、注釈変換器を適用した後のすべての `AnnotationTarget` の注釈に関する情報を保持します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1068
#, fuzzy
msgid "`INJECTION_POINTS`"
msgstr "`INJECTION_POINTS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1069
#, fuzzy
msgid "`Collection<InjectionPointInfo>` containing all injection points"
msgstr "`Collection&amp;lt;InjectionPointInfo&amp;gt;` すべての注入ポイントを含む"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1070
#, fuzzy
msgid "`BEANS`"
msgstr "`BEANS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1071
#, fuzzy
msgid "`Collection<BeanInfo>` containing all beans"
msgstr "`Collection&amp;lt;BeanInfo&amp;gt;` すべての豆を含む"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1072
#, fuzzy
msgid "`REMOVED_BEANS`"
msgstr "`REMOVED_BEANS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1073
#, fuzzy
msgid ""
"`Collection<BeanInfo>` containing all the removed beans; see "
"<<remove_unused_beans>> for more information"
msgstr ""
"`Collection&amp;lt;BeanInfo&amp;gt;` 削除されたすべての link:"
"#remove_unused_beans[ビーンズ]が含まれています。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1074
#, fuzzy
msgid "`OBSERVERS`"
msgstr "`OBSERVERS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1075
#, fuzzy
msgid "`Collection<ObserverInfo>` containing all observers"
msgstr "`Collection&amp;lt;ObserverInfo&amp;gt;` 全観測者を含む"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1076
#, fuzzy
msgid "`SCOPES`"
msgstr "`SCOPES`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1077
#, fuzzy
msgid "`Collection<ScopeInfo>` containing all scopes, including custom ones"
msgstr "`Collection&amp;lt;ScopeInfo&amp;gt;` カスタムスコープを含むすべてのスコープを含む"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1078
#, fuzzy
msgid "`QUALIFIERS`"
msgstr "`QUALIFIERS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1079
#, fuzzy
msgid "`Map<DotName, ClassInfo>` containing all qualifiers"
msgstr "`Map&amp;lt;DotName, ClassInfo&amp;gt;` すべての修飾子を含む"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1080
#, fuzzy
msgid "`INTERCEPTOR_BINDINGS`"
msgstr "`INTERCEPTOR_BINDINGS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1081
#, fuzzy
msgid "`Map<DotName, ClassInfo>` containing all interceptor bindings"
msgstr "`Map&amp;lt;DotName, ClassInfo&amp;gt;` すべてのインターセプターバインディングを含む"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1082
#, fuzzy
msgid "`STEREOTYPES`"
msgstr "`STEREOTYPES`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1083
#, fuzzy
msgid "`Map<DotName, ClassInfo>` containing all stereotypes"
msgstr "`Map&amp;lt;DotName, ClassInfo&amp;gt;` すべてのステレオタイプを含む"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1088
#, fuzzy
msgid ""
"To get hold of these, simply query the extension context object for given "
"key.  Note that these metadata are made available as build proceeds which "
"means that extensions can only leverage metadata that were build before they "
"are invoked.  If your extension attempts to retrieve metadata that wasn't "
"yet produced, `null` will be returned.  Here is a summary of which "
"extensions can access which metadata:"
msgstr ""
"これらのメタデータを取得するには、与えられたキーのエクステンションコンテキストオブジェクトをクエリするだけです。これらのメタデータはビルドが進むにつれて利用可能になることに注意してください。拡張モジュールがまだ生成されていないメタデータを取得しようとすると、 "
"`null` が返されます。どのエクステンションがどのメタデータにアクセスできるかをまとめてみました。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1090
#, fuzzy
msgid "`AnnotationsTransformer`"
msgstr "`AnnotationsTransformer`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1091
#, fuzzy
msgid ""
"Shouldn't rely on any metadata as it could be used at any time in any phase "
"of the bootstrap"
msgstr "ブートストラップのどのフェーズでもいつでも使えるので、メタデータに頼るべきではありません。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1092
#, fuzzy
msgid "`ContextRegistrar`"
msgstr "`ContextRegistrar`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1093
#: upstream/_guides/cdi-reference.adoc:1095
#: upstream/_guides/cdi-reference.adoc:1097
#, fuzzy
msgid ""
"Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, "
"`STEREOTYPES`"
msgstr ""
"`ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`. `STEREOTYPES`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1094
#, fuzzy
msgid "`InjectionPointsTransformer`"
msgstr "`InjectionPointsTransformer`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1096
#, fuzzy
msgid "`ObserverTransformer`"
msgstr "`ObserverTransformer`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1098
#, fuzzy
msgid "`BeanRegistrar`"
msgstr "`BeanRegistrar`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1099
#, fuzzy
msgid ""
"Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, "
"`STEREOTYPES`, `BEANS` (class-based beans only), `OBSERVERS` (class-based "
"observers only), `INJECTION_POINTS`"
msgstr ""
"`ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, "
"`BEANS` (クラスベースのビーンズのみ)、 `OBSERVERS` (クラスベースのオブザーバーのみ)にアクセスできます。 "
"`INJECTION_POINTS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1100
#, fuzzy
msgid "`ObserverRegistrar`"
msgstr "`ObserverRegistrar`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1101
#, fuzzy
msgid ""
"Has access to `ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, "
"`STEREOTYPES`, `BEANS`, `OBSERVERS` (class-based observers only), "
"`INJECTION_POINTS`"
msgstr ""
"`ANNOTATION_STORE`, `QUALIFIERS`, `INTERCEPTOR_BINDINGS`, `STEREOTYPES`, "
"`BEANS`, `OBSERVERS` （クラスベースのオブザーバーのみ）にアクセス可能。 `INJECTION_POINTS`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1102
#, fuzzy
msgid "`BeanDeploymentValidator`"
msgstr "`BeanDeploymentValidator`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1103
#, fuzzy
msgid "Has access to all build metadata"
msgstr "すべてのビルドメタデータにアクセスできる"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:1105
#, no-wrap, fuzzy
msgid "Development Mode"
msgstr "開発モード"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1108
#, fuzzy
msgid ""
"In the development mode, two special endpoints are registered automatically "
"to provide some basic debug info in the JSON format:"
msgstr "開発モードでは、2つの特別なエンドポイントが自動的に登録され、基本的なデバッグ情報をJSON形式で提供します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1110
#, fuzzy
msgid ""
"HTTP GET `/quarkus/arc` - returns the summary; number of beans, config "
"properties, etc."
msgstr "HTTP GET `/quarkus/arc` - ビーンの数、設定プロパティなどのサマリーを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1111
#, fuzzy
msgid "HTTP GET `/quarkus/arc/beans` - returns the list of all beans"
msgstr "HTTP GET `/quarkus/arc/beans` - すべてのビーンのリストを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1112
#, fuzzy
msgid "You can use query params to filter the output:"
msgstr "クエリパラメータを使用して出力をフィルタリングすることができます。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1113
#, fuzzy
msgid ""
"`scope` - include beans with scope that ends with the given value, i.e. "
"`http://localhost:8080/quarkus/arc/beans?scope=ApplicationScoped`"
msgstr ""
"`scope` - 指定した値で終わるスコープを持つ豆をインクルードする。 `&lt;a href=\"http://localhost:8080/"
"quarkus/arc/beans?scope=ApplicationScoped\" class=\"bare\"&gt;http://"
"localhost:8080/quarkus/arc/beans?scope=ApplicationScoped&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1114
#, fuzzy
msgid ""
"`beanClass` - include beans with bean class that starts with the given "
"value, i.e. `http://localhost:8080/quarkus/arc/beans?beanClass=org.acme.Foo`"
msgstr ""
"`beanClass` - 与えられた値で始まるビーンクラスを持つビーンをインクルードします。 `&lt;a href=\"http://"
"localhost:8080/quarkus/arc/beans?beanClass=org.acme.Foo\" class="
"\"bare\"&gt;http://localhost:8080/quarkus/arc/beans?beanClass=org.acme."
"Foo&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1115
#, fuzzy
msgid ""
"`kind` - include beans of the specified kind (`CLASS`, `PRODUCER_FIELD`, "
"`PRODUCER_METHOD`, `INTERCEPTOR` or `SYNTHETIC`), i.e. `http://localhost:"
"8080/quarkus/arc/beans?kind=PRODUCER_METHOD`"
msgstr ""
"`kind` - 指定された種類の豆 ( `CLASS`, `PRODUCER_FIELD`, `PRODUCER_METHOD`, "
"`INTERCEPTOR`, `SYNTHETIC`) を含みます。 `&lt;a href=\"http://localhost:8080/"
"quarkus/arc/beans?kind=PRODUCER_METHOD\" class=\"bare\"&gt;http://localhost:"
"8080/quarkus/arc/beans?kind=PRODUCER_METHOD&lt;/a&gt;`"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1116
#, fuzzy
msgid ""
"HTTP GET `/quarkus/arc/removed-beans` - returns the list of unused beans "
"removed during build"
msgstr "HTTP GET `/quarkus/arc/removed-beans` - ビルド中に削除された未使用のビーンのリストを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1117
#, fuzzy
msgid ""
"HTTP GET `/quarkus/arc/observers` - returns the list of all observer methods"
msgstr "HTTP GET `/quarkus/arc/observers` - すべてのオブザーバーメソッドのリストを返します。"

#. type: Plain text
#: upstream/_guides/cdi-reference.adoc:1119
#, fuzzy
msgid ""
"These endpoints are only available in the development mode, i.e. when you "
"run your application via `mvn quarkus:dev` (or `./gradlew quarkusDev`)."
msgstr ""
"これらのエンドポイントは、開発モード、すなわち `mvn quarkus:dev` (または `./gradlew quarkusDev`) "
"を介してアプリケーションを実行する場合にのみ利用可能です。"

#. type: Title ==
#: upstream/_guides/cdi-reference.adoc:1122
#, no-wrap, fuzzy
msgid "ArC Configuration Reference"
msgstr "ArC コンフィギュレーション・リファレンス"
