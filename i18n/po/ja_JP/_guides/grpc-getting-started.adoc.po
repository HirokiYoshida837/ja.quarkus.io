# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/grpc-getting-started.adoc:6
#, no-wrap, fuzzy
msgid "Getting Started with gRPC"
msgstr "gRPCを始めるには"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:12
#, fuzzy
msgid ""
"This page explains how to start using gRPC in your Quarkus application.  "
"While this page describes how to configure it with Maven, it is also "
"possible to use Gradle."
msgstr ""
"このページでは、QuarkusアプリケーションでgRPCを使い始める方法を説明します。このページではMavenでの設定方法を説明していますが、Gradleを使用することも可能です。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:15
#, fuzzy
msgid ""
"Let's imagine you have a regular Quarkus project, generated from the https://"
"code.quarkus.io[Quarkus project generator].  The default configuration is "
"enough, but you can also select some extensions if you want."
msgstr ""
"ここでは、Quark link:https://code.quarkus."
"io[usプロジェクトジェネレータ]から生成された通常のQuarkusプロジェクトを想像してみましょう。デフォルトの設定で十分ですが、必要に応じていくつかのエクステンションを選択することもできます。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:16
#, no-wrap, fuzzy
msgid "Configuring your project"
msgstr "プロジェクトの設定"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:19
#, fuzzy
msgid ""
"Edit the `pom.xml` file to add the Quarkus gRPC extension dependency (just "
"under `<dependencies>`):"
msgstr ""
"`pom.xml` ファイルを編集して、Quarkus gRPC拡張子の依存関係を追加します（ "
"`&amp;lt;dependencies&amp;gt;` のすぐ下）。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:26
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkus</groupId>\n"
"  <artifactId>quarkus-grpc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:30
#, fuzzy
msgid ""
"Make sure you have `generate-code` goal of `quarkus-maven-plugin` enabled in "
"your `pom.xml`.  If you wish to generate code from different `proto` files "
"for tests, also add the `generate-code-tests` goal:"
msgstr ""
"`pom.xml` で `generate-code` ゴールの `quarkus-maven-plugin` "
"が有効になっていることを確認してください。テスト用に異なる `proto` ファイルからコードを生成したい場合は、 `generate-code-"
"tests` ゴールも追加してください。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:50
#, no-wrap
msgid ""
"<build>\n"
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>io.quarkus</groupId>\n"
"            <artifactId>quarkus-maven-plugin</artifactId>\n"
"            <executions>\n"
"                <execution>\n"
"                    <goals>\n"
"                        <goal>generate-code</goal>\n"
"                        <goal>generate-code-tests</goal>\n"
"                        <goal>build</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:54
#, fuzzy
msgid ""
"With this configuration, you can put your service and message definitions in "
"the `src/main/proto` directory.  `quarkus-maven-plugin` will generate Java "
"files from your `proto` files."
msgstr ""
"この設定では、サービスとメッセージの定義を `src/main/proto` ディレクトリに置くことができます。 `quarkus-maven-"
"plugin` は、 `proto` ファイルから Java ファイルを生成します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:56
#, fuzzy
msgid ""
"Alternatively to using the `generate-code` goal of the `quarkus-maven-"
"plugin`, you can use `protobuf-maven-plugin` to generate these files, more "
"in <<Generating Java files from proto with protobuf-maven-plugin>>"
msgstr ""
"`quarkus-maven-plugin`の `generate-code` ゴールを使用する代わりに、 `protobuf-maven-"
"plugin` を使用してこれらのファイルを生成する link:#Generating Java files from proto with "
"protobuf-maven-plugin[こと]ができます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:59
#, fuzzy
msgid ""
"Let's start with a simple _Hello_ service.  Create the `src/main/proto/"
"helloworld.proto` file with the following content:"
msgstr ""
"まずは簡単な _Hello_サービスから始めてみましょう。 `src/main/proto/helloworld.proto` "
"ファイルを以下の内容で作成します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:63
#, no-wrap
msgid "syntax = \"proto3\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:67
#, no-wrap
msgid ""
"option java_multiple_files = true;\n"
"option java_package = \"io.quarkus.example\";\n"
"option java_outer_classname = \"HelloWorldProto\";\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:69
#, no-wrap
msgid "package helloworld;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:75
#, no-wrap
msgid ""
"// The greeting service definition.\n"
"service Greeter {\n"
"    // Sends a greeting\n"
"    rpc SayHello (HelloRequest) returns (HelloReply) {}\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:80
#, no-wrap
msgid ""
"// The request message containing the user's name.\n"
"message HelloRequest {\n"
"    string name = 1;\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:85
#, no-wrap
msgid ""
"// The response message containing the greetings\n"
"message HelloReply {\n"
"    string message = 1;\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:88
#, fuzzy
msgid ""
"This `proto` file defines a simple service interface with a single method "
"(`SayHello`), and the exchanged messages (`HelloRequest` containing the name "
"and `HelloReply` containing the greeting message)."
msgstr ""
"この `proto` ファイルは、単一のメソッド ( `SayHello`) と交換されたメッセージ (名前を含む `HelloRequest` "
"と挨拶メッセージを含む `HelloReply` ) を持つシンプルなサービスインターフェースを定義しています。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:91
#, fuzzy
msgid ""
"Before coding, we need to generate the classes used to implement and consume "
"gRPC services.  In a terminal, run:"
msgstr "コーディングの前に、gRPCサービスを実装して消費するためのクラスを生成する必要があります。ターミナルで、実行します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:95
#, no-wrap
msgid "$ mvn compile\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:98
#, fuzzy
msgid ""
"Once generated, you can look at the `target/generated-sources/grpc` "
"directory:"
msgstr "生成されると、 `target/generated-sources/grpc` ディレクトリを見ることができます。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:112
#, no-wrap
msgid ""
"target/generated-sources/grpc\n"
"└── io\n"
"    └── quarkus\n"
"        └── example\n"
"            ├── GreeterGrpc.java\n"
"            ├── HelloReply.java\n"
"            ├── HelloReplyOrBuilder.java\n"
"            ├── HelloRequest.java\n"
"            ├── HelloRequestOrBuilder.java\n"
"            ├── HelloWorldProto.java\n"
"            └── MutinyGreeterGrpc.java\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:115
#, fuzzy
msgid "These are the classes we are going to use."
msgstr "これから使う授業です。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:117
#, fuzzy
msgid ""
"Every time you update the `proto` files, you need to re-generate the classes "
"(using `mvn compile`)."
msgstr "`proto` ファイルを更新するたびに、クラスを再生成する必要があります ( `mvn compile` を使用して)。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:118
#, no-wrap, fuzzy
msgid "`proto` files with imports"
msgstr "`proto` ファイルのインポート"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:122
#, fuzzy
msgid ""
"Protocol Buffers specification provides a way to import `proto` files.  The "
"Quarkus code generation mechanism lets you control the scope of dependencies "
"to scan for possible imports by setting the `quarkus.generate-code.grpc.scan-"
"for-imports` property to one of the following:"
msgstr ""
"Protocol Buffers仕様では、 `proto` ファイルをインポートする方法を提供しています。Quarkusのコード生成メカニズムでは、 "
"`quarkus.generate-code.grpc.scan-for-imports` "
"プロパティを以下のいずれかに設定することで、インポートの可能性をスキャンするための依存関係の範囲を制御することができます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:124
#, fuzzy
msgid "`all` - scan all the dependencies"
msgstr "`all` - すべての依存関係をスキャンする"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:125
#, fuzzy
msgid ""
"`none` - don't scan the dependencies, use only what is defined in the `src/"
"main/proto` or `src/test/proto`"
msgstr "`none` - 依存関係をスキャンしないで、 `src/main/proto` または `src/test/proto`"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:126
#, fuzzy
msgid ""
"`groupId1:artifactId1,groupId2:artifactId2` - scan only the dependencies "
"with group id and artifact id in the list."
msgstr ""
"`groupId1:artifactId1,groupId2:artifactId2` - "
"リスト内のグループIDとアーティファクトIDを持つ依存関係のみをスキャンします。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:129
#, fuzzy
msgid ""
"If not specified, the property is set to `com.google.protobuf:protobuf-java`."
"  To override it, set the `quarkus.generate-code.grpc.scan-for-imports` "
"property in your pom.xml (or gradle.properties) to the desired value, e.g."
msgstr ""
"指定されていない場合、このプロパティは `com.google.protobuf:protobuf-java` "
"に設定されます。これを上書きするには、pom.xml (または gradle.properties) の `quarkus.generate-code."
"grpc.scan-for-imports` プロパティを希望の値に設定します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:135
#, no-wrap
msgid ""
"<properties>\n"
"  <quarkus.generate-code.grpc.scan-for-imports>all</quarkus.generate-code."
"grpc.scan-for-imports>\n"
"</properties>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:137
#, no-wrap, fuzzy
msgid "Implementing a gRPC service"
msgstr "gRPCサービスの実装"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:140
#, fuzzy
msgid ""
"Now that we have the generated classes let's implement our _hello_ service."
msgstr "生成されたクラスができたので、 _hello_サービスを実装してみましょう。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:142
#, fuzzy
msgid ""
"With Quarkus, implementing a service requires to _extend_ the generated "
"service base implementation and expose it as a `@Singleton` CDI bean."
msgstr ""
"Quarkusでは、サービスを実装するには、生成されたサービスベースの実装を _拡張し_、 `@Singleton` CDI "
"Beanとして公開する必要があります。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:144
#, fuzzy
msgid ""
"Don't use `@ApplicationScoped` as the gRPC service implementation cannot be "
"proxied."
msgstr "gRPCサービスの実装はプロキシできないので、 `@ApplicationScoped` を使用しないでください。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:145
#, no-wrap, fuzzy
msgid "Implementing a service"
msgstr "サービスの実装"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:148
#, fuzzy
msgid ""
"Create the `src/main/java/org/acme/HelloService.java` file with the "
"following content:"
msgstr "以下の内容の `src/main/java/org/acme/HelloService.java` ファイルを作成します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:152
#: upstream/_guides/grpc-getting-started.adoc:186
#: upstream/_guides/grpc-getting-started.adoc:235
#, no-wrap
msgid "package org.acme;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:157
#, no-wrap
msgid ""
"import io.grpc.stub.StreamObserver;\n"
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:159
#: upstream/_guides/grpc-getting-started.adoc:193
#, no-wrap
msgid "import javax.inject.Singleton;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:162
#, no-wrap
msgid ""
"@Singleton                                                                   "
"                 // <1>\n"
"public class HelloService extends GreeterGrpc.GreeterImplBase {              "
"                 // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:171
#, no-wrap
msgid ""
"    @Override\n"
"    public void sayHello(HelloRequest request, StreamObserver<HelloReply> "
"responseObserver) { // <3>\n"
"        String name = request.getName();\n"
"        String message = \"Hello \" + name;\n"
"        responseObserver.onNext(HelloReply.newBuilder().setMessage(message)."
"build());         // <4>\n"
"        responseObserver.onCompleted();                                      "
"                 // <5>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:174
#, fuzzy
msgid "Expose your implementation as bean."
msgstr "実装をBeanとして公開します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:175
#, fuzzy
msgid "Extends the `ImplBase` class. This is a generated class."
msgstr "`ImplBase` クラスを拡張します。生成されたクラスです。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:176
#, fuzzy
msgid ""
"Implement the methods defined in the service definition (here we have a "
"single method)."
msgstr "サービス定義で定義されたメソッドを実装します（ここでは1つのメソッドを使用しています）。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:177
#, fuzzy
msgid "Build and send the response."
msgstr "レスポンスを構築して送信します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:178
#, fuzzy
msgid "Close the response."
msgstr "レスポンスを閉じる。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:182
#, fuzzy
msgid ""
"Quarkus also provides an additional model with Mutiny, a Reactive "
"Programming API integrated in Quarkus.  Learn more about Mutiny on the link:"
"getting-started-reactive#mutiny[Getting Started with Reactive guide].  A "
"Mutiny implementation of this service would be:"
msgstr ""
"Quarkusは、Quarkusに統合されたReactive Programming "
"APIであるMutinyを使用した追加モデルも提供しています。Mutinyの詳細については、 link:getting-started-"
"reactive#mutiny[Getting Started with "
"Reactiveガイド]を参照してください。このサービスのMutinyの実装は次のようになります。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:191
#, no-wrap
msgid ""
"import io.quarkus.example.HelloReply;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.example.MutinyGreeterGrpc;\n"
"import io.smallrye.mutiny.Uni;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:196
#, no-wrap
msgid ""
"@Singleton\n"
"public class ReactiveHelloService extends MutinyGreeterGrpc.GreeterImplBase "
"{\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:204
#, no-wrap
msgid ""
"    @Override\n"
"    public Uni<HelloReply> sayHello(HelloRequest request) {\n"
"        return Uni.createFrom().item(() ->\n"
"                HelloReply.newBuilder().setMessage(\"Hello \" + request."
"getName()).build()\n"
"        );\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:207
#, fuzzy
msgid "The main differences are the following:"
msgstr "主な違いは以下の通りです。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:209
#, fuzzy
msgid ""
"it extends the `ImplBase` from `MutinyGreeterGrpc` instead of `GreeterGrpc`"
msgstr "の代わりに `MutinyGreeterGrpc` から `ImplBase` を拡張します。 `GreeterGrpc`"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:210
#, fuzzy
msgid "the signature of the method is using Mutiny types"
msgstr "メソッドのシグネチャは Mutiny 型を使用しています。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:215
#, fuzzy
msgid ""
"If your service implementation logic is blocking (use blocking I/O for "
"example), annotate your method with `@Blocking`.  The `io.smallrye.common."
"annotation.Blocking` annotation instructs the framework to invoke the "
"annotated method on a worker thread instead of the I/O thread (event-loop)."
msgstr ""
"サービスの実装ロジックがブロッキングされている場合 (例えば、ブロッキング I/O を使用する)、メソッドに `@Blocking` "
"をアノテーションします。 `io.smallrye.common.annotation.Blocking` アノテーションは、I/O スレッド "
"(イベントループ) の代わりにワーカースレッドでアノテーションされたメソッドを呼び出すようにフレームワークに指示します。"

#. type: Title ===
#: upstream/_guides/grpc-getting-started.adoc:216
#, no-wrap, fuzzy
msgid "The gRPC server"
msgstr "gRPCサーバ"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:220
#, fuzzy
msgid ""
"The services are _served_ by a _server_.  Available services (_CDI beans_) "
"are automatically registered and exposed."
msgstr "サービスは _サーバ_によって _提供される_。利用可能なサービス _（CDI豆_）は自動的に登録され、公開されます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:222
#, fuzzy
msgid ""
"By default, the server is exposed on `localhost:9000`, and uses _plain-text_ "
"(so no TLS)."
msgstr ""
"デフォルトでは、サーバは `localhost:9000` で公開されており、 _プレーンテキストを_使用します（そのため TLS は使用しません）。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:224
#, fuzzy
msgid "Run the application using: `mvn quarkus:dev`."
msgstr "`mvn quarkus:dev` を使用してアプリケーションを実行します。"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:225
#, no-wrap, fuzzy
msgid "Consuming a gRPC service"
msgstr "gRPCサービスを消費する"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:229
#, fuzzy
msgid ""
"In this section, we are going to consume the service we expose.  To "
"simplify, we are going to consume the service from the same application, "
"which in the real world, does not make sense."
msgstr ""
"ここでは、公開しているサービスを消費することにします。簡単に言うと、同じアプリケーションからサービスを消費することになりますが、これは現実の世界では意味がありません。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:231
#, fuzzy
msgid ""
"Open the existing `org.acme.ExampleResource` class, and edit the content to "
"become:"
msgstr "既存の `org.acme.ExampleResource` クラスを開き、内容を編集してなります。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:239
#, no-wrap
msgid ""
"import io.quarkus.example.GreeterGrpc;\n"
"import io.quarkus.example.HelloRequest;\n"
"import io.quarkus.grpc.runtime.annotations.GrpcService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:246
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.PathParam;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:249
#, no-wrap
msgid "@Path(\"/hello\")\n"
"public class ExampleResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:253
#, no-wrap
msgid ""
"    @Inject\n"
"    @GrpcService(\"hello\")                     // <1>\n"
"    GreeterGrpc.GreeterBlockingStub client;   // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:259
#, no-wrap
msgid ""
"    @GET\n"
"    @Produces(MediaType.TEXT_PLAIN)\n"
"    public String hello() {\n"
"        return \"hello\";\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:266
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/{name}\")\n"
"    public String hello(@PathParam(\"name\") String name) {\n"
"        return client.sayHello(HelloRequest.newBuilder().setName(name)."
"build()).getMessage();  // <3>\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:269
#, fuzzy
msgid ""
"Inject the service and configure its name. This name is used in the "
"application configuration."
msgstr "サービスを注入し、その名前を設定します。この名前は、アプリケーションの設定で使用されます。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:270
#, fuzzy
msgid "Use the _blocking_ stub (also a generated class)."
msgstr "_ブロッキング_スタブ（生成されたクラスでもあります）を使用します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:271
#, fuzzy
msgid "Invoke the service."
msgstr "サービスを起動します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:274
#, fuzzy
msgid ""
"We need to configure the application to indicate where the `hello` service "
"is found.  In the `src/main/resources/application.properties` file, add the "
"following property:"
msgstr ""
"`hello` サービスがどこにあるかを示すようにアプリケーションを構成する必要があります。 `src/main/resources/"
"application.properties` ファイルで、以下のプロパティを追加します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:278
#, no-wrap
msgid "quarkus.grpc.clients.hello.host=localhost\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:281
#, fuzzy
msgid ""
"`hello` is the name of the service used in the `@GrpcService` annotation."
msgstr "`hello` は `@GrpcService` アノテーションで使用されるサービスの名前です。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:282
#, fuzzy
msgid "`host` configures the service host (here it's localhost)."
msgstr "`host` はサービスホストを設定します (ここでは localhost)。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:284
#, fuzzy
msgid ""
"Then, open http://localhost:8080/hello/quarkus in a browser, and you should "
"get `Hello quarkus`!"
msgstr "そして、ブラウザで http://localhost:8080/hello/quarkus を開くと、 `Hello quarkus`!"

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:285
#, no-wrap, fuzzy
msgid "Packaging the application"
msgstr "アプリケーションのパッケージング"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:289
#, fuzzy
msgid ""
"Like any other Quarkus applications, you can package it with: `mvn package`. "
" You can also package the application into a native executable with: `mvn "
"package -Pnative`."
msgstr ""
"他のQuarkusアプリケーションと同様に、 `mvn package` "
"でパッケージ化することができます。また、アプリケーションをネイティブの実行ファイルにパッケージ化することもできます: `mvn package -"
"Pnative`."

#. type: Title ==
#: upstream/_guides/grpc-getting-started.adoc:290
#, no-wrap, fuzzy
msgid "Generating Java files from proto with protobuf-maven-plugin"
msgstr "protoからprotobuf-maven-pluginでJavaファイルを生成する"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:294
#, fuzzy
msgid ""
"Alternatively to using Quarkus code generation to generate stubs for `proto` "
"files, you can also use `protobuf-maven-plugin`."
msgstr "Quarkusコード生成を使用して `proto` ファイルのスタブを生成する代わりに、 `protobuf-maven-plugin`."

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:296
#, fuzzy
msgid ""
"To do it, first define the 2 following properties in the `<properties>` "
"section:"
msgstr "そのためには、まず `&amp;lt;properties&amp;gt;` セクションで以下の 2 つのプロパティを定義します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:301
#, no-wrap
msgid ""
"<grpc.version>{grpc-version}</grpc.version>\n"
"<protoc.version>{protoc-version}</protoc.version>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:304
#, fuzzy
msgid "They configure the gRPC version and the `protoc` version."
msgstr "gRPC のバージョンと `protoc` のバージョンを設定します。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:306
#, fuzzy
msgid ""
"Then, add to the `build` section the `os-maven-plugin` extension and the "
"`protobuf-maven-plugin` configuration."
msgstr ""
"そして、 `build` セクションに `os-maven-plugin` の拡張子と `protobuf-maven-plugin` "
"の設定を追加します。"

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:317
#, no-wrap
msgid ""
"<build>\n"
"    <extensions>\n"
"        <extension>\n"
"            <groupId>kr.motd.maven</groupId>\n"
"            <artifactId>os-maven-plugin</artifactId>\n"
"            <version>${os-maven-plugin-version}</version>\n"
"        </extension>\n"
"    </extensions>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:354
#, no-wrap
msgid ""
"    <plugins>\n"
"        <plugin>\n"
"            <groupId>org.xolstice.maven.plugins</groupId>\n"
"            <artifactId>protobuf-maven-plugin</artifactId>      // <1>\n"
"            <version>${protobuf-maven-plugin-version}</version>\n"
"            <configuration>\n"
"                <protocArtifact>com.google.protobuf:protoc:${protoc.version}:"
"exe:${os.detected.classifier}</protocArtifact> // <2>\n"
"                <pluginId>grpc-java</pluginId>\n"
"                <pluginArtifact>io.grpc:protoc-gen-grpc-java:${grpc.version}:"
"exe:${os.detected.classifier}</pluginArtifact>\n"
"                <protocPlugins>\n"
"                    <protocPlugin>\n"
"                        <id>quarkus-grpc-protoc-plugin</id>\n"
"                        <groupId>io.quarkus</groupId>\n"
"                        <artifactId>quarkus-grpc-protoc-plugin</artifactId>\n"
"                        <version>{quarkus-version}</version>\n"
"                        <mainClass>io.quarkus.grpc.protoc.plugin."
"MutinyGrpcGenerator</mainClass>\n"
"                    </protocPlugin>\n"
"                </protocPlugins>\n"
"            </configuration>\n"
"            <executions>\n"
"                <execution>\n"
"                    <id>compile</id>\n"
"                    <goals>\n"
"                        <goal>compile</goal>\n"
"                        <goal>compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"                <execution>\n"
"                    <id>test-compile</id>\n"
"                    <goals>\n"
"                        <goal>test-compile</goal>\n"
"                        <goal>test-compile-custom</goal>\n"
"                    </goals>\n"
"                </execution>\n"
"            </executions>\n"
"        </plugin>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/grpc-getting-started.adoc:358
#, no-wrap
msgid "        <!-- ... -->\n"
"    </plugins>\n"
"</build>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:361
#, fuzzy
msgid ""
"The `protobuf-maven-plugin` that generates stub classes from your gRPC "
"service definition (`proto` files)."
msgstr "gRPCサービス定義からスタブクラスを生成する `protobuf-maven-plugin` ( `proto` ファイル)。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:363
#, fuzzy
msgid ""
"The class generation uses a tool named `protoc`, which is OS-specific.  "
"That's why we use the `os-maven-plugin` to target the executable compatible "
"with the operating system."
msgstr ""
"クラス生成には、OS固有の `protoc` というツールを使用しています。そのため、OSと互換性のある実行ファイルを対象に `os-maven-"
"plugin` を使用しています。"

#. type: Plain text
#: upstream/_guides/grpc-getting-started.adoc:364
#, fuzzy
msgid ""
"This configuration instructs the `protobuf-maven-plugin` to generate the "
"default gRPC classes and classes using Mutiny to fit with the Quarkus "
"development experience."
msgstr ""
"この設定は、Quarkusの開発経験に合わせてMutinyを使用してデフォルトのgRPCクラスとクラスを生成するように、 `protobuf-maven-"
"plugin` に指示します。"
