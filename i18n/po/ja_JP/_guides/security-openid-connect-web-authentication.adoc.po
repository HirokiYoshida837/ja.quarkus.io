# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
# 
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/security-openid-connect-web-authentication.adoc:6
#, no-wrap, fuzzy
msgid ""
"Quarkus - Using OpenID Connect to Protect Web Applications using "
"Authorization Code Flow."
msgstr "Quarkus - OpenID Connectを使用して、認証コードフローを使用してWebアプリケーションを保護します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:12
#, fuzzy
msgid ""
"This guide demonstrates how to use Quarkus OpenID Connect Extension to "
"protect your Quarkus HTTP endpoints using OpenId Connect Authorization Code "
"Flow supported by OpenId Connect compliant Authorization Servers such as "
"https://www.keycloak.org/about.html[Keycloak]."
msgstr ""
"このガイドでは、Quarkus OpenID Connect Extensionを使用して、 link:https://www.keycloak.org/"
"about.html[Keycloak]などのOpenId Connect準拠の認証サーバーでサポートされているOpenId Connect "
"Authorization Code Flowを使用してQuarkus HTTPエンドポイントを保護する方法を説明します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:14
#, fuzzy
msgid ""
"The extension allows to easily authenticate the users of your web "
"application by redirecting them to the OpenID Connect Provider (e.g.: "
"Keycloak) to login and, once the authentication is complete, return them "
"back with the code confirming the successful authentication. The extension "
"will request ID and access tokens from the OpenID Connect Provider using an "
"authorization code grant and verify these tokens in order to authorize an "
"access to the application."
msgstr ""
"このエクステンションは、OpenID Connect Provider (例: Keycloak) "
"にリダイレクトしてログインさせ、認証が完了したら、認証に成功したことを確認するコードを使って、ウェブアプリケーションのユーザを簡単に認証することができます。エクステンションは、認証コード付与を使用して "
"OpenID Connect Provider から ID "
"とアクセストークンを要求し、アプリケーションへのアクセスを承認するためにこれらのトークンを検証します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:16
#, fuzzy
msgid ""
"Please read the link:security-openid-connect[Using OpenID Connect to Protect "
"Service Applications] guide if you need to protect your applications using "
"Bearer Token Authorization."
msgstr ""
"ベアラートークン認証を使用してアプリケーションを保護する必要がある場合は、 link:security-openid-connect[Using "
"OpenID Connect to Protect Service Applications]ガイドをお読みください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:18
#, fuzzy
msgid ""
"Please read the link:security-openid-connect-multitenancy[Using OpenID "
"Connect Multi-Tenancy] guide how to support multiple tenants."
msgstr ""
"マルチテナントへの対応方法については、 link:security-openid-connect-multitenancy[Using OpenID "
"Connect Multi-Tenancy]ガイドをお読みください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:19
#, no-wrap, fuzzy
msgid "Prerequisites"
msgstr "前提条件"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:22
#, fuzzy
msgid "To complete this guide, you need:"
msgstr "このガイドを完成させるには、以下のものが必要です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:24
#, fuzzy
msgid "less than 15 minutes"
msgstr "15分以内"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:25
#, fuzzy
msgid "an IDE"
msgstr "アイディーイーイー"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:26
#, fuzzy
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr "JDK 1.8+ がインストールされ、 `JAVA_HOME` が適切に設定されています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:27
#, fuzzy
msgid "Apache Maven {maven-version}"
msgstr "Apache Maven {maven-version} の場合"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:28
#, fuzzy
msgid "https://stedolan.github.io/jq/[jq tool]"
msgstr "link:https://stedolan.github.io/jq/[ジェイキューツール]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:29
#, fuzzy
msgid "Docker"
msgstr "ドッカー"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:30
#, no-wrap, fuzzy
msgid "Architecture"
msgstr "建築"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:33
#, fuzzy
msgid ""
"In this example, we build a very simple web application with a single page:"
msgstr "この例では、非常にシンプルなWebアプリケーションを1ページで構築しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:35
#, fuzzy
msgid "`/index.html`"
msgstr "`/index.html`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:37
#, fuzzy
msgid ""
"This page is protected and can only be accessed by authenticated users."
msgstr "このページは保護されており、認証されたユーザーのみがアクセスできます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:38
#, no-wrap, fuzzy
msgid "Solution"
msgstr "解決策"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:42
#, fuzzy
msgid ""
"We recommend that you follow the instructions in the next sections and "
"create the application step by step.  However, you can go right to the "
"completed example."
msgstr "次の章で紹介する手順に沿って、ステップを踏んでアプリを作成することをお勧めします。ただし、完成した例にそのまま進んでも構いません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:44
#, fuzzy
msgid ""
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download "
"an {quickstarts-archive-url}[archive]."
msgstr ""
"Git リポジトリをクローンします: `git clone {quickstarts-clone-url}` 、または {quickstarts-"
"archive-url}[archive] をダウンロードしてください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:46
#, fuzzy
msgid ""
"The solution is located in the `security-openid-connect-web-authentication-"
"quickstart` {quickstarts-tree-url}/security-openid-connect-web-"
"authentication-quickstart[directory]."
msgstr ""
"ソリューションは `security-openid-connect-web-authentication-quickstart` "
"{quickstarts-tree-url}/security-openid-connect-web-authentication-"
"quickstart[directory] にあります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:47
#, no-wrap, fuzzy
msgid "Creating the Maven Project"
msgstr "Mavenプロジェクトの作成"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:50
#, fuzzy
msgid ""
"First, we need a new project. Create a new project with the following "
"command:"
msgstr "まず、新しいプロジェクトが必要です。以下のコマンドで新規プロジェクトを作成します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:58
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=security-openid-connect-web-authentication-"
"quickstart \\\n"
"    -Dextensions=\"oidc\"\n"
"cd security-openid-connect-web-authentication-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:62
#, fuzzy
msgid ""
"If you already have your Quarkus project configured, you can add the `oidc` "
"extension to your project by running the following command in your project "
"base directory:"
msgstr ""
"すでにQuarkusプロジェクトが設定されている場合は、プロジェクトのベースディレクトリで以下のコマンドを実行することで、プロジェクトに `oidc` "
"エクステンションを追加することができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:66
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"oidc\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:69
#, fuzzy
msgid "This will add the following to your `pom.xml`:"
msgstr "これにより、 `pom.xml`."

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:76
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-oidc</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:78
#, no-wrap, fuzzy
msgid "Configuring the application"
msgstr "アプリケーションの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:81
#, fuzzy
msgid ""
"The OpenID Connect extension allows you to define the configuration using "
"the `application.properties` file which should be located at the `src/main/"
"resources` directory."
msgstr ""
"OpenID Connect エクステンションを使用すると、 `application.properties` "
"ファイルを使用して設定を定義することができます。 `src/main/resources` ディレクトリにあるはずの ファイルを使用してください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:82
#, no-wrap, fuzzy
msgid "Configuring using the application.properties file"
msgstr "application.propertiesファイルを使って設定する"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:91
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.http.auth.permission.authenticated.paths=/*\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:94
#, fuzzy
msgid ""
"This is the simplest configuration you can have when enabling authentication "
"to your application."
msgstr "これは、アプリケーションへの認証を有効にする際に最もシンプルな設定です。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:96
#, fuzzy
msgid ""
"The `quarkus.oidc.client-id` property references the `client_id` issued by "
"the OpenID Connect Provider and, in this case, the application is a public "
"client (no client secret is defined)."
msgstr ""
"`quarkus.oidc.client-id` プロパティは OpenID Connect Provider が発行した `client_id` "
"を参照し、この場合、アプリケーションはパブリッククライアントです（クライアントシークレットは定義されていません）。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:98
#, fuzzy
msgid ""
"The `quarkus.oidc.application-type` property is set to `web-app` in order to "
"tell Quarkus that you want to enable the OpenID Connect Authorization Code "
"Flow, so that your users are redirected to the OpenID Connect Provider to "
"authenticate."
msgstr ""
"`quarkus.oidc.application-type` プロパティは、OpenID Connect Authorization Code "
"Flowを有効にしたいことをQuarkusに伝えるために、 `web-app` に設定します。これにより、ユーザーが認証のためにOpenID "
"Connect Providerにリダイレクトされます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:101
#, fuzzy
msgid ""
"For last, the `quarkus.http.auth.permission.authenticated` permission is set "
"to tell Quarkus about the paths you want to protect. In this case, all paths "
"are being protected by a policy that ensures that only `authenticated` users "
"are allowed to access. For more details check link:security[Security Guide]."
msgstr ""
"最後に、保護したいパスをQuarkusに伝えるために、 `quarkus.http.auth.permission.authenticated` "
"のパーミッションを設定します。この場合、すべてのパスは、 `authenticated` "
"ユーザーのみがアクセスを許可されるようにするポリシーによって保護されます。詳細については、 link:"
"security[セキュリティガイド]をご確認ください。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:102
#, no-wrap, fuzzy
msgid "Configuring CORS"
msgstr "CORSの設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:105
#, fuzzy
msgid ""
"If you plan to consume this application from another application running on "
"a different domain, you will need to configure CORS (Cross-Origin Resource "
"Sharing). Please read the link:http-reference#cors-filter[HTTP CORS "
"documentation] for more details."
msgstr ""
"別のドメインで実行されている別のアプリケーションからこのアプリケーションを消費する予定の場合は、CORS (Cross-Origin Resource "
"Sharing) を構成する必要があります。詳細については、 link:http-reference#cors-filter[HTTP CORS "
"のドキュメント]をお読みください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:106
#, no-wrap, fuzzy
msgid "Starting and Configuring the Keycloak Server"
msgstr "Keycloakサーバの起動と設定"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:109
#, fuzzy
msgid ""
"To start a Keycloak Server you can use Docker and just run the following "
"command:"
msgstr "Keycloak Serverを起動するにはDockerを使用し、以下のコマンドを実行するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:113
#, no-wrap
msgid ""
"docker run --name keycloak -e KEYCLOAK_USER=admin -e KEYCLOAK_PASSWORD=admin "
"-p 8180:8080 {keycloak-docker-image}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:116
#, fuzzy
msgid ""
"You should be able to access your Keycloak Server at http://localhost:8180/"
"auth[localhost:8180/auth]."
msgstr ""
"Keycloakサーバには、 link:http://localhost:8180/auth[localhost:8180/"
"auth]でアクセスできるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:118
#, fuzzy
msgid ""
"Log in as the `admin` user to access the Keycloak Administration Console. "
"Username should be `admin` and password `admin`."
msgstr ""
"Keycloak Administration Consoleにアクセスするには、 `admin` ユーザーとしてログインしてください。ユーザー名は "
"`admin` 、パスワードは `admin`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:120
#, fuzzy
msgid ""
"Import the {quickstarts-tree-url}/security-openid-connect-web-authentication-"
"quickstart/config/quarkus-realm.json[realm configuration file] to create a "
"new realm. For more details, see the Keycloak documentation about how to "
"https://www.keycloak.org/docs/latest/server_admin/index.html#_create-"
"realm[create a new realm]."
msgstr ""
"新しいレルムを作成するには、{quickstarts-tree-url}/security-openid-connect-web-"
"authentication-quickstart/config/quarkus-realm."
"json[realm設定ファイル]をインポートします。詳細については、 link:https://www.keycloak.org/docs/"
"latest/server_admin/index.html#_create-"
"realm[新しいレルムの作成]方法についてのKeycloakのドキュメントを参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:121
#, no-wrap, fuzzy
msgid "Running and Using the Application"
msgstr "アプリケーションの実行と使用"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:123
#, no-wrap, fuzzy
msgid "Running in Developer Mode"
msgstr "デベロッパーモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:126
#, fuzzy
msgid ""
"To run the microservice in dev mode, use `./mvnw clean compile quarkus:dev`."
msgstr "マイクロサービスをdevモードで実行するには、 `./mvnw clean compile quarkus:dev`."

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:127
#, no-wrap, fuzzy
msgid "Running in JVM Mode"
msgstr "JVMモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:130
#, fuzzy
msgid ""
"When you're done playing with \"dev-mode\" you can run it as a standard Java "
"application."
msgstr "dev-mode」で遊び終わったら、標準のJavaアプリケーションとして実行することができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:132
#, fuzzy
msgid "First compile it:"
msgstr "まずコンパイルします。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:136
#, no-wrap
msgid "./mvnw package\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:139
#, fuzzy
msgid "Then run it:"
msgstr "それから実行してください。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:143
#, no-wrap
msgid ""
"java -jar ./target/security-openid-connect-web-authentication-quickstart-"
"runner.jar\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:145
#, no-wrap, fuzzy
msgid "Running in Native Mode"
msgstr "ネイティブモードでの実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:148
#, fuzzy
msgid ""
"This same demo can be compiled into native code: no modifications required."
msgstr "同じデモをネイティブコードにコンパイルすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:152
#, fuzzy
msgid ""
"This implies that you no longer need to install a JVM on your production "
"environment, as the runtime technology is included in the produced binary, "
"and optimized to run with minimal resource overhead."
msgstr ""
"これは、生成されたバイナリにランタイム技術が含まれており、最小限のリソースオーバーヘッドで実行できるように最適化されているため、本番環境にJVMをインストールする必要がないことを意味します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:155
#, fuzzy
msgid ""
"Compilation will take a bit longer, so this step is disabled by default; "
"let's build again by enabling the `native` profile:"
msgstr ""
"コンパイルには少し時間がかかるので、このステップはデフォルトで無効になっています。 `native` プロファイルを有効にして再度ビルドしてみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:159
#, no-wrap
msgid "./mvnw package -Pnative\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:162
#, fuzzy
msgid ""
"After getting a cup of coffee, you'll be able to run this binary directly:"
msgstr "コーヒーを飲んでから、このバイナリを直接実行してみましょう。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:166
#, no-wrap
msgid "./target/security-openid-connect-web-authentication-quickstart-runner\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:168
#, no-wrap, fuzzy
msgid "Testing the Application"
msgstr "アプリケーションのテスト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:171
#, fuzzy
msgid ""
"To test the application, you should open your browser and access the "
"following URL:"
msgstr "アプリケーションをテストするには、ブラウザを開いて以下のURLにアクセスする必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:173
#, fuzzy
msgid "http://localhost:8080[http://localhost:8080]"
msgstr "link:http://localhost:8080[http://localhost:8080]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:175
#, fuzzy
msgid ""
"If everything is working as expected, you should be redirected to the "
"Keycloak server to authenticate."
msgstr "すべてが期待通りに動作している場合は、認証のためにKeycloakサーバにリダイレクトされるはずです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:177
#, fuzzy
msgid ""
"In order to authenticate to the application you should type the following "
"credentials when at the Keycloak login page:"
msgstr "アプリケーションを認証するためには、Keycloakのログインページで以下の認証情報を入力する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:179
#, fuzzy
msgid "Username: *alice*"
msgstr "ユーザー名 *: アリス*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:180
#, fuzzy
msgid "Password: *alice*"
msgstr "パスワード： *アリス*"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:182
#, fuzzy
msgid ""
"After clicking the `Login` button you should be redirected back to the "
"application."
msgstr "`Login` ボタンをクリックすると、アプリケーションにリダイレクトされます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:183
#, no-wrap, fuzzy
msgid "Redirection"
msgstr "リダイレクト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:186
#, fuzzy
msgid ""
"When the user is redirected to the OpenID Connect Provider to authenticate, "
"the redirect URL includes a `redirect_uri` query parameter which indicates "
"to the Provider where the user has to be redirected to once the "
"authentication has been completed."
msgstr ""
"ユーザが認証のために OpenID Connect プロバイダにリダイレクトされる場合、リダイレクト URL には `redirect_uri` "
"クエリパラメータが含まれており、認証が完了した後にどこにリダイレクトするかをプロバイダに指示します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:188
#, fuzzy
msgid ""
"Quarkus will set this parameter to the current request URL by default. For "
"example, if the user is trying to access a Quarkus service endpoint at `http:"
"//localhost:8080/service/1` then the `redirect_uri` parameter will be set to "
"`http://localhost:8080/service/1`. Similarly, if the request URL is `http://"
"localhost:8080/service/2` then the `redirect_uri` parameter will be set to "
"`http://localhost:8080/service/2`, etc."
msgstr ""
"Quarkusは、デフォルトでこのパラメータを現在のリクエストURLに設定します。たとえば、ユーザーがQuarkusサービスのエンドポイントにアクセスしようとしている場合 "
"`&lt;a href=\"http://localhost:8080/service/1\" class=\"bare\"&gt;http://"
"localhost:8080/service/1&lt;/a&gt;`の場合、 `redirect_uri` パラメータは `&lt;a href="
"\"http://localhost:8080/service/1\" class=\"bare\"&gt;http://localhost:8080/"
"service/1&lt;/a&gt;`.同様に、リクエストURLが `&lt;a href=\"http://localhost:8080/"
"service/2\" class=\"bare\"&gt;http://localhost:8080/service/2&lt;/a&gt;`の場合、 "
"`redirect_uri` パラメータは `&lt;a href=\"http://localhost:8080/service/2\" class="
"\"bare\"&gt;http://localhost:8080/service/2&lt;/a&gt;`などと、その都度、ご紹介しています。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:191
#, fuzzy
msgid ""
"OpenID Connect Providers may be configured to require the `redirect_uri` "
"parameter to have the same value (eg. `http://localhost:8080/service/"
"callback`) for all the redirect URLs.  In such cases a `quarkus.oidc."
"authentication.redirect-path` property has to be set, for example, `quarkus."
"oidc.authentication.redirect-path=/service/callback`, and Quarkus will set "
"the `redirect_uri` parameter to an absolute URL such as `http://localhost:"
"8080/service/callback` which will be the same regardless of the current "
"request URL."
msgstr ""
"OpenID Connect Providers は、すべてのリダイレクト URL に対して `redirect_uri` パラメータに同じ値 (例えば "
"`&lt;a href=\"http://localhost:8080/service/callback\" class="
"\"bare\"&gt;http://localhost:8080/service/callback&lt;/"
"a&gt;`など）を必要とするように設定されている場合があります。 `redirect_uri` このような場合は、 `quarkus.oidc."
"authentication.redirect-path` プロパティを設定する必要があります（例： `quarkus.oidc."
"authentication.redirect-path=/service/callback` ）。 `&lt;a href=\"http://"
"localhost:8080/service/callback\" class=\"bare\"&gt;http://localhost:8080/"
"service/callback&lt;/a&gt;`は、現在のリクエストURLに関係なく同じになります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:193
#, fuzzy
msgid ""
"If `quarkus.oidc.authentication.redirect-path` is set but the original "
"request URL has to be restored after the user has been redirected back to a "
"callback URL such as `http://localhost:8080/service/callback` then a "
"`quarkus.oidc.authentication.restore-path-after-redirect` property has to be "
"set to `true` which will restore the request URL such as `http://localhost:"
"8080/service/1`, etc."
msgstr ""
"`quarkus.oidc.authentication.redirect-path` "
"が設定されていても、ユーザーがリダイレクトされた後に元のリクエスト URL を復元しなければならない場合は `&lt;a href=\"http://"
"localhost:8080/service/callback\" class=\"bare\"&gt;http://localhost:8080/"
"service/callback&lt;/a&gt;`のようなリクエストURLを復元する `quarkus.oidc.authentication."
"restore-path-after-redirect` プロパティを `true` に設定する必要があります。 `&lt;a href=\"http:/"
"/localhost:8080/service/1\" class=\"bare\"&gt;http://localhost:8080/service/"
"1&lt;/a&gt;`などと、その都度、ご紹介しています。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:195
#, no-wrap, fuzzy
msgid "Dealing with Cookies"
msgstr "クッキーの取り扱い"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:198
#, fuzzy
msgid ""
"The OIDC adapter uses cookies to keep the session, code flow and post logout "
"state."
msgstr "OIDCアダプタは、セッション、コードフロー、ログアウト後の状態を保持するためにクッキーを使用します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:200
#, fuzzy
msgid ""
"If you access the protected resources with overlapping or different roots, "
"for example:"
msgstr "例えば、保護されたリソースに重複してアクセスしたり、異なるルートでアクセスしたりした場合。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:202
#, fuzzy
msgid "`/index.html` and `/web-app/service`"
msgstr "`/index.html` と `/web-app/service`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:203
#, fuzzy
msgid "`/web-app/service1` and `/web-app/service2`"
msgstr "`/web-app/service1` と `/web-app/service2`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:204
#, fuzzy
msgid "`/web-app1/service` and `/web-app2/service`"
msgstr "`/web-app1/service` と `/web-app2/service`"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:206
#, fuzzy
msgid ""
"then most likely you also need to set a `quarkus.oidc.authentication.cookie-"
"path` property to a path value that is common to all of them, such as `/` or "
"`/web-app`, etc."
msgstr ""
"その場合は、 `quarkus.oidc.authentication.cookie-path` プロパティに `/` や `/web-app` "
"などのように、すべてのプロパティに共通のパス値を設定する必要があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:208
#, fuzzy
msgid ""
"Otherwise the browser cache manager may keep request path specific cookies "
"which in turn may lead to some difficult to diagnoze errors. For example, an "
"authorization code flow may fail due to a missing state cookie if a user has "
"initially accessed `/index.html` but configured a callback URI to `/web-app/"
"callback`."
msgstr ""
"そうでなければ、ブラウザのキャッシュマネージャはリクエストパス固有のクッキーを保持している可能性があり、その結果、解析が困難なエラーを引き起こす可能性があります。例えば、ユーザが最初に "
"`/index.html` にアクセスしたが、 `/web-app/callback` へのコールバック URI "
"を設定していた場合、状態クッキーがないために認可コードフローが失敗するかもしれません。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:210
#, fuzzy
msgid ""
"If your application is deployed across multiple domains, make sure to set a "
"`quarkus.oidc.authentication.cookie-domain` property for the session cookie "
"be visible to all protected Quarkus services, for example, if you have 2 "
"services deployed at:"
msgstr ""
"アプリケーションが複数のドメインにまたがってデプロイされている場合、保護されているすべてのQuarkusサービスに対してセッションクッキーが見えるように、 "
"`quarkus.oidc.authentication.cookie-domain` プロパティを設定してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:212
#, fuzzy
msgid "https://whatever.wherever.company.net/"
msgstr "https://whatever.wherever.company.net/"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:213
#, fuzzy
msgid "https://another.address.company.net/"
msgstr "https://another.address.company.net/"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:215
#, fuzzy
msgid ""
"then the `quarkus.oidc.authentication.cookie-domain` property must be set to "
"`company.net`."
msgstr ""
"の場合は、 `quarkus.oidc.authentication.cookie-domain` プロパティを `company.net` "
"に設定する必要があります。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:216
#, no-wrap, fuzzy
msgid "Logout"
msgstr "ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:219
#, fuzzy
msgid ""
"By default the logout is based on the expiration time of the ID Token issued "
"by the OpenID Connect Provider. When the ID Token expires, the current user "
"session at the Quarkus endpoint is invalidated and the user is redirected to "
"the OpenID Connect Provider again to authenticate. If the session at the "
"OpenID Connect Provider is still active, users are automatically re-"
"authenticated without having to provide their credentials again."
msgstr ""
"デフォルトでは、ログアウトはOpenID Connect Providerが発行したID "
"Tokenの有効期限に基づいて行われます。IDトークンの有効期限が切れると、Quarkusエンドポイントでの現在のユーザーセッションは無効になり、ユーザーは認証のために再度OpenID "
"Connect Providerにリダイレクトされます。OpenID Connect "
"Providerでのセッションがまだアクティブな場合は、ユーザーは再び資格情報を提供することなく自動的に再認証されます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:221
#, fuzzy
msgid ""
"The current user session may be automatically extended by enabling a "
"`quarkus.oidc.token.refresh-expired` property. If it is set to `true` then "
"when the current ID Token expires a Refresh Token Grant will be used to "
"refresh ID Token as well as Access and Refresh Tokens."
msgstr ""
"現在のユーザーセッションは、 `quarkus.oidc.token.refresh-expired` "
"プロパティを有効にすることで自動的に拡張される場合があります。 `true` に設定されている場合、現在の ID "
"トークンの有効期限が切れると、リフレッシュ・トークンの付与が使用され、ID "
"トークンだけでなく、アクセス・トークンやリフレッシュ・トークンもリフレッシュされます。"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:222
#, no-wrap, fuzzy
msgid "User-Initiated Logout"
msgstr "ユーザー起動型ログアウト"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:226
#, fuzzy
msgid ""
"Users can request a logout by sending a request to the Quarkus endpoint "
"logout path set with a `quarkus.oidc.logout.path` property.  For example, if "
"the endpoint address is `https://application.com/webapp` and the `quarkus."
"oidc.logout.path` is set to \"/logout\" then the logout request has to be "
"sent to `https://application.com/webapp/logout`."
msgstr ""
"ユーザーは、 `quarkus.oidc.logout.path` "
"プロパティで設定されたQuarkusエンドポイントのログアウトパスにリクエストを送信することで、ログアウトを要求することができます。たとえば、エンドポイントのアドレスが "
"`&lt;a href=\"https://application.com/webapp\" class=\"bare\"&gt;https://"
"application.com/webapp&lt;/a&gt;`で、 `quarkus.oidc.logout.path` が \"/logout\" "
"に設定されている場合、ログアウト要求は `&lt;a href=\"https://application.com/webapp/logout\" "
"class=\"bare\"&gt;https://application.com/webapp/logout&lt;/a&gt;`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:228
#, fuzzy
msgid ""
"This logout request will start an https://openid.net/specs/openid-connect-"
"session-1_0.html#RPLogout[RP-Initiated Logout] and the user will be "
"redirected to the OpenID Connect Provider to logout where a user may be "
"asked to confirm the logout is indeed intended."
msgstr ""
"このログアウト要求は link:https://openid.net/specs/openid-connect-session-1_0."
"html#RPLogout[RP-Initiated Logout]を開始し、ユーザーはOpenID Connect "
"Providerにリダイレクトしてログアウトします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:230
#, fuzzy
msgid ""
"The user will be returned to the endpoint post logout page once the logout "
"has been completed if the `quarkus.oidc.logout.post-logout-path` property is "
"set. For example, if the endpoint address is `https://application.com/"
"webapp` and the `quarkus.oidc.logout.post-logout-path` is set to \"/signin\" "
"then the user will be returned to `https://application.com/webapp/signin` "
"(note this URI must be registered as a valid `post_logout_redirect_uri` in "
"the OpenID Connect Provider)."
msgstr ""
"`quarkus.oidc.logout.post-logout-path` "
"プロパティが設定されている場合、ログアウトが完了するとエンドポイントのポストログアウトページに戻ります。例えば、エンドポイントのアドレスが `&lt;a "
"href=\"https://application.com/webapp\" class=\"bare\"&gt;https://"
"application.com/webapp&lt;/a&gt;`で、 `quarkus.oidc.logout.post-logout-path` が "
"\"/signin\" に設定されている場合、ユーザーは `&lt;a href=\"https://application.com/webapp/"
"signin\" class=\"bare\"&gt;https://application.com/webapp/signin&lt;/"
"a&gt;`(このURIはOpenID Connect Providerで有効な `post_logout_redirect_uri` "
"として登録されている必要があることに注意してください)。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:232
#, fuzzy
msgid ""
"If the `quarkus.oidc.logout.post-logout-path` is set then a `q_post_logout` "
"cookie will be created and a matching `state` query parameter will be added "
"to the logout redirect URI and the OpenID Connect Provider will return this "
"`state` once the logout has been completed. It is recommended for the "
"Quarkus `web-app` applications to check that a `state` query parameter "
"matches the value of the `q_post_logout` cookie which can be done for "
"example in a JAX-RS filter."
msgstr ""
"`quarkus.oidc.logout.post-logout-path` が設定されている場合、 `q_post_logout` "
"クッキーが作成され、一致する `state` クエリパラメータがログアウトのリダイレクトURIに追加され、ログアウトが完了するとOpenID "
"Connect Providerはこの `state` を返します。Quarkus `web-app` アプリケーションでは、 `state` "
"クエリパラメータが `q_post_logout` クッキーの値と一致することを確認することをお勧めします。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:234
#, fuzzy
msgid ""
"Note that a cookie name will vary when using link:security-openid-connect-"
"multitenancy[OpenID Connect Multi-Tenancy]. For example, it will be named "
"`q_post_logout_tenant_1` for a tenant with a `tenant_1` id, etc."
msgstr ""
"link:security-openid-connect-multitenancy[OpenID Connect Multi-"
"Tenancy]を使用する場合は、クッキー名が異なることに注意してください。例えば、 `tenant_1` ID を持つテナントの場合は "
"`q_post_logout_tenant_1` という名前になります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:236
#, fuzzy
msgid "Here is an example of how to configure an RP initiated logout flow:"
msgstr "ここでは、RP主導のログアウトフローを設定する方法の例を示します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:242
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=http://localhost:8180/auth/realms/quarkus\n"
"quarkus.oidc.client-id=frontend\n"
"quarkus.oidc.application-type=web-app\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:245
#, no-wrap
msgid ""
"quarkus.oidc.tenant-logout.logout.path=/logout\n"
"quarkus.oidc.tenant-logout.logout.post-logout-path=/postlogout\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:249
#, no-wrap
msgid ""
"# Only the authenticated users can initiate a logout:\n"
"quarkus.http.auth.permission.authenticated.paths=/logout\n"
"quarkus.http.auth.permission.authenticated.policy=authenticated\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:253
#, no-wrap
msgid ""
"# Logged out users should be returned to the /welcome.html site which will "
"offer an option to re-login:\n"
"quarkus.http.auth.permission.authenticated.paths=/welcome.html\n"
"quarkus.http.auth.permission.authenticated.policy=permit\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:257
#, fuzzy
msgid ""
"You may also need to set `quarkus.oidc.authentication.cookie-path` to a path "
"value common to all of the application resources which is `/` in this "
"example.  See <<oidc-cookies, Dealing with Cookies>> for more information."
msgstr ""
"また、 `quarkus.oidc.authentication.cookie-path` をすべてのアプリケーションリソースに共通のパス値（この例では "
"`/` ）に設定する必要があるかもしれません。詳細については、「 link:#oidc-cookies[クッキーの]扱い」を参照してください。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:258
#, no-wrap, fuzzy
msgid "Accessing ID and Access Tokens"
msgstr "IDとアクセストークンへのアクセス"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:261
#, fuzzy
msgid ""
"ID Token is always a JWT token. One can access ID Token claims by injecting "
"`JsonWebToken` with an `IdToken` qualifier:"
msgstr ""
"ID Token は常に JWT トークンである。ID Token の主張にアクセスするには、 `JsonWebToken` に `IdToken` "
"の修飾子を付ける。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:268
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.IdToken;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:272
#: upstream/_guides/security-openid-connect-web-authentication.adoc:296
#, no-wrap
msgid "@Path(\"/web-app\")\n"
"@Authenticated\n"
"public class ProtectedResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:276
#, no-wrap
msgid "    @Inject\n"
"    @IdToken\n"
"    JsonWebToken idToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:282
#, no-wrap
msgid ""
"    @GET\n"
"    public String getUserName() {\n"
"        return idToken.getName();\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:285
#, fuzzy
msgid ""
"Access Token is usually used by the OIDC `web-app` application to access "
"other endpoints on behalf of the currently logged in user. The raw access "
"token can be accessed as follows:"
msgstr ""
"アクセストークンは通常、OIDC `web-app` "
"アプリケーションが現在ログインしているユーザーに代わって他のエンドポイントにアクセスするために使用されます。生のアクセストークンは、以下のようにアクセスすることができます。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:292
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import org.eclipse.microprofile.jwt.JsonWebToken;\n"
"import io.quarkus.oidc.AccessTokenCredential;\n"
"import io.quarkus.security.Authenticated;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:299
#, no-wrap
msgid "    @Inject\n"
"    JsonWebToken accessToken;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:303
#, no-wrap
msgid ""
"    // or\n"
"    // @Inject\n"
"    // AccessTokenCredential accessTokenCredential;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:309
#, no-wrap
msgid ""
"    @GET\n"
"    public String getReservationOnBehalfOfUser() {\n"
"        String rawAccessToken = accessToken.getRawToken();\n"
"        //or\n"
"        //String rawAccessToken = accessTokenCredential.getToken();\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:314
#, no-wrap
msgid ""
"        // Use the raw access token to access a remote endpoint\n"
"        return getReservationfromRemoteEndpoint(rawAccesstoken);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:317
#, fuzzy
msgid ""
"Note that `AccessTokenCredential` will have to be used if the Access Token "
"issued to the Quarkus `web-app` application is opaque (binary) and can not "
"be parsed to `JsonWebToken`."
msgstr ""
"Quarkus `web-app` アプリケーションに発行されたアクセストークンが不透明（バイナリ）で、 `JsonWebToken` "
"に解析できない場合は、 `AccessTokenCredential` を使用する必要があることに注意してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:319
#, fuzzy
msgid ""
"Injection of the `JsonWebToken` and `AccessTokenCredential` is supported in "
"both `@RequestScoped` and `@ApplicationScoped` contexts."
msgstr ""
"`JsonWebToken` と `AccessTokenCredential` のインジェクションは、 `@RequestScoped` と "
"`@ApplicationScoped` の両方のコンテキストでサポートされています。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:321
#, no-wrap, fuzzy
msgid "User Info"
msgstr "ユーザー情報"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:326
#, fuzzy
msgid ""
"Set `quarkus.oidc.user-info-required=true` if a UserInfo JSON object from "
"the OIDC userinfo endpoint has to be requested.  A request will be sent to "
"the OpenId Provider UserInfo endpont and an `io.quarkus.oidc.UserInfo` (a "
"simple `javax.json.JsonObject` wrapper) object will be created.  `io.quarkus."
"oidc.UserInfo` can be either injected or accessed as a SecurityIdentity "
"`userinfo` attribute."
msgstr ""
"OIDC userinfo エンドポイントから UserInfo JSON オブジェクトを要求する必要がある場合は `quarkus.oidc.user-"
"info-required=true` を設定します。リクエストが OpenId Provider UserInfo エンドポイントに送信され、 `io."
"quarkus.oidc.UserInfo` (単純な `javax.json.JsonObject` ラッパー) オブジェクトが作成されます。 `io."
"quarkus.oidc.UserInfo` は、SecurityIdentity `userinfo` "
"属性として注入することもアクセスすることもできます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:327
#, no-wrap, fuzzy
msgid "Token Claims And SecurityIdentity Roles"
msgstr "トークンクレームとセキュリティアイデンティティの役割"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:330
#, fuzzy
msgid ""
"The way the roles are mapped to the SecurityIdentity roles from the verified "
"tokens is identical to how it is done for the link:security-openid-"
"connect#token-claims-and-securityidentity-roles[bearer tokens] with the only "
"difference being is that https://openid.net/specs/openid-connect-core-1_0."
"html#IDToken[ID Token] is used as a source of the roles by default."
msgstr ""
"検証済みトークンからSecurityIdentityロールにロールをマッピングする方法は、 link:security-openid-"
"connect#token-claims-and-securityidentity-roles[ベアラートークン]の場合と同じですが、唯一の違いは、 "
"link:https://openid.net/specs/openid-connect-core-1_0."
"html#IDToken[ID]トークンがデフォルトでロールのソースとして使用されるということです。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:332
#, fuzzy
msgid ""
"Note if you use Keycloak then you should set a Microprofile JWT client scope "
"for ID token to contain a `groups` claim, please see the https://www."
"keycloak.org/docs/latest/server_admin/#protocol[Keycloak Server "
"Administration Guide] for more information."
msgstr ""
"Keycloakを使用する場合は、IDトークン用のMicroprofile JWTクライアントスコープに `groups` "
"クレームを含めるように設定する必要があることに注意してください。詳細については、 link:https://www.keycloak.org/docs/"
"latest/server_admin/#protocol[Keycloakサーバー管理ガイドを]参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:334
#, fuzzy
msgid ""
"If only the access token contains the roles and this access token is not "
"meant to be propagated to the downstream endpoints then set `quarkus.oidc."
"roles.source=accesstoken`."
msgstr ""
"アクセストークンにのみロールが含まれ、このアクセストークンが下流のエンドポイントに伝播されることを意図していない場合は、 `quarkus.oidc."
"roles.source=accesstoken`."

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:336
#, fuzzy
msgid ""
"If UserInfo is the source of the roles then set `quarkus.oidc.authentication."
"user-info-required=true` and `quarkus.oidc.roles.source=userinfo`, and if "
"needed, `quarkus.oidc.roles.role-claim-path`."
msgstr ""
"UserInfoがロールのソースである場合は、 `quarkus.oidc.authentication.user-info-required="
"true` と `quarkus.oidc.roles.source=userinfo` 、必要に応じて `quarkus.oidc.roles."
"role-claim-path` を設定します。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:338
#, fuzzy
msgid ""
"Additionally a custom `SecurityIdentityAugmentor` can also be used to add "
"the roles as documented link:security#security-identity-customization[here]."
msgstr ""
"さらに、カスタム `SecurityIdentityAugmentor` を使用して、 link:security#security-identity-"
"customization[ここで]文書化されているようにロールを追加することもできます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:339
#, no-wrap, fuzzy
msgid "Listening to important authentication events"
msgstr "重要な認証イベントを聞く"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:342
#, fuzzy
msgid ""
"One can register `@ApplicationScoped` bean which will observe important OIDC "
"authentication events. The listener will be updated when a user has logged "
"in for the first time or re-authenticated, as well as when the session has "
"been refreshed. More events may be reported in the future. For example:"
msgstr ""
"重要なOIDC認証イベントを監視する `@ApplicationScoped` "
"Beanを登録することができます。リスナーは、ユーザが初めてログインしたときや再認証したとき、セッションがリフレッシュされたときに更新されます。将来的には、より多くのイベントが報告されるかもしれません。例えば、以下のようなものです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:347
#, no-wrap
msgid ""
"import javax.enterprise.context.ApplicationScoped;\n"
"import javax.enterprise.event.Observes;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:352
#, no-wrap
msgid ""
"import io.quarkus.oidc.IdTokenCredential;\n"
"import io.quarkus.oidc.SecurityEvent;\n"
"import io.quarkus.security.identity.AuthenticationRequestContext;\n"
"import io.vertx.ext.web.RoutingContext;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:355
#, no-wrap
msgid "@ApplicationScoped\n"
"public class SecurityEventListener {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:362
#, no-wrap
msgid ""
"    public void event(@Observes SecurityEvent event) {\n"
"        String tenantId = event.getSecurityIdentity().getAttribute(\"tenant-"
"id\");\n"
"        RoutingContext vertxContext = event.getSecurityIdentity()."
"getCredential(IdTokenCredential.class).getRoutingContext();\n"
"        vertxContext.put(\"listener-message\", String.format(\"event:"
"%s,tenantId:%s\", event.getEventType().name(), tenantId));\n"
"    }\n"
"}\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:364
#, no-wrap, fuzzy
msgid "Single Page Applications"
msgstr "シングルページアプリケーション"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:367
#, fuzzy
msgid ""
"Please check if implementing SPAs the way it is suggested in the link:"
"security-openid-connect#single-page-applications[Single Page Applications "
"for Service Applications] section can meet your requirements."
msgstr ""
"link:security-openid-connect#single-page-"
"applications[サービスアプリケーションのシングルページアプリケーション]のセクションで提案されている方法でSPAを実装することが、お客様の要件を満たすことができるかどうかを確認してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:369
#, fuzzy
msgid ""
"If you prefer to use SPA and JavaScript API such as `Fetch` or "
"`XMLHttpRequest`(XHR) with Quarkus web applications, please be aware that "
"OpenID Connect Providers may not support CORS for Authorization endpoints "
"where the users are authenticated after a redirect from Quarkus. This will "
"lead to authentication failures if the Quarkus application and the OpenID "
"Connect Provider are hosted on the different HTTP domains/ports."
msgstr ""
"Quarkusウェブアプリケーションで `Fetch` や `XMLHttpRequest` （XHR）などのSPAやJavaScript "
"APIを使用することを好む場合は、Quarkusからのリダイレクト後にユーザーが認証される認証エンドポイントでは、OpenID Connect "
"ProviderがCORSをサポートしていない場合があることに注意してください。これは、QuarkusアプリケーションとOpenID Connect "
"Providerが異なるHTTPドメイン/ポートでホストされている場合、認証に失敗することにつながります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:371
#, fuzzy
msgid ""
"In such cases, set the `quarkus.oidc.authentication.java-script-auto-"
"redirect` property to `false` which will instruct Quarkus to return a `499` "
"status code and `WWW-Authenticate` header with the `OIDC` value. The browser "
"script also needs to be updated to set `X-Requested-With` header with the "
"`JavaScript` value and reload the last requested page in case of `499`, for "
"example:"
msgstr ""
"このような場合は、 `quarkus.oidc.authentication.java-script-auto-redirect` プロパティを "
"`false` に設定すると、Quarkusは `499` ステータスコードと `WWW-Authenticate` ヘッダーを `OIDC` "
"の値で返すように指示します。ブラウザスクリプトも、 `X-Requested-With` ヘッダを `JavaScript` の値で設定し、 `499` "
"の場合は最後にリクエストされたページをリロードするように更新する必要があります。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:376
#, no-wrap
msgid ""
"Future<void> callQuarkusService() async {\n"
"    Map<String, String> headers = Map.fromEntries([MapEntry(\"X-Requested-"
"With\", \"JavaScript\")]);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:385
#, no-wrap
msgid ""
"    await http\n"
"        .get(\"https://localhost:443/serviceCall\")\n"
"        .then((response) {\n"
"            if (response.statusCode == 499) {\n"
"                window.location.assign(\"https://localhost.com:443/"
"serviceCall\");\n"
"            }\n"
"         });\n"
"  }\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:387
#, no-wrap, fuzzy
msgid "Running behind a reverse proxy"
msgstr "リバースプロキシの背後での実行"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:390
#, fuzzy
msgid ""
"OIDC authentication mechanism can be affected if your Quarkus application is "
"running behind a reverse proxy/gateway/firewall when HTTP `Host` header may "
"be reset to the internal IP address, HTTPS connection may be terminated, etc."
" For example, an authorization code flow `redirect_uri` parameter may be set "
"to the internal host instead of the expected external one."
msgstr ""
"Quarkusアプリケーションがリバースプロキシ/ゲートウェイ/ファイアウォールの背後で実行されている場合、HTTP `Host` "
"ヘッダーが内部IPアドレスにリセットされたり、HTTPS接続が終了したりした場合などに、OIDC認証メカニズムが影響を受けることがあります。たとえば、オーソリゼーションコードフロー "
"`redirect_uri` パラメータが、期待される外部ホストではなく内部ホストに設定されている場合があります。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:392
#, fuzzy
msgid ""
"In such cases configuring Quarkus to recognize the original headers "
"forwarded by the proxy will be required, see link:vertx#reverse-"
"proxy[Running behind a reverse proxy] Vert.x documentation section for more "
"information."
msgstr ""
"このような場合、プロキシによって転送された元のヘッダーを認識するようにQuarkusを設定する必要があります。詳細については、 link:"
"vertx#reverse-proxy[リバースプロキシの背後で実行する]Vert.xのドキュメントセクションを参照してください。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:394
#, fuzzy
msgid ""
"`quarkus.oidc.authentication.force-redirect-https-scheme` property may also "
"be used when the Quarkus application is running behind a SSL terminating "
"reverse proxy."
msgstr ""
"`quarkus.oidc.authentication.force-redirect-https-scheme` "
"プロパティは、QuarkusアプリケーションがSSL終端リバースプロキシの後ろで実行されている場合にも使用できます。"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:395
#, no-wrap, fuzzy
msgid "Cloud Services"
msgstr "クラウドサービス"

#. type: Title ===
#: upstream/_guides/security-openid-connect-web-authentication.adoc:397
#, no-wrap, fuzzy
msgid "Google Cloud"
msgstr "グーグルクラウド"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:400
#, fuzzy
msgid ""
"You can have Quarkus OIDC `web-app` applications access **Google Cloud "
"services** such as **BigQuery** on behalf of the currently authenticated "
"users who have enabled OpendId Connect (Authorization Code Flow) permissions "
"to such services in their Google Developer Consoles."
msgstr ""
"Quarkus OIDC `web-app` アプリケーションは、Google Developer Consolesで "
"*BigQuery*などのサービスに対するOpendId Connect（Authorization Code "
"Flow）パーミッションを有効にしている現在認証されたユーザーに代わって、 *BigQuery*などの *Google "
"Cloudサービスに*アクセスすることができます。"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:403
#, fuzzy
msgid ""
"It is super easy to do with https://github.com/quarkiverse[Quarkiverse] "
"https://github.com/quarkiverse/quarkiverse-google-cloud-services[Google "
"Cloud Services], only add the https://github.com/quarkiverse/quarkiverse-"
"google-cloud-services/releases/latest[latest tag] service dependency, for "
"example:"
msgstr ""
"link:https://github.com/quarkiverse[Quarkiverseの]  link:https://github.com/"
"quarkiverse/quarkiverse-google-cloud-services[Google Cloud "
"Services]で行うのは超簡単で、例えば link:https://github.com/quarkiverse/quarkiverse-"
"google-cloud-services/releases/latest[最新のタグ]サービスの依存関係を追加するだけです。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:411
#, no-wrap
msgid ""
"<dependency>\n"
"  <groupId>io.quarkiverse.googlecloudservices</groupId>\n"
"  <artifactId>quarkus-google-cloud-bigquery</artifactId>\n"
"  <version>${quarkiverse.googlecloudservices.version}</version>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:414
#, fuzzy
msgid "and configure Google OIDC properties:"
msgstr "とGoogle OIDCプロパティを設定します。"

#. type: delimited block -
#: upstream/_guides/security-openid-connect-web-authentication.adoc:422
#, no-wrap
msgid ""
"quarkus.oidc.auth-server-url=https://accounts.google.com\n"
"quarkus.oidc.application-type=web-app\n"
"quarkus.oidc.client-id={GOOGLE_CLIENT_ID}\n"
"quarkus.oidc.credentials.secret={GOOGLE_CLIENT_SECRET}\n"
"quarkus.oidc.token.issuer=https://accounts.google.com\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:424
#, no-wrap, fuzzy
msgid "Configuration Reference"
msgstr "設定リファレンス"

#. type: Title ==
#: upstream/_guides/security-openid-connect-web-authentication.adoc:428
#, no-wrap, fuzzy
msgid "References"
msgstr "参考文献"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:431
#, fuzzy
msgid "https://www.keycloak.org/documentation.html[Keycloak Documentation]"
msgstr "link:https://www.keycloak.org/documentation.html[キーマントのドキュメント]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:432
#, fuzzy
msgid "https://openid.net/connect/[OpenID Connect]"
msgstr "link:https://openid.net/connect/[オープンＩＤコネクト]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:433
#, fuzzy
msgid "https://tools.ietf.org/html/rfc7519[JSON Web Token]"
msgstr "link:https://tools.ietf.org/html/rfc7519[ジェーソンウェブトークン]"

#. type: Plain text
#: upstream/_guides/security-openid-connect-web-authentication.adoc:433
#, fuzzy
msgid "link:security[Quarkus Security]"
msgstr "link:security[Quarkusのセキュリティ]"
