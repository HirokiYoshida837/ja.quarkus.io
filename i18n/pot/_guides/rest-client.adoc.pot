# SOME DESCRIPTIVE TITLE
# Copyright (C) YEAR Free Software Foundation, Inc.
# This file is distributed under the same license as the PACKAGE package.
# FIRST AUTHOR <EMAIL@ADDRESS>, YEAR.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: PACKAGE VERSION\n"
"POT-Creation-Date: 2020-12-29 14:10+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language-Team: LANGUAGE <LL@li.org>\n"
"Language: \n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=UTF-8\n"
"Content-Transfer-Encoding: 8bit\n"

#. This guide is maintained in the main Quarkus repository
#. and pull requests should be submitted there:
#. https://github.com/quarkusio/quarkus/tree/master/docs/src/main/asciidoc
#. type: Title =
#: upstream/_guides/rest-client.adoc:6
#, no-wrap
msgid "Quarkus - Using the REST Client"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:12
msgid ""
"This guide explains how to use the MicroProfile REST Client in order to "
"interact with REST APIs with very little effort."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:14
msgid ""
"there is another guide if you need to write server link:rest-json[JSON REST "
"APIs]."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:15
#, no-wrap
msgid "Prerequisites"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:18
msgid "To complete this guide, you need:"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:20
msgid "less than 15 minutes"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:21
msgid "an IDE"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:22
msgid "JDK 1.8+ installed with `JAVA_HOME` configured appropriately"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:23
msgid "Apache Maven {maven-version}"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:24
#, no-wrap
msgid "Solution"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:28
msgid ""
"We recommend that you follow the instructions in the next sections and "
"create the application step by step.  However, you can go right to the "
"completed example."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:30
msgid ""
"Clone the Git repository: `git clone {quickstarts-clone-url}`, or download "
"an {quickstarts-archive-url}[archive]."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:32
msgid ""
"The solution is located in the `rest-client-quickstart` "
"{quickstarts-tree-url}/rest-client-quickstart[directory]."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:33
#, no-wrap
msgid "Creating the Maven project"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:36
msgid ""
"First, we need a new project. Create a new project with the following "
"command:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:46
#, no-wrap
msgid ""
"mvn io.quarkus:quarkus-maven-plugin:{quarkus-version}:create \\\n"
"    -DprojectGroupId=org.acme \\\n"
"    -DprojectArtifactId=rest-client-quickstart \\\n"
"    -DclassName=\"org.acme.rest.client.CountriesResource\" \\\n"
"    -Dpath=\"/country\" \\\n"
"    -Dextensions=\"rest-client, resteasy-jackson\"\n"
"cd rest-client-quickstart\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:49
msgid ""
"This command generates the Maven project with a REST endpoint and imports "
"the `rest-client` and `resteasy-jackson` extensions."
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:53
msgid ""
"If your application does not expose any JAX-RS endpoints (eg. a "
"link:command-mode-reference[command mode application]), use the "
"`rest-client-jackson` or the `rest-client-jackson` extension instead."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:57
msgid ""
"If you already have your Quarkus project configured, you can add the "
"`rest-client` and the `rest-client-jackson` extensions to your project by "
"running the following command in your project base directory:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:61
#, no-wrap
msgid "./mvnw quarkus:add-extension -Dextensions=\"rest-client,resteasy-jackson\"\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:64
msgid "This will add the following to your `pom.xml`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:75
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-rest-client</artifactId>\n"
"</dependency>\n"
"<dependency>\n"
"    <groupId>io.quarkus</groupId>\n"
"    <artifactId>quarkus-resteasy-jackson</artifactId>\n"
"</dependency>\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:77
#, no-wrap
msgid "Setting up the model"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:81
msgid ""
"In this guide we will be demonstrating how to consume part of the REST API "
"supplied by the link:https://restcountries.eu[restcountries.eu] service.  "
"Our first order of business is to setup the model we will be using, in the "
"form of a `Country` POJO."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:83
msgid ""
"Create a `src/main/java/org/acme/rest/client/Country.java` file and set the "
"following content:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:87 upstream/_guides/rest-client.adoc:118 upstream/_guides/rest-client.adoc:250 upstream/_guides/rest-client.adoc:288 upstream/_guides/rest-client.adoc:319 upstream/_guides/rest-client.adoc:376 upstream/_guides/rest-client.adoc:404 upstream/_guides/rest-client.adoc:516
#, no-wrap
msgid "package org.acme.rest.client;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:89
#, no-wrap
msgid "import java.util.List;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:91
#, no-wrap
msgid "import com.fasterxml.jackson.annotation.JsonIgnoreProperties;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:94
#, no-wrap
msgid ""
"@JsonIgnoreProperties(ignoreUnknown = true)\n"
"public class Country {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:99
#, no-wrap
msgid ""
"    public String name;\n"
"    public String alpha2Code;\n"
"    public String capital;\n"
"    public List<Currency> currencies;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:106
#, no-wrap
msgid ""
"    public static class Currency {\n"
"        public String code;\n"
"        public String name;\n"
"        public String symbol;\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:110
msgid ""
"The model above is only a subset of the fields provided by the service (thus "
"the `@JsonIgnoreProperties` annotation), but it suffices for the purposes of "
"this guide."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:111
#, no-wrap
msgid "Create the interface"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:114
msgid ""
"Using the MicroProfile REST Client is as simple as creating an interface "
"using the proper JAX-RS and MicroProfile annotations. In our case the "
"interface should be created at "
"`src/main/java/org/acme/rest/client/CountriesService.java` and have the "
"following content:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:121 upstream/_guides/rest-client.adoc:291 upstream/_guides/rest-client.adoc:379
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RegisterRestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:126
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:130 upstream/_guides/rest-client.adoc:301 upstream/_guides/rest-client.adoc:389
#, no-wrap
msgid ""
"@Path(\"/v2\")\n"
"@RegisterRestClient\n"
"public interface CountriesService {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:135
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    Set<Country> getByName(@PathParam String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:138
msgid ""
"The `getByName` method gives our code the ability to query a country by name "
"from the REST Countries API. The client will handle all the networking and "
"marshalling leaving our code clean of such technical details."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:140
msgid "The purpose of the annotations in the code above is the following:"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:143
msgid ""
"`@RegisterRestClient` allows Quarkus to know that this interface is meant to "
"be available for CDI injection as a REST Client"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:144
msgid ""
"`@Path`, `@GET` and `@PathParam` are the standard JAX-RS annotations used to "
"define how to access the service"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:145
msgid "`@Produces` defines the expected content-type"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:152
msgid ""
"When a JSON extension is installed such as `quarkus-rest-client-jackson` or "
"`quarkus-rest-client-jsonb`, Quarkus will use the `application/json` media "
"type by default for most return values, unless the media type is explicitly "
"set via `@Produces` or `@Consumes` annotations (there are some exceptions "
"for well known types, such as `String` and `File`, which default to "
"`text/plain` and `application/octet-stream` respectively)."
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:155
msgid ""
"If you don't want JSON by default you can set "
"`quarkus.resteasy-json.default-json=false` and the default will change back "
"to being auto-negotiated. If you set this you will need to add "
"`@Produces(MediaType.APPLICATION_JSON)` and "
"`@Consumes(MediaType.APPLICATION_JSON)` to your endpoints in order to use "
"JSON."
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:158
msgid ""
"If you don't rely on the JSON default, it is heavily recommended to annotate "
"your endpoints with the `@Produces` and `@Consumes` annotations to define "
"precisely the expected content-types.  It will allow to narrow down the "
"number of JAX-RS providers (which can be seen as converters) included in the "
"native executable."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:160
#, no-wrap
msgid "Create the configuration"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:164
msgid ""
"In order to determine the base URL to which REST calls will be made, the "
"REST Client uses configuration from `application.properties`.  The name of "
"the property needs to follow a certain convention which is best displayed in "
"the following code:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:170
#, no-wrap
msgid ""
"# Your configuration properties\n"
"org.acme.rest.client.CountriesService/mp-rest/url=https://restcountries.eu/rest "
"# // <1>\n"
"org.acme.rest.client.CountriesService/mp-rest/scope=javax.inject.Singleton # "
"// <2>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:174
msgid ""
"Having this configuration means that all requests performed using "
"`org.acme.rest.client.CountriesService` will use "
"`https://restcountries.eu/rest` as the base URL.  Using the configuration "
"above, calling the `getByName` method of `CountriesService` with a value of "
"`France` would result in an HTTP GET request being made to "
"`https://restcountries.eu/rest/v2/name/France`."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:176
msgid ""
"Having this configuration means that the default scope of "
"`org.acme.rest.client.CountriesService` will be `@Singleton`. Supported "
"scope values are `@Singleton`, `@Dependent`, `@ApplicationScoped` and "
"`@RequestScoped`. The default scope is `@Dependent`.  The default scope can "
"also be defined on the interface."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:178
msgid ""
"Note that `org.acme.rest.client.CountriesService` _must_ match the fully "
"qualified name of the `CountriesService` interface we created in the "
"previous section."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:180
msgid ""
"To facilitate the configuration, you can use the `@RegisterRestClient` "
"`configKey` property that allows to use another configuration root than the "
"fully qualified name of your interface."
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:188
#, no-wrap
msgid ""
"@RegisterRestClient(configKey=\"country-api\")\n"
"public interface CountriesService {\n"
"    [...]\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:195
#, no-wrap
msgid ""
"# Your configuration properties\n"
"country-api/mp-rest/url=https://restcountries.eu/rest #\n"
"country-api/mp-rest/scope=javax.inject.Singleton # /\n"
msgstr ""

#. type: Title ===
#: upstream/_guides/rest-client.adoc:198
#, no-wrap
msgid "Disabling Hostname Verification"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:201
msgid ""
"To disable the SSL hostname verification for a specific REST client, add the "
"following property to your configuration:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:205
#, no-wrap
msgid "country-api/mp-rest/hostnameVerifier=io.quarkus.restclient.NoopHostnameVerifier\n"
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:207
#, no-wrap
msgid "Update the JAX-RS resource"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:210 upstream/_guides/rest-client.adoc:315
msgid ""
"Open the `src/main/java/org/acme/rest/client/CountriesResource.java` file "
"and update it with the following content:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:215 upstream/_guides/rest-client.adoc:322 upstream/_guides/rest-client.adoc:407
#, no-wrap
msgid ""
"import org.eclipse.microprofile.rest.client.inject.RestClient;\n"
"import org.jboss.resteasy.annotations.jaxrs.PathParam;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:222
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:225 upstream/_guides/rest-client.adoc:333 upstream/_guides/rest-client.adoc:418
#, no-wrap
msgid ""
"@Path(\"/country\")\n"
"public class CountriesResource {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:229 upstream/_guides/rest-client.adoc:337 upstream/_guides/rest-client.adoc:422
#, no-wrap
msgid ""
"    @Inject\n"
"    @RestClient\n"
"    CountriesService countriesService;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:237
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    public Set<Country> name(@PathParam String name) {\n"
"        return countriesService.getByName(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:240
msgid ""
"Note that in addition to the standard CDI `@Inject` annotation, we also need "
"to use the MicroProfile `@RestClient` annotation to inject "
"`CountriesService`."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:241
#, no-wrap
msgid "Update the test"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:245
msgid ""
"We also need to update the functional test to reflect the changes made to "
"the endpoint.  Edit the "
"`src/test/java/org/acme/rest/client/CountriesResourceTest.java` file and "
"change the content of the `testCountryNameEndpoint` method to:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:253
#, no-wrap
msgid ""
"import io.quarkus.test.junit.QuarkusTest;\n"
"import org.junit.jupiter.api.Test;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:256
#, no-wrap
msgid ""
"import static io.restassured.RestAssured.given;\n"
"import static org.hamcrest.CoreMatchers.is;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:259
#, no-wrap
msgid ""
"@QuarkusTest\n"
"public class CountriesResourceTest {\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:273
#, no-wrap
msgid ""
"    @Test\n"
"    public void testCountryNameEndpoint() {\n"
"        given()\n"
"          .when().get(\"/country/name/greece\")\n"
"          .then()\n"
"             .statusCode(200)\n"
"             .body(\"$.size()\", is(1),\n"
"                     \"[0].alpha2Code\", is(\"GR\"),\n"
"                     \"[0].capital\", is(\"Athens\"),\n"
"                     \"[0].currencies.size()\", is(1),\n"
"                     \"[0].currencies[0].name\", is(\"Euro\")\n"
"             );\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:275 upstream/_guides/rest-client.adoc:577
#, no-wrap
msgid "}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:278
msgid ""
"The code above uses link:http://rest-assured.io/[REST Assured]'s "
"link:https://github.com/rest-assured/rest-assured/wiki/GettingStarted#jsonpath[json-path] "
"capabilities."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:280
#, no-wrap
msgid "Async Support"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:284
msgid ""
"The rest client supports asynchronous rest calls.  Async support comes in 2 "
"flavors: you can return a `CompletionStage` or a `Uni` (requires the "
"`quarkus-rest-client-mutiny` extension).  Let's see it in action by adding a "
"`getByNameAsync` method in our `CountriesService` REST interface. The code "
"should look like:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:297 upstream/_guides/rest-client.adoc:385
#, no-wrap
msgid ""
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import java.util.concurrent.CompletionStage;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:306
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(\"application/json\")\n"
"    Set<Country> getByName(@PathParam String name);\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:312
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(\"application/json\")\n"
"    CompletionStage<Set<Country>> getByNameAsync(@PathParam String name);\n"
"}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:330 upstream/_guides/rest-client.adoc:415
#, no-wrap
msgid ""
"import javax.inject.Inject;\n"
"import javax.ws.rs.GET;\n"
"import javax.ws.rs.Path;\n"
"import javax.ws.rs.Produces;\n"
"import javax.ws.rs.core.MediaType;\n"
"import java.util.concurrent.CompletionStage;\n"
"import java.util.Set;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:344
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    public Set<Country> name(@PathParam String name) {\n"
"        return countriesService.getByName(name);\n"
"    }\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:351
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name-async/{name}\")\n"
"    public CompletionStage<Set<Country>> nameAsync(@PathParam String name) "
"{\n"
"        return countriesService.getByNameAsync(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:354
msgid ""
"To test asynchronous methods, add the test method below in "
"`CountriesResourceTest`:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:369
#, no-wrap
msgid ""
"@Test\n"
"public void testCountryNameAsyncEndpoint() {\n"
"    given()\n"
"    .when().get(\"/country/name-async/greece\")\n"
"    .then()\n"
"        .statusCode(200)\n"
"        .body(\"$.size()\", is(1),\n"
"             \"[0].alpha2Code\", is(\"GR\"),\n"
"             \"[0].capital\", is(\"Athens\"),\n"
"             \"[0].currencies.size()\", is(1),\n"
"             \"[0].currencies[0].name\", is(\"Euro\")\n"
"        );\n"
"    }\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:372
msgid "The `Uni` version is very similar:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:391 upstream/_guides/rest-client.adoc:425
#, no-wrap
msgid "    // ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:397
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name/{name}\")\n"
"    @Produces(\"application/json\")\n"
"    Uni<Set<Country>> getByNameAsUni(@PathParam String name);\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:400
msgid "The `CountriesResource` becomes:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:432
#, no-wrap
msgid ""
"    @GET\n"
"    @Path(\"/name-uni/{name}\")\n"
"    public Uni<Set<Country>> nameAsync(@PathParam String name) {\n"
"        return countriesService.getByNameAsUni(name);\n"
"    }\n"
"}\n"
msgstr ""

#. type: Block title
#: upstream/_guides/rest-client.adoc:435
#, no-wrap
msgid "Mutiny"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:438
msgid ""
"The previous snippet uses Mutiny reactive types, if you're not familiar with "
"them, read the link:getting-started-reactive#mutiny[Getting Started with "
"Reactive guide] first."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:442
msgid ""
"When returning a `Uni`, every _subscription_ invokes the remote service.  It "
"means you can re-send the request by re-subscribing on the `Uni`, or use a "
"`retry` as follow:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:447
#, no-wrap
msgid "@Inject @RestClient CountriesResource service;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:449
#, no-wrap
msgid "// ...\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:452
#, no-wrap
msgid ""
"service.nameAsync(\"Greece\")\n"
"   .onFailure().retry().atMost(10);\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:458
msgid ""
"If you use a `CompletionStage`, you would need to call the service's method "
"to retry.  This difference comes from the laziness aspect of Mutiny and its "
"subscription protocol.  More details about this can be found in "
"https://smallrye.io/smallrye-mutiny/#_uni_and_multi[the Mutiny "
"documentation]."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:459
#, no-wrap
msgid "Package and run the application"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:463
msgid ""
"Run the application with: `./mvnw compile quarkus:dev`.  Open your browser "
"to http://localhost:8080/country/name/greece."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:465
msgid "You should see a JSON object containing some basic information about Greece."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:468
msgid ""
"As usual, the application can be packaged using `./mvnw clean package` and "
"executed using the `-runner.jar` file.  You can also generate the native "
"executable with `./mvnw clean package -Pnative`."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:469
#, no-wrap
msgid "REST Client and RESTEasy interactions"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:473
msgid ""
"In Quarkus, the REST Client extension and link:rest-json[the RESTEasy "
"extension] share the same infrastructure.  One important consequence of this "
"consideration is that they share the same list of providers (in the JAX-RS "
"meaning of the word)."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:476
msgid ""
"For instance, if you declare a `WriterInterceptor`, it will by default "
"intercept both the servers calls and the client calls, which might not be "
"the desired behavior."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:478
msgid "However, you can change this default behavior and constrain a provider to:"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:480
msgid ""
"only consider *client* calls by adding the "
"`@ConstrainedTo(RuntimeType.CLIENT)` annotation to your provider;"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:481
msgid ""
"only consider *server* calls by adding the "
"`@ConstrainedTo(RuntimeType.SERVER)` annotation to your provider."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:482
#, no-wrap
msgid "Using a Mock HTTP Server for tests"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:487
msgid ""
"Setting up a mock HTTP server, against which tests are run, is a common "
"testing pattern.  Examples of such servers are "
"link:http://wiremock.org/[Wiremock] and "
"link:https://docs.hoverfly.io/projects/hoverfly-java/en/latest/index.html[Hoverfly].  "
"In this section we'll demonstrate how Wiremock can be leveraged for testing "
"the `CountriesService` which was developed above."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:489
msgid ""
"First of all, Wiremock needs to be added as a test dependency. For a Maven "
"project that would happen like so:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:498
#, no-wrap
msgid ""
"<dependency>\n"
"    <groupId>com.github.tomakehurst</groupId>\n"
"    <artifactId>wiremock-jre8</artifactId>\n"
"    <scope>test</scope>\n"
"    <version>${wiremock.version}</version> <1>\n"
"</dependency>\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:501
msgid ""
"Use a proper Wiremock version. All available versions can be found "
"link:https://search.maven.org/artifact/com.github.tomakehurst/wiremock-jre8[here]."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:505
msgid ""
"In Quarkus tests when some service needs to be started before the Quarkus "
"tests are ran, we utilize the `@io.quarkus.test.common.QuarkusTestResource` "
"annotation to specify a "
"`io.quarkus.test.common.QuarkusTestResourceLifecycleManager` which can start "
"the service and supply configuration values that Quarkus will use."
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:509
msgid ""
"For more details about `@QuarkusTestResource` refer to "
"link:getting-started-testing#quarkus-test-resource[this part of the "
"documentation]."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:512
msgid ""
"Let's create an implementation of `QuarkusTestResourceLifecycleManager` "
"called `WiremockCountries` like so:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:519
#, no-wrap
msgid ""
"import java.util.Collections;\n"
"import java.util.Map;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:522
#, no-wrap
msgid ""
"import com.github.tomakehurst.wiremock.WireMockServer;\n"
"import io.quarkus.test.common.QuarkusTestResourceLifecycleManager;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:524
#, no-wrap
msgid "import static com.github.tomakehurst.wiremock.client.WireMock.*; // <1>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:526
#, no-wrap
msgid ""
"public class WiremockCountries implements "
"QuarkusTestResourceLifecycleManager {  // <2>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:528
#, no-wrap
msgid "\tprivate WireMockServer wireMockServer;\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:533
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic Map<String, String> start() {\n"
"\t\twireMockServer = new WireMockServer();\n"
"\t\twireMockServer.start(); // <3>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:543
#, no-wrap
msgid ""
"\t\tstubFor(get(urlEqualTo(\"/v2/name/GR\"))   // <4>\n"
"\t\t\t\t.willReturn(aResponse()\n"
"\t\t\t\t\t\t.withHeader(\"Content-Type\", \"application/json\")\n"
"\t\t\t\t\t\t.withBody(\n"
"                        \"[{\" +\n"
"                        \"\\\"name\\\": \\\"Ελλάδα\\\",\" +\n"
"                        \"\\\"capital\\\": \\\"Αθήνα\\\"\" +\n"
"                        \"}]\"\n"
"\t\t\t\t\t\t)));\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:545
#, no-wrap
msgid ""
"\t\tstubFor(get(urlMatching(\".*\")).atPriority(10).willReturn(aResponse().proxiedFrom(\"https://restcountries.eu/rest\")));   "
"// <5>\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:548
#, no-wrap
msgid ""
"\t\treturn "
"Collections.singletonMap(\"org.acme.getting.started.country.CountriesService/mp-rest/url\", "
"wireMockServer.baseUrl()); // <6>\n"
"\t}\n"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:556
#, no-wrap
msgid ""
"\t@Override\n"
"\tpublic void stop() {\n"
"\t\tif (null != wireMockServer) {\n"
"\t\t\twireMockServer.stop();  // <7>\n"
"\t\t}\n"
"\t}\n"
"}\n"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:559
msgid ""
"Statically importing the methods in the Wiremock package makes it easier to "
"read the test."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:560
msgid ""
"The `start` method is invoked by Quarkus before any test is run and returns "
"a `Map` of configuration properties that apply during the test execution."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:561
msgid "Launch Wiremock."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:562
msgid ""
"Configure Wiremock to stub the calls to `/v2/name/GR` by returning a "
"specific canned response."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:563
msgid ""
"All HTTP calls that have not been stubbed are handled by calling the real "
"service. This is done for demonstration purposes, as it is not something "
"that would usually happen in a real test."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:565
msgid ""
"As the `start` method returns configuration that applies for tests, we set "
"the rest-client property that controls the base URL which is used by the "
"implementation of `CountriesService` to the base URL where Wiremock is "
"listening for incoming requests."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:566
msgid "When all tests have finished, shutdown Wiremock."
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:569
msgid "The `CountriesResourceTest` test class needs to be annotated like so:"
msgstr ""

#. type: delimited block -
#: upstream/_guides/rest-client.adoc:575
#, no-wrap
msgid ""
"@QuarkusTest\n"
"@QuarkusTestResource(WiremockCountries.class)\n"
"public class CountriesResourceTest {\n"
msgstr ""

#. type: delimited block =
#: upstream/_guides/rest-client.adoc:582
msgid ""
"`@QuarkusTestResource` applies to all tests, not just "
"`CountriesResourceTest`."
msgstr ""

#. type: Title ==
#: upstream/_guides/rest-client.adoc:584
#, no-wrap
msgid "Further reading"
msgstr ""

#. type: Plain text
#: upstream/_guides/rest-client.adoc:586
msgid ""
"link:https://download.eclipse.org/microprofile/microprofile-rest-client-1.2.1/microprofile-rest-client-1.2.1.html[MicroProfile "
"Rest Client specification]"
msgstr ""
